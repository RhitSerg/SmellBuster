<classes>	<class>
		<name>edu.stanford.nlp.util.Execution$LazyFileIterator</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>24</rfc>
		<lcom>9</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>6</npm>
		<lcom3>0.3</lcom3>
		<loc>241</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.39285714285714285</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>32.714285714285715</amc>
		<cc>
			<method name="public void _init_(java.io.File path, String filter)">0</method>
			<method name="public void _init_(java.io.File dir, java.io.FilenameFilter filter)">0</method>
			<method name="private void enqueue()">9</method>
			<method name="public boolean hasNext()">2</method>
			<method name="public void remove()">1</method>
			<method name="public java.io.File next()">3</method>
			<method name="public volatile Object next()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.sentiment.ReadSentimentDataset$3</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>7</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>18</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.0</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="public Integer apply(String arg)">1</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.sentiment.ReadSentimentDataset$2</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>5</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>25</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.333333333333333</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="public String apply(String word)">3</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.sentiment.ReadSentimentDataset$1</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>15</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.0</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="public String apply(edu.stanford.nlp.trees.Tree tree)">1</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.wordseg.ChineseStringUtils</name>
		<wmc>18</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>45</rfc>
		<lcom>143</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>4</npm>
		<lcom3>0.7941176470588235</lcom3>
		<loc>1584</loc>
		<dam>0.5</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.1503267973856209</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>86.44444444444444</amc>
		<cc>
			<method name="public static String combineSegmentedSentence(java.util.List doc, edu.stanford.nlp.sequences.SeqClassifierFlags flags)">36</method>
			<method name="public void _init_()">0</method>
			<method name="private static String gluePunc(Character punc, String ans)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private static String separatePuncs(String ans)">5</method>
			<method name="private static String processDots(String ans, String numPat)">4</method>
			<method name="public static boolean isLetterASCII(char c)">3</method>
			<method name="private static String processColons(String ans, String numPat)">8</method>
			<method name="private static String processPercents(String ans, String numPat)">2</method>
			<method name="private static String separatePuncs(Character[] puncs_in, String ans)">7</method>
			<method name="public static void main(String[] args)">2</method>
			<method name="private static String postProcessingAnswerAS(String ans)">1</method>
			<method name="private static String postProcessingAnswer(String ans, edu.stanford.nlp.sequences.SeqClassifierFlags flags)">5</method>
			<method name="private static String processCommas(String ans)">2</method>
			<method name="private static String postProcessingAnswerHK(String ans)">2</method>
			<method name="private static String postProcessingAnswerPK(String ans, boolean keepAllWhitespaces)">3</method>
			<method name="private static String postProcessingAnswerMSR(String ans)">1</method>
			<method name="static String postProcessingAnswerCTB(String ans, boolean keepAllWhitespaces, boolean suppressMidDotPostprocessing)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Comparators$3</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>18</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.5</amc>
		<cc>
			<method name="public int compare(Object o1, Object o2)">1</method>
			<method name="void _init_(java.util.Comparator)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Comparators$2</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>7</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>30</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.5</amc>
		<cc>
			<method name="public int compare(Object o1, Object o2)">3</method>
			<method name="void _init_(java.util.List)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.crf.CRFDatum</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>20</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>1</ce>
		<npm>7</npm>
		<lcom3>0.7083333333333334</lcom3>
		<loc>110</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.47619047619047616</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>14.142857142857142</amc>
		<cc>
			<method name="public void _init_(java.util.List features, Object label, java.util.List featureVals)">0</method>
			<method name="public boolean equals(Object o)">2</method>
			<method name="public int hashCode()">1</method>
			<method name="public Object label()">1</method>
			<method name="public java.util.List asFeatures()">1</method>
			<method name="public String toString()">2</method>
			<method name="public java.util.List asFeatureVals()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunctionForLOP</name>
		<wmc>16</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>49</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>9</ce>
		<npm>11</npm>
		<lcom3>0.7757575757575758</lcom3>
		<loc>1592</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.20555555555555555</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>97.125</amc>
		<cc>
			<method name="public static double[][] combineAndScaleLopWeights2D(int numLopExpert, double[][][] lopExpertWeights2D, double[] lopScales)">4</method>
			<method name="void _init_(int[][][][] data, int[][] labels, double[][] lopExpertWeights, int window, edu.stanford.nlp.util.Index classIndex, java.util.List labelIndices, int[] map, String backgroundSymbol, int numLopExpert, java.util.List featureIndicesSetArray, java.util.List featureIndicesListArray, boolean backpropTraining)">0</method>
			<method name="private void initialize2DWeights()">2</method>
			<method name="public static double[] combineAndScaleLopWeights(int numLopExpert, double[][] lopExpertWeights, double[] lopScales)">3</method>
			<method name="static void _clinit_()">0</method>
			<method name="private void computeEHat()">8</method>
			<method name="public double[][] to2D(double[] weights, java.util.List labelIndices, int[] map)">2</method>
			<method name="public double[][] separateLopExpertWeights(double[] learnedParams)">2</method>
			<method name="public double[][][] separateLopExpertWeights2D(double[] learnedParams)">2</method>
			<method name="public double[][][] empty2D()">3</method>
			<method name="public edu.stanford.nlp.ie.crf.CliquePotentialFunction getCliquePotentialFunction(double[] x)">2</method>
			<method name="public int domainDimension()">5</method>
			<method name="public void calculate(double[] x)">25</method>
			<method name="private void logPotential(double[][][] learnedLopExpertWeights2D)">9</method>
			<method name="public double[] separateLopScales(double[] learnedParams)">1</method>
			<method name="public double[] initial()">4</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.TwoDimensionalSet$TwoDimensionalSetIterator</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>13</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>4</npm>
		<lcom3>0.0</lcom3>
		<loc>36</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.util.TwoDimensionalSet set)">0</method>
			<method name="public boolean hasNext()">1</method>
			<method name="public void remove()">1</method>
			<method name="public edu.stanford.nlp.util.Pair next()">1</method>
			<method name="public volatile Object next()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Comparators$1</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>29</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.5</amc>
		<cc>
			<method name="public int compare(Object o1, Object o2)">2</method>
			<method name="void _init_(java.util.Comparator, java.util.Comparator)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$ParagraphsAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>9</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.Label</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>177</cbo>
		<rfc>5</rfc>
		<lcom>10</lcom>
		<ca>177</ca>
		<ce>1</ce>
		<npm>5</npm>
		<lcom3>2.0</lcom3>
		<loc>5</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.7</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract String toString()">1</method>
			<method name="public abstract void setValue(String)">1</method>
			<method name="public abstract edu.stanford.nlp.ling.LabelFactory labelFactory()">1</method>
			<method name="public abstract void setFromString(String)">1</method>
			<method name="public abstract String value()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.Minimizer</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>27</cbo>
		<rfc>2</rfc>
		<lcom>1</lcom>
		<ca>26</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>2</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.9</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract double[] minimize(edu.stanford.nlp.optimization.Function, double, double[], int)">1</method>
			<method name="public abstract double[] minimize(edu.stanford.nlp.optimization.Function, double, double[])">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$MorphoGenAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$CompareType</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>3</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.9523809523809524</lcom3>
		<loc>89</loc>
		<dam>0.14285714285714285</dam>
		<moa>7</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>19.5</amc>
		<cc>
			<method name="public static edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$CompareType valueOf(String name)">1</method>
			<method name="public static edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$CompareType[] values()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Iterables$6$1</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>9</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>3</npm>
		<lcom3>0.5555555555555555</lcom3>
		<loc>50</loc>
		<dam>0.3333333333333333</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.75</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.util.Iterables$6, java.util.Iterator)">0</method>
			<method name="public boolean hasNext()">4</method>
			<method name="public void remove()">1</method>
			<method name="public Object next()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.NamedDependency</name>
		<wmc>9</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>27</rfc>
		<lcom>6</lcom>
		<ca>3</ca>
		<ce>5</ce>
		<npm>9</npm>
		<lcom3>0.6875</lcom3>
		<loc>148</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3888888888888889</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.222222222222221</amc>
		<cc>
			<method name="public String toString(String format)">3</method>
			<method name="public boolean equals(Object o)">5</method>
			<method name="public int hashCode()">1</method>
			<method name="public void _init_(String regent, String dependent, Object name)">0</method>
			<method name="public edu.stanford.nlp.trees.DependencyFactory dependencyFactory()">1</method>
			<method name="public String toString()">1</method>
			<method name="public Object name()">1</method>
			<method name="public void _init_(edu.stanford.nlp.ling.Label regent, edu.stanford.nlp.ling.Label dependent, Object name)">0</method>
			<method name="public static edu.stanford.nlp.trees.DependencyFactory factory()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalRelations$PreconjunctGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.LabeledConstituent$LabeledConstituentLabelFactory</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>9</rfc>
		<lcom>15</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>4</npm>
		<lcom3>2.0</lcom3>
		<loc>37</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.166666666666667</amc>
		<cc>
			<method name="public edu.stanford.nlp.ling.Label newLabel(String labelStr, int options)">1</method>
			<method name="private void _init_()">0</method>
			<method name="public edu.stanford.nlp.ling.Label newLabel(String labelStr)">1</method>
			<method name="public edu.stanford.nlp.ling.Label newLabel(edu.stanford.nlp.ling.Label oldLabel)">1</method>
			<method name="public edu.stanford.nlp.ling.Label newLabelFromString(String labelStr)">1</method>
			<method name="void _init_(edu.stanford.nlp.trees.LabeledConstituent$1 x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.HasInitial</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract double[] initial()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.arabic.ArabicHeadFinder$TagSet$1</name>
		<wmc>7</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>9</rfc>
		<lcom>21</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>27</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.42857142857142855</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.857142857142857</amc>
		<cc>
			<method name="String detPlusNoun()">1</method>
			<method name="String prep()">1</method>
			<method name="void _init_(String, int)">0</method>
			<method name="String adj()">1</method>
			<method name="String det()">1</method>
			<method name="String noun()">1</method>
			<method name="edu.stanford.nlp.trees.TreebankLanguagePack langPack()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$NormalizedNamedEntityTagAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequencePattern$SequenceStartPatternExpr</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>4</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>17</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.666666666666667</amc>
		<cc>
			<method name="public edu.stanford.nlp.ling.tokensregex.SequencePattern$State create()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public volatile Object create()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.QNMinimizer$eLineSearch</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.888888888888889</lcom3>
		<loc>45</loc>
		<dam>0.3333333333333333</dam>
		<moa>3</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>9.5</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static edu.stanford.nlp.optimization.QNMinimizer$eLineSearch valueOf(String name)">1</method>
			<method name="public static edu.stanford.nlp.optimization.QNMinimizer$eLineSearch[] values()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.arabic.ArabicHeadFinder$TagSet$2</name>
		<wmc>7</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>9</rfc>
		<lcom>21</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>27</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.42857142857142855</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.857142857142857</amc>
		<cc>
			<method name="String detPlusNoun()">1</method>
			<method name="String prep()">1</method>
			<method name="void _init_(String, int)">0</method>
			<method name="String adj()">1</method>
			<method name="String det()">1</method>
			<method name="String noun()">1</method>
			<method name="edu.stanford.nlp.trees.TreebankLanguagePack langPack()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser$Derivation</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>9</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>3</npm>
		<lcom3>0.5</lcom3>
		<loc>95</loc>
		<dam>0.2</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4666666666666667</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>29.0</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser$Arc arc, java.util.List j, double score, java.util.List childrenScores)">0</method>
			<method name="public boolean equals(Object o)">10</method>
			<method name="public int hashCode()">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.Distribution</name>
		<wmc>44</wmc>
		<dit>1</dit>
		<noc>1</noc>
		<cbo>12</cbo>
		<rfc>108</rfc>
		<lcom>176</lcom>
		<ca>5</ca>
		<ce>9</ce>
		<npm>38</npm>
		<lcom3>0.6899224806201549</lcom3>
		<loc>2236</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.15082644628099173</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>49.68181818181818</amc>
		<cc>
			<method name="public static edu.stanford.nlp.stats.Distribution distributionFromLogisticCounter(edu.stanford.nlp.stats.Counter cntr)">3</method>
			<method name="public static edu.stanford.nlp.stats.Distribution goodTuringWithExplicitUnknown(edu.stanford.nlp.stats.Counter counter, Object UNK)">6</method>
			<method name="public boolean equals(Object o)">4</method>
			<method name="public String toString(java.text.NumberFormat nf)">1</method>
			<method name="public static edu.stanford.nlp.stats.Distribution goodTuringSmoothedCounter(edu.stanford.nlp.stats.Counter counter, int numberOfKeys)">6</method>
			<method name="public double probabilityOf(Object key)">3</method>
			<method name="public double getCount(Object key)">1</method>
			<method name="private static int[] getCountCounts(edu.stanford.nlp.stats.Counter counter)">3</method>
			<method name="void _init_(edu.stanford.nlp.stats.Distribution$1 x0)">0</method>
			<method name="public boolean containsKey(Object key)">1</method>
			<method name="public static edu.stanford.nlp.stats.Distribution absolutelyDiscountedDistribution(edu.stanford.nlp.stats.Counter counter, int numberOfKeys, double discount)">3</method>
			<method name="public Object drawSample()">1</method>
			<method name="public static edu.stanford.nlp.stats.Distribution getDistributionWithReservedMass(edu.stanford.nlp.stats.Counter counter, double reservedMass)">3</method>
			<method name="private void _init_()">0</method>
			<method name="public static edu.stanford.nlp.stats.Distribution dynamicCounterWithDirichletPrior(edu.stanford.nlp.stats.Counter c, edu.stanford.nlp.stats.Distribution prior, double weight)">2</method>
			<method name="private static edu.stanford.nlp.stats.Counter collectCountCounts(edu.stanford.nlp.stats.Counter counts)">2</method>
			<method name="private static void validateCounter(edu.stanford.nlp.stats.Counter counts)">3</method>
			<method name="public static edu.stanford.nlp.stats.Distribution getDistributionFromLogValues(edu.stanford.nlp.stats.Counter counter)">2</method>
			<method name="public edu.stanford.nlp.stats.Counter getCounter()">1</method>
			<method name="public Object drawSample(java.util.Random random)">1</method>
			<method name="public Object sampleFrom()">1</method>
			<method name="public static edu.stanford.nlp.stats.Distribution laplaceSmoothedDistribution(edu.stanford.nlp.stats.Counter counter, int numberOfKeys, double lambda)">2</method>
			<method name="public String toString()">3</method>
			<method name="public int getNumberOfKeys()">1</method>
			<method name="public static edu.stanford.nlp.stats.Distribution laplaceWithExplicitUnknown(edu.stanford.nlp.stats.Counter counter, double lambda, Object UNK)">3</method>
			<method name="public static edu.stanford.nlp.stats.Distribution getUniformDistribution(java.util.Collection s)">2</method>
			<method name="public static edu.stanford.nlp.stats.Distribution getDistributionFromPartiallySpecifiedCounter(edu.stanford.nlp.stats.Counter c, int numKeys)">2</method>
			<method name="public void addToKeySet(Object o)">2</method>
			<method name="public java.util.Set keySet()">1</method>
			<method name="public static edu.stanford.nlp.stats.Distribution getPerturbedDistribution(edu.stanford.nlp.stats.Counter wordCounter, java.util.Random r)">3</method>
			<method name="private static int[][] countCounts2IntArrays(edu.stanford.nlp.stats.Counter countCounts)">2</method>
			<method name="public static edu.stanford.nlp.stats.Distribution laplaceSmoothedDistribution(edu.stanford.nlp.stats.Counter counter, int numberOfKeys)">1</method>
			<method name="public static edu.stanford.nlp.stats.Distribution distributionWithDirichletPrior(edu.stanford.nlp.stats.Counter c, edu.stanford.nlp.stats.Distribution prior, double weight)">2</method>
			<method name="public Object sampleFrom(java.util.Random random)">1</method>
			<method name="public double totalCount()">1</method>
			<method name="public static edu.stanford.nlp.stats.Distribution getDistribution(edu.stanford.nlp.stats.Counter counter)">1</method>
			<method name="public static edu.stanford.nlp.stats.Distribution simpleGoodTuring(edu.stanford.nlp.stats.Counter counter, int numberOfKeys)">4</method>
			<method name="public int hashCode()">1</method>
			<method name="public static void main(String[] args)">4</method>
			<method name="public boolean equals(edu.stanford.nlp.stats.Distribution distribution)">3</method>
			<method name="public double logProbabilityOf(Object key)">1</method>
			<method name="public double getReservedMass()">1</method>
			<method name="public static edu.stanford.nlp.stats.Distribution getPerturbedUniformDistribution(java.util.Collection s, java.util.Random r)">2</method>
			<method name="public Object argmax()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.LabeledScoredConstituentFactory</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>4</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>20</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.666666666666667</amc>
		<cc>
			<method name="public edu.stanford.nlp.trees.Constituent newConstituent(int start, int end, edu.stanford.nlp.ling.Label label, double score)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public edu.stanford.nlp.trees.Constituent newConstituent(int start, int end)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.DocumentReader</name>
		<wmc>18</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>31</rfc>
		<lcom>133</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>16</npm>
		<lcom3>0.784313725490196</lcom3>
		<loc>151</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.18055555555555555</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.222222222222222</amc>
		<cc>
			<method name="public void _init_(java.io.Reader in)">0</method>
			<method name="protected edu.stanford.nlp.ling.BasicDocument parseDocumentText(String text)">1</method>
			<method name="public void setTokenizerFactory(edu.stanford.nlp.process.TokenizerFactory tokenizerFactory)">1</method>
			<method name="protected String readNextDocumentText()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(java.io.Reader in, edu.stanford.nlp.process.TokenizerFactory tokenizerFactory, boolean keepOriginalText)">0</method>
			<method name="public java.io.Reader getReader()">1</method>
			<method name="public static String readText(java.io.Reader in)">1</method>
			<method name="public static java.io.Reader getReader(java.io.InputStream in)">1</method>
			<method name="public boolean getKeepOriginalText()">1</method>
			<method name="public edu.stanford.nlp.process.TokenizerFactory getTokenizerFactory()">1</method>
			<method name="public static java.io.BufferedReader getBufferedReader(java.io.Reader in)">3</method>
			<method name="public void setKeepOriginalText(boolean keepOriginalText)">1</method>
			<method name="public static java.io.Reader getReader(java.io.File file)">1</method>
			<method name="public void setReader(java.io.Reader in)">1</method>
			<method name="public edu.stanford.nlp.ling.BasicDocument readDocument()">1</method>
			<method name="public static java.io.Reader getReader(String text)">1</method>
			<method name="public static java.io.Reader getReader(java.net.URL url)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.objectbank.IdentityFunction</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>6</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public Object apply(Object o)">1</method>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.Options</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>19</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>0.5909090909090909</lcom3>
		<loc>329</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>105.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void _init_(String name, java.util.Properties props)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.MapFactory</name>
		<wmc>12</wmc>
		<dit>1</dit>
		<noc>6</noc>
		<cbo>25</cbo>
		<rfc>19</rfc>
		<lcom>54</lcom>
		<ca>24</ca>
		<ce>7</ce>
		<npm>10</npm>
		<lcom3>0.9350649350649352</lcom3>
		<loc>65</loc>
		<dam>0.7142857142857143</dam>
		<moa>6</moa>
		<mfa>0.0</mfa>
		<cam>0.2727272727272727</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.8333333333333335</amc>
		<cc>
			<method name="public static edu.stanford.nlp.util.MapFactory treeMapFactory()">1</method>
			<method name="public static edu.stanford.nlp.util.MapFactory weakHashMapFactory()">1</method>
			<method name="public static edu.stanford.nlp.util.MapFactory identityHashMapFactory()">1</method>
			<method name="public abstract java.util.Map newMap(int)">1</method>
			<method name="public static edu.stanford.nlp.util.MapFactory hashMapFactory()">1</method>
			<method name="protected void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public abstract java.util.Map setMap(java.util.Map)">1</method>
			<method name="public abstract java.util.Map setMap(java.util.Map, int)">1</method>
			<method name="public static edu.stanford.nlp.util.MapFactory linkedHashMapFactory()">1</method>
			<method name="public abstract java.util.Map newMap()">1</method>
			<method name="public static edu.stanford.nlp.util.MapFactory arrayMapFactory()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.CollinsHeadFinder$1</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>6</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>18</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.5</amc>
		<cc>
			<method name="public void visitTree(edu.stanford.nlp.trees.Tree pt)">1</method>
			<method name="void _init_(edu.stanford.nlp.trees.HeadFinder)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.EntityCachingAbstractSequencePrior</name>
		<wmc>26</wmc>
		<dit>1</dit>
		<noc>3</noc>
		<cbo>9</cbo>
		<rfc>60</rfc>
		<lcom>125</lcom>
		<ca>3</ca>
		<ce>6</ce>
		<npm>25</npm>
		<lcom3>0.79</lcom3>
		<loc>1608</loc>
		<dam>0.875</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.34065934065934067</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>60.53846153846154</amc>
		<cc>
			<method name="public boolean appendingEntity(int[] sequence, int position)">5</method>
			<method name="public double scoreOf(int[] sequence, int pos)">1</method>
			<method name="public int getNumClasses()">1</method>
			<method name="public boolean removingEndOfEntity(int[] sequence, int position)">5</method>
			<method name="public int[] otherOccurrences(edu.stanford.nlp.ie.Entity entity)">4</method>
			<method name="public edu.stanford.nlp.ie.Entity extractEntity(int[] sequence, int position)">3</method>
			<method name="public String toString(int pos)">3</method>
			<method name="public int rightWindow()">1</method>
			<method name="public boolean removingBeginningOfEntity(int[] sequence, int position)">5</method>
			<method name="public double[] scoresOf(int[] sequence, int position)">2</method>
			<method name="private void addEntityToEntitiesArray(edu.stanford.nlp.ie.Entity entity)">2</method>
			<method name="public double[] getConditionalDistribution(int[] sequence, int position)">1</method>
			<method name="public String toString()">3</method>
			<method name="public void _init_(String backgroundSymbol, edu.stanford.nlp.util.Index classIndex, java.util.List doc)">0</method>
			<method name="public int length()">1</method>
			<method name="public static int[] toArray(java.util.List list)">2</method>
			<method name="public boolean noChange(int[] sequence, int position)">7</method>
			<method name="public int leftWindow()">1</method>
			<method name="public boolean prependingEntity(int[] sequence, int position)">4</method>
			<method name="public void setInitialSequence(int[] initialSequence)">3</method>
			<method name="public boolean matches(edu.stanford.nlp.ie.Entity entity, int position)">5</method>
			<method name="public boolean splittingTwoEntities(int[] sequence, int position)">5</method>
			<method name="public void updateSequenceElement(int[] sequence, int position, int oldVal)">38</method>
			<method name="public int[] getPossibleValues(int position)">1</method>
			<method name="public boolean joiningTwoEntities(int[] sequence, int position)">6</method>
			<method name="public boolean addingSingletonEntity(int[] sequence, int position)">6</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.metrics.Evalb$CBEval</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>17</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>160</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4583333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>38.25</amc>
		<cc>
			<method name="public void evaluate(edu.stanford.nlp.trees.Tree t1, edu.stanford.nlp.trees.Tree t2, java.io.PrintWriter pw)">3</method>
			<method name="public void _init_(String str, boolean runningAverages)">0</method>
			<method name="public void display(boolean verbose, java.io.PrintWriter pw)">1</method>
			<method name="protected void checkCrossing(java.util.Set s1, java.util.Set s2)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalRelations$NumericModifierGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalRelations$NegationModifierGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.PropertiesUtils$Property</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>4</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>16</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.0</amc>
		<cc>
			<method name="public void _init_(String name, String defaultValue, String description)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.Counters$6$1$1$1</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>12</rfc>
		<lcom>9</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>5</npm>
		<lcom3>0.7</lcom3>
		<loc>44</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="public volatile Object setValue(Object x0)">1</method>
			<method name="public Double setValue(Double value)">1</method>
			<method name="public volatile Object getValue()">1</method>
			<method name="public Double getValue()">1</method>
			<method name="public Object getKey()">1</method>
			<method name="void _init_(edu.stanford.nlp.stats.Counters$6$1$1)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.io.IOUtils$LineReaderIterable$1</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>11</rfc>
		<lcom>7</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>4</npm>
		<lcom3>0.4</lcom3>
		<loc>58</loc>
		<dam>0.5</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.333333333333334</amc>
		<cc>
			<method name="private String getNext()">1</method>
			<method name="void _init_(edu.stanford.nlp.io.IOUtils$LineReaderIterable)">0</method>
			<method name="public boolean hasNext()">2</method>
			<method name="public void remove()">1</method>
			<method name="public String next()">2</method>
			<method name="public volatile Object next()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.classify.RVFClassifier</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>2</rfc>
		<lcom>1</lcom>
		<ca>2</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>2</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract Object classOf(edu.stanford.nlp.ling.RVFDatum)">1</method>
			<method name="public abstract edu.stanford.nlp.stats.Counter scoresOf(edu.stanford.nlp.ling.RVFDatum)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.TimeFormatter$TimePatternExtractRuleCreator</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>23</cbo>
		<rfc>30</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>22</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>246</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5416666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>60.5</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="protected void updateExtractRule(edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule r, edu.stanford.nlp.ling.tokensregex.Env env, java.util.regex.Pattern pattern, edu.stanford.nlp.util.Function extractor)">1</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule create(edu.stanford.nlp.ling.tokensregex.Env env, java.util.Map attributes)">10</method>
			<method name="protected void updateExtractRule(edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule r, edu.stanford.nlp.ling.tokensregex.Env env, edu.stanford.nlp.util.Function extractor)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$StringFunction</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>3</noc>
		<cbo>7</cbo>
		<rfc>21</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>4</ce>
		<npm>4</npm>
		<lcom3>0.4</lcom3>
		<loc>155</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3888888888888889</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>24.5</amc>
		<cc>
			<method name="public String getParamDesc()">1</method>
			<method name="protected void _init_(String name, int nargs, String resultTypeName)">0</method>
			<method name="protected void _init_(String name, int nargs)">0</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.Env env, java.util.List in)">6</method>
			<method name="public transient abstract String compute(String[])">1</method>
			<method name="public boolean checkArgs(java.util.List in)">4</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams$AddEquivalencedNodeFunction</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>13</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>4</npm>
		<lcom3>0.4444444444444445</lcom3>
		<loc>75</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>17.0</amc>
		<cc>
			<method name="public void _init_(String annotationMark, String key)">0</method>
			<method name="public String toString()">1</method>
			<method name="public volatile Object apply(Object x0)">1</method>
			<method name="public String apply(edu.stanford.nlp.trees.tregex.TregexMatcher m)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.structure.MachineReadingAnnotations$RelationMentionsAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>9</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.FloatFunction</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>2</rfc>
		<lcom>1</lcom>
		<ca>4</ca>
		<ce>0</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>2</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract int domainDimension()">1</method>
			<method name="public abstract float valueAt(float[])">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.classify.Dataset</name>
		<wmc>47</wmc>
		<dit>0</dit>
		<noc>1</noc>
		<cbo>23</cbo>
		<rfc>139</rfc>
		<lcom>579</lcom>
		<ca>9</ca>
		<ce>16</ce>
		<npm>39</npm>
		<lcom3>0.9891304347826086</lcom3>
		<loc>1966</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.12907608695652173</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>40.787234042553195</amc>
		<cc>
			<method name="public void selectFeatures(int numFeatures, double[] scores)">7</method>
			<method name="public void changeLabelIndex(edu.stanford.nlp.util.Index newLabelIndex)">2</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void changeFeatureIndex(edu.stanford.nlp.util.Index newFeatureIndex)">4</method>
			<method name="public void summaryStatistics()">1</method>
			<method name="public edu.stanford.nlp.ling.RVFDatum getRVFDatum(int index)">2</method>
			<method name="protected void addFeatureIndices(int[] features)">1</method>
			<method name="protected void addLabel(Object label)">1</method>
			<method name="public void add(int[] features, int label)">1</method>
			<method name="public String toSummaryString()">1</method>
			<method name="public static edu.stanford.nlp.classify.Dataset readSVMLightFormat(String filename, edu.stanford.nlp.util.Index featureIndex, edu.stanford.nlp.util.Index labelIndex)">1</method>
			<method name="public edu.stanford.nlp.classify.RVFDataset getL1NormalizedTFIDFDataset()">2</method>
			<method name="public double[] getInformationGains()">12</method>
			<method name="protected void addFeatures(java.util.Collection features)">1</method>
			<method name="public edu.stanford.nlp.stats.Counter getFeatureCounter()">3</method>
			<method name="public double[][] getValuesArray()">1</method>
			<method name="public void add(java.util.Collection features, Object label)">1</method>
			<method name="public static void printSVMLightFormat(java.io.PrintWriter pw, edu.stanford.nlp.stats.ClassicCounter c, int classNo)">2</method>
			<method name="public void _init_(int numDatums, edu.stanford.nlp.util.Index featureIndex, edu.stanford.nlp.util.Index labelIndex)">0</method>
			<method name="public void add(edu.stanford.nlp.ling.Datum d)">1</method>
			<method name="public void updateLabels(int[] labels)">2</method>
			<method name="public String toString()">1</method>
			<method name="public edu.stanford.nlp.util.Pair split(int start, int end)">2</method>
			<method name="public void selectFeaturesBinaryInformationGain(int numFeatures)">1</method>
			<method name="protected void addLabelIndex(int label)">1</method>
			<method name="public void _init_(edu.stanford.nlp.util.Index labelIndex, int[] labels, edu.stanford.nlp.util.Index featureIndex, int[][] data)">0</method>
			<method name="public void printSparseFeatureMatrix()">1</method>
			<method name="public void _init_(edu.stanford.nlp.util.Index featureIndex, edu.stanford.nlp.util.Index labelIndex)">0</method>
			<method name="protected void ensureSize()">2</method>
			<method name="public void _init_()">0</method>
			<method name="public void printSparseFeatureMatrix(java.io.PrintWriter pw)">3</method>
			<method name="public edu.stanford.nlp.util.Pair split(double percentDev)">1</method>
			<method name="public void _init_(int numDatums)">0</method>
			<method name="protected void addFeatures(java.util.Collection features, boolean addNewFeatures)">3</method>
			<method name="public void add(java.util.Collection features, Object label, boolean addNewFeatures)">1</method>
			<method name="public static edu.stanford.nlp.classify.Dataset readSVMLightFormat(String filename, java.util.List lines)">1</method>
			<method name="public edu.stanford.nlp.classify.Dataset getRandomSubDataset(double p, int seed)">3</method>
			<method name="public void printFullFeatureMatrix(java.io.PrintWriter pw)">6</method>
			<method name="public String toSummaryStatistics()">3</method>
			<method name="protected final void initialize(int numDatums)">1</method>
			<method name="public static edu.stanford.nlp.classify.Dataset readSVMLightFormat(String filename, edu.stanford.nlp.util.Index featureIndex, edu.stanford.nlp.util.Index labelIndex, java.util.List lines)">2</method>
			<method name="public edu.stanford.nlp.ling.RVFDatum getL1NormalizedTFIDFDatum(edu.stanford.nlp.ling.Datum datum, edu.stanford.nlp.stats.Counter featureDocCounts)">4</method>
			<method name="public static edu.stanford.nlp.classify.Dataset readSVMLightFormat(String filename)">1</method>
			<method name="public void applyFeatureCountThreshold(java.util.List thresholds)">9</method>
			<method name="public void _init_(edu.stanford.nlp.util.Index labelIndex, int[] labels, edu.stanford.nlp.util.Index featureIndex, int[][] data, int size)">0</method>
			<method name="public static edu.stanford.nlp.ling.Datum svmLightLineToDatum(String l)">4</method>
			<method name="public edu.stanford.nlp.ling.Datum getDatum(int index)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.Options$RelativeHeuristicLevel</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.9166666666666666</lcom3>
		<loc>56</loc>
		<dam>0.25</dam>
		<moa>4</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>12.0</amc>
		<cc>
			<method name="public static edu.stanford.nlp.time.Options$RelativeHeuristicLevel[] values()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static edu.stanford.nlp.time.Options$RelativeHeuristicLevel valueOf(String name)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.TokensRegexAnnotator</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>14</cbo>
		<rfc>42</rfc>
		<lcom>16</lcom>
		<ca>0</ca>
		<ce>14</ce>
		<npm>7</npm>
		<lcom3>0.5714285714285714</lcom3>
		<loc>415</loc>
		<dam>1.0</dam>
		<moa>4</moa>
		<mfa>0.0</mfa>
		<cam>0.3125</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>50.25</amc>
		<cc>
			<method name="public void annotate(edu.stanford.nlp.pipeline.Annotation annotation)">6</method>
			<method name="public java.util.Set requires()">1</method>
			<method name="public transient void _init_(String[] files)">0</method>
			<method name="private java.util.List extract(edu.stanford.nlp.util.CoreMap annotation)">3</method>
			<method name="public void addTokenOffsets(edu.stanford.nlp.util.CoreMap annotation)">3</method>
			<method name="public void _init_(java.util.Properties props)">0</method>
			<method name="public java.util.Set requirementsSatisfied()">1</method>
			<method name="public void _init_(String name, java.util.Properties props)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.tsurgeon.JJTTsurgeonParserState</name>
		<wmc>12</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>25</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>12</npm>
		<lcom3>0.43636363636363634</lcom3>
		<loc>245</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3958333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.0</amc>
		<cc>
			<method name="public edu.stanford.nlp.trees.tregex.tsurgeon.Node popNode()">2</method>
			<method name="public void closeNodeScope(edu.stanford.nlp.trees.tregex.tsurgeon.Node n, boolean condition)">3</method>
			<method name="public int nodeArity()">1</method>
			<method name="public void closeNodeScope(edu.stanford.nlp.trees.tregex.tsurgeon.Node n, int num)">2</method>
			<method name="public void pushNode(edu.stanford.nlp.trees.tregex.tsurgeon.Node n)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public edu.stanford.nlp.trees.tregex.tsurgeon.Node rootNode()">1</method>
			<method name="public void clearNodeScope(edu.stanford.nlp.trees.tregex.tsurgeon.Node n)">2</method>
			<method name="public void reset()">1</method>
			<method name="public boolean nodeCreated()">1</method>
			<method name="public void openNodeScope(edu.stanford.nlp.trees.tregex.tsurgeon.Node n)">1</method>
			<method name="public edu.stanford.nlp.trees.tregex.tsurgeon.Node peekNode()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.io.IOUtils$GetLinesIterable$1</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>18</rfc>
		<lcom>11</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>4</npm>
		<lcom3>0.611111111111111</lcom3>
		<loc>126</loc>
		<dam>0.6666666666666666</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5714285714285714</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.571428571428573</amc>
		<cc>
			<method name="protected java.io.BufferedReader getReader()">3</method>
			<method name="public boolean hasNext()">2</method>
			<method name="protected String getLine()">2</method>
			<method name="public void remove()">1</method>
			<method name="public String next()">2</method>
			<method name="public volatile Object next()">1</method>
			<method name="void _init_(edu.stanford.nlp.io.IOUtils$GetLinesIterable)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.Trees</name>
		<wmc>45</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>41</cbo>
		<rfc>125</rfc>
		<lcom>988</lcom>
		<ca>20</ca>
		<ce>21</ce>
		<npm>31</npm>
		<lcom3>0.9772727272727273</lcom3>
		<loc>1800</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.12412587412587413</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>38.977777777777774</amc>
		<cc>
			<method name="static String texTree(edu.stanford.nlp.trees.Tree t)">1</method>
			<method name="private static void preTerminals(edu.stanford.nlp.trees.Tree t, java.util.List l)">3</method>
			<method name="static void _clinit_()">0</method>
			<method name="static boolean rightEdge(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.Tree t1, edu.stanford.nlp.util.MutableInteger i)">5</method>
			<method name="private static int treeToLatexHelper(edu.stanford.nlp.trees.Tree t, StringBuilder c, StringBuilder h, int n, int nextN, int indent)">5</method>
			<method name="public static String treeToLatex(edu.stanford.nlp.trees.Tree t)">1</method>
			<method name="public static void convertToCoreLabels(edu.stanford.nlp.trees.Tree tree)">3</method>
			<method name="static edu.stanford.nlp.trees.Tree getPreTerminal(edu.stanford.nlp.trees.Tree tree, edu.stanford.nlp.util.MutableInteger i, int n)">6</method>
			<method name="public static void outputTreeLabels(edu.stanford.nlp.trees.Tree tree, int depth)">3</method>
			<method name="public static java.util.List leafLabels(edu.stanford.nlp.trees.Tree t)">1</method>
			<method name="private void _init_()">0</method>
			<method name="public static edu.stanford.nlp.trees.Tree applyToProjections(edu.stanford.nlp.trees.TreeVisitor v, edu.stanford.nlp.trees.Tree head, edu.stanford.nlp.trees.Tree root, edu.stanford.nlp.trees.HeadFinder hf)">6</method>
			<method name="public static String treeToLatexEven(edu.stanford.nlp.trees.Tree t)">1</method>
			<method name="private static void leaves(edu.stanford.nlp.trees.Tree t, java.util.List l)">3</method>
			<method name="public static edu.stanford.nlp.trees.Tree readTree(String str)">1</method>
			<method name="static String escape(String s)">4</method>
			<method name="public static void outputTreeLabels(edu.stanford.nlp.trees.Tree tree)">1</method>
			<method name="public static java.util.List taggedLeafLabels(edu.stanford.nlp.trees.Tree t)">1</method>
			<method name="public static edu.stanford.nlp.trees.Tree maximalProjection(edu.stanford.nlp.trees.Tree head, edu.stanford.nlp.trees.Tree root, edu.stanford.nlp.trees.HeadFinder hf)">4</method>
			<method name="static edu.stanford.nlp.trees.Tree getTerminal(edu.stanford.nlp.trees.Tree tree, edu.stanford.nlp.util.MutableInteger i, int n)">6</method>
			<method name="private static int treeToLatexEvenHelper(edu.stanford.nlp.trees.Tree t, StringBuilder c, StringBuilder h, int n, int nextN, int indent, int curDepth, int maxDepth)">10</method>
			<method name="public static java.util.List pathNodeToNode(edu.stanford.nlp.trees.Tree from, edu.stanford.nlp.trees.Tree to, edu.stanford.nlp.trees.Tree root)">9</method>
			<method name="private static void taggedLeafLabels(edu.stanford.nlp.trees.Tree t, java.util.List l)">3</method>
			<method name="public static edu.stanford.nlp.trees.Tree normalizeTree(edu.stanford.nlp.trees.Tree tree, edu.stanford.nlp.trees.TreeNormalizer tn, edu.stanford.nlp.trees.TreeFactory tf)">3</method>
			<method name="public static edu.stanford.nlp.trees.Tree getPreTerminal(edu.stanford.nlp.trees.Tree tree, int n)">1</method>
			<method name="public static edu.stanford.nlp.trees.Tree getLowestCommonAncestor(edu.stanford.nlp.trees.Tree t1, edu.stanford.nlp.trees.Tree t2, edu.stanford.nlp.trees.Tree root)">5</method>
			<method name="private static void leafLabels(edu.stanford.nlp.trees.Tree t, java.util.List l)">3</method>
			<method name="public static edu.stanford.nlp.trees.Tree getTerminal(edu.stanford.nlp.trees.Tree tree, int n)">1</method>
			<method name="public static String toStructureDebugString(edu.stanford.nlp.trees.Tree t)">19</method>
			<method name="public static edu.stanford.nlp.trees.Tree toFlatTree(java.util.List s)">1</method>
			<method name="public static edu.stanford.nlp.trees.Tree readTree(String ptbTreeString, edu.stanford.nlp.trees.TreeFactory treeFactory)">1</method>
			<method name="public static java.util.List pathFromRoot(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.Tree root)">3</method>
			<method name="public static edu.stanford.nlp.trees.Tree lexicalize(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.HeadFinder hf)">1</method>
			<method name="public static edu.stanford.nlp.trees.Tree getLeaf(edu.stanford.nlp.trees.Tree tree, int i)">3</method>
			<method name="public static int objectEqualityIndexOf(edu.stanford.nlp.trees.Tree parent, edu.stanford.nlp.trees.Tree daughter)">3</method>
			<method name="public static java.util.List leaves(edu.stanford.nlp.trees.Tree t)">1</method>
			<method name="public static edu.stanford.nlp.trees.Tree getLowestCommonAncestor(java.util.List nodes, edu.stanford.nlp.trees.Tree root)">6</method>
			<method name="public static int leftEdge(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.Tree root)">2</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="static boolean leftEdge(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.Tree t1, edu.stanford.nlp.util.MutableInteger i)">5</method>
			<method name="public static edu.stanford.nlp.trees.Tree toFlatTree(java.util.List s, edu.stanford.nlp.ling.LabelFactory lf)">3</method>
			<method name="public static void replaceNode(edu.stanford.nlp.trees.Tree node, edu.stanford.nlp.trees.Tree node1, edu.stanford.nlp.trees.Tree t)">4</method>
			<method name="public static java.util.List preTerminals(edu.stanford.nlp.trees.Tree t)">1</method>
			<method name="public static java.util.List localTreeAsCatList(edu.stanford.nlp.trees.Tree t)">2</method>
			<method name="public static int rightEdge(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.Tree root)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.ExtractorFrames$ExtractorWordTwoTags</name>
		<wmc>7</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>17</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>6</npm>
		<lcom3>0.7083333333333334</lcom3>
		<loc>107</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.35714285714285715</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.714285714285714</amc>
		<cc>
			<method name="String extract(edu.stanford.nlp.tagger.maxent.History h, edu.stanford.nlp.tagger.maxent.PairsHolder pH)">1</method>
			<method name="public int leftContext()">2</method>
			<method name="public boolean isLocal()">1</method>
			<method name="public int rightContext()">2</method>
			<method name="public void _init_(int word, int position1, int position2)">0</method>
			<method name="public boolean isDynamic()">1</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.process.Morphology</name>
		<wmc>23</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>16</cbo>
		<rfc>64</rfc>
		<lcom>169</lcom>
		<ca>10</ca>
		<ce>7</ce>
		<npm>19</npm>
		<lcom3>0.625</lcom3>
		<loc>552</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.14393939393939395</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>22.82608695652174</amc>
		<cc>
			<method name="public void _init_(java.io.Reader in)">0</method>
			<method name="public String stem(String word)">1</method>
			<method name="public edu.stanford.nlp.ling.WordLemmaTag lemmatize(edu.stanford.nlp.ling.WordTag wT)">1</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void _init_(java.io.Reader in, int flags)">0</method>
			<method name="public void stem(edu.stanford.nlp.ling.CoreLabel label, Class ann)">1</method>
			<method name="public static edu.stanford.nlp.ling.WordTag stemStatic(edu.stanford.nlp.ling.WordTag wT)">1</method>
			<method name="public void stem(edu.stanford.nlp.ling.CoreLabel label)">1</method>
			<method name="private static String lemmatize(String word, String tag, edu.stanford.nlp.process.Morpha lexer, boolean lowercase)">6</method>
			<method name="public static synchronized edu.stanford.nlp.ling.WordTag stemStaticSynchronized(String word, String tag)">1</method>
			<method name="private static synchronized void initStaticLexer()">2</method>
			<method name="public edu.stanford.nlp.ling.Word next()">1</method>
			<method name="static boolean isProper(String posTag)">4</method>
			<method name="public static String lemmaStatic(String word, String tag, boolean lowercase)">1</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="public String lemma(String word, String tag, boolean lowercase)">1</method>
			<method name="public edu.stanford.nlp.ling.Word stem(edu.stanford.nlp.ling.Word w)">1</method>
			<method name="public static edu.stanford.nlp.ling.WordLemmaTag lemmatizeStatic(edu.stanford.nlp.ling.WordTag wT)">1</method>
			<method name="public Object apply(Object in)">3</method>
			<method name="public static synchronized String lemmaStaticSynchronized(String word, String tag, boolean lowercase)">1</method>
			<method name="public String lemma(String word, String tag)">1</method>
			<method name="public static edu.stanford.nlp.ling.WordTag stemStatic(String word, String tag)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.tsurgeon.TreeLocation</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>25</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>5</ce>
		<npm>2</npm>
		<lcom3>0.5</lcom3>
		<loc>148</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>28.0</amc>
		<cc>
			<method name="void setRoot(edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPatternRoot root)">1</method>
			<method name="public void _init_(String relation, edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern p)">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="edu.stanford.nlp.util.Pair evaluate(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.tregex.TregexMatcher tm)">6</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.Distribution$1</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>23</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.0</amc>
		<cc>
			<method name="public int compare(Object o1, Object o2)">2</method>
			<method name="void _init_(edu.stanford.nlp.stats.Distribution)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$LemmaAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.CorefCoreAnnotations$CorefAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.io.TaggedFileRecord</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>16</cbo>
		<rfc>34</rfc>
		<lcom>20</lcom>
		<ca>7</ca>
		<ce>12</ce>
		<npm>7</npm>
		<lcom3>0.9115646258503401</lcom3>
		<loc>591</loc>
		<dam>0.0</dam>
		<moa>6</moa>
		<mfa>0.0</mfa>
		<cam>0.225</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>70.25</amc>
		<cc>
			<method name="public static edu.stanford.nlp.tagger.io.TaggedFileRecord createRecord(java.util.Properties config, String description)">14</method>
			<method name="public static String getTagSeparator(java.util.Properties config)">2</method>
			<method name="public edu.stanford.nlp.tagger.io.TaggedFileReader reader()">2</method>
			<method name="public static String getEncoding(java.util.Properties config)">2</method>
			<method name="public String filename()">1</method>
			<method name="public static java.util.List createRecords(java.util.Properties config, String description)">2</method>
			<method name="public String toString()">8</method>
			<method name="private void _init_(String file, edu.stanford.nlp.tagger.io.TaggedFileRecord$Format format, String encoding, String tagSeparator, edu.stanford.nlp.trees.TreeTransformer treeTransformer, edu.stanford.nlp.trees.TreeNormalizer treeNormalizer, edu.stanford.nlp.trees.TreeReaderFactory trf, edu.stanford.nlp.io.NumberRangesFileFilter treeRange, edu.stanford.nlp.util.Filter treeFilter, Integer wordColumn, Integer tagColumn)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.TreeCoreAnnotations</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="private void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.structure.MachineReadingAnnotations$TriggerAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequenceMatchAction$NextMatchAction</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>20</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public transient edu.stanford.nlp.ling.tokensregex.SequenceMatchResult apply(edu.stanford.nlp.ling.tokensregex.SequenceMatchResult seqMatchResult, int[] groups)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.TransformingTreebank$1</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>4</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>10</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.0</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="public edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader in)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.NoSuchParseException</name>
		<wmc>2</wmc>
		<dit>5</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>5</ca>
		<ce>0</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>10</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>1.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(String error)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.HasFloatInitial</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract float[] initial()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams$SimpleStringFunction</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>9</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>4</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>32</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.5</amc>
		<cc>
			<method name="public String apply(edu.stanford.nlp.trees.tregex.TregexMatcher tregexMatcher)">1</method>
			<method name="public void _init_(String result)">0</method>
			<method name="public String toString()">1</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.ChineseSimWordAvgDepGrammar</name>
		<wmc>9</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>14</cbo>
		<rfc>66</rfc>
		<lcom>18</lcom>
		<ca>1</ca>
		<ce>13</ce>
		<npm>4</npm>
		<lcom3>0.8611111111111112</lcom3>
		<loc>1282</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.25</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>140.44444444444446</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.TreebankLangParserParams tlpParams, boolean directional, boolean distance, boolean coarseDistance, boolean basicCategoryTagsInDependencyGrammar, edu.stanford.nlp.parser.lexparser.Options op, edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex)">0</method>
			<method name="public double scoreTB(edu.stanford.nlp.parser.lexparser.IntDependency dependency)">1</method>
			<method name="private String stringBasicCategory(int tag)">1</method>
			<method name="protected void finalize()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public java.util.Map getMap(String filename)">3</method>
			<method name="private double probSimilarWordAvg(edu.stanford.nlp.parser.lexparser.IntDependency dep)">17</method>
			<method name="public void setLex(edu.stanford.nlp.parser.lexparser.Lexicon lex)">1</method>
			<method name="private double probTBwithSimWords(edu.stanford.nlp.parser.lexparser.IntDependency dependency)">23</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Interval</name>
		<wmc>34</wmc>
		<dit>0</dit>
		<noc>1</noc>
		<cbo>41</cbo>
		<rfc>48</rfc>
		<lcom>467</lcom>
		<ca>38</ca>
		<ce>4</ce>
		<npm>28</npm>
		<lcom3>1.014763014763015</lcom3>
		<loc>872</loc>
		<dam>0.2564102564102564</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.25252525252525254</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>23.5</amc>
		<cc>
			<method name="public boolean equals(Object o)">6</method>
			<method name="public edu.stanford.nlp.util.Interval getInterval()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="protected void _init_(Comparable a, Comparable b, int flags)">0</method>
			<method name="public static boolean checkFlagExclusiveSet(int flags, int flag, int mask)">3</method>
			<method name="public static boolean checkFlagSet(int flags, int flag)">2</method>
			<method name="public boolean isIntervalComparable(edu.stanford.nlp.util.Interval other)">4</method>
			<method name="public boolean overlaps(edu.stanford.nlp.util.Interval other)">10</method>
			<method name="public static edu.stanford.nlp.util.Interval toValidInterval(Comparable a, Comparable b, int flags)">2</method>
			<method name="protected int toRelFlags(int comp, int shift)">3</method>
			<method name="public boolean contains(edu.stanford.nlp.util.Interval other)">5</method>
			<method name="protected int addIntervalRelationFlags(int flags, boolean checkFuzzy)">19</method>
			<method name="public edu.stanford.nlp.util.Interval$RelType getRelation(edu.stanford.nlp.util.Interval other)">15</method>
			<method name="public int compareIntervalOrder(edu.stanford.nlp.util.Interval other)">3</method>
			<method name="public boolean contains(Comparable p)">9</method>
			<method name="protected static Comparable min(Comparable a, Comparable b)">2</method>
			<method name="public edu.stanford.nlp.util.Interval intersect(edu.stanford.nlp.util.Interval other)">2</method>
			<method name="public static double getMidPoint(edu.stanford.nlp.util.Interval interval)">1</method>
			<method name="protected static Comparable max(Comparable a, Comparable b)">2</method>
			<method name="public int getRelationFlags(edu.stanford.nlp.util.Interval other)">2</method>
			<method name="public static final java.util.Comparator lengthEndpointsComparator()">1</method>
			<method name="public static edu.stanford.nlp.util.Interval toInterval(Comparable a, Comparable b)">1</method>
			<method name="public static boolean checkMultipleBitSet(int flags)">4</method>
			<method name="public Comparable getEnd()">1</method>
			<method name="public static edu.stanford.nlp.util.Interval toInterval(Comparable a, Comparable b, int flags)">2</method>
			<method name="public static int extractRelationSubflags(int flags, int shift)">1</method>
			<method name="public int hashCode()">1</method>
			<method name="public Comparable getBegin()">1</method>
			<method name="public boolean containsOpen(Comparable p)">5</method>
			<method name="public edu.stanford.nlp.util.Interval expand(edu.stanford.nlp.util.Interval other)">2</method>
			<method name="public static double getRadius(edu.stanford.nlp.util.Interval interval)">1</method>
			<method name="public static edu.stanford.nlp.util.Interval toValidInterval(Comparable a, Comparable b)">1</method>
			<method name="public boolean includesEnd()">2</method>
			<method name="public boolean includesBegin()">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.FrenchUnknownWordModelTrainer</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>23</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>10</ce>
		<npm>4</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>201</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.39285714285714285</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>48.0</amc>
		<cc>
			<method name="public void train(edu.stanford.nlp.ling.TaggedWord tw, int loc, double weight)">3</method>
			<method name="public void _init_()">0</method>
			<method name="public edu.stanford.nlp.parser.lexparser.UnknownWordModel finishTraining()">4</method>
			<method name="public void initializeTraining(edu.stanford.nlp.parser.lexparser.Options op, edu.stanford.nlp.parser.lexparser.Lexicon lex, edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex, double totalTrees)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalRelations$ParentheticalGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.sievepasses.PreciseConstructs</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>32</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>31.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.NumberNormalizer$2</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>8</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>37</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.0</amc>
		<cc>
			<method name="public edu.stanford.nlp.util.Interval apply(edu.stanford.nlp.util.CoreMap in)">1</method>
			<method name="void _init_(Integer)">0</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.NumberNormalizer$1</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>8</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>37</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.0</amc>
		<cc>
			<method name="public edu.stanford.nlp.util.Interval apply(edu.stanford.nlp.util.CoreMap in)">1</method>
			<method name="void _init_(Integer)">0</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.LatticeScorer</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract edu.stanford.nlp.parser.lexparser.Item convertItemSpan(edu.stanford.nlp.parser.lexparser.Item)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.crf.NoisyLabelLinearCliquePotentialFunction</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.16666666666666674</lcom3>
		<loc>74</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>22.666666666666668</amc>
		<cc>
			<method name="public double computeCliquePotential(int cliqueSize, int labelIndex, int[] cliqueFeatures, double[] featureVal, int posInSent)">3</method>
			<method name="public void _init_(double[][] weights, int[] docLabels, double[][] errorMatrix)">0</method>
			<method name="private double g(int labelIndex, int posInSent)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalRelations$ClausalComplementGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.crf.LabelDictionary</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>33</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>6</ce>
		<npm>5</npm>
		<lcom3>0.8</lcom3>
		<loc>234</loc>
		<dam>0.875</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>36.666666666666664</amc>
		<cc>
			<method name="public void lock(int threshold, edu.stanford.nlp.util.Index labelIndex)">5</method>
			<method name="public int[] getConstrainedSet(String observation)">2</method>
			<method name="public boolean isConstrained(String observation)">2</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void increment(String observation, String label)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.StringLabelFactory</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>8</rfc>
		<lcom>10</lcom>
		<ca>8</ca>
		<ce>3</ce>
		<npm>5</npm>
		<lcom3>2.0</lcom3>
		<loc>28</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.6</amc>
		<cc>
			<method name="public edu.stanford.nlp.ling.Label newLabel(String labelStr, int options)">1</method>
			<method name="public edu.stanford.nlp.ling.Label newLabel(String labelStr)">1</method>
			<method name="public edu.stanford.nlp.ling.Label newLabel(edu.stanford.nlp.ling.Label oldLabel)">1</method>
			<method name="public edu.stanford.nlp.ling.Label newLabelFromString(String labelStr)">1</method>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.NewlineLogFormatter</name>
		<wmc>2</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>8</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>23</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.8</mfa>
		<cam>0.75</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>10.5</amc>
		<cc>
			<method name="public String format(java.util.logging.LogRecord rec)">1</method>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.Redwood$ConsoleHandler</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>8</rfc>
		<lcom>8</lcom>
		<ca>4</ca>
		<ce>2</ce>
		<npm>4</npm>
		<lcom3>0.25</lcom3>
		<loc>32</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.2</amc>
		<cc>
			<method name="private void _init_(java.io.PrintStream stream)">0</method>
			<method name="public static edu.stanford.nlp.util.logging.Redwood$ConsoleHandler out()">1</method>
			<method name="public boolean supportsAnsi()">1</method>
			<method name="public void print(Object[] channels, String line)">1</method>
			<method name="public static edu.stanford.nlp.util.logging.Redwood$ConsoleHandler err()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.sievepasses.PronounMatch</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>12</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.MetaClass$ConstructorNotFoundException</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>9</rfc>
		<lcom>10</lcom>
		<ca>2</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>1.25</lcom3>
		<loc>30</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.55</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.8</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="private void _init_(String msg, Throwable cause)">0</method>
			<method name="private void _init_(String msg)">0</method>
			<method name="void _init_(String x0, edu.stanford.nlp.util.MetaClass$1 x1)">0</method>
			<method name="private void _init_(Throwable cause)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CategoryWordTagFactory</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>12</rfc>
		<lcom>15</lcom>
		<ca>8</ca>
		<ce>3</ce>
		<npm>6</npm>
		<lcom3>2.0</lcom3>
		<loc>40</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.666666666666667</amc>
		<cc>
			<method name="public edu.stanford.nlp.ling.Label newLabel(String labelStr, int options)">1</method>
			<method name="public edu.stanford.nlp.ling.Label newLabel(String labelStr)">1</method>
			<method name="public edu.stanford.nlp.ling.Label newLabel(edu.stanford.nlp.ling.Label oldLabel)">1</method>
			<method name="public edu.stanford.nlp.ling.Label newLabelFromString(String labelStr)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public edu.stanford.nlp.ling.Label newLabel(String word, String tag, String category)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.TransformingTreebank$2</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>10</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.0</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="public edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader in)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.objectbank.XMLBeginEndIterator</name>
		<wmc>17</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>41</rfc>
		<lcom>126</lcom>
		<ca>2</ca>
		<ce>7</ce>
		<npm>14</npm>
		<lcom3>0.7053571428571428</lcom3>
		<loc>359</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4411764705882353</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.705882352941178</amc>
		<cc>
			<method name="public static edu.stanford.nlp.objectbank.IteratorFromReaderFactory getFactory(String tag, edu.stanford.nlp.util.Function op, boolean keepInternalTags, boolean keepDelimitingTags)">1</method>
			<method name="public void _init_(java.io.Reader in, String tagNameRegexp, edu.stanford.nlp.util.Function op, boolean keepInternalTags)">0</method>
			<method name="public void _init_(java.io.Reader in, String tagNameRegexp, boolean keepInternalTags, boolean keepDelimitingTags, boolean countDepth)">0</method>
			<method name="public boolean hasNext()">2</method>
			<method name="private void setNext()">1</method>
			<method name="public Object next()">2</method>
			<method name="public void _init_(java.io.Reader in, String tagNameRegexp, boolean keepInternalTags, boolean keepDelimitingTags)">0</method>
			<method name="protected Object parseString(String s)">1</method>
			<method name="public static edu.stanford.nlp.objectbank.IteratorFromReaderFactory getFactory(String tag, boolean keepInternalTags, boolean keepDelimitingTags)">1</method>
			<method name="private String getNext()">17</method>
			<method name="public static edu.stanford.nlp.objectbank.IteratorFromReaderFactory getFactory(String tag)">1</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="public void _init_(java.io.Reader in, String tagNameRegexp)">0</method>
			<method name="public void _init_(java.io.Reader in, String tagNameRegexp, boolean keepInternalTags)">0</method>
			<method name="public void _init_(java.io.Reader in, String tagNameRegexp, edu.stanford.nlp.util.Function op, boolean keepInternalTags, boolean keepDelimitingTags, boolean countDepth)">0</method>
			<method name="public void _init_(java.io.Reader in, String tagNameRegexp, edu.stanford.nlp.util.Function op, boolean keepInternalTags, boolean keepDelimitingTags)">0</method>
			<method name="public static edu.stanford.nlp.objectbank.IteratorFromReaderFactory getFactory(String tag, edu.stanford.nlp.util.Function op)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.CorefChain</name>
		<wmc>11</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>12</cbo>
		<rfc>41</rfc>
		<lcom>0</lcom>
		<ca>5</ca>
		<ce>7</ce>
		<npm>11</npm>
		<lcom3>0.7</lcom3>
		<loc>263</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.24675324675324675</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>22.454545454545453</amc>
		<cc>
			<method name="public boolean equals(Object aThat)">10</method>
			<method name="public int hashCode()">1</method>
			<method name="public void _init_(edu.stanford.nlp.dcoref.CorefCluster c, java.util.Map positions)">0</method>
			<method name="public edu.stanford.nlp.dcoref.CorefChain$CorefMention getRepresentativeMention()">1</method>
			<method name="public java.util.Set getMentionsWithSameHead(int sentenceNumber, int headIndex)">1</method>
			<method name="public java.util.List getMentionsInTextualOrder()">1</method>
			<method name="public String toString()">1</method>
			<method name="public java.util.Set getMentionsWithSameHead(edu.stanford.nlp.util.IntPair position)">1</method>
			<method name="public void _init_(int cid, java.util.Map mentionMap, edu.stanford.nlp.dcoref.CorefChain$CorefMention representative)">0</method>
			<method name="public java.util.Map getMentionMap()">1</method>
			<method name="public int getChainID()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.fsm.Block</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract java.util.Set getMembers()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.TwoDimensionalMap$TwoDimensionalMapValueIterator</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>10</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>28</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.75</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.util.TwoDimensionalMap map)">0</method>
			<method name="public boolean hasNext()">1</method>
			<method name="public void remove()">1</method>
			<method name="public Object next()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.ScoredComparator</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>12</rfc>
		<lcom>1</lcom>
		<ca>5</ca>
		<ce>1</ce>
		<npm>5</npm>
		<lcom3>0.9166666666666666</lcom3>
		<loc>115</loc>
		<dam>0.6666666666666666</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.4166666666666667</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>14.571428571428571</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="public boolean equals(Object o)">3</method>
			<method name="public int hashCode()">2</method>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(boolean ascending)">0</method>
			<method name="public String toString()">2</method>
			<method name="public int compare(edu.stanford.nlp.util.Scored o1, edu.stanford.nlp.util.Scored o2)">7</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.FrenchTreebankParserParams</name>
		<wmc>21</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>40</cbo>
		<rfc>114</rfc>
		<lcom>158</lcom>
		<ca>3</ca>
		<ce>39</ce>
		<npm>14</npm>
		<lcom3>0.8807692307692309</lcom3>
		<loc>2727</loc>
		<dam>0.9230769230769231</dam>
		<moa>4</moa>
		<mfa>0.0</mfa>
		<cam>0.16111111111111112</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>128.23809523809524</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public int setOptionFlag(String[] args, int i)">15</method>
			<method name="public edu.stanford.nlp.trees.MemoryTreebank memoryTreebank()">1</method>
			<method name="public edu.stanford.nlp.trees.HeadFinder typedDependencyHeadFinder()">1</method>
			<method name="public edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.Tree root)">8</method>
			<method name="public edu.stanford.nlp.trees.TreeReaderFactory treeReaderFactory()">1</method>
			<method name="static edu.stanford.nlp.stats.TwoDimensionalCounter access$100(edu.stanford.nlp.parser.lexparser.FrenchTreebankParserParams x0)">1</method>
			<method name="public java.util.List defaultTestSentence()">1</method>
			<method name="public String[] sisterSplitters()">1</method>
			<method name="private void loadMWMap(String filename)">4</method>
			<method name="private void initializeAnnotationPatterns()">3</method>
			<method name="public edu.stanford.nlp.trees.HeadFinder headFinder()">2</method>
			<method name="public edu.stanford.nlp.trees.TreeTransformer collinizer()">1</method>
			<method name="public edu.stanford.nlp.trees.TreeTransformer collinizerEvalb()">1</method>
			<method name="private String setupMorphoFeatures(String activeFeats)">2</method>
			<method name="private void setHeadFinder(edu.stanford.nlp.trees.HeadFinder hf)">4</method>
			<method name="private void removeBaselineFeature(String featName)">2</method>
			<method name="public void display()">1</method>
			<method name="public edu.stanford.nlp.parser.lexparser.Lexicon lex(edu.stanford.nlp.parser.lexparser.Options op, edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex)">3</method>
			<method name="public edu.stanford.nlp.trees.DiskTreebank diskTreebank()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.PaddedList</name>
		<wmc>9</wmc>
		<dit>3</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>13</rfc>
		<lcom>2</lcom>
		<ca>10</ca>
		<ce>0</ce>
		<npm>9</npm>
		<lcom3>0.5833333333333334</lcom3>
		<loc>71</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.8292682926829268</mfa>
		<cam>0.3333333333333333</cam>
		<ic>2</ic>
		<cbm>5</cbm>
		<amc>6.555555555555555</amc>
		<cc>
			<method name="public int size()">1</method>
			<method name="public Object get(int i)">3</method>
			<method name="public static edu.stanford.nlp.util.PaddedList valueOf(java.util.List list, Object padding)">1</method>
			<method name="public Object getPad()">1</method>
			<method name="public void _init_(java.util.List l)">0</method>
			<method name="public java.util.List getWrappedList()">1</method>
			<method name="public boolean sameInnerList(edu.stanford.nlp.util.PaddedList p)">3</method>
			<method name="public String toString()">1</method>
			<method name="public void _init_(java.util.List l, Object padding)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$NumericValueAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.PrecisionRecallStats</name>
		<wmc>22</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>35</rfc>
		<lcom>139</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>22</npm>
		<lcom3>0.4444444444444445</lcom3>
		<loc>378</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.22727272727272727</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.045454545454547</amc>
		<cc>
			<method name="public double getPrecision()">3</method>
			<method name="public void addCounts(edu.stanford.nlp.stats.PrecisionRecallStats prs)">1</method>
			<method name="public void addTP(int count)">1</method>
			<method name="public int getFN()">1</method>
			<method name="public double getFMeasure()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(edu.stanford.nlp.classify.Classifier classifier, edu.stanford.nlp.classify.Dataset data, Object positiveClass)">0</method>
			<method name="public int getTP()">1</method>
			<method name="public void addFP(int count)">1</method>
			<method name="public double getFMeasure(double alpha)">3</method>
			<method name="public double getRecall()">3</method>
			<method name="public String getF1Description(int numDigits)">1</method>
			<method name="public void _init_(int tp, int fp, int fn)">0</method>
			<method name="public int getFP()">1</method>
			<method name="public void addFN(int count)">1</method>
			<method name="public void incrementFN()">1</method>
			<method name="public void incrementTP()">1</method>
			<method name="public void incrementFP()">1</method>
			<method name="public String toString()">1</method>
			<method name="public String toString(int numDigits)">1</method>
			<method name="public String getRecallDescription(int numDigits)">1</method>
			<method name="public String getPrecisionDescription(int numDigits)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor$1</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>8</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>2</npm>
		<lcom3>0.5</lcom3>
		<loc>41</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4666666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.0</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor, Integer)">0</method>
			<method name="public edu.stanford.nlp.util.Interval apply(edu.stanford.nlp.util.CoreMap in)">1</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.DiffFunction</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>12</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>11</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract double[] derivativeAt(double[])">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.metrics.AbstractEval$RuleErrorEval</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>34</rfc>
		<lcom>9</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>3</npm>
		<lcom3>0.6</lcom3>
		<loc>203</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.3333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>32.5</amc>
		<cc>
			<method name="public void evaluate(edu.stanford.nlp.trees.Tree t1, edu.stanford.nlp.trees.Tree t2, java.io.PrintWriter pw)">3</method>
			<method name="public void display(boolean verbose, java.io.PrintWriter pw)">3</method>
			<method name="protected java.util.Set makeObjects(edu.stanford.nlp.trees.Tree tree)">2</method>
			<method name="protected static String localize(edu.stanford.nlp.trees.Tree tree)">3</method>
			<method name="public void _init_(String str)">0</method>
			<method name="private static void display(edu.stanford.nlp.stats.ClassicCounter c, int num, java.io.PrintWriter pw)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$YearAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.io.RegExFileFilter</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>6</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>21</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.0</amc>
		<cc>
			<method name="public void _init_(java.util.regex.Pattern pattern)">0</method>
			<method name="public boolean accept(java.io.File file)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.TaggerFeature</name>
		<wmc>8</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>11</rfc>
		<lcom>4</lcom>
		<ca>2</ca>
		<ce>4</ce>
		<npm>7</npm>
		<lcom3>0.6</lcom3>
		<loc>121</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.46875</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.5</amc>
		<cc>
			<method name="public int getYTag()">1</method>
			<method name="public int len()">1</method>
			<method name="public int getX(int index)">1</method>
			<method name="protected void _init_(int start, int end, edu.stanford.nlp.tagger.maxent.FeatureKey key, int yTag, edu.stanford.nlp.tagger.maxent.TaggerExperiments domain)">0</method>
			<method name="public double ftilde()">2</method>
			<method name="public double getVal(int x, int y)">4</method>
			<method name="public int getY(int index)">1</method>
			<method name="public double getVal(int index)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.BasicCategoryTreeTransformer</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>11</rfc>
		<lcom>4</lcom>
		<ca>2</ca>
		<ce>6</ce>
		<npm>4</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>36</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.75</amc>
		<cc>
			<method name="public edu.stanford.nlp.ling.Label transformNonterminalLabel(edu.stanford.nlp.trees.Tree tree)">2</method>
			<method name="public edu.stanford.nlp.trees.Tree apply(edu.stanford.nlp.trees.Tree tree)">1</method>
			<method name="public volatile Object apply(Object x0)">1</method>
			<method name="public void _init_(edu.stanford.nlp.trees.TreebankLanguagePack tlp)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.IntervalTree$2</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>5</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>14</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.6666666666666665</amc>
		<cc>
			<method name="public edu.stanford.nlp.util.Interval apply(edu.stanford.nlp.util.HasInterval in)">1</method>
			<method name="void _init_()">0</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.sequences.SequenceSampler</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>11</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>62</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>30.0</amc>
		<cc>
			<method name="public int[] bestSequence(edu.stanford.nlp.sequences.SequenceModel ts)">3</method>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.IntervalTree$1</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>5</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>14</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.6666666666666665</amc>
		<cc>
			<method name="public edu.stanford.nlp.util.Interval apply(edu.stanford.nlp.util.HasInterval in)">1</method>
			<method name="void _init_()">0</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$12$1</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>6</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>0.75</lcom3>
		<loc>35</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.0</amc>
		<cc>
			<method name="public void advance()">2</method>
			<method name="void initialize()">1</method>
			<method name="void _init_(edu.stanford.nlp.trees.tregex.Relation$12, edu.stanford.nlp.trees.Tree)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$OriginalCharAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.common.SimpleTokenize</name>
		<wmc>9</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>30</rfc>
		<lcom>36</lcom>
		<ca>3</ca>
		<ce>0</ce>
		<npm>6</npm>
		<lcom3>2.0</lcom3>
		<loc>275</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3055555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>29.555555555555557</amc>
		<cc>
			<method name="private static int findNonWhitespace(String s, int start)">3</method>
			<method name="private static String normalizeQuotes(String str)">5</method>
			<method name="public void _init_()">0</method>
			<method name="private static int findWhitespace(String s, int start)">3</method>
			<method name="public static java.util.ArrayList tokenize(String line)">2</method>
			<method name="public static void main(String[] argv)">1</method>
			<method name="public static String quotify(String str)">3</method>
			<method name="public static java.util.ArrayList tokenize(String line, String separators)">2</method>
			<method name="public static java.util.ArrayList tokenizeWithQuotes(String line)">8</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$NumerizedTokensAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>9</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.ArabicUnknownWordModelTrainer</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>20</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>10</ce>
		<npm>4</npm>
		<lcom3>0.8571428571428571</lcom3>
		<loc>196</loc>
		<dam>0.42857142857142855</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.39285714285714285</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>46.25</amc>
		<cc>
			<method name="public void train(edu.stanford.nlp.ling.TaggedWord tw, int loc, double weight)">3</method>
			<method name="public void _init_()">0</method>
			<method name="public edu.stanford.nlp.parser.lexparser.UnknownWordModel finishTraining()">4</method>
			<method name="public void initializeTraining(edu.stanford.nlp.parser.lexparser.Options op, edu.stanford.nlp.parser.lexparser.Lexicon lex, edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex, double totalTrees)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.PennTreebankTokenizer</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>1</noc>
		<cbo>8</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>5</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>9</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.0</amc>
		<cc>
			<method name="public void _init_(java.io.Reader r)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.MentionMatcher</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract Boolean isCompatible(edu.stanford.nlp.dcoref.Mention, edu.stanford.nlp.dcoref.Mention)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$FreqAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.BiLexPCFGParser</name>
		<wmc>34</wmc>
		<dit>1</dit>
		<noc>1</noc>
		<cbo>40</cbo>
		<rfc>126</rfc>
		<lcom>299</lcom>
		<ca>3</ca>
		<ce>37</ce>
		<npm>9</npm>
		<lcom3>0.7974025974025973</lcom3>
		<loc>3032</loc>
		<dam>1.0</dam>
		<moa>20</moa>
		<mfa>0.0</mfa>
		<cam>0.13494809688581316</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>87.1470588235294</amc>
		<cc>
			<method name="protected void processItem(edu.stanford.nlp.parser.lexparser.Item item)">2</method>
			<method name="void _init_(edu.stanford.nlp.parser.lexparser.Scorer scorer, edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser fscorer, edu.stanford.nlp.parser.lexparser.ExhaustiveDependencyParser dparser, edu.stanford.nlp.parser.lexparser.BinaryGrammar bg, edu.stanford.nlp.parser.lexparser.UnaryGrammar ug, edu.stanford.nlp.parser.lexparser.DependencyGrammar dg, edu.stanford.nlp.parser.lexparser.Lexicon lex, edu.stanford.nlp.parser.lexparser.Options op, edu.stanford.nlp.parser.lexparser.GrammarProjection projection, edu.stanford.nlp.util.Index stateIndex, edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex)">0</method>
			<method name="protected void projectHooks(edu.stanford.nlp.parser.lexparser.Edge edge)">17</method>
			<method name="protected void relaxTempHook()">5</method>
			<method name="protected void projectUnaries(edu.stanford.nlp.parser.lexparser.Edge edge)">3</method>
			<method name="public java.util.List getKSampledParses(int k)">1</method>
			<method name="public edu.stanford.nlp.trees.Tree getBestParse()">1</method>
			<method name="protected void processHook(edu.stanford.nlp.parser.lexparser.Hook hook)">2</method>
			<method name="protected void processEdge(edu.stanford.nlp.parser.lexparser.Edge edge)">6</method>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.Scorer scorer, edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser fscorer, edu.stanford.nlp.parser.lexparser.ExhaustiveDependencyParser dparser, edu.stanford.nlp.parser.lexparser.BinaryGrammar bg, edu.stanford.nlp.parser.lexparser.UnaryGrammar ug, edu.stanford.nlp.parser.lexparser.DependencyGrammar dg, edu.stanford.nlp.parser.lexparser.Lexicon lex, edu.stanford.nlp.parser.lexparser.Options op, edu.stanford.nlp.util.Index stateIndex, edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex)">0</method>
			<method name="protected int project(int state)">1</method>
			<method name="protected java.util.List makeInitialItems(java.util.List wordList)">8</method>
			<method name="public java.util.List getKBestParses(int k)">1</method>
			<method name="protected void discoverHook(edu.stanford.nlp.parser.lexparser.Hook hook)">2</method>
			<method name="public boolean hasParse()">3</method>
			<method name="protected double buildOScore(edu.stanford.nlp.parser.lexparser.Hook hook)">3</method>
			<method name="protected void postMortem()">3</method>
			<method name="protected void combine(edu.stanford.nlp.parser.lexparser.Edge edge, edu.stanford.nlp.parser.lexparser.Hook hook)">2</method>
			<method name="protected edu.stanford.nlp.trees.Tree extractParse(edu.stanford.nlp.parser.lexparser.Edge edge)">6</method>
			<method name="protected void scoreDependencies()">1</method>
			<method name="protected void registerReal(edu.stanford.nlp.parser.lexparser.Edge real)">1</method>
			<method name="protected edu.stanford.nlp.parser.lexparser.Item makeInitialItem(int pos, int tag, int state, double iScore)">1</method>
			<method name="public boolean parse(java.util.List words)">22</method>
			<method name="public double getBestScore()">2</method>
			<method name="protected void relaxTempEdge()">4</method>
			<method name="protected void triggerHooks(edu.stanford.nlp.parser.lexparser.Edge edge)">9</method>
			<method name="public java.util.List getBestParses()">1</method>
			<method name="public java.util.List getKGoodParses(int k)">2</method>
			<method name="protected void setGoal(int length)">1</method>
			<method name="protected void discoverEdge(edu.stanford.nlp.parser.lexparser.Edge edge)">1</method>
			<method name="protected static boolean better(double x, double y)">2</method>
			<method name="protected void triggerAllHooks(edu.stanford.nlp.parser.lexparser.Edge edge)">7</method>
			<method name="protected void discoverItem(edu.stanford.nlp.parser.lexparser.Item item)">2</method>
			<method name="protected void initialize(java.util.List words)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceCharSeq</name>
		<wmc>12</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>12</cbo>
		<rfc>29</rfc>
		<lcom>0</lcom>
		<ca>8</ca>
		<ce>4</ce>
		<npm>12</npm>
		<lcom3>0.5151515151515151</lcom3>
		<loc>305</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>24.166666666666668</amc>
		<cc>
			<method name="public edu.stanford.nlp.trees.Span getTokenOffset()">1</method>
			<method name="public int getByteEnd()">1</method>
			<method name="public int getTokenStart()">2</method>
			<method name="public int getByteStart()">1</method>
			<method name="public String toXml(int offset)">1</method>
			<method name="public void match(java.util.Vector tokens)">1</method>
			<method name="public edu.stanford.nlp.trees.Span getByteOffset()">1</method>
			<method name="public void _init_(String text, int start, int end)">0</method>
			<method name="public int getTokenEnd()">2</method>
			<method name="public String getText()">1</method>
			<method name="public String toString()">1</method>
			<method name="public String toXml(String label, int offset)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.AssignableExpression</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>6</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract edu.stanford.nlp.ling.tokensregex.types.Expression assign(edu.stanford.nlp.ling.tokensregex.types.Expression)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.ExtractorFrenchAdvSuffix</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>9</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="boolean extractFeature(String cword)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.GUTimeAnnotator</name>
		<wmc>12</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>14</cbo>
		<rfc>84</rfc>
		<lcom>52</lcom>
		<ca>1</ca>
		<ce>13</ce>
		<npm>7</npm>
		<lcom3>0.8831168831168832</lcom3>
		<loc>848</loc>
		<dam>0.5714285714285714</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.22077922077922077</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>69.08333333333333</amc>
		<cc>
			<method name="private static int beginOffset(edu.stanford.nlp.util.CoreMap ann)">1</method>
			<method name="public void annotate(edu.stanford.nlp.util.CoreMap document)">1</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void annotate(edu.stanford.nlp.pipeline.Annotation annotation)">1</method>
			<method name="public void _init_(java.io.File gutimePath)">0</method>
			<method name="public java.util.Set requires()">1</method>
			<method name="public java.util.Set requirementsSatisfied()">1</method>
			<method name="private static org.w3c.dom.Element toInputXML(edu.stanford.nlp.util.CoreMap document)">8</method>
			<method name="public void _init_(String name, java.util.Properties props)">0</method>
			<method name="private static int endOffset(edu.stanford.nlp.util.CoreMap ann)">1</method>
			<method name="private static java.util.List toTimexCoreMaps(org.w3c.dom.Element docElem, edu.stanford.nlp.util.CoreMap originalDocument)">16</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.international.french.FrenchMorphoFeatureSpecification</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>35</rfc>
		<lcom>9</lcom>
		<ca>3</ca>
		<ce>3</ce>
		<npm>4</npm>
		<lcom3>0.6</lcom3>
		<loc>637</loc>
		<dam>0.25</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.36</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>104.5</amc>
		<cc>
			<method name="public static void main(String[] args)">3</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public edu.stanford.nlp.international.morph.MorphoFeatures strToFeatures(String spec)">50</method>
			<method name="public java.util.List getValues(edu.stanford.nlp.international.morph.MorphoFeatureSpecification$MorphoFeatureType feat)">4</method>
			<method name="private void addPhiFeatures(edu.stanford.nlp.international.morph.MorphoFeatures feats, String spec)">14</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.Tag$TagFactory</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>8</rfc>
		<lcom>10</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>5</npm>
		<lcom3>2.0</lcom3>
		<loc>28</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.6</amc>
		<cc>
			<method name="public edu.stanford.nlp.ling.Label newLabelFromString(String cat)">1</method>
			<method name="public edu.stanford.nlp.ling.Label newLabel(String cat, int options)">1</method>
			<method name="public edu.stanford.nlp.ling.Label newLabel(edu.stanford.nlp.ling.Label oldLabel)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public edu.stanford.nlp.ling.Label newLabel(String cat)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.GrammaticalRelation$DependentGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.pascal.TeXHyphenator$Node</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>0.0</lcom3>
		<loc>18</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.0</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="void _init_(edu.stanford.nlp.ie.pascal.TeXHyphenator$1 x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$PartialTime</name>
		<wmc>32</wmc>
		<dit>0</dit>
		<noc>4</noc>
		<cbo>42</cbo>
		<rfc>143</rfc>
		<lcom>0</lcom>
		<ca>22</ca>
		<ce>28</ce>
		<npm>26</npm>
		<lcom3>0.5483870967741935</lcom3>
		<loc>1681</loc>
		<dam>0.3333333333333333</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.19375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>51.4375</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.time.SUTime$Time t, org.joda.time.Partial p)">0</method>
			<method name="public volatile edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time x0, int x1)">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$PartialTime setTimeZone(org.joda.time.DateTimeZone tz)">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Range getRange(int flags, edu.stanford.nlp.time.SUTime$Duration inputGranularity)">6</method>
			<method name="public volatile edu.stanford.nlp.time.SUTime$Temporal setTimeZone(org.joda.time.DateTimeZone x0)">1</method>
			<method name="public volatile edu.stanford.nlp.time.SUTime$Time reduceGranularityTo(edu.stanford.nlp.time.SUTime$Duration x0)">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Time add(edu.stanford.nlp.time.SUTime$Duration offset)">20</method>
			<method name="protected boolean appendTimeFormats(org.joda.time.format.DateTimeFormatterBuilder builder, int flags)">12</method>
			<method name="protected boolean appendDateFormats(org.joda.time.format.DateTimeFormatterBuilder builder, int flags)">42</method>
			<method name="public edu.stanford.nlp.time.SUTime$Duration getPeriod()">4</method>
			<method name="public static edu.stanford.nlp.util.Pair getCompatible(edu.stanford.nlp.time.SUTime$PartialTime t1, edu.stanford.nlp.time.SUTime$PartialTime t2)">14</method>
			<method name="public void _init_(edu.stanford.nlp.time.SUTime$PartialTime pt)">0</method>
			<method name="protected org.joda.time.format.DateTimeFormatter getFormatter(int flags)">3</method>
			<method name="public org.joda.time.Partial getJodaTimePartial()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(org.joda.time.Partial base)">0</method>
			<method name="public edu.stanford.nlp.time.SUTime$PartialTime padMoreSpecificFields(edu.stanford.nlp.time.SUTime$Duration granularity)">2</method>
			<method name="public edu.stanford.nlp.time.SUTime$Time intersect(edu.stanford.nlp.time.SUTime$Time t)">16</method>
			<method name="public edu.stanford.nlp.time.SUTime$PartialTime reduceGranularityTo(edu.stanford.nlp.time.SUTime$Duration granularity)">3</method>
			<method name="public boolean hasTime()">4</method>
			<method name="public boolean isCompatible(edu.stanford.nlp.time.SUTime$PartialTime time)">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Duration getDuration()">2</method>
			<method name="public boolean isGrounded()">1</method>
			<method name="protected edu.stanford.nlp.time.SUTime$PartialTime addUnsupported(org.joda.time.Period p, int scalar)">1</method>
			<method name="public String toFormattedString(int flags)">4</method>
			<method name="public java.util.List toList()">6</method>
			<method name="public void _init_(edu.stanford.nlp.time.SUTime$StandardTemporalType temporalType, org.joda.time.Partial base)">0</method>
			<method name="public edu.stanford.nlp.time.SUTime$TimexType getTimexType()">2</method>
			<method name="protected void withStandardFields()">6</method>
			<method name="public edu.stanford.nlp.time.SUTime$Time resolve(edu.stanford.nlp.time.SUTime$Time ref, int flags)">21</method>
			<method name="protected edu.stanford.nlp.time.SUTime$PartialTime addSupported(org.joda.time.Period p, int scalar)">1</method>
			<method name="public org.joda.time.Instant getJodaTimeInstant()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor</name>
		<wmc>25</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>24</cbo>
		<rfc>100</rfc>
		<lcom>220</lcom>
		<ca>6</ca>
		<ce>20</ce>
		<npm>19</npm>
		<lcom3>0.6333333333333333</lcom3>
		<loc>917</loc>
		<dam>0.2</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.17846153846153845</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>35.48</amc>
		<cc>
			<method name="public void appendRules(java.util.List rules)">9</method>
			<method name="public java.util.List extractCoreMaps(edu.stanford.nlp.util.CoreMap annotation)">1</method>
			<method name="private void cleanupTags(edu.stanford.nlp.util.CoreMap cm)">1</method>
			<method name="public edu.stanford.nlp.util.Pair applyCompositeRule(edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$ExtractRule compositeExtractRule, java.util.List merged, java.util.List matchedExpressions, int limit)">5</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.Env getEnv()">1</method>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.Env env)">0</method>
			<method name="private java.util.List filterInvalidExpressions(edu.stanford.nlp.util.Filter filterRule, java.util.List expressions)">6</method>
			<method name="public java.util.List flatten(java.util.List cms, Class key)">3</method>
			<method name="public void setLogger(java.util.logging.Logger logger)">1</method>
			<method name="private void annotateExpressions(java.util.List chunks, java.util.List expressions)">2</method>
			<method name="public static edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor createExtractorFromFile(edu.stanford.nlp.ling.tokensregex.Env env, String filename)">1</method>
			<method name="public static edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor createExtractorFromString(edu.stanford.nlp.ling.tokensregex.Env env, String str)">1</method>
			<method name="private void cleanupTags(java.util.Collection objs, java.util.Map cleaned)">4</method>
			<method name="public java.util.List extractCoreMapsToList(java.util.List res, edu.stanford.nlp.util.CoreMap annotation)">2</method>
			<method name="public java.util.List extractExpressions(edu.stanford.nlp.util.CoreMap annotation)">6</method>
			<method name="public void setExtractRules(edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$ExtractRule basicExtractRule, edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$ExtractRule compositeExtractRule, edu.stanford.nlp.util.Filter filterRule)">1</method>
			<method name="public java.util.List extractCoreMapsMergedWithTokens(edu.stanford.nlp.util.CoreMap annotation)">2</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Value getValue(String varname)">2</method>
			<method name="public java.util.List flatten(java.util.List cms)">1</method>
			<method name="public void _init_()">0</method>
			<method name="private void annotateExpressions(edu.stanford.nlp.util.CoreMap annotation, java.util.List expressions)">2</method>
			<method name="private void cleanupTags(edu.stanford.nlp.util.CoreMap cm, java.util.Map cleaned)">4</method>
			<method name="public static transient edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor createExtractorFromFiles(edu.stanford.nlp.ling.tokensregex.Env env, String[] filenames)">1</method>
			<method name="public static edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor createExtractorFromFiles(edu.stanford.nlp.ling.tokensregex.Env env, java.util.List filenames)">1</method>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.Env env, java.util.List rules)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$20</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>7</rfc>
		<lcom>3</lcom>
		<ca>2</ca>
		<ce>5</ce>
		<npm>0</npm>
		<lcom3>1.5</lcom3>
		<loc>23</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.333333333333333</amc>
		<cc>
			<method name="java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">1</method>
			<method name="boolean satisfies(edu.stanford.nlp.trees.Tree t1, edu.stanford.nlp.trees.Tree t2, edu.stanford.nlp.trees.Tree root, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">1</method>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$21</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>7</rfc>
		<lcom>3</lcom>
		<ca>2</ca>
		<ce>5</ce>
		<npm>0</npm>
		<lcom3>1.5</lcom3>
		<loc>29</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.333333333333334</amc>
		<cc>
			<method name="java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">1</method>
			<method name="boolean satisfies(edu.stanford.nlp.trees.Tree t1, edu.stanford.nlp.trees.Tree t2, edu.stanford.nlp.trees.Tree root, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">3</method>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$22</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>7</rfc>
		<lcom>3</lcom>
		<ca>2</ca>
		<ce>5</ce>
		<npm>0</npm>
		<lcom3>1.5</lcom3>
		<loc>28</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.0</amc>
		<cc>
			<method name="java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">1</method>
			<method name="boolean satisfies(edu.stanford.nlp.trees.Tree t1, edu.stanford.nlp.trees.Tree t2, edu.stanford.nlp.trees.Tree root, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">3</method>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar$EndHead</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>6</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalRelations$ClauseModifierGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.common.TaggerConstants</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>6</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="private void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$LEndAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.fsm.TransducerGraph$Arc</name>
		<wmc>15</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>22</rfc>
		<lcom>29</lcom>
		<ca>9</ca>
		<ce>0</ce>
		<npm>11</npm>
		<lcom3>0.4642857142857143</lcom3>
		<loc>184</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5333333333333333</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>11.0</amc>
		<cc>
			<method name="public void setSourceNode(Object o)">1</method>
			<method name="public boolean equals(Object o)">12</method>
			<method name="protected void _init_(Object sourceNode, Object targetNode, Object input, Object output)">0</method>
			<method name="public void setTargetNode(Object o)">1</method>
			<method name="public Object getTargetNode()">1</method>
			<method name="public Object getSourceNode()">1</method>
			<method name="public void setInput(Object o)">1</method>
			<method name="protected void _init_(edu.stanford.nlp.fsm.TransducerGraph$Arc a)">0</method>
			<method name="public int hashCode()">1</method>
			<method name="public Object getOutput()">1</method>
			<method name="protected void _init_(Object sourceNode, Object targetNode)">0</method>
			<method name="public Object getInput()">1</method>
			<method name="public String toString()">1</method>
			<method name="protected void _init_(Object sourceNode, Object targetNode, Object input)">0</method>
			<method name="public void setOutput(Object o)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.SentimentAnnotator</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>27</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>9</ce>
		<npm>4</npm>
		<lcom3>0.9166666666666666</lcom3>
		<loc>116</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.4375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>27.0</amc>
		<cc>
			<method name="public void annotate(edu.stanford.nlp.pipeline.Annotation annotation)">2</method>
			<method name="public java.util.Set requires()">1</method>
			<method name="public java.util.Set requirementsSatisfied()">1</method>
			<method name="public void _init_(String name, java.util.Properties props)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.TimeExpression$ChildrenAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>9</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.Interner</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>6</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>26</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.5</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="public Object intern(Object o)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.io.TaggedFileRecord$1</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>28</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>26.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.CorefScorer$ScoreType</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>4</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.9166666666666666</lcom3>
		<loc>56</loc>
		<dam>0.25</dam>
		<moa>4</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>12.0</amc>
		<cc>
			<method name="public static edu.stanford.nlp.dcoref.CorefScorer$ScoreType valueOf(String name)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static edu.stanford.nlp.dcoref.CorefScorer$ScoreType[] values()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.FrenchTreebankParserParams$SimpleStringFunction</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>9</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>4</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>32</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.5</amc>
		<cc>
			<method name="public void _init_(String annotationMark)">0</method>
			<method name="public String apply(edu.stanford.nlp.trees.tregex.TregexMatcher tregexMatcher)">1</method>
			<method name="public String toString()">1</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.TwoDimensionalCounter</name>
		<wmc>43</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>15</cbo>
		<rfc>102</rfc>
		<lcom>487</lcom>
		<ca>6</ca>
		<ce>10</ce>
		<npm>43</npm>
		<lcom3>0.5753968253968255</lcom3>
		<loc>1007</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.14147286821705427</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>22.27906976744186</amc>
		<cc>
			<method name="public edu.stanford.nlp.stats.ClassicCounter getCounter(Object o)">2</method>
			<method name="public edu.stanford.nlp.stats.ClassicCounter flatten()">2</method>
			<method name="public boolean equals(Object o)">3</method>
			<method name="public edu.stanford.nlp.stats.Counter sumInnerCounter()">2</method>
			<method name="public double totalCount(Object k1)">1</method>
			<method name="public void addAll(edu.stanford.nlp.stats.TwoDimensionalCounterInterface c)">2</method>
			<method name="public java.util.Set secondKeySet()">2</method>
			<method name="public void incrementCount(Object o1, Object o2, double count)">1</method>
			<method name="public boolean containsKey(Object o1, Object o2)">2</method>
			<method name="public String toCSVString(java.text.NumberFormat nf)">4</method>
			<method name="public java.util.Set entrySet()">1</method>
			<method name="public double getCount(Object o1, Object o2)">3</method>
			<method name="public void subtractAll(edu.stanford.nlp.stats.TwoDimensionalCounterInterface c, boolean removeKeys)">3</method>
			<method name="public int size()">2</method>
			<method name="public String toMatrixString(int cellSize)">1</method>
			<method name="public void clean()">3</method>
			<method name="public void decrementCount(Object o1, Object o2)">1</method>
			<method name="public void decrementCount(Object o1, Object o2, double count)">1</method>
			<method name="public static edu.stanford.nlp.stats.TwoDimensionalCounter reverseIndexOrder(edu.stanford.nlp.stats.TwoDimensionalCounter cc)">2</method>
			<method name="public String toString()">2</method>
			<method name="public volatile edu.stanford.nlp.stats.Counter getCounter(Object x0)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public boolean isEmpty()">1</method>
			<method name="public void incrementCount(Object o1, Object o2)">1</method>
			<method name="public double[][] toMatrix(java.util.List firstKeys, java.util.List secondKeys)">3</method>
			<method name="public edu.stanford.nlp.util.MapFactory getInnerMapFactory()">1</method>
			<method name="public double remove(Object o1, Object o2)">2</method>
			<method name="public void setCount(Object o1, Object o2, double count)">1</method>
			<method name="public edu.stanford.nlp.stats.ClassicCounter setCounter(Object o, edu.stanford.nlp.stats.Counter c)">2</method>
			<method name="public void recomputeTotal()">2</method>
			<method name="public double totalCount()">1</method>
			<method name="public void addAll(Object key, edu.stanford.nlp.stats.Counter c)">1</method>
			<method name="public int sizeOuterMap()">1</method>
			<method name="public double defaultReturnValue()">1</method>
			<method name="public void defaultReturnValue(double rv)">1</method>
			<method name="public int hashCode()">1</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="public void subtractAll(Object key, edu.stanford.nlp.stats.Counter c)">1</method>
			<method name="public edu.stanford.nlp.util.MapFactory getOuterMapFactory()">1</method>
			<method name="public void remove(Object key)">2</method>
			<method name="public void _init_(edu.stanford.nlp.util.MapFactory outerFactory, edu.stanford.nlp.util.MapFactory innerFactory)">0</method>
			<method name="public void removeZeroCounts()">2</method>
			<method name="public java.util.Set firstKeySet()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.Expressions$NotExpression</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>14</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.0</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.types.Expression expr)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$Heads</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>16</rfc>
		<lcom>0</lcom>
		<ca>4</ca>
		<ce>6</ce>
		<npm>2</npm>
		<lcom3>0.75</lcom3>
		<loc>116</loc>
		<dam>0.5</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.44</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>21.8</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.trees.HeadFinder hf)">0</method>
			<method name="public boolean equals(Object o)">7</method>
			<method name="public int hashCode()">2</method>
			<method name="java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">1</method>
			<method name="boolean satisfies(edu.stanford.nlp.trees.Tree t1, edu.stanford.nlp.trees.Tree t2, edu.stanford.nlp.trees.Tree root, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">6</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.BinaryHeapPriorityQueue$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$MonthAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$24</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>7</rfc>
		<lcom>3</lcom>
		<ca>2</ca>
		<ce>5</ce>
		<npm>0</npm>
		<lcom3>1.5</lcom3>
		<loc>43</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.0</amc>
		<cc>
			<method name="java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">1</method>
			<method name="boolean satisfies(edu.stanford.nlp.trees.Tree t1, edu.stanford.nlp.trees.Tree t2, edu.stanford.nlp.trees.Tree root, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">4</method>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.concurrent.SynchronizedInterner</name>
		<wmc>11</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>24</rfc>
		<lcom>13</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>10</npm>
		<lcom3>0.55</lcom3>
		<loc>225</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.28</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.09090909090909</amc>
		<cc>
			<method name="public int size()">1</method>
			<method name="public void clear()">1</method>
			<method name="public static edu.stanford.nlp.util.concurrent.SynchronizedInterner setGlobal(edu.stanford.nlp.util.Interner delegate)">1</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void _init_(edu.stanford.nlp.util.Interner delegate, Object mutex)">0</method>
			<method name="public static edu.stanford.nlp.util.concurrent.SynchronizedInterner getGlobal()">1</method>
			<method name="public void _init_(edu.stanford.nlp.util.Interner delegate)">0</method>
			<method name="public Object intern(Object o)">1</method>
			<method name="public java.util.Set internAll(java.util.Set s)">1</method>
			<method name="public static Object globalIntern(Object o)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$23</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>7</rfc>
		<lcom>3</lcom>
		<ca>2</ca>
		<ce>5</ce>
		<npm>0</npm>
		<lcom3>1.5</lcom3>
		<loc>42</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.666666666666666</amc>
		<cc>
			<method name="java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">1</method>
			<method name="boolean satisfies(edu.stanford.nlp.trees.Tree t1, edu.stanford.nlp.trees.Tree t2, edu.stanford.nlp.trees.Tree root, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">4</method>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.TestTagProjection</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>8</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>48</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>22.5</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="public String project(String tagStr)">5</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$10</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>7</rfc>
		<lcom>3</lcom>
		<ca>2</ca>
		<ce>6</ce>
		<npm>0</npm>
		<lcom3>1.5</lcom3>
		<loc>27</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.666666666666667</amc>
		<cc>
			<method name="java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">1</method>
			<method name="boolean satisfies(edu.stanford.nlp.trees.Tree t1, edu.stanford.nlp.trees.Tree t2, edu.stanford.nlp.trees.Tree root, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">2</method>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$11</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>7</rfc>
		<lcom>3</lcom>
		<ca>2</ca>
		<ce>6</ce>
		<npm>0</npm>
		<lcom3>1.5</lcom3>
		<loc>27</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.666666666666667</amc>
		<cc>
			<method name="java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">1</method>
			<method name="boolean satisfies(edu.stanford.nlp.trees.Tree t1, edu.stanford.nlp.trees.Tree t2, edu.stanford.nlp.trees.Tree root, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">2</method>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CoreMapExtractRule</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>8</rfc>
		<lcom>1</lcom>
		<ca>3</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>47</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.47619047619047616</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.666666666666666</amc>
		<cc>
			<method name="public volatile boolean extract(Object x0, java.util.List x1)">1</method>
			<method name="public boolean extract(edu.stanford.nlp.util.CoreMap cm, java.util.List out)">1</method>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.Env env, Class annotationField, edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$ExtractRule extractRule)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.UnnamedConcreteDependency</name>
		<wmc>11</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>29</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>6</ce>
		<npm>11</npm>
		<lcom3>0.5666666666666667</lcom3>
		<loc>234</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3090909090909091</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>20.0</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.ling.Label regent, edu.stanford.nlp.ling.Label dependent)">0</method>
			<method name="public int getDependentIndex()">1</method>
			<method name="public String toString(String format)">3</method>
			<method name="public boolean equals(Object o)">5</method>
			<method name="public int hashCode()">1</method>
			<method name="public edu.stanford.nlp.trees.DependencyFactory dependencyFactory()">1</method>
			<method name="public void _init_(String regent, int regentIndex, String dependent, int dependentIndex)">0</method>
			<method name="public String toString()">1</method>
			<method name="public void _init_(edu.stanford.nlp.ling.Label regent, int regentIndex, edu.stanford.nlp.ling.Label dependent, int dependentIndex)">0</method>
			<method name="public static edu.stanford.nlp.trees.DependencyFactory factory()">1</method>
			<method name="public int getGovernorIndex()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.ExtractorDistsim</name>
		<wmc>7</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>24</rfc>
		<lcom>17</lcom>
		<ca>2</ca>
		<ce>6</ce>
		<npm>2</npm>
		<lcom3>0.8333333333333334</lcom3>
		<loc>122</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.0</amc>
		<cc>
			<method name="String extract(edu.stanford.nlp.tagger.maxent.History h, edu.stanford.nlp.tagger.maxent.PairsHolder pH)">2</method>
			<method name="private static java.util.Map initLexicon(String path)">3</method>
			<method name="public boolean isLocal()">2</method>
			<method name="static void _clinit_()">0</method>
			<method name="void _init_(String distSimPath, int position)">0</method>
			<method name="static java.util.Map access$000(String x0)">1</method>
			<method name="public boolean isDynamic()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.SynchronizedTreeTransformer</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>26</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.5</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.trees.TreeTransformer threadUnsafe)">0</method>
			<method name="public edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree t)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.AbstractCounter</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>3</noc>
		<cbo>6</cbo>
		<rfc>12</rfc>
		<lcom>21</lcom>
		<ca>3</ca>
		<ce>3</ce>
		<npm>7</npm>
		<lcom3>2.0</lcom3>
		<loc>58</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5714285714285714</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.285714285714286</amc>
		<cc>
			<method name="public double decrementCount(Object key)">1</method>
			<method name="public double incrementCount(Object key)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public double logIncrementCount(Object key, double amount)">1</method>
			<method name="public void addAll(edu.stanford.nlp.stats.Counter counter)">1</method>
			<method name="public double incrementCount(Object key, double amount)">1</method>
			<method name="public double decrementCount(Object key, double amount)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.crf.CRFBiasedClassifier$CRFBiasedClassifierOptimizer</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>7</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>0.33333333333333326</lcom3>
		<loc>35</loc>
		<dam>0.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.4666666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.666666666666666</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.ie.crf.CRFBiasedClassifier, edu.stanford.nlp.ie.crf.CRFBiasedClassifier c, edu.stanford.nlp.util.Function e)">0</method>
			<method name="public Double apply(Double w)">1</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.CoreMapNodePattern$SequenceRegexPattern</name>
		<wmc>8</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>16</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>4</ce>
		<npm>8</npm>
		<lcom3>0.0</lcom3>
		<loc>63</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.75</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.SequencePattern pattern)">0</method>
			<method name="public volatile Object matchWithResult(Object x0)">1</method>
			<method name="public Object matchWithResult(java.util.List list)">2</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.SequenceMatcher matcher(java.util.List list)">1</method>
			<method name="public volatile boolean match(Object x0)">1</method>
			<method name="public String toString()">1</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.SequencePattern getPattern()">1</method>
			<method name="public boolean match(java.util.List list)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.AnnotationPipeline$2$1</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>10</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>4</npm>
		<lcom3>0.5</lcom3>
		<loc>46</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4666666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.8</amc>
		<cc>
			<method name="public Runnable next()">2</method>
			<method name="void _init_(edu.stanford.nlp.pipeline.AnnotationPipeline$2, java.util.Iterator)">0</method>
			<method name="public boolean hasNext()">1</method>
			<method name="public void remove()">1</method>
			<method name="public volatile Object next()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.JavaUtilLoggingAdaptor</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>22</rfc>
		<lcom>3</lcom>
		<ca>2</ca>
		<ce>6</ce>
		<npm>2</npm>
		<lcom3>0.5</lcom3>
		<loc>204</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>66.66666666666667</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public static void main(String[] args)">3</method>
			<method name="public static void adapt()">6</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.common.StringDictionary$IndexAndCount</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>12</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.0</amc>
		<cc>
			<method name="void _init_(int i, int c)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$MorphoPersAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.CompositeTreeTransformer</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>17</rfc>
		<lcom>0</lcom>
		<ca>6</ca>
		<ce>2</ce>
		<npm>5</npm>
		<lcom3>0.0</lcom3>
		<loc>61</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.0</amc>
		<cc>
			<method name="public void addTransformer(edu.stanford.nlp.trees.TreeTransformer tt)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(java.util.List tt)">0</method>
			<method name="public edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree t)">2</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.NullGrammarProjection</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>7</rfc>
		<lcom>3</lcom>
		<ca>4</ca>
		<ce>3</ce>
		<npm>5</npm>
		<lcom3>0.6</lcom3>
		<loc>31</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.8333333333333335</amc>
		<cc>
			<method name="public edu.stanford.nlp.parser.lexparser.UnaryGrammar targetUG()">1</method>
			<method name="public edu.stanford.nlp.parser.lexparser.BinaryGrammar sourceBG()">1</method>
			<method name="public edu.stanford.nlp.parser.lexparser.UnaryGrammar sourceUG()">1</method>
			<method name="public edu.stanford.nlp.parser.lexparser.BinaryGrammar targetBG()">1</method>
			<method name="public int project(int state)">1</method>
			<method name="void _init_(edu.stanford.nlp.parser.lexparser.BinaryGrammar bg, edu.stanford.nlp.parser.lexparser.UnaryGrammar ug)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Beam</name>
		<wmc>9</wmc>
		<dit>3</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>23</rfc>
		<lcom>22</lcom>
		<ca>2</ca>
		<ce>4</ce>
		<npm>9</npm>
		<lcom3>0.5</lcom3>
		<loc>92</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.76</mfa>
		<cam>0.3888888888888889</cam>
		<ic>2</ic>
		<cbm>10</cbm>
		<amc>9.0</amc>
		<cc>
			<method name="public int size()">1</method>
			<method name="public int capacity()">1</method>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(int maxBeamSize)">0</method>
			<method name="public void _init_(int maxBeamSize, java.util.Comparator cmp)">0</method>
			<method name="public java.util.List asSortedList()">2</method>
			<method name="public boolean remove(Object o)">1</method>
			<method name="public boolean add(Object o)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.fsm.TransducerGraph</name>
		<wmc>50</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>16</cbo>
		<rfc>121</rfc>
		<lcom>1095</lcom>
		<ca>7</ca>
		<ce>9</ce>
		<npm>45</npm>
		<lcom3>0.7974882260596547</lcom3>
		<loc>1696</loc>
		<dam>0.9230769230769231</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.1457725947521866</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>32.66</amc>
		<cc>
			<method name="public Object getStartNode()">1</method>
			<method name="public void _init_(java.util.Set newArcs, Object startNode, java.util.Set endNodes, edu.stanford.nlp.fsm.TransducerGraph$ArcProcessor arcProcessor, edu.stanford.nlp.fsm.TransducerGraph$NodeProcessor nodeProcessor)">0</method>
			<method name="public static void printPathOutputs(java.util.List pathList, edu.stanford.nlp.fsm.TransducerGraph graph, boolean printPaths)">3</method>
			<method name="static void _clinit_()">0</method>
			<method name="public java.util.Map samplePathsFromGraph(int numPaths)">2</method>
			<method name="public boolean addArc(Object source, Object target, Object input, Object output)">1</method>
			<method name="public java.util.Set getArcsBySource(Object node)">1</method>
			<method name="public void _init_(edu.stanford.nlp.fsm.TransducerGraph other, edu.stanford.nlp.fsm.TransducerGraph$ArcProcessor arcProcessor)">0</method>
			<method name="public boolean removeArc(edu.stanford.nlp.fsm.TransducerGraph$Arc a)">10</method>
			<method name="protected java.util.Set ensure(java.util.Set s)">2</method>
			<method name="public java.util.Set getArcs()">1</method>
			<method name="public static boolean testGraphPaths(edu.stanford.nlp.fsm.TransducerGraph sourceGraph, edu.stanford.nlp.fsm.TransducerGraph testGraph, int numPaths)">3</method>
			<method name="public void setDeterminism(boolean checkDeterminism)">1</method>
			<method name="public double getOutputOfPathInGraph(java.util.List path)">3</method>
			<method name="public void setEndNode(Object o)">1</method>
			<method name="public boolean canAddPath(java.util.List path)">5</method>
			<method name="public java.util.Set getEndNodes()">1</method>
			<method name="public java.util.Set getInputs()">1</method>
			<method name="public java.util.List sampleUniformPathFromGraph()">2</method>
			<method name="public static edu.stanford.nlp.fsm.TransducerGraph createGraphFromPaths(edu.stanford.nlp.stats.ClassicCounter pathCounter, int markovOrder)">2</method>
			<method name="public double inFlow(Object node)">1</method>
			<method name="public java.util.List getPathOutputs(java.util.List pathList)">2</method>
			<method name="public void _init_()">0</method>
			<method name="private double sumOutputs(java.util.Set arcs)">2</method>
			<method name="public java.util.Set getArcsByTarget(Object node)">1</method>
			<method name="public void depthFirstSearch(boolean forward, StringBuffer b)">3</method>
			<method name="public boolean canAddArc(Object source, Object target, Object input, Object output)">3</method>
			<method name="public java.util.Set getArcsByTargetAndInput(Object node, Object input)">1</method>
			<method name="public java.util.Set getArcsByInput(Object node)">1</method>
			<method name="public static edu.stanford.nlp.fsm.TransducerGraph createGraphFromPaths(java.util.List paths, int markovOrder)">2</method>
			<method name="public java.util.Set getNodes()">1</method>
			<method name="private void depthFirstSearchHelper(Object node, java.util.Set marked, int level, boolean forward, StringBuffer b)">8</method>
			<method name="public void _init_(java.util.Set newArcs)">0</method>
			<method name="public void _init_(edu.stanford.nlp.fsm.TransducerGraph other, edu.stanford.nlp.fsm.TransducerGraph$NodeProcessor nodeProcessor)">0</method>
			<method name="public void setDotWeightingInverted(boolean inverted)">1</method>
			<method name="public volatile Object clone()">1</method>
			<method name="public edu.stanford.nlp.fsm.TransducerGraph$Arc getArc(Object source, Object target)">3</method>
			<method name="public double getSourceTotal(Object node)">3</method>
			<method name="public String asDOTString()">11</method>
			<method name="public double outFlow(Object node)">1</method>
			<method name="public static void addOnePathToGraph(java.util.List path, double count, int markovOrder, edu.stanford.nlp.fsm.TransducerGraph graph)">7</method>
			<method name="public String toString()">1</method>
			<method name="public edu.stanford.nlp.fsm.TransducerGraph clone()">1</method>
			<method name="protected boolean addArc(edu.stanford.nlp.fsm.TransducerGraph$Arc a)">7</method>
			<method name="public static edu.stanford.nlp.fsm.TransducerGraph createRandomGraph(int numPaths, int pathLengthMean, double pathLengthVariance, int numInputs, java.util.List pathList)">3</method>
			<method name="public void setStartNode(Object o)">1</method>
			<method name="public static java.util.List createRandomPaths(int numPaths, int pathLengthMean, double pathLengthVariance, int numInputs)">3</method>
			<method name="public edu.stanford.nlp.fsm.TransducerGraph$Arc getArcBySourceAndInput(Object node, Object input)">1</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="public void _init_(edu.stanford.nlp.fsm.TransducerGraph other)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.MultiWordStringMatcher$1</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>42</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>40.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$19</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>7</rfc>
		<lcom>3</lcom>
		<ca>2</ca>
		<ce>5</ce>
		<npm>0</npm>
		<lcom3>1.5</lcom3>
		<loc>63</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.666666666666668</amc>
		<cc>
			<method name="java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">1</method>
			<method name="boolean satisfies(edu.stanford.nlp.trees.Tree t1, edu.stanford.nlp.trees.Tree t2, edu.stanford.nlp.trees.Tree root, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">7</method>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$18</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>7</rfc>
		<lcom>3</lcom>
		<ca>2</ca>
		<ce>5</ce>
		<npm>0</npm>
		<lcom3>1.5</lcom3>
		<loc>23</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.333333333333333</amc>
		<cc>
			<method name="java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">1</method>
			<method name="boolean satisfies(edu.stanford.nlp.trees.Tree t1, edu.stanford.nlp.trees.Tree t2, edu.stanford.nlp.trees.Tree root, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">1</method>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$StringPatternExtractRule</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>19</rfc>
		<lcom>16</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>8</npm>
		<lcom3>0.0</lcom3>
		<loc>120</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.390625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.75</amc>
		<cc>
			<method name="public volatile boolean extract(Object x0, java.util.List x1)">1</method>
			<method name="public void _init_(java.util.regex.Pattern pattern, edu.stanford.nlp.util.Function extractor)">0</method>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.Env env, String regex, edu.stanford.nlp.util.Function extractor, boolean addWordBoundaries)">0</method>
			<method name="public void _init_(String regex, edu.stanford.nlp.util.Function extractor)">0</method>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.Env env, String regex, edu.stanford.nlp.util.Function extractor)">0</method>
			<method name="public volatile Object apply(Object x0)">1</method>
			<method name="public Object apply(String str)">3</method>
			<method name="public boolean extract(String str, java.util.List out)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$17</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>7</rfc>
		<lcom>3</lcom>
		<ca>2</ca>
		<ce>5</ce>
		<npm>0</npm>
		<lcom3>1.5</lcom3>
		<loc>56</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>17.333333333333332</amc>
		<cc>
			<method name="java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">1</method>
			<method name="boolean satisfies(edu.stanford.nlp.trees.Tree t1, edu.stanford.nlp.trees.Tree t2, edu.stanford.nlp.trees.Tree root, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">6</method>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.SimpleConstituentFactory</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>5</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>18</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.0</amc>
		<cc>
			<method name="public edu.stanford.nlp.trees.Constituent newConstituent(int start, int end, edu.stanford.nlp.ling.Label label, double score)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public edu.stanford.nlp.trees.Constituent newConstituent(int start, int end)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$16</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>8</rfc>
		<lcom>3</lcom>
		<ca>2</ca>
		<ce>5</ce>
		<npm>0</npm>
		<lcom3>1.5</lcom3>
		<loc>35</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.333333333333334</amc>
		<cc>
			<method name="java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">1</method>
			<method name="boolean satisfies(edu.stanford.nlp.trees.Tree t1, edu.stanford.nlp.trees.Tree t2, edu.stanford.nlp.trees.Tree root, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">3</method>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.ReflectionLoading</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>21</cbo>
		<rfc>9</rfc>
		<lcom>1</lcom>
		<ca>19</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>26</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.0</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public static transient Object loadByReflection(String className, Object[] arguments)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$15</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>7</rfc>
		<lcom>3</lcom>
		<ca>2</ca>
		<ce>5</ce>
		<npm>0</npm>
		<lcom3>1.5</lcom3>
		<loc>23</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.333333333333333</amc>
		<cc>
			<method name="java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">1</method>
			<method name="boolean satisfies(edu.stanford.nlp.trees.Tree t1, edu.stanford.nlp.trees.Tree t2, edu.stanford.nlp.trees.Tree root, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">1</method>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$MentionsAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>9</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$DocIDAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>1</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$14</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>7</rfc>
		<lcom>3</lcom>
		<ca>2</ca>
		<ce>5</ce>
		<npm>0</npm>
		<lcom3>1.5</lcom3>
		<loc>23</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.333333333333333</amc>
		<cc>
			<method name="java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">1</method>
			<method name="boolean satisfies(edu.stanford.nlp.trees.Tree t1, edu.stanford.nlp.trees.Tree t2, edu.stanford.nlp.trees.Tree root, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">1</method>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$13</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>7</rfc>
		<lcom>3</lcom>
		<ca>2</ca>
		<ce>5</ce>
		<npm>0</npm>
		<lcom3>1.5</lcom3>
		<loc>43</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.0</amc>
		<cc>
			<method name="java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">1</method>
			<method name="boolean satisfies(edu.stanford.nlp.trees.Tree t1, edu.stanford.nlp.trees.Tree t2, edu.stanford.nlp.trees.Tree root, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">4</method>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.ClassicCounter$ClassicCounterFactory</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>5</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>2</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>25</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.75</amc>
		<cc>
			<method name="private void _init_(edu.stanford.nlp.util.MapFactory mf)">0</method>
			<method name="void _init_(edu.stanford.nlp.util.MapFactory x0, edu.stanford.nlp.stats.ClassicCounter$1 x1)">0</method>
			<method name="public edu.stanford.nlp.stats.Counter create()">1</method>
			<method name="public volatile Object create()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$12</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>7</rfc>
		<lcom>3</lcom>
		<ca>2</ca>
		<ce>5</ce>
		<npm>0</npm>
		<lcom3>1.5</lcom3>
		<loc>40</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.0</amc>
		<cc>
			<method name="java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">1</method>
			<method name="boolean satisfies(edu.stanford.nlp.trees.Tree t1, edu.stanford.nlp.trees.Tree t2, edu.stanford.nlp.trees.Tree root, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">4</method>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.crf.CliquePotentialFunction</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>15</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>15</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract double computeCliquePotential(int, int, int[], double[], int)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.RepeatedRecordHandler</name>
		<wmc>10</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>12</cbo>
		<rfc>46</rfc>
		<lcom>5</lcom>
		<ca>2</ca>
		<ce>10</ce>
		<npm>5</npm>
		<lcom3>0.5555555555555556</lcom3>
		<loc>406</loc>
		<dam>0.4</dam>
		<moa>4</moa>
		<mfa>0.0</mfa>
		<cam>0.3055555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>39.1</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.util.logging.RepeatedRecordHandler$RepeatSemantics repeatSemantics)">0</method>
			<method name="private boolean recordVerdict(edu.stanford.nlp.util.logging.Redwood$Record r, boolean isRepeat, boolean shouldPrint, java.util.List willReturn)">5</method>
			<method name="static void _clinit_()">0</method>
			<method name="private boolean internalHandle(edu.stanford.nlp.util.logging.Redwood$Record record, java.util.List willReturn)">6</method>
			<method name="private void flushParents(java.util.List willReturn)">3</method>
			<method name="public java.util.List signalShutdown()">1</method>
			<method name="public java.util.List signalStartTrack(edu.stanford.nlp.util.logging.Redwood$Record signal)">4</method>
			<method name="public java.util.List handle(edu.stanford.nlp.util.logging.Redwood$Record record)">2</method>
			<method name="private void flush(edu.stanford.nlp.util.logging.RepeatedRecordHandler$RepeatedRecordInfo info, java.util.List willReturn)">3</method>
			<method name="public java.util.List signalEndTrack(int newDepth, long timeEnded)">4</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$PriorAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>9</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$GazAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$SpaceBeforeAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.math.NumberMatchingRegex</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>8</rfc>
		<lcom>2</lcom>
		<ca>3</ca>
		<ce>0</ce>
		<npm>2</npm>
		<lcom3>1.1111111111111112</lcom3>
		<loc>30</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.0</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static boolean isDecimalInteger(String string)">1</method>
			<method name="public static boolean isDouble(String string)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.negra.NegraPennLanguagePack</name>
		<wmc>21</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>30</rfc>
		<lcom>182</lcom>
		<ca>4</ca>
		<ce>8</ce>
		<npm>19</npm>
		<lcom3>0.95</lcom3>
		<loc>331</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.26</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>14.238095238095237</amc>
		<cc>
			<method name="public String treebankFileExtension()">1</method>
			<method name="public String basicCategory(String category)">2</method>
			<method name="public char[] labelAnnotationIntroducingCharacters()">1</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public String stripGF(String category)">4</method>
			<method name="public String[] startSymbols()">1</method>
			<method name="public String getEncoding()">1</method>
			<method name="public String[] punctuationWords()">1</method>
			<method name="public edu.stanford.nlp.trees.HeadFinder typedDependencyHeadFinder()">1</method>
			<method name="public String[] evalBIgnoredPunctuationTags()">1</method>
			<method name="public edu.stanford.nlp.trees.TreeReaderFactory treeReaderFactory()">1</method>
			<method name="public String[] sentenceFinalPunctuationTags()">1</method>
			<method name="public void _init_(boolean leaveGF, char gfChar)">0</method>
			<method name="public void setLeaveGF(boolean leaveGF)">1</method>
			<method name="public String[] punctuationTags()">1</method>
			<method name="private static boolean containsKeptGF(String category, int index)">4</method>
			<method name="public edu.stanford.nlp.process.TokenizerFactory getTokenizerFactory()">1</method>
			<method name="public edu.stanford.nlp.trees.HeadFinder headFinder()">1</method>
			<method name="public boolean isLeaveGF()">1</method>
			<method name="public String[] sentenceFinalPunctuationWords()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.DiskTreebank$DiskTreebankIterator</name>
		<wmc>9</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>52</rfc>
		<lcom>20</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>4</npm>
		<lcom3>0.32499999999999996</lcom3>
		<loc>433</loc>
		<dam>0.9</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.4444444444444444</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>46.0</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.trees.DiskTreebank x0, edu.stanford.nlp.trees.DiskTreebank$1 x1)">0</method>
			<method name="private boolean primeNextFile()">5</method>
			<method name="public edu.stanford.nlp.trees.Tree next()">2</method>
			<method name="public boolean hasNext()">2</method>
			<method name="public void remove()">1</method>
			<method name="public volatile Object next()">1</method>
			<method name="private void _init_(edu.stanford.nlp.trees.DiskTreebank)">0</method>
			<method name="private edu.stanford.nlp.trees.Tree primeNextTree()">3</method>
			<method name="private boolean primeNextPath()">7</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.EntityCachingAbstractSequencePriorBIO</name>
		<wmc>18</wmc>
		<dit>1</dit>
		<noc>1</noc>
		<cbo>7</cbo>
		<rfc>54</rfc>
		<lcom>69</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>17</npm>
		<lcom3>0.7450980392156863</lcom3>
		<loc>1227</loc>
		<dam>0.8888888888888888</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.30952380952380953</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>66.66666666666667</amc>
		<cc>
			<method name="public int[] otherOccurrences(edu.stanford.nlp.ie.EntityBIO entity)">4</method>
			<method name="public void _init_(String backgroundSymbol, edu.stanford.nlp.util.Index classIndex, edu.stanford.nlp.util.Index tagIndex, java.util.List doc)">0</method>
			<method name="public int length()">1</method>
			<method name="public static int[] toArray(java.util.List list)">2</method>
			<method name="public double scoreOf(int[] sequence, int pos)">1</method>
			<method name="public int getNumClasses()">1</method>
			<method name="public int leftWindow()">1</method>
			<method name="public String toString(int pos)">3</method>
			<method name="public int rightWindow()">1</method>
			<method name="public void setInitialSequence(int[] initialSequence)">4</method>
			<method name="public double[] scoresOf(int[] sequence, int position)">3</method>
			<method name="public void updateSequenceElement(int[] sequence, int position, int oldVal)">27</method>
			<method name="public boolean matches(edu.stanford.nlp.ie.EntityBIO entity, int position)">5</method>
			<method name="public double[] getConditionalDistribution(int[] sequence, int position)">1</method>
			<method name="private void addEntityToEntitiesArray(edu.stanford.nlp.ie.EntityBIO entity)">2</method>
			<method name="public String toString()">3</method>
			<method name="public int[] getPossibleValues(int position)">1</method>
			<method name="public edu.stanford.nlp.ie.EntityBIO extractEntity(int[] sequence, int position, String tag)">4</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.crf.LinearCliquePotentialFunction</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>44</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>20.5</amc>
		<cc>
			<method name="public double computeCliquePotential(int cliqueSize, int labelIndex, int[] cliqueFeatures, double[] featureVal, int posInSent)">3</method>
			<method name="void _init_(double[][] weights)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.POSTaggerAnnotator$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.pascal.AcronymModel$Feature</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>2</rfc>
		<lcom>1</lcom>
		<ca>8</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>2</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract String toString()">1</method>
			<method name="public abstract double value(edu.stanford.nlp.ie.pascal.Alignment)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.CoNLL2011DocumentReader$Document</name>
		<wmc>10</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>13</rfc>
		<lcom>33</lcom>
		<ca>7</ca>
		<ce>2</ce>
		<npm>10</npm>
		<lcom3>0.9523809523809523</lcom3>
		<loc>58</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.35</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.1</amc>
		<cc>
			<method name="public void setPartNo(String partNo)">1</method>
			<method name="public edu.stanford.nlp.util.CollectionValuedMap getCorefChainMap()">1</method>
			<method name="public String getDocumentID()">1</method>
			<method name="public void setDocumentID(String documentID)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void addSentence(java.util.List sentence)">1</method>
			<method name="public java.util.List getSentenceWordLists()">1</method>
			<method name="public edu.stanford.nlp.pipeline.Annotation getAnnotation()">1</method>
			<method name="public String getPartNo()">1</method>
			<method name="public void setAnnotation(edu.stanford.nlp.pipeline.Annotation annotation)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.structure.Span</name>
		<wmc>24</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>15</cbo>
		<rfc>43</rfc>
		<lcom>0</lcom>
		<ca>14</ca>
		<ce>2</ce>
		<npm>21</npm>
		<lcom3>0.4927536231884058</lcom3>
		<loc>518</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.20833333333333334</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>20.458333333333332</amc>
		<cc>
			<method name="public static boolean overlaps(edu.stanford.nlp.ie.machinereading.structure.Span spanA, java.util.Collection spanB)">2</method>
			<method name="static int access$000(edu.stanford.nlp.ie.machinereading.structure.Span x0)">1</method>
			<method name="public static int overlap(edu.stanford.nlp.ie.machinereading.structure.Span spanA, edu.stanford.nlp.ie.machinereading.structure.Span spanB)">7</method>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="public static edu.stanford.nlp.ie.machinereading.structure.Span fromValues(int val1, int val2)">2</method>
			<method name="public void setStart(int s)">1</method>
			<method name="public int end()">1</method>
			<method name="public boolean contains(int i)">3</method>
			<method name="public transient void _init_(edu.stanford.nlp.ie.machinereading.structure.Span[] spans)">0</method>
			<method name="public boolean equals(Object other)">4</method>
			<method name="public void setEnd(int e)">1</method>
			<method name="public static boolean overlaps(edu.stanford.nlp.ie.machinereading.structure.Span spanA, edu.stanford.nlp.ie.machinereading.structure.Span spanB)">8</method>
			<method name="public int size()">1</method>
			<method name="public boolean contains(edu.stanford.nlp.ie.machinereading.structure.Span otherSpan)">3</method>
			<method name="public boolean isAfter(edu.stanford.nlp.ie.machinereading.structure.Span otherSpan)">4</method>
			<method name="public boolean isBefore(edu.stanford.nlp.ie.machinereading.structure.Span otherSpan)">4</method>
			<method name="private void _init_()">0</method>
			<method name="public int hashCode()">1</method>
			<method name="public void expandToInclude(edu.stanford.nlp.ie.machinereading.structure.Span otherSpan)">3</method>
			<method name="public void _init_(int s, int e)">0</method>
			<method name="public static transient edu.stanford.nlp.ie.machinereading.structure.Span fromValues(Object[] values)">8</method>
			<method name="public String toString()">1</method>
			<method name="static int access$100(edu.stanford.nlp.ie.machinereading.structure.Span x0)">1</method>
			<method name="public int start()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.CorefScorer$1</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>28</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>26.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.StringUtils$1</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>5</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>14</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.6666666666666665</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="public String apply(edu.stanford.nlp.ling.HasWord in)">1</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.StringUtils$2</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>13</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.8333333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.3333333333333335</amc>
		<cc>
			<method name="public String apply(Object in)">1</method>
			<method name="void _init_()">0</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter$1</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>28</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>26.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$TimeWithRange</name>
		<wmc>11</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>13</cbo>
		<rfc>28</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>13</ce>
		<npm>11</npm>
		<lcom3>0.55</lcom3>
		<loc>181</loc>
		<dam>0.5</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.3246753246753247</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.272727272727273</amc>
		<cc>
			<method name="public edu.stanford.nlp.time.SUTime$Time add(edu.stanford.nlp.time.SUTime$Duration offset)">2</method>
			<method name="public void _init_(edu.stanford.nlp.time.SUTime$Range range)">0</method>
			<method name="public volatile edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time x0, int x1)">1</method>
			<method name="public void _init_(edu.stanford.nlp.time.SUTime$TimeWithRange t, edu.stanford.nlp.time.SUTime$Range range)">0</method>
			<method name="public edu.stanford.nlp.time.SUTime$Time intersect(edu.stanford.nlp.time.SUTime$Time t)">6</method>
			<method name="public edu.stanford.nlp.time.SUTime$Time resolve(edu.stanford.nlp.time.SUTime$Time refTime, int flags)">3</method>
			<method name="public volatile edu.stanford.nlp.time.SUTime$Temporal setTimeZone(org.joda.time.DateTimeZone x0)">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Range getRange(int flags, edu.stanford.nlp.time.SUTime$Duration granularity)">2</method>
			<method name="public edu.stanford.nlp.time.SUTime$Duration getDuration()">2</method>
			<method name="public String toFormattedString(int flags)">3</method>
			<method name="public edu.stanford.nlp.time.SUTime$TimeWithRange setTimeZone(org.joda.time.DateTimeZone tz)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.StringUtils$3</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>6</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>39</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4444444444444444</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.0</amc>
		<cc>
			<method name="void _init_(Class, edu.stanford.nlp.util.Function, String)">0</method>
			<method name="public String apply(edu.stanford.nlp.util.CoreMap in)">2</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$23$1</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>11</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>78</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>24.0</amc>
		<cc>
			<method name="public void initialize()">4</method>
			<method name="void _init_(edu.stanford.nlp.trees.tregex.Relation$23, edu.stanford.nlp.trees.Tree)">0</method>
			<method name="void advance()">4</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$SemanticHeadWordAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.NERFeatureFactory$GazetteInfo</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>17</loc>
		<dam>0.25</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.0</amc>
		<cc>
			<method name="public void _init_(String feature, int loc, String[] words)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.MorphaAnnotator</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>36</rfc>
		<lcom>24</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>5</npm>
		<lcom3>0.7857142857142857</lcom3>
		<loc>297</loc>
		<dam>0.75</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2653061224489796</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>35.625</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="private static void addLemma(edu.stanford.nlp.process.Morphology morpha, Class ann, edu.stanford.nlp.util.CoreMap map, String word, String tag)">3</method>
			<method name="private static String phrasalVerb(edu.stanford.nlp.process.Morphology morpha, String word, String tag)">9</method>
			<method name="public void annotate(edu.stanford.nlp.pipeline.Annotation annotation)">3</method>
			<method name="public java.util.Set requires()">1</method>
			<method name="public void _init_(boolean verbose)">0</method>
			<method name="public java.util.Set requirementsSatisfied()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.StringUtils$4</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>10</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>78</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4444444444444444</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>23.666666666666668</amc>
		<cc>
			<method name="public String apply(edu.stanford.nlp.util.CoreMap in)">4</method>
			<method name="void _init_(Class[], String, edu.stanford.nlp.util.Function, String)">0</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.pascal.AcronymModel$SyllableBoundary</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>10</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>0.5</lcom3>
		<loc>63</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.666666666666668</amc>
		<cc>
			<method name="public double value(edu.stanford.nlp.ie.pascal.Alignment alignment)">4</method>
			<method name="public void _init_()">0</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.CoNLL2011DocumentReader$Options</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>3</ca>
		<ce>0</ce>
		<npm>3</npm>
		<lcom3>0.5</lcom3>
		<loc>62</loc>
		<dam>0.2727272727272727</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.8333333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(String filter)">0</method>
			<method name="public void setFilter(String filter)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.CoreMapSequenceMatcher</name>
		<wmc>9</wmc>
		<dit>0</dit>
		<noc>2</noc>
		<cbo>10</cbo>
		<rfc>27</rfc>
		<lcom>30</lcom>
		<ca>2</ca>
		<ce>8</ce>
		<npm>7</npm>
		<lcom3>1.0</lcom3>
		<loc>160</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.3333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.666666666666668</amc>
		<cc>
			<method name="public void annotateGroup(java.util.Map attributes)">1</method>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.SequencePattern pattern, java.util.List tokens)">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public edu.stanford.nlp.util.CoreMap mergeGroup()">1</method>
			<method name="private edu.stanford.nlp.util.CoreMap createMergedChunk(int groupStart, int groupEnd)">2</method>
			<method name="public java.util.List getMergedList()">1</method>
			<method name="public edu.stanford.nlp.util.CoreMap mergeGroup(int group)">3</method>
			<method name="public transient java.util.List getMergedList(int[] groups)">2</method>
			<method name="public void annotateGroup(int group, java.util.Map attributes)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.tsurgeon.InsertNode</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>21</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>8</ce>
		<npm>4</npm>
		<lcom3>0.0</lcom3>
		<loc>83</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.34285714285714286</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.4</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.trees.tregex.tsurgeon.AuxiliaryTree t, edu.stanford.nlp.trees.tregex.tsurgeon.TreeLocation l)">0</method>
			<method name="public edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.tregex.TregexMatcher m)">1</method>
			<method name="public String toString()">1</method>
			<method name="public void _init_(edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern child, edu.stanford.nlp.trees.tregex.tsurgeon.TreeLocation l)">0</method>
			<method name="protected void setRoot(edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPatternRoot root)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.ExtractorMerger</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>34</rfc>
		<lcom>7</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>6</npm>
		<lcom3>0.7777777777777777</lcom3>
		<loc>223</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.3055555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>30.428571428571427</amc>
		<cc>
			<method name="public void save(String path)">1</method>
			<method name="public void setLoggerLevel(java.util.logging.Level level)">1</method>
			<method name="public static edu.stanford.nlp.ie.machinereading.Extractor buildRelationExtractorMerger(String[] extractorModelNames)">2</method>
			<method name="public void _init_(edu.stanford.nlp.ie.machinereading.Extractor[] extractors)">0</method>
			<method name="public void annotate(edu.stanford.nlp.pipeline.Annotation dataset)">5</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void train(edu.stanford.nlp.pipeline.Annotation dataset)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Iterables</name>
		<wmc>29</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>20</cbo>
		<rfc>68</rfc>
		<lcom>406</lcom>
		<ca>2</ca>
		<ce>19</ce>
		<npm>29</npm>
		<lcom3>2.0</lcom3>
		<loc>341</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.10560344827586207</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.758620689655173</amc>
		<cc>
			<method name="public static Iterable take(Iterable iterable, int max)">1</method>
			<method name="public static Iterable chain(Iterable iterables)">1</method>
			<method name="public static Iterable drop(Iterable iterable, int toDrop)">1</method>
			<method name="public static Iterable merge(Iterable iter1, Iterable iter2, edu.stanford.nlp.util.Iterables$IncrementComparator comparator)">1</method>
			<method name="public static String toString(Iterable iter, String glue)">3</method>
			<method name="public static java.util.Collection asCollection(java.util.Iterator iter, edu.stanford.nlp.util.CollectionFactory cf)">1</method>
			<method name="public static Iterable merge(Iterable iter1, Iterable iter2, Iterable iter3, java.util.Comparator comparator)">1</method>
			<method name="public static java.util.HashSet asHashSet(java.util.Iterator iter)">1</method>
			<method name="public static Iterable zip(Iterable iter, Object[] array)">1</method>
			<method name="public static Iterable drop(Object[] array, int toDrop)">1</method>
			<method name="public static transient Iterable chain(Iterable[] iterables)">1</method>
			<method name="public static java.util.Collection addAll(java.util.Iterator iter, java.util.Collection c)">2</method>
			<method name="public static Iterable zip(Object[] array1, Object[] array2)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public static Iterable cast(Iterable iterable, Class type)">1</method>
			<method name="public static java.util.Iterator zip(java.util.Iterator iter1, java.util.Iterator iter2)">1</method>
			<method name="public static java.util.ArrayList asArrayList(java.util.Iterator iter)">1</method>
			<method name="public static Iterable transform(Iterable iterable, edu.stanford.nlp.util.Function function)">1</method>
			<method name="public static Iterable merge(Iterable iter1, Iterable iter2, java.util.Comparator comparator)">1</method>
			<method name="public static Iterable filter(Iterable iterable, edu.stanford.nlp.util.Function accept)">1</method>
			<method name="public static Iterable group(Iterable iterable, java.util.Comparator comparator)">1</method>
			<method name="public static Iterable merge(Iterable iter1, Iterable iter2, Iterable iter3, edu.stanford.nlp.util.Iterables$IncrementComparator comparatorA, edu.stanford.nlp.util.Iterables$IncrementComparator comparatorB)">1</method>
			<method name="public static Iterable zip(Iterable iter1, Iterable iter2)">1</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="public static Iterable flatMap(Iterable iterables, edu.stanford.nlp.util.Function trans)">1</method>
			<method name="public static Iterable zip(Object[] array, Iterable iter)">1</method>
			<method name="public static Iterable sample(Iterable items, int n, int k, java.util.Random random)">2</method>
			<method name="public static Iterable take(Object[] array, int max)">1</method>
			<method name="public static transient Iterable chain(Object[][] arrays)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.NPTmpRetainingTreeNormalizer$NPTmpAdvRetainingTreeReaderFactory</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>6</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>7</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>20</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.0</amc>
		<cc>
			<method name="public edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader in)">1</method>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.classify.GeneralizedExpectationObjectiveFunction</name>
		<wmc>12</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>12</cbo>
		<rfc>58</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>11</ce>
		<npm>3</npm>
		<lcom3>0.7386363636363636</lcom3>
		<loc>689</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.2708333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>55.75</amc>
		<cc>
			<method name="public int domainDimension()">1</method>
			<method name="private void updateDerivative(edu.stanford.nlp.ling.Datum datum, double[] probs, edu.stanford.nlp.stats.Counter feature2classPairDerivatives)">4</method>
			<method name="protected void calculate(double[] x)">11</method>
			<method name="public double[][] to2D(double[] x)">3</method>
			<method name="public void _init_(edu.stanford.nlp.classify.GeneralDataset labeledDataset, java.util.List unlabeledDataList, java.util.List geFeatures)">0</method>
			<method name="private double valueOfFeature(Object feature, edu.stanford.nlp.ling.Datum datum)">2</method>
			<method name="private static void smoothDistribution(double[] dist)">2</method>
			<method name="protected int indexOf(int f, int c)">1</method>
			<method name="int classOf(int index)">1</method>
			<method name="private double[] getModelProbs(edu.stanford.nlp.ling.Datum datum)">2</method>
			<method name="private void computeEmpiricalStatistics(java.util.List geFeatures)">7</method>
			<method name="int featureOf(int index)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.pascal.TeXHyphenator$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequencePattern$1</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>7</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>9</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.5</amc>
		<cc>
			<method name="public boolean matches(Object o1, Object o2)">1</method>
			<method name="void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$CharacterOffsetBeginAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.SQNMinimizer$SurpriseConvergence</name>
		<wmc>1</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>6</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>1.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.0</amc>
		<cc>
			<method name="public void _init_(String s)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.french.FrenchHeadFinder</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>12</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>10</ce>
		<npm>3</npm>
		<lcom3>1.5</lcom3>
		<loc>1030</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4444444444444444</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>342.0</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.trees.international.french.FrenchTreebankLanguagePack tlp)">0</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.Treebank$1</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>6</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>0.5</lcom3>
		<loc>25</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.5</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.trees.Treebank, StringBuilder)">0</method>
			<method name="public void visitTree(edu.stanford.nlp.trees.Tree t)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.GermanUnknownWordModelTrainer</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>8</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>33</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="protected edu.stanford.nlp.parser.lexparser.UnknownWordModel buildUWM()">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.process.PTB2TextLexer</name>
		<wmc>24</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>38</rfc>
		<lcom>194</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>9</npm>
		<lcom3>0.9565217391304348</lcom3>
		<loc>878</loc>
		<dam>0.9090909090909091</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2463768115942029</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>34.208333333333336</amc>
		<cc>
			<method name="public final String yytext()">1</method>
			<method name="private static int[] zzUnpackTrans()">1</method>
			<method name="public final void yybegin(int newState)">1</method>
			<method name="public final void yyclose()">1</method>
			<method name="public final void yyreset(java.io.Reader reader)">1</method>
			<method name="public final int yylength()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public final int yystate()">1</method>
			<method name="private static char[] zzUnpackCMap(String packed)">3</method>
			<method name="public final char yycharat(int pos)">1</method>
			<method name="private static int zzUnpackAction(String packed, int offset, int[] result)">3</method>
			<method name="public String next()">1</method>
			<method name="private static int[] zzUnpackAttribute()">1</method>
			<method name="private static int[] zzUnpackAction()">1</method>
			<method name="private static int zzUnpackTrans(String packed, int offset, int[] result)">3</method>
			<method name="void _init_(java.io.InputStream in)">0</method>
			<method name="private static int zzUnpackAttribute(String packed, int offset, int[] result)">3</method>
			<method name="private static int[] zzUnpackRowMap()">1</method>
			<method name="private boolean zzRefill()">1</method>
			<method name="public void yypushback(int number)">2</method>
			<method name="private static String removeWhite(String in)">3</method>
			<method name="void _init_(java.io.Reader in)">0</method>
			<method name="private void zzScanError(int errorCode)">1</method>
			<method name="private static int zzUnpackRowMap(String packed, int offset, int[] result)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$9$1</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>10</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>76</loc>
		<dam>0.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>23.333333333333332</amc>
		<cc>
			<method name="public void advance()">2</method>
			<method name="void initialize()">5</method>
			<method name="void _init_(edu.stanford.nlp.trees.tregex.Relation$9, edu.stanford.nlp.trees.Tree, edu.stanford.nlp.trees.tregex.TregexMatcher)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.Tags$TagsAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$HeadedBy</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>15</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>8</ce>
		<npm>2</npm>
		<lcom3>0.7</lcom3>
		<loc>93</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.3333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>14.166666666666666</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.trees.HeadFinder hf)">0</method>
			<method name="public boolean equals(Object o)">7</method>
			<method name="public int hashCode()">2</method>
			<method name="java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">1</method>
			<method name="boolean satisfies(edu.stanford.nlp.trees.Tree t1, edu.stanford.nlp.trees.Tree t2, edu.stanford.nlp.trees.Tree root, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">1</method>
			<method name="static edu.stanford.nlp.trees.tregex.Relation$Heads access$700(edu.stanford.nlp.trees.tregex.Relation$HeadedBy x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.AnnotatorFactory</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>14</noc>
		<cbo>18</cbo>
		<rfc>11</rfc>
		<lcom>6</lcom>
		<ca>16</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>1.1666666666666667</lcom3>
		<loc>37</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.75</amc>
		<cc>
			<method name="public abstract String signature()">1</method>
			<method name="protected void _init_(java.util.Properties properties)">0</method>
			<method name="public abstract edu.stanford.nlp.pipeline.Annotator create()">1</method>
			<method name="public volatile Object create()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.Style</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.9259259259259259</lcom3>
		<loc>111</loc>
		<dam>0.1111111111111111</dam>
		<moa>8</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>24.5</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="public static edu.stanford.nlp.util.logging.Style[] values()">1</method>
			<method name="public static edu.stanford.nlp.util.logging.Style valueOf(String name)">1</method>
			<method name="private void _init_(String, int, String ansiCode)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.Treebank$CounterTreeProcessor</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>5</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>21</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.0</amc>
		<cc>
			<method name="public int total()">1</method>
			<method name="private void _init_()">0</method>
			<method name="void _init_(edu.stanford.nlp.trees.Treebank$1 x0)">0</method>
			<method name="public void visitTree(edu.stanford.nlp.trees.Tree t)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.GenericTimeExpressionPatterns$5</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>15</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>8</ce>
		<npm>2</npm>
		<lcom3>1.0</lcom3>
		<loc>158</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>51.333333333333336</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.time.GenericTimeExpressionPatterns, String x0)">0</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.Env env, java.util.List in)">10</method>
			<method name="public boolean checkArgs(java.util.List in)">4</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.GenericTimeExpressionPatterns$2</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>15</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>2</npm>
		<lcom3>1.0</lcom3>
		<loc>66</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>20.666666666666668</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.time.GenericTimeExpressionPatterns, String x0)">0</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.Env env, java.util.List in)">2</method>
			<method name="public boolean checkArgs(java.util.List in)">4</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.VisibilityHandler</name>
		<wmc>9</wmc>
		<dit>0</dit>
		<noc>6</noc>
		<cbo>12</cbo>
		<rfc>25</rfc>
		<lcom>0</lcom>
		<ca>7</ca>
		<ce>5</ce>
		<npm>9</npm>
		<lcom3>0.25</lcom3>
		<loc>233</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.2962962962962963</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>24.666666666666668</amc>
		<cc>
			<method name="public boolean alsoHide(Object filter)">4</method>
			<method name="public boolean alsoShow(Object filter)">4</method>
			<method name="public java.util.List signalEndTrack(int newDepth, long timeOfEnd)">1</method>
			<method name="public void showAll()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public java.util.List signalStartTrack(edu.stanford.nlp.util.logging.Redwood$Record signal)">1</method>
			<method name="public java.util.List handle(edu.stanford.nlp.util.logging.Redwood$Record record)">10</method>
			<method name="public void hideAll()">1</method>
			<method name="public void _init_(Object[] channels)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.GenericTimeExpressionPatterns$1</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>16</cbo>
		<rfc>24</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>16</ce>
		<npm>2</npm>
		<lcom3>1.0</lcom3>
		<loc>323</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.39285714285714285</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>79.5</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.time.GenericTimeExpressionPatterns, String x0)">0</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.Env env, java.util.List in)">18</method>
			<method name="private edu.stanford.nlp.time.SUTime$Temporal addEndPoints(edu.stanford.nlp.time.SUTime$Duration d, edu.stanford.nlp.time.SUTime$Time beginTime, edu.stanford.nlp.time.SUTime$Time endTime)">8</method>
			<method name="public boolean checkArgs(java.util.List in)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.GenericTimeExpressionPatterns$4</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>20</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>10</ce>
		<npm>2</npm>
		<lcom3>1.0</lcom3>
		<loc>243</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>79.66666666666667</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.time.GenericTimeExpressionPatterns, String x0)">0</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.Env env, java.util.List in)">14</method>
			<method name="public boolean checkArgs(java.util.List in)">10</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.RedwoodConfiguration$Handlers$2$1</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>18</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.0</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.util.logging.RedwoodConfiguration$Handlers$2, String x0, edu.stanford.nlp.util.logging.RedwoodConfiguration)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.GenericTimeExpressionPatterns$3</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>15</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>2</npm>
		<lcom3>1.0</lcom3>
		<loc>66</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>20.666666666666668</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.time.GenericTimeExpressionPatterns, String x0)">0</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.Env env, java.util.List in)">2</method>
			<method name="public boolean checkArgs(java.util.List in)">4</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.structure.EntityMention$CompByHead</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>43</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.333333333333334</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="public int compare(edu.stanford.nlp.ie.machinereading.structure.EntityMention o1, edu.stanford.nlp.ie.machinereading.structure.EntityMention o2)">5</method>
			<method name="void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.crf.CRFLabel</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>15</rfc>
		<lcom>0</lcom>
		<ca>9</ca>
		<ce>1</ce>
		<npm>8</npm>
		<lcom3>0.7142857142857143</lcom3>
		<loc>172</loc>
		<dam>0.75</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>20.0</amc>
		<cc>
			<method name="public String toString(edu.stanford.nlp.util.Index classIndex)">2</method>
			<method name="public boolean equals(Object o)">5</method>
			<method name="public int hashCode()">3</method>
			<method name="public edu.stanford.nlp.ie.crf.CRFLabel getSmallerLabel(int size)">1</method>
			<method name="public int[] getLabel()">1</method>
			<method name="public edu.stanford.nlp.ie.crf.CRFLabel getOneSmallerLabel()">1</method>
			<method name="public String toString()">2</method>
			<method name="public void _init_(int[] label)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.TregexParseException</name>
		<wmc>1</wmc>
		<dit>4</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>5</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>6</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>1.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.0</amc>
		<cc>
			<method name="public void _init_(String message, Throwable cause)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.IntCounter$1$1</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>11</rfc>
		<lcom>8</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>4</npm>
		<lcom3>0.875</lcom3>
		<loc>37</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.stats.IntCounter$1)">0</method>
			<method name="public boolean hasNext()">1</method>
			<method name="public void remove()">1</method>
			<method name="public java.util.Map$Entry next()">1</method>
			<method name="public volatile Object next()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.structure.ExtractionObject$CompByExtent</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>43</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.333333333333334</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="void _init_()">0</method>
			<method name="public int compare(edu.stanford.nlp.ie.machinereading.structure.ExtractionObject o1, edu.stanford.nlp.ie.machinereading.structure.ExtractionObject o2)">5</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.classify.LinearClassifierFactory</name>
		<wmc>89</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>56</cbo>
		<rfc>188</rfc>
		<lcom>3406</lcom>
		<ca>19</ca>
		<ce>53</ce>
		<npm>84</npm>
		<lcom3>0.8529829545454546</lcom3>
		<loc>1676</loc>
		<dam>1.0</dam>
		<moa>4</moa>
		<mfa>0.0</mfa>
		<cam>0.13977272727272727</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>17.651685393258425</amc>
		<cc>
			<method name="public edu.stanford.nlp.classify.LinearClassifierFactory$LinearClassifierCreator getClassifierCreator(edu.stanford.nlp.classify.GeneralDataset dataset)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void useStochasticQN(double initialSMDGain, int stochasticBatchSize)">1</method>
			<method name="public void _init_(edu.stanford.nlp.optimization.Minimizer min, double tol, boolean useSum, edu.stanford.nlp.classify.LogPrior logPrior)">0</method>
			<method name="static int access$100(edu.stanford.nlp.classify.LinearClassifierFactory x0)">1</method>
			<method name="public void setEpsilon(double eps)">1</method>
			<method name="private java.util.List getHighPrecisionFeatures(edu.stanford.nlp.classify.GeneralDataset dataset, double minPrecision, int maxNumFeatures)">8</method>
			<method name="public double[] heldOutSetSigma(edu.stanford.nlp.classify.GeneralDataset train, edu.stanford.nlp.classify.GeneralDataset dev, edu.stanford.nlp.stats.Scorer scorer)">1</method>
			<method name="public void setTuneSigmaCV(int folds)">1</method>
			<method name="public edu.stanford.nlp.classify.LinearClassifier trainClassifierV(edu.stanford.nlp.classify.GeneralDataset train, double min, double max, boolean accuracy)">1</method>
			<method name="public double[][] trainWeightsSemiSup(edu.stanford.nlp.classify.GeneralDataset data, edu.stanford.nlp.classify.GeneralDataset biasedData, double[][] confusionMatrix, double[] initial)">2</method>
			<method name="public double[][] adaptWeights(double[][] origWeights, edu.stanford.nlp.classify.GeneralDataset adaptDataset)">1</method>
			<method name="static boolean access$200(edu.stanford.nlp.classify.LinearClassifierFactory x0)">1</method>
			<method name="public double[] heldOutSetSigma(edu.stanford.nlp.classify.GeneralDataset trainSet, edu.stanford.nlp.classify.GeneralDataset devSet, edu.stanford.nlp.stats.Scorer scorer, edu.stanford.nlp.optimization.LineSearcher minimizer)">1</method>
			<method name="public edu.stanford.nlp.classify.LinearClassifier trainClassifier(edu.stanford.nlp.classify.GeneralDataset dataset, double[] initial)">6</method>
			<method name="public double[] heldOutSetSigma(edu.stanford.nlp.classify.GeneralDataset train, edu.stanford.nlp.classify.GeneralDataset dev)">2</method>
			<method name="public void _init_(edu.stanford.nlp.optimization.Minimizer min, double tol, boolean useSum)">0</method>
			<method name="public void _init_(double tol, boolean useSum, int prior, double sigma, double epsilon, int mem)">0</method>
			<method name="public void useQuasiNewton()">1</method>
			<method name="public void useStochasticGradientDescentToQuasiNewton(double SGDGain, int batchSize, int sgdPasses, int qnPasses, int hessSamples, int QNMem, boolean outputToFile)">1</method>
			<method name="public void useConjugateGradientAscent()">1</method>
			<method name="public volatile edu.stanford.nlp.classify.Classifier trainClassifier(edu.stanford.nlp.classify.GeneralDataset x0)">1</method>
			<method name="public double[] heldOutSetSigma(edu.stanford.nlp.classify.GeneralDataset train, edu.stanford.nlp.classify.GeneralDataset dev, edu.stanford.nlp.optimization.LineSearcher minimizer)">1</method>
			<method name="public edu.stanford.nlp.classify.LinearClassifier trainClassifierV(edu.stanford.nlp.classify.GeneralDataset train, edu.stanford.nlp.classify.GeneralDataset validation, double min, double max, boolean accuracy)">1</method>
			<method name="public edu.stanford.nlp.classify.LinearClassifier trainClassifier(edu.stanford.nlp.classify.GeneralDataset dataset)">1</method>
			<method name="public void useQuasiNewton(boolean useRobust)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void useInPlaceStochasticGradientDescent(int SGDPasses, int tuneSampleSize, double sigma)">1</method>
			<method name="public edu.stanford.nlp.classify.LinearClassifier trainSemiSupGE(edu.stanford.nlp.classify.GeneralDataset labeledDataset, java.util.List unlabeledDataList, java.util.List GEFeatures, double convexComboCoeff)">1</method>
			<method name="public void _init_(edu.stanford.nlp.util.Factory min, boolean useSum)">0</method>
			<method name="public double[][] trainWeights(edu.stanford.nlp.classify.GeneralDataset dataset, double[] initial, boolean bypassTuneSigma, edu.stanford.nlp.optimization.Minimizer minimizer)">10</method>
			<method name="public double[][] trainWeights(edu.stanford.nlp.classify.GeneralDataset dataset)">1</method>
			<method name="public double[] heldOutSetSigma(edu.stanford.nlp.classify.GeneralDataset train, edu.stanford.nlp.stats.Scorer scorer)">1</method>
			<method name="public void setHeldOutSearcher(edu.stanford.nlp.optimization.LineSearcher heldOutSearcher)">1</method>
			<method name="public void _init_(edu.stanford.nlp.optimization.Minimizer min, boolean useSum)">0</method>
			<method name="public double[] heldOutSetSigma(edu.stanford.nlp.classify.GeneralDataset train)">1</method>
			<method name="public void setPrior(edu.stanford.nlp.classify.LogPrior logPrior)">1</method>
			<method name="public void _init_(edu.stanford.nlp.util.Factory min, double tol, boolean useSum)">0</method>
			<method name="public edu.stanford.nlp.classify.Classifier trainClassifier(Iterable dataIterable)">2</method>
			<method name="public void setEvaluators(int iters, edu.stanford.nlp.optimization.Evaluator[] evaluators)">1</method>
			<method name="public void crossValidateSetSigma(edu.stanford.nlp.classify.GeneralDataset dataset, int kfold)">1</method>
			<method name="public void setRetrainFromScratchAfterSigmaTuning(boolean retrainFromScratchAfterSigmaTuning)">1</method>
			<method name="public void resetWeight()">1</method>
			<method name="public void _init_(boolean useSum)">0</method>
			<method name="public void useHybridMinimizerWithInPlaceSGD(int SGDPasses, int tuneSampleSize, double sigma)">1</method>
			<method name="public edu.stanford.nlp.classify.Classifier trainClassifier(edu.stanford.nlp.classify.GeneralDataset dataset, float[] dataWeights, edu.stanford.nlp.classify.LogPrior prior)">2</method>
			<method name="public void setTuneSigmaHeldOut()">1</method>
			<method name="public void _init_(edu.stanford.nlp.optimization.Minimizer min, double tol, boolean useSum, double sigma)">0</method>
			<method name="public void _init_(double tol)">0</method>
			<method name="public void _init_(edu.stanford.nlp.util.Factory min, double tol, boolean useSum, double sigma)">0</method>
			<method name="public edu.stanford.nlp.classify.LinearClassifier trainClassifierWithInitialWeights(edu.stanford.nlp.classify.GeneralDataset dataset, edu.stanford.nlp.classify.LinearClassifier initialClassifier)">2</method>
			<method name="public void crossValidateSetSigma(edu.stanford.nlp.classify.GeneralDataset dataset, int kfold, edu.stanford.nlp.stats.Scorer scorer)">1</method>
			<method name="public void useStochasticMetaDescent()">1</method>
			<method name="public edu.stanford.nlp.classify.LinearClassifier trainClassifier(java.util.List examples)">1</method>
			<method name="public void crossValidateSetSigma(edu.stanford.nlp.classify.GeneralDataset dataset, int kfold, edu.stanford.nlp.stats.Scorer scorer, edu.stanford.nlp.optimization.LineSearcher minimizer)">1</method>
			<method name="public void setVerbose(boolean verbose)">1</method>
			<method name="public void useStochasticGradientDescent()">1</method>
			<method name="public void setUseSum(boolean useSum)">1</method>
			<method name="public edu.stanford.nlp.classify.LinearClassifier trainSemiSupGE(edu.stanford.nlp.classify.GeneralDataset labeledDataset, java.util.List unlabeledDataList)">1</method>
			<method name="public double[][] trainWeights(edu.stanford.nlp.classify.GeneralDataset dataset, double[] initial)">1</method>
			<method name="public volatile edu.stanford.nlp.classify.Classifier trainClassifier(java.util.List x0)">1</method>
			<method name="public void crossValidateSetSigma(edu.stanford.nlp.classify.GeneralDataset dataset, int kfold, edu.stanford.nlp.optimization.LineSearcher minimizer)">1</method>
			<method name="public void _init_(double tol, boolean useSum, int prior, double sigma, double epsilon)">0</method>
			<method name="public void _init_(edu.stanford.nlp.optimization.Minimizer min)">0</method>
			<method name="public double[][] trainWeights(edu.stanford.nlp.classify.GeneralDataset dataset, double[] initial, boolean bypassTuneSigma)">1</method>
			<method name="public void useStochasticMetaDescent(double initialSMDGain, int stochasticBatchSize, edu.stanford.nlp.optimization.StochasticCalculateMethods stochasticMethod, int passes)">1</method>
			<method name="public void useInPlaceStochasticGradientDescent()">1</method>
			<method name="public void useHybridMinimizer(double initialSMDGain, int stochasticBatchSize, edu.stanford.nlp.optimization.StochasticCalculateMethods stochasticMethod, int cutoffIteration)">1</method>
			<method name="public void setTol(double tol)">1</method>
			<method name="public void setSigma(double sigma)">1</method>
			<method name="public static edu.stanford.nlp.classify.LinearClassifier loadFromFilename(String file)">5</method>
			<method name="public void useConjugateGradientAscent(boolean verbose)">1</method>
			<method name="public edu.stanford.nlp.classify.Classifier trainClassifierSemiSup(edu.stanford.nlp.classify.GeneralDataset data, edu.stanford.nlp.classify.GeneralDataset biasedData, double[][] confusionMatrix, double[] initial)">1</method>
			<method name="public edu.stanford.nlp.classify.LinearClassifier trainClassifierWithInitialWeights(edu.stanford.nlp.classify.GeneralDataset dataset, double[][] initialWeights2D)">2</method>
			<method name="public void useHybridMinimizer()">1</method>
			<method name="public void useStochasticGradientDescent(double gainSGD, int stochasticBatchSize)">1</method>
			<method name="public void setMinimizerCreator(edu.stanford.nlp.util.Factory minimizerCreator)">1</method>
			<method name="public void crossValidateSetSigma(edu.stanford.nlp.classify.GeneralDataset dataset)">1</method>
			<method name="public void _init_(double tol, boolean useSum, double sigma)">0</method>
			<method name="public void _init_(edu.stanford.nlp.optimization.Minimizer min, double tol, boolean useSum, int prior, double sigma, double epsilon)">0</method>
			<method name="private edu.stanford.nlp.optimization.Minimizer getMinimizer()">2</method>
			<method name="public void _init_(edu.stanford.nlp.util.Factory minimizerCreator, double tol, boolean useSum, edu.stanford.nlp.classify.LogPrior logPrior)">0</method>
			<method name="public void _init_(edu.stanford.nlp.util.Factory min, double tol, boolean useSum, int prior, double sigma)">0</method>
			<method name="public void _init_(edu.stanford.nlp.optimization.Minimizer min, double tol, boolean useSum, int prior, double sigma)">0</method>
			<method name="public void _init_(edu.stanford.nlp.util.Factory min, double tol, boolean useSum, int prior, double sigma, double epsilon)">0</method>
			<method name="public void _init_(edu.stanford.nlp.util.Factory min)">0</method>
			<method name="public double getSigma()">1</method>
			<method name="public edu.stanford.nlp.classify.LinearClassifier trainSemiSupGE(edu.stanford.nlp.classify.GeneralDataset labeledDataset, java.util.List unlabeledDataList, double convexComboCoeff)">1</method>
			<method name="public void setMem(int mem)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.ExtractorFrenchPluralSuffix</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>9</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="boolean extractFeature(String cword)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.IntervalTree$ContainsValueFunction</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>6</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>21</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.666666666666667</amc>
		<cc>
			<method name="public Boolean apply(edu.stanford.nlp.util.HasInterval in)">1</method>
			<method name="public void _init_(edu.stanford.nlp.util.HasInterval target)">0</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.GrammaticalStructure</name>
		<wmc>44</wmc>
		<dit>0</dit>
		<noc>3</noc>
		<cbo>51</cbo>
		<rfc>219</rfc>
		<lcom>924</lcom>
		<ca>19</ca>
		<ce>37</ce>
		<npm>27</npm>
		<lcom3>0.9554263565891473</lcom3>
		<loc>3222</loc>
		<dam>0.5</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.11363636363636363</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>71.95454545454545</amc>
		<cc>
			<method name="private static edu.stanford.nlp.trees.DependencyReader loadAlternateDependencyReader(String altDepReaderName)">4</method>
			<method name="private static java.util.List getDependencyPath(edu.stanford.nlp.trees.TreeGraphNode node, edu.stanford.nlp.trees.TreeGraphNode root)">4</method>
			<method name="private static String toStringIndex(edu.stanford.nlp.trees.TypedDependency td, java.util.Map indexToPos)">1</method>
			<method name="private static void throwDepFormatException(String dep)">1</method>
			<method name="public static java.util.Set getDependents(edu.stanford.nlp.trees.TreeGraphNode t)">2</method>
			<method name="public java.util.Collection allTypedDependencies()">1</method>
			<method name="public java.util.Collection typedDependenciesCollapsed()">1</method>
			<method name="public static String dependenciesToString(edu.stanford.nlp.trees.GrammaticalStructure gs, java.util.Collection deps, edu.stanford.nlp.trees.Tree tree, boolean conllx, boolean extraSep)">10</method>
			<method name="public static java.util.List getListGrammaticalRelation(edu.stanford.nlp.trees.TreeGraphNode gov, edu.stanford.nlp.trees.TreeGraphNode dep)">6</method>
			<method name="public java.util.List typedDependenciesCollapsed(boolean includeExtras)">2</method>
			<method name="protected void correctDependencies(java.util.Collection list)">1</method>
			<method name="public java.util.List typedDependenciesCCprocessed()">1</method>
			<method name="public void _init_(java.util.List projectiveDependencies, edu.stanford.nlp.trees.TreeGraphNode root)">0</method>
			<method name="public static edu.stanford.nlp.trees.GrammaticalStructure fromStringReps(java.util.List tokens, java.util.List posTags, java.util.List deps)">10</method>
			<method name="public edu.stanford.nlp.trees.GrammaticalRelation getGrammaticalRelation(int govIndex, int depIndex)">1</method>
			<method name="private java.util.List getDeps(boolean getExtra, edu.stanford.nlp.util.Filter puncTypedDepFilter)">7</method>
			<method name="public static void printDependencies(edu.stanford.nlp.trees.GrammaticalStructure gs, java.util.Collection deps, edu.stanford.nlp.trees.Tree tree, boolean conllx, boolean extraSep)">1</method>
			<method name="protected void collapseDependenciesTree(java.util.List list)">1</method>
			<method name="private static edu.stanford.nlp.util.Function loadParser(String parserFile, String parserOptions, boolean makeCopulaHead)">7</method>
			<method name="public java.util.List getDependencyPath(int nodeIndex, int rootIndex)">1</method>
			<method name="public static edu.stanford.nlp.trees.TreeGraphNode getNodeInRelation(edu.stanford.nlp.trees.TreeGraphNode t, edu.stanford.nlp.trees.GrammaticalRelation r)">1</method>
			<method name="public static edu.stanford.nlp.trees.GrammaticalRelation getGrammaticalRelation(edu.stanford.nlp.trees.TreeGraphNode gov, edu.stanford.nlp.trees.TreeGraphNode dep)">2</method>
			<method name="public java.util.List typedDependencies(boolean includeExtras)">2</method>
			<method name="public java.util.Set dependencies()">1</method>
			<method name="protected void postProcessDependencies(java.util.List basicDep)">1</method>
			<method name="public static boolean isConnected(java.util.Collection list)">2</method>
			<method name="protected void getExtras(java.util.List basicDep)">1</method>
			<method name="public static edu.stanford.nlp.trees.GrammaticalStructure buildCoNLLXGrammaticalStructure(java.util.List tokenFields, java.util.Map shortNameToGRel, edu.stanford.nlp.trees.GrammaticalStructureFromDependenciesFactory factory)">11</method>
			<method name="public static java.util.Collection getRoots(java.util.Collection list)">5</method>
			<method name="public void _init_(edu.stanford.nlp.trees.Tree t, java.util.Collection relations, java.util.concurrent.locks.Lock relationsLock, edu.stanford.nlp.trees.HeadFinder hf, edu.stanford.nlp.util.Filter puncFilter)">0</method>
			<method name="protected edu.stanford.nlp.util.Filter extraTreeDepFilter()">1</method>
			<method name="private static void analyzeNode(edu.stanford.nlp.trees.TreeGraphNode t, edu.stanford.nlp.trees.TreeGraphNode root, java.util.Collection relations, edu.stanford.nlp.trees.HeadFinder hf)">4</method>
			<method name="private static String[] parseClassConstructArgs(String namePlusArgs)">2</method>
			<method name="public java.util.List typedDependenciesCCprocessed(boolean includeExtras)">2</method>
			<method name="public java.util.Collection typedDependenciesCollapsedTree()">1</method>
			<method name="public static void main(String[] args)">69</method>
			<method name="public static edu.stanford.nlp.trees.TreeGraphNode getGovernor(edu.stanford.nlp.trees.TreeGraphNode t)">1</method>
			<method name="private static edu.stanford.nlp.trees.DependencyPrinter loadAlternateDependencyPrinter(String altDepPrinterName)">5</method>
			<method name="public static java.util.List readCoNLLXGrammaticalStructureCollection(String fileName, java.util.Map shortNameToGRel, edu.stanford.nlp.trees.GrammaticalStructureFromDependenciesFactory factory)">1</method>
			<method name="public java.util.Collection typedDependencies()">1</method>
			<method name="private static java.util.Map getAllDependents(edu.stanford.nlp.trees.TreeGraphNode node)">2</method>
			<method name="public void _init_(edu.stanford.nlp.trees.Tree t, java.util.Collection relations, edu.stanford.nlp.trees.HeadFinder hf, edu.stanford.nlp.util.Filter puncFilter)">0</method>
			<method name="protected void collapseDependencies(java.util.List list, boolean CCprocess, boolean includeExtras)">1</method>
			<method name="private static void getTreeDeps(edu.stanford.nlp.trees.TreeGraphNode t, java.util.List basicDep, edu.stanford.nlp.util.Filter puncTypedDepFilter, edu.stanford.nlp.util.Filter extraTreeDepFilter)">4</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.BasicDocument</name>
		<wmc>39</wmc>
		<dit>4</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>80</rfc>
		<lcom>687</lcom>
		<ca>3</ca>
		<ce>7</ce>
		<npm>38</npm>
		<lcom3>0.5</lcom3>
		<loc>459</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.6818181818181818</mfa>
		<cam>0.14792899408284024</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.64102564102564</amc>
		<cc>
			<method name="public static edu.stanford.nlp.ling.BasicDocument init(java.io.Reader textReader, String title, boolean keepOriginalText)">1</method>
			<method name="public void setTokenizerFactory(edu.stanford.nlp.process.TokenizerFactory tokenizerFactory)">1</method>
			<method name="public edu.stanford.nlp.ling.BasicDocument init(java.io.File textFile, String title, boolean keepOriginalText)">1</method>
			<method name="public edu.stanford.nlp.ling.BasicDocument init(java.io.Reader textReader, boolean keepOriginalText)">1</method>
			<method name="public edu.stanford.nlp.ling.BasicDocument init(java.net.URL textURL, String title)">1</method>
			<method name="public String title()">1</method>
			<method name="public static void printState(edu.stanford.nlp.ling.BasicDocument bd)">1</method>
			<method name="public void setLabels(java.util.Collection labels)">2</method>
			<method name="public edu.stanford.nlp.ling.BasicDocument init(java.util.List words)">1</method>
			<method name="public java.util.Collection asFeatures()">1</method>
			<method name="public edu.stanford.nlp.ling.Document blankDocument()">1</method>
			<method name="public static edu.stanford.nlp.ling.BasicDocument init(String text, boolean keepOriginalText)">1</method>
			<method name="public java.util.Collection labels()">1</method>
			<method name="public edu.stanford.nlp.ling.BasicDocument init(java.io.Reader textReader)">1</method>
			<method name="public edu.stanford.nlp.ling.BasicDocument init(java.io.File textFile, String title)">1</method>
			<method name="public Object label()">2</method>
			<method name="public void _init_(edu.stanford.nlp.process.TokenizerFactory tokenizerFactory)">0</method>
			<method name="public edu.stanford.nlp.ling.BasicDocument init(java.net.URL textURL, boolean keepOriginalText)">1</method>
			<method name="public static edu.stanford.nlp.ling.BasicDocument init(String text, String title, boolean keepOriginalText)">3</method>
			<method name="public String presentableText()">3</method>
			<method name="public static edu.stanford.nlp.ling.BasicDocument init()">1</method>
			<method name="public edu.stanford.nlp.ling.BasicDocument init(java.net.URL textURL)">1</method>
			<method name="public void addLabel(Object label)">2</method>
			<method name="public void _init_()">0</method>
			<method name="public edu.stanford.nlp.ling.BasicDocument init(java.io.File textFile)">1</method>
			<method name="public void setLabel(Object label)">1</method>
			<method name="public void _init_(java.util.Collection d)">0</method>
			<method name="public edu.stanford.nlp.ling.BasicDocument init(java.net.URL textURL, String title, boolean keepOriginalText)">1</method>
			<method name="public static edu.stanford.nlp.ling.BasicDocument init(String text)">1</method>
			<method name="public void _init_(edu.stanford.nlp.ling.Document d)">0</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="public String originalText()">1</method>
			<method name="public edu.stanford.nlp.process.TokenizerFactory tokenizerFactory()">1</method>
			<method name="public edu.stanford.nlp.ling.BasicDocument init(java.io.File textFile, boolean keepOriginalText)">1</method>
			<method name="public edu.stanford.nlp.ling.BasicDocument init(java.util.List words, String title)">1</method>
			<method name="public void setTitle(String title)">2</method>
			<method name="public edu.stanford.nlp.ling.BasicDocument init(java.io.Reader textReader, String title)">1</method>
			<method name="public static edu.stanford.nlp.ling.BasicDocument init(String text, String title)">1</method>
			<method name="protected void parse(String text)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$ComparableComparator</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>5</rfc>
		<lcom>3</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>17</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.666666666666667</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public int compare(Comparable o1, Comparable o2)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.Annotator</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>45</cbo>
		<rfc>7</rfc>
		<lcom>6</lcom>
		<ca>42</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>1.1083333333333334</lcom3>
		<loc>292</loc>
		<dam>0.0</dam>
		<moa>19</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>62.0</amc>
		<cc>
			<method name="public abstract java.util.Set requirementsSatisfied()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public abstract void annotate(edu.stanford.nlp.pipeline.Annotation)">1</method>
			<method name="public abstract java.util.Set requires()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreLabel$GenericAnnotation</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.Expressions$WrappedExpression</name>
		<wmc>9</wmc>
		<dit>1</dit>
		<noc>2</noc>
		<cbo>6</cbo>
		<rfc>18</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>4</ce>
		<npm>9</npm>
		<lcom3>0.125</lcom3>
		<loc>80</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.3111111111111111</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>7.777777777777778</amc>
		<cc>
			<method name="public boolean hasValue()">1</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Expression simplify(edu.stanford.nlp.ling.tokensregex.Env env)">1</method>
			<method name="public boolean equals(Object o)">6</method>
			<method name="public int hashCode()">2</method>
			<method name="public void _init_()">0</method>
			<method name="public String getType()">1</method>
			<method name="public void setTags(edu.stanford.nlp.ling.tokensregex.types.Tags tags)">1</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Tags getTags()">1</method>
			<method name="public transient edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env env, Object[] args)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.IntCounter$2</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>2</npm>
		<lcom3>0.75</lcom3>
		<loc>21</loc>
		<dam>0.5</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.333333333333333</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.stats.IntCounter)">0</method>
			<method name="public edu.stanford.nlp.stats.Counter create()">1</method>
			<method name="public volatile Object create()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.CollocationFinder</name>
		<wmc>16</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>18</cbo>
		<rfc>84</rfc>
		<lcom>90</lcom>
		<ca>1</ca>
		<ce>17</ce>
		<npm>5</npm>
		<lcom3>0.7066666666666667</lcom3>
		<loc>968</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.26666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>59.1875</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.WordNetConnection w, edu.stanford.nlp.trees.HeadFinder hf)">0</method>
			<method name="private static String treeAsNonStemmedCollocation(edu.stanford.nlp.trees.Tree t)">2</method>
			<method name="static void _clinit_()">0</method>
			<method name="private static java.util.List getNonStemmedWordTagsFromTree(edu.stanford.nlp.trees.Tree t)">2</method>
			<method name="private void getCollocationsList(boolean threadSafe)">1</method>
			<method name="private static String mergeLeavesIntoCollocatedString(edu.stanford.nlp.trees.Tree[] trees)">3</method>
			<method name="private edu.stanford.nlp.trees.Tree getMangledTree(edu.stanford.nlp.trees.Tree t)">13</method>
			<method name="public void PrintCollocationStrings(java.io.PrintWriter pw)">2</method>
			<method name="private void getCollocationsList(edu.stanford.nlp.trees.Tree t, boolean threadSafe)">12</method>
			<method name="private static java.util.List getStemmedWordTagsFromTree(edu.stanford.nlp.trees.Tree t, boolean threadSafe)">3</method>
			<method name="private static String mergeLeavesIntoCollocatedString(edu.stanford.nlp.trees.Tree t)">2</method>
			<method name="public void _init_(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.WordNetConnection w, edu.stanford.nlp.trees.HeadFinder hf, boolean threadSafe)">0</method>
			<method name="private boolean wordNetContains(String s)">1</method>
			<method name="private static String treeAsStemmedCollocation(edu.stanford.nlp.trees.Tree t, boolean threadSafe)">2</method>
			<method name="public edu.stanford.nlp.trees.Tree getMangledTree()">1</method>
			<method name="public void _init_(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.WordNetConnection w)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.IntCounter$1</name>
		<wmc>3</wmc>
		<dit>3</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>7</rfc>
		<lcom>1</lcom>
		<ca>4</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>0.5</lcom3>
		<loc>20</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.9047619047619048</mfa>
		<cam>0.6666666666666666</cam>
		<ic>2</ic>
		<cbm>7</cbm>
		<amc>5.333333333333333</amc>
		<cc>
			<method name="public int size()">1</method>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="void _init_(edu.stanford.nlp.stats.IntCounter)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$NeighborsAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>9</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.ListInstances</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>14</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>3</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>92</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6428571428571429</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.714285714285714</amc>
		<cc>
			<method name="protected void inc()">1</method>
			<method name="void _init_()">0</method>
			<method name="public int getNum()">1</method>
			<method name="protected void addPositions(int s, int e)">1</method>
			<method name="public int[] getPositions()">1</method>
			<method name="protected void add(int x)">1</method>
			<method name="public int[] getInstances()">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.pascal.AlignmentFactory</name>
		<wmc>9</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>30</rfc>
		<lcom>22</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>7</npm>
		<lcom3>0.7291666666666667</lcom3>
		<loc>528</loc>
		<dam>0.5833333333333334</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.25</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>56.333333333333336</amc>
		<cc>
			<method name="public void _init_(char[] longForm, char[] shortForm)">0</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public java.util.ArrayList getAlignmentsList()">1</method>
			<method name="public java.util.Iterator getAlignments()">1</method>
			<method name="private void findAlignments(int[] pointers, int lg, int s)">16</method>
			<method name="public static char[] toLower(char[] in)">2</method>
			<method name="public void _init_(String longForm, String shortForm)">0</method>
			<method name="public static String dumpIntArray(int[] a)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.IntCounter$3</name>
		<wmc>3</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>7</rfc>
		<lcom>1</lcom>
		<ca>2</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>0.5</lcom3>
		<loc>20</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.8888888888888888</mfa>
		<cam>0.6666666666666666</cam>
		<ic>1</ic>
		<cbm>4</cbm>
		<amc>5.333333333333333</amc>
		<cc>
			<method name="public int size()">1</method>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="void _init_(edu.stanford.nlp.stats.IntCounter)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.MutableLong</name>
		<wmc>15</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>17</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>15</npm>
		<lcom3>0.5357142857142857</lcom3>
		<loc>114</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.3157894736842105</mfa>
		<cam>0.28</cam>
		<ic>1</ic>
		<cbm>2</cbm>
		<amc>6.466666666666667</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public void set(long i)">1</method>
			<method name="public byte byteValue()">1</method>
			<method name="public double doubleValue()">1</method>
			<method name="public void incValue(int val)">1</method>
			<method name="public int compareTo(edu.stanford.nlp.util.MutableLong anotherMutableLong)">3</method>
			<method name="public void _init_(int i)">0</method>
			<method name="public volatile int compareTo(Object x0)">1</method>
			<method name="public long longValue()">1</method>
			<method name="public int hashCode()">1</method>
			<method name="public float floatValue()">1</method>
			<method name="public int intValue()">1</method>
			<method name="public short shortValue()">1</method>
			<method name="public boolean equals(Object obj)">3</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.graph.DirectedMultiGraph$1</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>22</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.0</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.graph.DirectedMultiGraph, Object)">0</method>
			<method name="public java.util.Iterator iterator()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.graph.DirectedMultiGraph$2</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>22</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.0</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.graph.DirectedMultiGraph, Object)">0</method>
			<method name="public java.util.Iterator iterator()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$5$1</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>5</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>0.5</lcom3>
		<loc>34</loc>
		<dam>0.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.333333333333334</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.trees.tregex.Relation$5, edu.stanford.nlp.trees.tregex.TregexMatcher, edu.stanford.nlp.trees.Tree)">0</method>
			<method name="public void advance()">1</method>
			<method name="void initialize()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.graph.DirectedMultiGraph$3</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>15</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="void _init_(edu.stanford.nlp.graph.DirectedMultiGraph)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.Expressions$ConditionalExpression</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>12</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>5</npm>
		<lcom3>2.0</lcom3>
		<loc>222</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.44</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>43.4</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.types.Expression expr)">0</method>
			<method name="public void _init_(String op, edu.stanford.nlp.ling.tokensregex.types.Expression expr1, edu.stanford.nlp.ling.tokensregex.types.Expression expr2)">0</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Expression simplify(edu.stanford.nlp.ling.tokensregex.Env env)">1</method>
			<method name="public String getType()">1</method>
			<method name="public transient edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env env, Object[] args)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTimeMain$TimebankSent</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>10</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>0.625</lcom3>
		<loc>128</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>39.0</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="void _init_(edu.stanford.nlp.time.SUTimeMain$1 x0)">0</method>
			<method name="public boolean add(String item)">6</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.HookChart$ChartIndex</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>5</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>69</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>15.25</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public boolean equals(Object o)">7</method>
			<method name="public int hashCode()">1</method>
			<method name="void _init_(edu.stanford.nlp.parser.lexparser.HookChart$1 x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.GrammaticalStructure$NoPunctFilter</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>7</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>0.75</lcom3>
		<loc>33</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.333333333333334</amc>
		<cc>
			<method name="public boolean accept(edu.stanford.nlp.trees.Dependency d)">3</method>
			<method name="void _init_(edu.stanford.nlp.util.Filter f)">0</method>
			<method name="public volatile boolean accept(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.FastFactoredParser$BinaryHeadFinder</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>17</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>2</npm>
		<lcom3>1.3333333333333333</lcom3>
		<loc>64</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>14.75</amc>
		<cc>
			<method name="public edu.stanford.nlp.trees.Tree determineHead(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.Tree parent)">1</method>
			<method name="private void _init_()">0</method>
			<method name="void _init_(edu.stanford.nlp.parser.lexparser.FastFactoredParser$1 x0)">0</method>
			<method name="public edu.stanford.nlp.trees.Tree determineHead(edu.stanford.nlp.trees.Tree t)">6</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.MatchedExpression</name>
		<wmc>23</wmc>
		<dit>1</dit>
		<noc>1</noc>
		<cbo>31</cbo>
		<rfc>67</rfc>
		<lcom>115</lcom>
		<ca>19</ca>
		<ce>19</ce>
		<npm>20</npm>
		<lcom3>0.8772727272727273</lcom3>
		<loc>798</loc>
		<dam>0.3</dam>
		<moa>9</moa>
		<mfa>0.0</mfa>
		<cam>0.1590909090909091</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>32.82608695652174</amc>
		<cc>
			<method name="public void setIncludeNested(boolean includeNested)">1</method>
			<method name="public boolean isIncludeNested()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static java.util.List replaceMergedUsingTokenOffsets(java.util.List list, java.util.List matchedExprs)">7</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Value getValue()">1</method>
			<method name="public static java.util.List removeOverlapping(java.util.List chunks)">3</method>
			<method name="public edu.stanford.nlp.util.Interval getChunkOffsets()">1</method>
			<method name="public double getPriority()">1</method>
			<method name="public int getOrder()">1</method>
			<method name="public String getText()">1</method>
			<method name="public boolean extractAnnotation(edu.stanford.nlp.ling.tokensregex.Env env, java.util.List source)">1</method>
			<method name="protected boolean extractAnnotation(java.util.List source, java.util.Map chunkAggregators)">1</method>
			<method name="public edu.stanford.nlp.util.Interval getCharOffsets()">1</method>
			<method name="public static java.util.List replaceMerged(java.util.List list, java.util.List matchedExprs)">4</method>
			<method name="public edu.stanford.nlp.util.Interval getTokenOffsets()">1</method>
			<method name="public void _init_(edu.stanford.nlp.util.Interval charOffsets, edu.stanford.nlp.util.Interval tokenOffsets, edu.stanford.nlp.ling.tokensregex.MatchedExpression$SingleAnnotationExtractor extractFunc, double priority, double weight)">0</method>
			<method name="public boolean extractAnnotation(edu.stanford.nlp.ling.tokensregex.Env env, edu.stanford.nlp.util.CoreMap sourceAnnotation)">1</method>
			<method name="public String toString()">1</method>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.MatchedExpression me)">0</method>
			<method name="private boolean extractAnnotation(edu.stanford.nlp.util.CoreMap sourceAnnotation, java.util.Map aggregators)">7</method>
			<method name="public edu.stanford.nlp.util.CoreMap getAnnotation()">1</method>
			<method name="public static java.util.List removeNested(java.util.List chunks)">3</method>
			<method name="public static java.util.List removeNullValues(java.util.List chunks)">4</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.crf.FactorTable</name>
		<wmc>48</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>77</rfc>
		<lcom>276</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>41</npm>
		<lcom3>0.31205673758865243</lcom3>
		<loc>1674</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.28869047619047616</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>33.8125</amc>
		<cc>
			<method name="public double logProbFront(int[] label)">1</method>
			<method name="public void incrementValue(int[] label, double value)">1</method>
			<method name="public void _init_(int numClasses, int windowSize)">0</method>
			<method name="private int indexOf(int[] entry)">2</method>
			<method name="public double getValue(int index)">1</method>
			<method name="public boolean hasNaN()">1</method>
			<method name="public double logProbEnd(int[] labels)">1</method>
			<method name="private static String toString(int[] array, edu.stanford.nlp.util.Index classIndex)">2</method>
			<method name="void logIncrementValue(int index, double value)">1</method>
			<method name="public edu.stanford.nlp.ie.crf.FactorTable sumOutEnd()">2</method>
			<method name="public void multiplyInEnd(edu.stanford.nlp.ie.crf.FactorTable other)">2</method>
			<method name="public int size()">1</method>
			<method name="public double[] conditionalLogProbsGivenPrevious(int[] given)">3</method>
			<method name="public String toString(edu.stanford.nlp.util.Index classIndex)">2</method>
			<method name="public double logProbFront(int label)">1</method>
			<method name="public String toProbString()">2</method>
			<method name="public int numClasses()">1</method>
			<method name="public double unnormalizedLogProbFront(int[] labels)">1</method>
			<method name="public double unnormalizedLogProb(int[] label)">1</method>
			<method name="public double conditionalLogProbGivenFirst(int given, int[] of)">2</method>
			<method name="public double unnormalizedLogProbEnd(int[] labels)">2</method>
			<method name="public String toString()">2</method>
			<method name="public double unnormalizedLogProbFront(int label)">1</method>
			<method name="public double unnormalizedConditionalLogProbGivenFirst(int given, int[] of)">2</method>
			<method name="public void incrementValue(int index, double value)">1</method>
			<method name="public double prob(int[] label)">1</method>
			<method name="public String toNonLogString()">2</method>
			<method name="public void divideBy(edu.stanford.nlp.ie.crf.FactorTable other)">4</method>
			<method name="public void logIncrementValue(int[] label, double value)">1</method>
			<method name="private int[] indicesEnd(int[] entries)">3</method>
			<method name="public edu.stanford.nlp.ie.crf.FactorTable sumOutFront()">2</method>
			<method name="private int indexOf(int[] front, int end)">2</method>
			<method name="private int indicesFront(int[] entries)">2</method>
			<method name="public double logProb(int[] label)">1</method>
			<method name="public void setValue(int index, double value)">1</method>
			<method name="public double totalMass()">1</method>
			<method name="public void setValue(int[] label, double value)">1</method>
			<method name="public void multiplyInFront(edu.stanford.nlp.ie.crf.FactorTable other)">2</method>
			<method name="public static void main(String[] args)">18</method>
			<method name="public double unnormalizedLogProbEnd(int label)">1</method>
			<method name="public double getValue(int[] label)">1</method>
			<method name="public double conditionalLogProbGivenNext(int[] given, int of)">3</method>
			<method name="public int[] toArray(int index)">2</method>
			<method name="public void _init_(edu.stanford.nlp.ie.crf.FactorTable t)">0</method>
			<method name="public int windowSize()">1</method>
			<method name="public double logProbEnd(int label)">1</method>
			<method name="private int indexOf(int front, int[] end)">2</method>
			<method name="public double conditionalLogProbGivenPrevious(int[] given, int of)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTimeMain$EvalStats</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>0.0</lcom3>
		<loc>26</loc>
		<dam>0.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.5</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="void _init_(edu.stanford.nlp.time.SUTimeMain$1 x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$SemanticTagAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.wordseg.Sighan2005DocumentReaderAndWriter$CTBDocumentParser</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>30</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>8</ce>
		<npm>2</npm>
		<lcom3>0.875</lcom3>
		<loc>266</loc>
		<dam>0.5</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>86.33333333333333</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.wordseg.Sighan2005DocumentReaderAndWriter)">0</method>
			<method name="public java.util.List apply(String line)">19</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.metrics.AbstractEval$ScoreEval</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>14</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>0.3333333333333333</lcom3>
		<loc>120</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4583333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>28.25</amc>
		<cc>
			<method name="public void _init_(String str, boolean runningAverages)">0</method>
			<method name="public void display(boolean verbose, java.io.PrintWriter pw)">3</method>
			<method name="protected java.util.Set makeObjects(edu.stanford.nlp.trees.Tree tree)">1</method>
			<method name="public void recordScore(edu.stanford.nlp.parser.KBestViterbiParser parser, java.io.PrintWriter pw)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceMentionArgument</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>2</noc>
		<cbo>6</cbo>
		<rfc>18</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>4</ce>
		<npm>5</npm>
		<lcom3>0.33333333333333337</lcom3>
		<loc>131</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.45</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>24.6</amc>
		<cc>
			<method name="public edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEntityMention getContent()">1</method>
			<method name="public String toXml(int offset)">1</method>
			<method name="public String getRole()">1</method>
			<method name="public void _init_(String role, edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEntityMention content, String mentionType)">0</method>
			<method name="public String toXmlShort(int offset)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.Counters$7$1$1$1</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>26</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>5</npm>
		<lcom3>0.3</lcom3>
		<loc>162</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.3333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>25.666666666666668</amc>
		<cc>
			<method name="public volatile Object setValue(Object x0)">1</method>
			<method name="public Double setValue(Double value)">6</method>
			<method name="public volatile Object getValue()">1</method>
			<method name="public Double getValue()">1</method>
			<method name="public Object getKey()">1</method>
			<method name="void _init_(edu.stanford.nlp.stats.Counters$7$1$1, java.util.Map$Entry)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.classify.CrossValidator$SavedState</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>4</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>5</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.sequences.FactoredSequenceListener</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>7</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>4</npm>
		<lcom3>0.22222222222222218</lcom3>
		<loc>90</loc>
		<dam>0.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.45</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>20.75</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.sequences.SequenceListener model1, edu.stanford.nlp.sequences.SequenceListener model2)">0</method>
			<method name="public void _init_(edu.stanford.nlp.sequences.SequenceListener[] models)">0</method>
			<method name="public void setInitialSequence(int[] sequence)">3</method>
			<method name="public void updateSequenceElement(int[] sequence, int pos, int oldVal)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.AbstractTreebankParserParams$TypedDependencyTyper</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>9</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>82</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>26.0</amc>
		<cc>
			<method name="public java.util.List makeDependency(edu.stanford.nlp.trees.Tree head, edu.stanford.nlp.trees.Tree dep, edu.stanford.nlp.trees.Tree root)">3</method>
			<method name="public void _init_(edu.stanford.nlp.trees.HeadFinder hf)">0</method>
			<method name="public volatile Object makeDependency(edu.stanford.nlp.trees.Tree x0, edu.stanford.nlp.trees.Tree x1, edu.stanford.nlp.trees.Tree x2)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.XMLUtils</name>
		<wmc>22</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>64</rfc>
		<lcom>225</lcom>
		<ca>4</ca>
		<ce>1</ce>
		<npm>19</npm>
		<lcom3>0.9047619047619048</lcom3>
		<loc>425</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.16883116883116883</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.272727272727273</amc>
		<cc>
			<method name="public static String documentToString(org.w3c.dom.Document document)">1</method>
			<method name="public static String getAttribute(org.w3c.dom.Element element, String name)">2</method>
			<method name="public static void printNode(java.io.OutputStream out, org.w3c.dom.Node node, boolean prettyPrint, boolean includeXmlDeclaration)">3</method>
			<method name="public void _init_()">0</method>
			<method name="public static String nodeToString(org.w3c.dom.Node node, boolean prettyPrint)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static org.w3c.dom.Document createDocument()">1</method>
			<method name="public static org.w3c.dom.Element parseElement(String xml)">1</method>
			<method name="public static transient org.w3c.dom.Node getNode(org.w3c.dom.Node node, String[] nodePath)">3</method>
			<method name="public static String getAttributeValue(org.w3c.dom.Node node, String name)">2</method>
			<method name="public static transient java.util.List getNodes(org.w3c.dom.Node node, java.util.regex.Pattern[] nodePath)">1</method>
			<method name="public static transient java.util.List getNodes(org.w3c.dom.Node node, String[] nodePath)">1</method>
			<method name="public static transient String getNodeText(org.w3c.dom.Node node, java.util.regex.Pattern[] nodePath)">3</method>
			<method name="private static void getMatchingNodes(org.w3c.dom.Node node, String[] nodePath, int cur, java.util.List res)">8</method>
			<method name="public static transient org.w3c.dom.Node getNode(org.w3c.dom.Node node, java.util.regex.Pattern[] nodePath)">3</method>
			<method name="public static transient java.util.List getNodeTexts(org.w3c.dom.Node node, String[] nodePath)">3</method>
			<method name="public static void removeChildren(org.w3c.dom.Node e)">2</method>
			<method name="private static void getMatchingNodes(org.w3c.dom.Node node, java.util.regex.Pattern[] nodePath, int cur, java.util.List res)">7</method>
			<method name="public static org.w3c.dom.Text createTextNode(String text)">1</method>
			<method name="public static org.w3c.dom.Element createElement(String tag)">1</method>
			<method name="public static transient String getNodeText(org.w3c.dom.Node node, String[] nodePath)">3</method>
			<method name="public static org.w3c.dom.Node getAttribute(org.w3c.dom.Node node, String name)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.io.ExtensionFileFilter</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>15</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>0</ce>
		<npm>4</npm>
		<lcom3>0.16666666666666666</lcom3>
		<loc>74</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.5</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>17.0</amc>
		<cc>
			<method name="public void _init_(String ext)">0</method>
			<method name="public String getDescription()">1</method>
			<method name="public void _init_(String ext, boolean recurse)">0</method>
			<method name="public boolean accept(java.io.File file)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.Counters$6$1</name>
		<wmc>3</wmc>
		<dit>3</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>6</rfc>
		<lcom>1</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>0.5</lcom3>
		<loc>20</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.9047619047619048</mfa>
		<cam>0.6666666666666666</cam>
		<ic>2</ic>
		<cbm>7</cbm>
		<amc>5.333333333333333</amc>
		<cc>
			<method name="public int size()">1</method>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="void _init_(edu.stanford.nlp.stats.Counters$6)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$1$1</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>0</npm>
		<lcom3>0.5</lcom3>
		<loc>18</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.0</amc>
		<cc>
			<method name="void initialize()">1</method>
			<method name="void _init_(edu.stanford.nlp.trees.tregex.Relation$1, edu.stanford.nlp.trees.Tree)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams$AddRelativeNodeFunction</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>16</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>5</npm>
		<lcom3>0.4666666666666667</lcom3>
		<loc>174</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.44</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>27.0</amc>
		<cc>
			<method name="public void _init_(String annotationMark, String key, boolean basicCategory)">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public String toString()">2</method>
			<method name="public void _init_(String annotationMark, String key1, String key2, boolean basicCategory)">0</method>
			<method name="public volatile Object apply(Object x0)">1</method>
			<method name="public String apply(edu.stanford.nlp.trees.tregex.TregexMatcher m)">5</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.wordseg.ChineseSegmenterFeatureFactory</name>
		<wmc>9</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>40</rfc>
		<lcom>24</lcom>
		<ca>0</ca>
		<ce>10</ce>
		<npm>6</npm>
		<lcom3>0.8125</lcom3>
		<loc>1705</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>187.77777777777777</amc>
		<cc>
			<method name="private static String isEngPU(String Ep)">2</method>
			<method name="public java.util.Collection getCliqueFeatures(edu.stanford.nlp.util.PaddedList cInfo, int loc, edu.stanford.nlp.sequences.Clique clique)">3</method>
			<method name="public java.util.Collection featuresC(edu.stanford.nlp.util.PaddedList cInfo, int loc)">2</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public java.util.Collection featuresCnC(edu.stanford.nlp.util.PaddedList cInfo, int loc)">6</method>
			<method name="public void init(edu.stanford.nlp.sequences.SeqClassifierFlags flags)">1</method>
			<method name="private static String isEnglish(String Ep, String Ec)">19</method>
			<method name="public java.util.Collection featuresCpC(edu.stanford.nlp.util.PaddedList cInfo, int loc)">65</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.RepeatedRecordHandler$PendingType</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.9166666666666666</lcom3>
		<loc>56</loc>
		<dam>0.25</dam>
		<moa>4</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>12.0</amc>
		<cc>
			<method name="public static edu.stanford.nlp.util.logging.RepeatedRecordHandler$PendingType valueOf(String name)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static edu.stanford.nlp.util.logging.RepeatedRecordHandler$PendingType[] values()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.SimpleCharStream</name>
		<wmc>38</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>51</rfc>
		<lcom>405</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>33</npm>
		<lcom3>0.4785373608903021</lcom3>
		<loc>1121</loc>
		<dam>0.7058823529411765</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.30451127819548873</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>28.05263157894737</amc>
		<cc>
			<method name="protected void FillBuff()">1</method>
			<method name="public void _init_(java.io.Reader dstream, int startline, int startcolumn, int buffersize)">0</method>
			<method name="public void _init_(java.io.Reader dstream)">0</method>
			<method name="public void ReInit(java.io.InputStream dstream, String encoding, int startline, int startcolumn, int buffersize)">1</method>
			<method name="protected void UpdateLineColumn(char c)">5</method>
			<method name="public int getLine()">1</method>
			<method name="public void ReInit(java.io.Reader dstream, int startline, int startcolumn)">1</method>
			<method name="public void _init_(java.io.InputStream dstream)">0</method>
			<method name="void setTrackLineColumn(boolean trackLineColumn)">1</method>
			<method name="public void adjustBeginLineColumn(int newLine, int newCol)">7</method>
			<method name="public void backup(int amount)">2</method>
			<method name="public void ReInit(java.io.Reader dstream)">1</method>
			<method name="public int getBeginLine()">1</method>
			<method name="public void ReInit(java.io.InputStream dstream, String encoding, int startline, int startcolumn)">1</method>
			<method name="public void _init_(java.io.InputStream dstream, String encoding)">0</method>
			<method name="public void setTabSize(int i)">1</method>
			<method name="public void _init_(java.io.InputStream dstream, int startline, int startcolumn)">0</method>
			<method name="boolean getTrackLineColumn()">1</method>
			<method name="protected void ExpandBuff(boolean wrapAround)">2</method>
			<method name="public void _init_(java.io.Reader dstream, int startline, int startcolumn)">0</method>
			<method name="public void ReInit(java.io.InputStream dstream, int startline, int startcolumn)">1</method>
			<method name="public void _init_(java.io.InputStream dstream, String encoding, int startline, int startcolumn)">0</method>
			<method name="public void ReInit(java.io.InputStream dstream)">1</method>
			<method name="public void ReInit(java.io.Reader dstream, int startline, int startcolumn, int buffersize)">3</method>
			<method name="public char readChar()">1</method>
			<method name="public void ReInit(java.io.InputStream dstream, String encoding)">1</method>
			<method name="public void _init_(java.io.InputStream dstream, int startline, int startcolumn, int buffersize)">0</method>
			<method name="public int getTabSize()">1</method>
			<method name="public char BeginToken()">1</method>
			<method name="public int getColumn()">1</method>
			<method name="public void Done()">1</method>
			<method name="public int getEndColumn()">1</method>
			<method name="public void _init_(java.io.InputStream dstream, String encoding, int startline, int startcolumn, int buffersize)">0</method>
			<method name="public char[] GetSuffix(int len)">2</method>
			<method name="public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize)">1</method>
			<method name="public int getEndLine()">1</method>
			<method name="public String GetImage()">2</method>
			<method name="public int getBeginColumn()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.CoordinationPattern</name>
		<wmc>8</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>21</rfc>
		<lcom>4</lcom>
		<ca>2</ca>
		<ce>6</ce>
		<npm>5</npm>
		<lcom3>0.7857142857142857</lcom3>
		<loc>141</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.20833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.125</amc>
		<cc>
			<method name="public edu.stanford.nlp.trees.tregex.TregexMatcher matcher(edu.stanford.nlp.trees.Tree root, edu.stanford.nlp.trees.Tree tree, java.util.IdentityHashMap nodesToParents, java.util.Map namesToNodes, edu.stanford.nlp.trees.tregex.VariableStrings variableStrings, edu.stanford.nlp.trees.HeadFinder headFinder)">1</method>
			<method name="public void _init_(java.util.List children, boolean isConj)">0</method>
			<method name="public String localString()">2</method>
			<method name="public java.util.List getChildren()">1</method>
			<method name="static boolean access$100(edu.stanford.nlp.trees.tregex.CoordinationPattern x0)">1</method>
			<method name="public String toString()">3</method>
			<method name="boolean getChangesVariables()">1</method>
			<method name="static java.util.List access$000(edu.stanford.nlp.trees.tregex.CoordinationPattern x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.CompositeTreebank</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>12</rfc>
		<lcom>4</lcom>
		<ca>3</ca>
		<ce>4</ce>
		<npm>5</npm>
		<lcom3>0.25</lcom3>
		<loc>50</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.36</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.6</amc>
		<cc>
			<method name="public void clear()">1</method>
			<method name="public void loadPath(java.io.File path, java.io.FileFilter filt)">1</method>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="public void _init_(edu.stanford.nlp.trees.Treebank t1, edu.stanford.nlp.trees.Treebank t2)">0</method>
			<method name="public void apply(edu.stanford.nlp.trees.TreeVisitor tp)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.classify.CrossValidator$CrossValidationIterator</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>14</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>4</npm>
		<lcom3>0.25</lcom3>
		<loc>94</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>17.4</amc>
		<cc>
			<method name="public boolean hasNext()">2</method>
			<method name="public void remove()">1</method>
			<method name="void _init_(edu.stanford.nlp.classify.CrossValidator)">0</method>
			<method name="public volatile Object next()">1</method>
			<method name="public edu.stanford.nlp.util.Triple next()">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.sequences.ObjectBankWrapper</name>
		<wmc>25</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>76</rfc>
		<lcom>4</lcom>
		<ca>2</ca>
		<ce>10</ce>
		<npm>18</npm>
		<lcom3>0.775</lcom3>
		<loc>537</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.16727272727272727</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>20.28</amc>
		<cc>
			<method name="public void clear()">1</method>
			<method name="private String intern(String s)">2</method>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="public void _init_(edu.stanford.nlp.sequences.SeqClassifierFlags flags, edu.stanford.nlp.objectbank.ObjectBank wrapped, java.util.Set knownLCWords)">0</method>
			<method name="public boolean remove(java.util.List o)">1</method>
			<method name="public boolean containsAll(java.util.Collection c)">1</method>
			<method name="static void access$000(edu.stanford.nlp.sequences.ObjectBankWrapper x0, java.util.List x1)">1</method>
			<method name="private void mergeTags(java.util.List doc)">5</method>
			<method name="public java.util.List processDocument(java.util.List doc)">3</method>
			<method name="public int size()">1</method>
			<method name="public volatile boolean add(Object x0)">1</method>
			<method name="private void fixDocLengths(java.util.List docs)">10</method>
			<method name="public boolean contains(java.util.List o)">1</method>
			<method name="public java.util.List[] toArray(java.util.List[] o)">1</method>
			<method name="public boolean add(java.util.List o)">1</method>
			<method name="private String fix(String word)">5</method>
			<method name="public boolean isEmpty()">1</method>
			<method name="private void iobTags(java.util.List doc)">7</method>
			<method name="private void doBasicStuff(java.util.List doc)">9</method>
			<method name="public boolean removeAll(java.util.Collection c)">1</method>
			<method name="public boolean addAll(java.util.Collection c)">1</method>
			<method name="public Object[] toArray()">1</method>
			<method name="public void clearMemory()">1</method>
			<method name="public void keepInMemory(boolean keep)">1</method>
			<method name="public boolean retainAll(java.util.Collection c)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.IterableIterator</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>13</rfc>
		<lcom>3</lcom>
		<ca>3</ca>
		<ce>0</ce>
		<npm>6</npm>
		<lcom3>0.2</lcom3>
		<loc>86</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3888888888888889</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.166666666666666</amc>
		<cc>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="public static void main(String[] args)">2</method>
			<method name="public boolean hasNext()">1</method>
			<method name="public void remove()">1</method>
			<method name="public Object next()">1</method>
			<method name="public void _init_(java.util.Iterator it)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$CoNLLDepParentIndexAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.IntervalTree$ContainsIntervalFunction</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>8</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>36</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4666666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.333333333333334</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.util.Interval target, boolean exact)">0</method>
			<method name="public Boolean apply(edu.stanford.nlp.util.HasInterval in)">2</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.classify.AdaptedGaussianPriorObjectiveFunction</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>15</rfc>
		<lcom>11</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>2</npm>
		<lcom3>0.6</lcom3>
		<loc>303</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4666666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>49.333333333333336</amc>
		<cc>
			<method name="protected void rvfcalculate(double[] x)">1</method>
			<method name="private void calculateSCL(double[] x)">1</method>
			<method name="public void _init_(edu.stanford.nlp.classify.GeneralDataset dataset, edu.stanford.nlp.classify.LogPrior prior, double[][] weights)">0</method>
			<method name="protected void calculate(double[] x)">2</method>
			<method name="public double[] to1D(double[][] x2)">3</method>
			<method name="private void calculateCL(double[] x)">12</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.DependencyGrammar</name>
		<wmc>12</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>12</rfc>
		<lcom>66</lcom>
		<ca>9</ca>
		<ce>2</ce>
		<npm>12</npm>
		<lcom3>2.0</lcom3>
		<loc>12</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.25</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract void readData(java.io.BufferedReader)">1</method>
			<method name="public abstract double scoreTB(edu.stanford.nlp.parser.lexparser.IntDependency)">1</method>
			<method name="public abstract double scoreTB(int, int, int, int, boolean, int)">1</method>
			<method name="public abstract double score(edu.stanford.nlp.parser.lexparser.IntDependency)">1</method>
			<method name="public abstract int numTagBins()">1</method>
			<method name="public abstract void writeData(java.io.PrintWriter)">1</method>
			<method name="public abstract void tune(java.util.Collection)">1</method>
			<method name="public abstract void setLexicon(edu.stanford.nlp.parser.lexparser.Lexicon)">1</method>
			<method name="public abstract double score(int, int, int, int, boolean, int)">1</method>
			<method name="public abstract short distanceBin(int)">1</method>
			<method name="public abstract int numDistBins()">1</method>
			<method name="public abstract int tagBin(int)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.CmdEvaluator</name>
		<wmc>11</wmc>
		<dit>1</dit>
		<noc>1</noc>
		<cbo>3</cbo>
		<rfc>21</rfc>
		<lcom>47</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>9</npm>
		<lcom3>0.86</lcom3>
		<loc>108</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.28</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.363636363636363</amc>
		<cc>
			<method name="public abstract void setValues(double[])">1</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public abstract String[] getCmd()">1</method>
			<method name="public void evaluateCmd(String[] cmd)">2</method>
			<method name="public String getError()">1</method>
			<method name="public String getOutput()">1</method>
			<method name="public double evaluate(double[] x)">1</method>
			<method name="public String toString()">1</method>
			<method name="protected static String[] getCmd(String cmdStr)">2</method>
			<method name="public abstract void outputToCmd(java.io.OutputStream)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.Labeled</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>2</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract Object label()">1</method>
			<method name="public abstract java.util.Collection labels()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.tsurgeon.SimpleCharStream</name>
		<wmc>38</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>51</rfc>
		<lcom>405</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>33</npm>
		<lcom3>0.4785373608903021</lcom3>
		<loc>1121</loc>
		<dam>0.7058823529411765</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.30451127819548873</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>28.05263157894737</amc>
		<cc>
			<method name="protected void FillBuff()">1</method>
			<method name="public void _init_(java.io.Reader dstream, int startline, int startcolumn, int buffersize)">0</method>
			<method name="public void _init_(java.io.Reader dstream)">0</method>
			<method name="public void ReInit(java.io.InputStream dstream, String encoding, int startline, int startcolumn, int buffersize)">1</method>
			<method name="protected void UpdateLineColumn(char c)">5</method>
			<method name="public int getLine()">1</method>
			<method name="public void ReInit(java.io.Reader dstream, int startline, int startcolumn)">1</method>
			<method name="public void _init_(java.io.InputStream dstream)">0</method>
			<method name="void setTrackLineColumn(boolean trackLineColumn)">1</method>
			<method name="public void adjustBeginLineColumn(int newLine, int newCol)">7</method>
			<method name="public void backup(int amount)">2</method>
			<method name="public void ReInit(java.io.Reader dstream)">1</method>
			<method name="public int getBeginLine()">1</method>
			<method name="public void ReInit(java.io.InputStream dstream, String encoding, int startline, int startcolumn)">1</method>
			<method name="public void _init_(java.io.InputStream dstream, String encoding)">0</method>
			<method name="public void setTabSize(int i)">1</method>
			<method name="public void _init_(java.io.InputStream dstream, int startline, int startcolumn)">0</method>
			<method name="boolean getTrackLineColumn()">1</method>
			<method name="protected void ExpandBuff(boolean wrapAround)">2</method>
			<method name="public void _init_(java.io.Reader dstream, int startline, int startcolumn)">0</method>
			<method name="public void ReInit(java.io.InputStream dstream, int startline, int startcolumn)">1</method>
			<method name="public void _init_(java.io.InputStream dstream, String encoding, int startline, int startcolumn)">0</method>
			<method name="public void ReInit(java.io.InputStream dstream)">1</method>
			<method name="public void ReInit(java.io.Reader dstream, int startline, int startcolumn, int buffersize)">3</method>
			<method name="public char readChar()">1</method>
			<method name="public void ReInit(java.io.InputStream dstream, String encoding)">1</method>
			<method name="public void _init_(java.io.InputStream dstream, int startline, int startcolumn, int buffersize)">0</method>
			<method name="public int getTabSize()">1</method>
			<method name="public char BeginToken()">1</method>
			<method name="public int getColumn()">1</method>
			<method name="public void Done()">1</method>
			<method name="public int getEndColumn()">1</method>
			<method name="public void _init_(java.io.InputStream dstream, String encoding, int startline, int startcolumn, int buffersize)">0</method>
			<method name="public char[] GetSuffix(int len)">2</method>
			<method name="public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize)">1</method>
			<method name="public int getEndLine()">1</method>
			<method name="public String GetImage()">2</method>
			<method name="public int getBeginColumn()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.ClassicCounter$1</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>10</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>0.3333333333333333</lcom3>
		<loc>39</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.8421052631578947</mfa>
		<cam>0.5</cam>
		<ic>1</ic>
		<cbm>5</cbm>
		<amc>8.5</amc>
		<cc>
			<method name="public int size()">1</method>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="public boolean contains(Object v)">3</method>
			<method name="void _init_(edu.stanford.nlp.stats.ClassicCounter)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.Counters$6$1$1</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>10</rfc>
		<lcom>8</lcom>
		<ca>2</ca>
		<ce>4</ce>
		<npm>4</npm>
		<lcom3>0.875</lcom3>
		<loc>37</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="public boolean hasNext()">1</method>
			<method name="public void remove()">1</method>
			<method name="void _init_(edu.stanford.nlp.stats.Counters$6$1)">0</method>
			<method name="public java.util.Map$Entry next()">1</method>
			<method name="public volatile Object next()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.ClassicCounter$2</name>
		<wmc>3</wmc>
		<dit>3</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>6</rfc>
		<lcom>1</lcom>
		<ca>3</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>0.5</lcom3>
		<loc>20</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.9047619047619048</mfa>
		<cam>0.6666666666666666</cam>
		<ic>2</ic>
		<cbm>7</cbm>
		<amc>5.333333333333333</amc>
		<cc>
			<method name="public int size()">1</method>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="void _init_(edu.stanford.nlp.stats.ClassicCounter)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Maps$1</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>20</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.666666666666667</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="public int compare(java.util.Map$Entry e1, java.util.Map$Entry e2)">1</method>
			<method name="void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$ListExtractRule</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>14</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>5</npm>
		<lcom3>0.0</lcom3>
		<loc>97</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.44</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.2</amc>
		<cc>
			<method name="public void addRules(java.util.Collection rules)">1</method>
			<method name="public transient void addRules(edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$ExtractRule[] rules)">2</method>
			<method name="public boolean extract(Object in, java.util.List out)">2</method>
			<method name="public void _init_(java.util.Collection rules)">0</method>
			<method name="public transient void _init_(edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$ExtractRule[] rules)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.sentiment.Evaluate</name>
		<wmc>17</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>12</cbo>
		<rfc>60</rfc>
		<lcom>96</lcom>
		<ca>1</ca>
		<ce>11</ce>
		<npm>10</npm>
		<lcom3>0.7211538461538461</lcom3>
		<loc>1018</loc>
		<dam>0.07692307692307693</dam>
		<moa>4</moa>
		<mfa>0.0</mfa>
		<cam>0.20535714285714285</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>58.11764705882353</amc>
		<cc>
			<method name="private static double approxCombinedAccuracy(int[][] confusion, int[][] classes)">8</method>
			<method name="public double exactNodeAccuracy()">1</method>
			<method name="public void printLengthAccuracies()">2</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void reset()">1</method>
			<method name="private static void printConfusionMatrix(String name, int[][] confusion)">3</method>
			<method name="public edu.stanford.nlp.stats.Counter lengthAccuracies()">2</method>
			<method name="private void countTree(edu.stanford.nlp.trees.Tree tree)">5</method>
			<method name="private static double[] approxAccuracy(int[][] confusion, int[][] classes)">8</method>
			<method name="public void eval(edu.stanford.nlp.trees.Tree tree)">1</method>
			<method name="public static void main(String[] args)">6</method>
			<method name="public void eval(java.util.List trees)">2</method>
			<method name="public void _init_(edu.stanford.nlp.sentiment.SentimentModel model)">0</method>
			<method name="private int countLengthAccuracy(edu.stanford.nlp.trees.Tree tree)">6</method>
			<method name="public double exactRootAccuracy()">1</method>
			<method name="private void countRoot(edu.stanford.nlp.trees.Tree tree)">3</method>
			<method name="public void printSummary()">5</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.RareExtractor</name>
		<wmc>10</wmc>
		<dit>0</dit>
		<noc>22</noc>
		<cbo>23</cbo>
		<rfc>19</rfc>
		<lcom>45</lcom>
		<ca>22</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>1.1111111111111112</lcom3>
		<loc>170</loc>
		<dam>0.5</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.36666666666666664</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.8</amc>
		<cc>
			<method name="protected static boolean allUpperCase(String s)">4</method>
			<method name="protected static boolean containsDash(String s)">3</method>
			<method name="void _init_()">0</method>
			<method name="static boolean noneLowerCase(String s)">4</method>
			<method name="protected static boolean containsNumber(String s)">4</method>
			<method name="protected static boolean containsLetter(String s)">4</method>
			<method name="protected static boolean startsLowerCase(String s)">2</method>
			<method name="void _init_(int position)">0</method>
			<method name="protected static boolean containsUpperCase(String s)">4</method>
			<method name="static boolean startsUpperCase(String s)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.MapFactory$IdentityHashMapFactory</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>9</rfc>
		<lcom>15</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>4</npm>
		<lcom3>1.2</lcom3>
		<loc>35</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4583333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.666666666666667</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public java.util.Map setMap(java.util.Map map)">1</method>
			<method name="public java.util.Map newMap()">1</method>
			<method name="void _init_(edu.stanford.nlp.util.MapFactory$1 x0)">0</method>
			<method name="public java.util.Map newMap(int initCapacity)">1</method>
			<method name="public java.util.Map setMap(java.util.Map map, int initCapacity)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$StringMatchResultExtractor</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>6</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>4</npm>
		<lcom3>0.11111111111111116</lcom3>
		<loc>67</loc>
		<dam>0.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.0</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.Env env, edu.stanford.nlp.ling.tokensregex.types.Expression result)">0</method>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.Env env, edu.stanford.nlp.ling.tokensregex.types.Expression action, edu.stanford.nlp.ling.tokensregex.types.Expression result)">0</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Value apply(java.util.regex.MatchResult matchResult)">3</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.CollectionFactory$HashSetFactory</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>1.5</lcom3>
		<loc>11</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.3333333333333335</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public java.util.Collection newCollection()">1</method>
			<method name="public java.util.Collection newEmptyCollection()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.process.DocumentPreprocessor$DocType</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>3</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.888888888888889</lcom3>
		<loc>45</loc>
		<dam>0.3333333333333333</dam>
		<moa>3</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>9.5</amc>
		<cc>
			<method name="public static edu.stanford.nlp.process.DocumentPreprocessor$DocType[] values()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static edu.stanford.nlp.process.DocumentPreprocessor$DocType valueOf(String name)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.TwinScorer</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>12</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>6</npm>
		<lcom3>0.0</lcom3>
		<loc>83</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.5</amc>
		<cc>
			<method name="public double iScore(edu.stanford.nlp.parser.lexparser.Edge edge)">1</method>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.Scorer scorer1, edu.stanford.nlp.parser.lexparser.Scorer scorer2)">0</method>
			<method name="public boolean iPossible(edu.stanford.nlp.parser.lexparser.Hook hook)">3</method>
			<method name="public double oScore(edu.stanford.nlp.parser.lexparser.Edge edge)">1</method>
			<method name="public boolean parse(java.util.List words)">3</method>
			<method name="public boolean oPossible(edu.stanford.nlp.parser.lexparser.Hook hook)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.WordLemmaTag</name>
		<wmc>24</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>43</rfc>
		<lcom>196</lcom>
		<ca>3</ca>
		<ce>7</ce>
		<npm>24</npm>
		<lcom3>0.6434782608695653</lcom3>
		<loc>390</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2708333333333333</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>15.041666666666666</amc>
		<cc>
			<method name="public String toString(String divider)">1</method>
			<method name="public boolean equals(Object o)">6</method>
			<method name="public String lemma()">1</method>
			<method name="public String tag()">1</method>
			<method name="public String value()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(String word, String lemma, String tag)">0</method>
			<method name="public void setValue(String value)">1</method>
			<method name="public void _init_(String word)">0</method>
			<method name="public void _init_(edu.stanford.nlp.ling.Label word, edu.stanford.nlp.ling.Label tag)">0</method>
			<method name="public void setLemma(String lemma)">1</method>
			<method name="public String word()">1</method>
			<method name="public volatile int compareTo(Object x0)">1</method>
			<method name="public void _init_(String word, String tag)">0</method>
			<method name="public int hashCode()">4</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="public edu.stanford.nlp.ling.LabelFactory labelFactory()">1</method>
			<method name="public void setFromString(String labelStr)">1</method>
			<method name="public void _init_(edu.stanford.nlp.ling.Label word)">0</method>
			<method name="public void setWord(String word)">1</method>
			<method name="public int compareTo(edu.stanford.nlp.ling.WordLemmaTag wordLemmaTag)">3</method>
			<method name="public void setFromString(String labelStr, String divider)">3</method>
			<method name="public String toString()">1</method>
			<method name="public final void setTag(String tag)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.CoreMapAttributeAggregator$ConcatAggregator</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>12</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>49</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>23.0</amc>
		<cc>
			<method name="public void _init_(String delimiter)">0</method>
			<method name="public Object aggregate(Class key, java.util.List in)">4</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.SimpleTree$TreeFactoryHolder</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>1.0</lcom3>
		<loc>11</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.0</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.ValueFunctions</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>56</cbo>
		<rfc>75</rfc>
		<lcom>20</lcom>
		<ca>13</ca>
		<ce>55</ce>
		<npm>2</npm>
		<lcom3>0.9924812030075189</lcom3>
		<loc>876</loc>
		<dam>0.19298245614035087</dam>
		<moa>57</moa>
		<mfa>0.0</mfa>
		<cam>0.21428571428571427</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>101.375</amc>
		<cc>
			<method name="private static String join(Object[] args, String glue)">3</method>
			<method name="private void _init_()">0</method>
			<method name="public static void main(String[] args)">2</method>
			<method name="static void _clinit_()">0</method>
			<method name="static String access$000(Object[] x0, String x1)">1</method>
			<method name="static edu.stanford.nlp.process.CoreLabelTokenFactory access$100()">1</method>
			<method name="public static boolean isInteger(Number n)">4</method>
			<method name="protected static Object lookupFunctionObject(edu.stanford.nlp.ling.tokensregex.Env env, String name)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.FilteringTreebank$FilteringTreebankIterator</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>10</rfc>
		<lcom>7</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>5</npm>
		<lcom3>0.33333333333333337</lcom3>
		<loc>62</loc>
		<dam>0.6666666666666666</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.4444444444444444</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.833333333333334</amc>
		<cc>
			<method name="public void primeNext()">3</method>
			<method name="void _init_(java.util.Iterator iter, edu.stanford.nlp.util.Filter filter)">0</method>
			<method name="public edu.stanford.nlp.trees.Tree next()">1</method>
			<method name="public boolean hasNext()">2</method>
			<method name="public void remove()">1</method>
			<method name="public volatile Object next()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.TwoDimensionalCollectionValuedMap</name>
		<wmc>19</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>47</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>19</npm>
		<lcom3>0.47777777777777775</lcom3>
		<loc>295</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.2236842105263158</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>14.263157894736842</amc>
		<cc>
			<method name="public void clear()">1</method>
			<method name="public java.util.Set keySet()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public java.util.Set secondKeySet()">2</method>
			<method name="public void putAll(java.util.Map toAdd)">1</method>
			<method name="public void retainAll(java.util.Set keys)">2</method>
			<method name="public void _init_(edu.stanford.nlp.util.MapFactory mf, edu.stanford.nlp.util.CollectionFactory cf, boolean treatCollectionsAsImmutable)">0</method>
			<method name="public edu.stanford.nlp.util.CollectionValuedMap getCollectionValuedMap(Object key1)">2</method>
			<method name="public void _init_(edu.stanford.nlp.util.CollectionFactory cf)">0</method>
			<method name="public boolean containsKey(Object key)">1</method>
			<method name="public java.util.Set entrySet()">1</method>
			<method name="public void _init_(edu.stanford.nlp.util.MapFactory mf, edu.stanford.nlp.util.CollectionFactory cf)">0</method>
			<method name="public java.util.Collection get(Object key1, Object key2)">1</method>
			<method name="public void add(Object key1, Object key2, Object value)">2</method>
			<method name="public java.util.Set firstKeySet()">1</method>
			<method name="public String toString()">1</method>
			<method name="public java.util.Collection values()">2</method>
			<method name="public void add(Object key1, Object key2, java.util.Collection value)">3</method>
			<method name="public void addKey(Object key1)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonParser$LookaheadSuccess</name>
		<wmc>2</wmc>
		<dit>3</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>8</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>1.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonParser$1 x0)">0</method>
			<method name="private void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.PhraseTable$PhraseMatch</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>14</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>6</npm>
		<lcom3>0.6</lcom3>
		<loc>75</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.4444444444444444</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.833333333333334</amc>
		<cc>
			<method name="public edu.stanford.nlp.util.Interval getInterval()">2</method>
			<method name="public int getTokenEnd()">1</method>
			<method name="public String toString()">1</method>
			<method name="public int getTokenBegin()">1</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.PhraseTable$Phrase getPhrase()">1</method>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.PhraseTable$Phrase phrase, int tokenBegin, int tokenEnd)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.JavaUtilLoggingAdaptor$RedwoodHandler</name>
		<wmc>4</wmc>
		<dit>4</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>9</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>4</npm>
		<lcom3>2.0</lcom3>
		<loc>58</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.9</mfa>
		<cam>0.625</cam>
		<ic>2</ic>
		<cbm>4</cbm>
		<amc>13.5</amc>
		<cc>
			<method name="public void publish(java.util.logging.LogRecord record)">5</method>
			<method name="public void _init_()">0</method>
			<method name="public void flush()">1</method>
			<method name="public void close()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.SimpleConstituent$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>4</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalRelations$AdjectivalComplementGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.DataWordTag</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>5</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>28</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.25</amc>
		<cc>
			<method name="public int getYInd()">1</method>
			<method name="public String getY()">1</method>
			<method name="public edu.stanford.nlp.tagger.maxent.History getHistory()">1</method>
			<method name="void _init_(edu.stanford.nlp.tagger.maxent.History h, int y, String tag)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$PhraseWordsAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>9</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.ParserAnnotations$ConstraintAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>9</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.international.Languages</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>14</cbo>
		<rfc>20</rfc>
		<lcom>8</lcom>
		<ca>5</ca>
		<ce>9</ce>
		<npm>3</npm>
		<lcom3>0.75</lcom3>
		<loc>85</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.25</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.8</amc>
		<cc>
			<method name="public static edu.stanford.nlp.parser.lexparser.TreebankLangParserParams getLanguageParams(edu.stanford.nlp.international.Languages$Language lang)">2</method>
			<method name="private void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static edu.stanford.nlp.parser.lexparser.TreebankLangParserParams getLanguageParams(String lang)">1</method>
			<method name="public static String listOfLanguages()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.GoldenSectionLineSearch$2</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>36</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.0</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="public Double apply(Double x)">3</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.io.IOUtils</name>
		<wmc>101</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>86</cbo>
		<rfc>234</rfc>
		<lcom>5036</lcom>
		<ca>77</ca>
		<ce>11</ce>
		<npm>96</npm>
		<lcom3>0.988</lcom3>
		<loc>2307</loc>
		<dam>0.4</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.07222222222222222</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>21.792079207920793</amc>
		<cc>
			<method name="public static java.io.PrintWriter getPrintWriterIgnoringExceptions(String filename)">1</method>
			<method name="public static void cp(java.io.File source, java.io.File target, boolean recursive)">1</method>
			<method name="public static java.io.DataInputStream getDataInputStream(String filenameUrlOrClassPath)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static boolean existsInClasspathOrFileSystem(String name)">4</method>
			<method name="public static java.io.File backupFile(java.io.File file)">4</method>
			<method name="public static boolean renameToBackupName(java.io.File file)">1</method>
			<method name="public static java.io.File writeObjectToTempFileNoExceptions(Object o, String filename)">1</method>
			<method name="public static java.io.File writeObjectToFileNoExceptions(Object o, String filename)">1</method>
			<method name="public static java.util.List linesFromFile(String filename, String encoding)">1</method>
			<method name="private void _init_()">0</method>
			<method name="public static Object readObjectFromURLOrClasspathOrFileSystem(String filename)">1</method>
			<method name="public static java.io.PrintWriter getPrintWriter(String filename, String encoding)">1</method>
			<method name="private static java.io.OutputStream getBufferedOutputStream(String path)">1</method>
			<method name="public static String getExtension(String fileName)">2</method>
			<method name="public static Iterable readLines(java.io.File file, Class fileInputStreamWrapper, String encoding)">1</method>
			<method name="public static String slurpFile(java.io.File file)">1</method>
			<method name="public static java.io.File writeStringToTempFileNoExceptions(String contents, String path, String encoding)">2</method>
			<method name="public static Object readObjectFromFile(String filename)">1</method>
			<method name="public static java.io.File writeStringToTempFile(String contents, String path, String encoding)">1</method>
			<method name="public static String getUrlEncoding(java.net.URLConnection connection)">3</method>
			<method name="public static Iterable readLines(String path)">1</method>
			<method name="public static String slurpReader(java.io.Reader reader)">2</method>
			<method name="public static java.io.ObjectInputStream readStreamFromString(String filenameOrUrl)">1</method>
			<method name="public static java.util.List linesFromFile(String filename, String encoding, boolean ignoreHeader)">4</method>
			<method name="public static void writeStringToFile(String contents, String path, String encoding)">1</method>
			<method name="public static java.io.InputStream getFileInputStream(String filename)">1</method>
			<method name="public static java.io.PrintWriter getPrintWriter(String filename)">1</method>
			<method name="public static Iterable iterFilesRecursive(java.io.File dir, String ext)">1</method>
			<method name="public static java.io.InputStream inputStreamFromFile(java.io.File file)">1</method>
			<method name="public static String slurpFileNoExceptions(String filename)">1</method>
			<method name="public static String slurpURLNoExceptions(java.net.URL u)">1</method>
			<method name="public static String stringFromFile(String filename, String encoding)">2</method>
			<method name="public static java.io.BufferedReader readerFromStdin()">1</method>
			<method name="public static java.util.Map readMap(String filename)">1</method>
			<method name="private static void copyFile(java.io.File source, java.io.File target)">1</method>
			<method name="public static java.io.Writer encodedOutputStreamWriter(java.io.OutputStream stream, String encoding)">1</method>
			<method name="public static String slurpFile(String filename, String encoding)">1</method>
			<method name="public static void writeStringToTempFileNoExceptions(String contents, String path)">1</method>
			<method name="public static Iterable readLines(java.io.File file, Class fileInputStreamWrapper)">1</method>
			<method name="public static java.io.PrintWriter encodedOutputStreamPrintWriter(java.io.OutputStream stream, String encoding, boolean autoFlush)">1</method>
			<method name="public static java.io.File writeObjectToTempFile(Object o, String filename)">1</method>
			<method name="public static java.io.BufferedReader getBufferedFileReader(String filename, String encoding)">1</method>
			<method name="public static String slurpGZippedFile(java.io.File file)">1</method>
			<method name="public static java.io.ObjectOutputStream writeStreamFromString(String serializePath)">1</method>
			<method name="public static java.util.LinkedList readCSVStrictly(char[] csvContents, int numColumns)">14</method>
			<method name="public static java.util.Set readColumnSet(String infile, int field)">1</method>
			<method name="private static java.io.InputStream findStreamInClasspathOrFileSystem(String name)">1</method>
			<method name="public static void writeStreamToStream(java.io.InputStream input, java.io.OutputStream output)">1</method>
			<method name="public static int lineCount(String textFileOrUrl)">1</method>
			<method name="public static String slurpGBURL(java.net.URL u)">1</method>
			<method name="public static java.io.Reader encodedInputStreamReader(java.io.InputStream stream, String encoding)">1</method>
			<method name="public static Iterable iterFilesRecursive(java.io.File dir, java.util.regex.Pattern pattern)">1</method>
			<method name="public static String slurpFileNoExceptions(String filename, String encoding)">1</method>
			<method name="public static java.io.BufferedReader readerFromString(String textFileOrUrl)">1</method>
			<method name="public static java.io.File getJNLPLocalScratch()">1</method>
			<method name="public static String slurpFile(java.io.File file, String encoding)">1</method>
			<method name="public static String slurpFileNoExceptions(java.io.File file)">1</method>
			<method name="public static java.io.BufferedReader readerFromString(String textFileOrUrl, String encoding)">1</method>
			<method name="public static java.io.PrintWriter getPrintWriter(java.io.File textFile)">1</method>
			<method name="public static java.io.InputStream getInputStreamFromURLOrClasspathOrFileSystem(String textFileOrUrl)">1</method>
			<method name="public static java.io.File ensureDir(java.io.File tgtDir)">1</method>
			<method name="public static Object readObjectFromFile(java.io.File file)">1</method>
			<method name="public static Object readObjectFromObjectStream(java.io.ObjectInputStream ois)">1</method>
			<method name="public static java.io.DataOutputStream getDataOutputStream(String filename)">1</method>
			<method name="public static java.io.File writeObjectToFile(Object o, java.io.File file)">1</method>
			<method name="public static java.io.BufferedReader getBufferedFileReader(String filename)">1</method>
			<method name="public static String slurpURL(String path)">1</method>
			<method name="public static Iterable getLineIterable(java.io.Reader r, int bufferSize, boolean includeEol)">3</method>
			<method name="public static java.io.BufferedReader readerFromFile(java.io.File file)">1</method>
			<method name="public static java.io.BufferedReader getBufferedReaderFromClasspathOrFileSystem(String filename)">1</method>
			<method name="public static java.io.OutputStream getFileOutputStream(String filename)">1</method>
			<method name="public static void writeStringToTempFile(String contents, String path)">1</method>
			<method name="public static void writeStringToFileNoExceptions(String contents, String path, String encoding)">5</method>
			<method name="public static Object readObjectFromFileNoExceptions(java.io.File file)">1</method>
			<method name="public static Iterable readLines(java.io.File file)">1</method>
			<method name="public static Iterable readLines(String path, String encoding)">1</method>
			<method name="public static java.io.BufferedReader getBufferedReaderFromClasspathOrFileSystem(String filename, String encoding)">1</method>
			<method name="public static Iterable getLineIterable(java.io.Reader r, boolean includeEol)">3</method>
			<method name="public static String slurpURL(java.net.URL u, String encoding)">1</method>
			<method name="public static java.io.PrintWriter getPrintWriterOrDie(String filename)">1</method>
			<method name="public static String slurpURLNoExceptions(String path)">1</method>
			<method name="public static java.util.List linesFromFile(String filename)">1</method>
			<method name="public static java.util.List readObjectFromColumns(Class objClass, String filename, String[] fieldNames, String delimiter)">1</method>
			<method name="public static void closeIgnoringExceptions(java.io.Closeable c)">2</method>
			<method name="public static java.io.File writeObjectToFile(Object o, String filename)">1</method>
			<method name="public static java.io.InputStream getBZip2PipedInputStream(String filename)">1</method>
			<method name="public static String slurpURL(java.net.URL u)">1</method>
			<method name="public static Iterable iterFilesRecursive(java.io.File dir)">1</method>
			<method name="public static java.io.File writeObjectToFile(Object o, java.io.File file, boolean append)">1</method>
			<method name="public static String backupName(String filename)">1</method>
			<method name="public static java.util.LinkedList readCSVStrictly(String filename, int numColumns)">1</method>
			<method name="public static java.io.OutputStream getBZip2PipedOutputStream(String filename)">1</method>
			<method name="public static String slurpURLNoExceptions(java.net.URL u, String encoding)">1</method>
			<method name="public static String stringFromFile(String filename)">1</method>
			<method name="public static String slurpGZippedFile(String filename)">1</method>
			<method name="public static void cp(java.io.File source, java.io.File target)">1</method>
			<method name="public static java.io.PrintWriter getPrintWriter(java.io.File textFile, String encoding)">1</method>
			<method name="public static String slurpFile(String filename)">1</method>
			<method name="public static java.util.List readCSVWithHeader(String path, char quoteChar, char escapeChar)">1</method>
			<method name="public static java.util.List readCSVWithHeader(String path)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.GoldenSectionLineSearch$1</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>7</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>24</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.0</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="public Double apply(Double x)">1</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$CoNLLPredicateAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.ExtractorWordShapeClassifier</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>14</rfc>
		<lcom>6</lcom>
		<ca>2</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>0.9166666666666667</lcom3>
		<loc>57</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.36</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.8</amc>
		<cc>
			<method name="String extract(edu.stanford.nlp.tagger.maxent.History h, edu.stanford.nlp.tagger.maxent.PairsHolder pH)">1</method>
			<method name="public boolean isLocal()">2</method>
			<method name="public boolean isDynamic()">1</method>
			<method name="public String toString()">1</method>
			<method name="void _init_(int position, String wsc)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.PhraseTable$StackEntry</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>0.0</lcom3>
		<loc>33</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.875</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.0</amc>
		<cc>
			<method name="void _init_(java.util.Map x0, int x1, int x2, int x3, int x4, edu.stanford.nlp.ling.tokensregex.PhraseTable$1 x5)">0</method>
			<method name="private void _init_(java.util.Map tree, int tokenStart, int tokenNext, int tokenEnd, int continueAt)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.StochasticCalculateMethods</name>
		<wmc>6</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>13</cbo>
		<rfc>10</rfc>
		<lcom>9</lcom>
		<ca>12</ca>
		<ce>1</ce>
		<npm>4</npm>
		<lcom3>0.8285714285714285</lcom3>
		<loc>112</loc>
		<dam>0.2857142857142857</dam>
		<moa>6</moa>
		<mfa>0.7647058823529411</mfa>
		<cam>0.35</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>16.5</amc>
		<cc>
			<method name="public boolean calculatesHessianVectorProduct()">1</method>
			<method name="private void _init_(String, int, boolean ObjectiveFunctionCalculatesHdotV)">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static edu.stanford.nlp.optimization.StochasticCalculateMethods valueOf(String name)">1</method>
			<method name="public static edu.stanford.nlp.optimization.StochasticCalculateMethods[] values()">1</method>
			<method name="public static edu.stanford.nlp.optimization.StochasticCalculateMethods parseMethod(String method)">4</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.classify.ProbabilisticClassifierCreator</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract edu.stanford.nlp.classify.ProbabilisticClassifier createProbabilisticClassifier(double[])">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.ExtractorFrenchAdjSuffix</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>9</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="boolean extractFeature(String cword)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.LatticeEdge</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>16</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>6</npm>
		<lcom3>0.7714285714285715</lcom3>
		<loc>114</loc>
		<dam>0.14285714285714285</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5416666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.833333333333332</amc>
		<cc>
			<method name="public String getAttr(String key)">1</method>
			<method name="public void setWeight(double w)">1</method>
			<method name="public void setAttr(String key, String value)">1</method>
			<method name="public void _init_(String word, double weight, int start, int end)">0</method>
			<method name="public String toString()">2</method>
			<method name="public void setLabel(String l)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Iterables$1$1</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>10</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>0.3333333333333333</lcom3>
		<loc>34</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.0</amc>
		<cc>
			<method name="public boolean hasNext()">1</method>
			<method name="public void remove()">1</method>
			<method name="void _init_(edu.stanford.nlp.util.Iterables$1)">0</method>
			<method name="public Object next()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.AbstractTreebankLanguagePack$CategoryAndFunctionStringFunction</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>0.75</lcom3>
		<loc>21</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.333333333333333</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.trees.TreebankLanguagePack tlp)">0</method>
			<method name="public String apply(String in)">1</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.FuzzyInterval$FuzzyComparable</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>4</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract boolean isComparable(Object)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequencePattern$NodesMatchChecker</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>6</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract boolean matches(Object, Object)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.HasParent</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract edu.stanford.nlp.trees.Tree parent()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.LabeledScoredTreeReaderFactory</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>17</cbo>
		<rfc>10</rfc>
		<lcom>0</lcom>
		<ca>8</ca>
		<ce>9</ce>
		<npm>5</npm>
		<lcom3>0.0</lcom3>
		<loc>59</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.4</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.ling.LabelFactory lf)">0</method>
			<method name="public edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader in)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(edu.stanford.nlp.trees.TreeNormalizer tm)">0</method>
			<method name="public void _init_(edu.stanford.nlp.ling.LabelFactory lf, edu.stanford.nlp.trees.TreeNormalizer tm)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.ASBCunkDetector</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>12</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>2</npm>
		<lcom3>0.888888888888889</lcom3>
		<loc>54</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.75</amc>
		<cc>
			<method name="String extract(edu.stanford.nlp.tagger.maxent.History h, edu.stanford.nlp.tagger.maxent.PairsHolder pH)">2</method>
			<method name="public boolean isLocal()">1</method>
			<method name="void _init_(String t2, int n2)">0</method>
			<method name="public boolean isDynamic()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.dvparser.CacheParseHypotheses$CacheProcessor</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>23</rfc>
		<lcom>4</lcom>
		<ca>2</ca>
		<ce>11</ce>
		<npm>4</npm>
		<lcom3>0.3333333333333333</lcom3>
		<loc>180</loc>
		<dam>0.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.35714285714285715</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>43.0</amc>
		<cc>
			<method name="public edu.stanford.nlp.util.Pair process(edu.stanford.nlp.trees.Tree tree)">7</method>
			<method name="public edu.stanford.nlp.util.concurrent.ThreadsafeProcessor newInstance()">1</method>
			<method name="public void _init_(edu.stanford.nlp.parser.dvparser.CacheParseHypotheses cacher, edu.stanford.nlp.parser.lexparser.LexicalizedParser parser, int dvKBest, edu.stanford.nlp.trees.TreeTransformer transformer)">0</method>
			<method name="public volatile Object process(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequenceMatcher$FindType</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>6</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.888888888888889</lcom3>
		<loc>45</loc>
		<dam>0.3333333333333333</dam>
		<moa>3</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>9.5</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="public static edu.stanford.nlp.ling.tokensregex.SequenceMatcher$FindType[] values()">1</method>
			<method name="public static edu.stanford.nlp.ling.tokensregex.SequenceMatcher$FindType valueOf(String name)">1</method>
			<method name="private void _init_(String, int)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.crf.NonLinearSecondOrderCliquePotentialFunction</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>8</rfc>
		<lcom>4</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>306</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>73.25</amc>
		<cc>
			<method name="private static double sigmoid(double x)">1</method>
			<method name="public void _init_(double[][] inputLayerWeights4Edge, double[][] outputLayerWeights4Edge, double[][] inputLayerWeights, double[][] outputLayerWeights, edu.stanford.nlp.sequences.SeqClassifierFlags flags)">0</method>
			<method name="public double computeCliquePotential(int cliqueSize, int labelIndex, int[] cliqueFeatures, double[] featureVal, int posInSent)">8</method>
			<method name="public double[] hiddenLayerOutput(double[][] inputLayerWeights, int[] nodeCliqueFeatures, edu.stanford.nlp.sequences.SeqClassifierFlags aFlag, double[] featureVal, int cliqueSize)">17</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Function</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>184</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>184</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract Object apply(Object)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.international.arabic.process.ArabicSegmenterFeatureFactory</name>
		<wmc>7</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>25</rfc>
		<lcom>21</lcom>
		<ca>0</ca>
		<ce>7</ce>
		<npm>3</npm>
		<lcom3>1.1666666666666667</lcom3>
		<loc>441</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5428571428571428</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>61.857142857142854</amc>
		<cc>
			<method name="private java.util.Collection featuresCp3C(edu.stanford.nlp.util.PaddedList cInfo, int loc)">1</method>
			<method name="private java.util.Collection featuresCpC(edu.stanford.nlp.util.PaddedList cInfo, int loc)">1</method>
			<method name="public java.util.Collection getCliqueFeatures(edu.stanford.nlp.util.PaddedList cInfo, int loc, edu.stanford.nlp.sequences.Clique clique)">5</method>
			<method name="public void _init_()">0</method>
			<method name="private java.util.Collection featuresCp2C(edu.stanford.nlp.util.PaddedList cInfo, int loc)">1</method>
			<method name="public void init(edu.stanford.nlp.sequences.SeqClassifierFlags flags)">1</method>
			<method name="protected java.util.Collection featuresC(edu.stanford.nlp.util.PaddedList cInfo, int loc)">7</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.Redwood$MessageType</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>6</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.9333333333333332</lcom3>
		<loc>67</loc>
		<dam>0.2</dam>
		<moa>5</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>14.5</amc>
		<cc>
			<method name="public static edu.stanford.nlp.util.logging.Redwood$MessageType valueOf(String name)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static edu.stanford.nlp.util.logging.Redwood$MessageType[] values()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalRelations$PredeterminerGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$InexactTime</name>
		<wmc>17</wmc>
		<dit>0</dit>
		<noc>1</noc>
		<cbo>14</cbo>
		<rfc>50</rfc>
		<lcom>0</lcom>
		<ca>5</ca>
		<ce>13</ce>
		<npm>17</npm>
		<lcom3>0.421875</lcom3>
		<loc>410</loc>
		<dam>0.25</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.24836601307189543</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>22.88235294117647</amc>
		<cc>
			<method name="public edu.stanford.nlp.time.SUTime$Time getTime()">1</method>
			<method name="public org.joda.time.Partial getJodaTimePartial()">5</method>
			<method name="public void _init_(org.joda.time.Partial partial)">0</method>
			<method name="public volatile edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time x0, int x1)">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Time resolve(edu.stanford.nlp.time.SUTime$Time refTime, int flags)">5</method>
			<method name="public volatile edu.stanford.nlp.time.SUTime$Temporal setTimeZone(org.joda.time.DateTimeZone x0)">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Range getRange(int flags, edu.stanford.nlp.time.SUTime$Duration granularity)">3</method>
			<method name="public edu.stanford.nlp.time.SUTime$Duration getDuration()">4</method>
			<method name="public String toFormattedString(int flags)">7</method>
			<method name="public volatile int compareTo(Object x0)">1</method>
			<method name="public void _init_(edu.stanford.nlp.time.SUTime$InexactTime t, edu.stanford.nlp.time.SUTime$Time base, edu.stanford.nlp.time.SUTime$Duration duration, edu.stanford.nlp.time.SUTime$Range range)">0</method>
			<method name="public edu.stanford.nlp.time.SUTime$Time add(edu.stanford.nlp.time.SUTime$Duration offset)">2</method>
			<method name="public void _init_(edu.stanford.nlp.time.SUTime$Time base, edu.stanford.nlp.time.SUTime$Duration duration, edu.stanford.nlp.time.SUTime$Range range)">0</method>
			<method name="public void _init_(edu.stanford.nlp.time.SUTime$Range range)">0</method>
			<method name="public edu.stanford.nlp.time.SUTime$InexactTime setTimeZone(org.joda.time.DateTimeZone tz)">1</method>
			<method name="public int compareTo(edu.stanford.nlp.time.SUTime$Time t)">7</method>
			<method name="public org.joda.time.Instant getJodaTimeInstant()">4</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.graph.DirectedMultiGraph</name>
		<wmc>42</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>91</rfc>
		<lcom>127</lcom>
		<ca>5</ca>
		<ce>9</ce>
		<npm>42</npm>
		<lcom3>0.6260162601626017</lcom3>
		<loc>1064</loc>
		<dam>0.3333333333333333</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2896825396825397</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>24.261904761904763</amc>
		<cc>
			<method name="public java.util.List getOutgoingEdges(Object v)">1</method>
			<method name="public void clear()">1</method>
			<method name="public java.util.Iterator outgoingEdgeIterator(Object vertex)">1</method>
			<method name="public java.util.List getShortestPath(Object node1, Object node2, boolean directionSensitive)">3</method>
			<method name="public boolean removeEdge(Object source, Object dest, Object data)">10</method>
			<method name="public void _init_(edu.stanford.nlp.graph.DirectedMultiGraph graph)">0</method>
			<method name="public java.util.List convertPath(java.util.List nodes, boolean directionSensitive)">7</method>
			<method name="public void removeZeroDegreeNodes()">3</method>
			<method name="public int getNumEdges()">2</method>
			<method name="public java.util.List getShortestPath(Object node1, Object node2)">3</method>
			<method name="public java.util.Set getParents(Object vertex)">2</method>
			<method name="public java.util.List getEdges(Object source, Object dest)">3</method>
			<method name="public java.util.List getIncomingEdges(Object v)">1</method>
			<method name="public Iterable incomingEdgeIterable(Object vertex)">1</method>
			<method name="public boolean isNeighbor(Object source, Object dest)">3</method>
			<method name="public java.util.Iterator incomingEdgeIterator(Object vertex)">1</method>
			<method name="public java.util.Set getNeighbors(Object v)">3</method>
			<method name="public boolean isEdge(Object source, Object dest)">6</method>
			<method name="public String toString()">3</method>
			<method name="public java.util.List getShortestPathEdges(Object node1, Object node2)">1</method>
			<method name="public java.util.Map toMap()">2</method>
			<method name="public boolean removeEdges(Object source, Object dest)">4</method>
			<method name="public boolean removeVertices(java.util.Collection vertices)">2</method>
			<method name="public void _init_()">0</method>
			<method name="public boolean isEmpty()">1</method>
			<method name="public java.util.List getShortestPathEdges(Object node1, Object node2, boolean directionSensitive)">1</method>
			<method name="public int getNumVertices()">1</method>
			<method name="public java.util.Set getAllVertices()">1</method>
			<method name="public java.util.List getConnectedComponents()">1</method>
			<method name="public Iterable outgoingEdgeIterable(Object vertex)">1</method>
			<method name="public boolean containsVertex(Object v)">1</method>
			<method name="public boolean removeVertex(Object vertex)">4</method>
			<method name="public void add(Object source, Object dest, Object data)">3</method>
			<method name="public int getOutDegree(Object vertex)">3</method>
			<method name="public int hashCode()">1</method>
			<method name="public java.util.List getAllEdges()">2</method>
			<method name="public int getInDegree(Object vertex)">3</method>
			<method name="public boolean addVertex(Object v)">2</method>
			<method name="public java.util.Iterator edgeIterator()">1</method>
			<method name="public boolean equals(Object that)">3</method>
			<method name="public Iterable edgeIterable()">1</method>
			<method name="public java.util.Set getChildren(Object vertex)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.ChineseUnknownWordModelTrainer</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>18</cbo>
		<rfc>41</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>18</ce>
		<npm>4</npm>
		<lcom3>0.5897435897435898</lcom3>
		<loc>374</loc>
		<dam>1.0</dam>
		<moa>6</moa>
		<mfa>0.0</mfa>
		<cam>0.39285714285714285</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>89.25</amc>
		<cc>
			<method name="public void train(edu.stanford.nlp.ling.TaggedWord tw, int loc, double weight)">7</method>
			<method name="public void _init_()">0</method>
			<method name="public edu.stanford.nlp.parser.lexparser.UnknownWordModel finishTraining()">4</method>
			<method name="public void initializeTraining(edu.stanford.nlp.parser.lexparser.Options op, edu.stanford.nlp.parser.lexparser.Lexicon lex, edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex, double totalTrees)">9</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.ExtractorAllCapitalized</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>7</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>1.3333333333333333</lcom3>
		<loc>24</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.75</amc>
		<cc>
			<method name="String extract(edu.stanford.nlp.tagger.maxent.History h, edu.stanford.nlp.tagger.maxent.PairsHolder pH)">2</method>
			<method name="public boolean isLocal()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public boolean isDynamic()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor$1</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>8</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>1.0</lcom3>
		<loc>35</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.5</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="public int compare(edu.stanford.nlp.util.Triple first, edu.stanford.nlp.util.Triple second)">1</method>
			<method name="public boolean equals(Object o)">2</method>
			<method name="void _init_(edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalRelations$SubjectGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.DiskTreebank</name>
		<wmc>18</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>39</cbo>
		<rfc>34</rfc>
		<lcom>107</lcom>
		<ca>33</ca>
		<ce>7</ce>
		<npm>13</npm>
		<lcom3>0.7352941176470589</lcom3>
		<loc>161</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.19852941176470587</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.722222222222222</amc>
		<cc>
			<method name="public void clear()">1</method>
			<method name="public void loadPath(java.io.File path, java.io.FileFilter filt)">2</method>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(edu.stanford.nlp.trees.TreeReaderFactory trf, String encoding)">0</method>
			<method name="public String getCurrentFilename()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="static boolean access$300()">1</method>
			<method name="public void apply(edu.stanford.nlp.trees.TreeVisitor tp)">2</method>
			<method name="public void _init_(edu.stanford.nlp.trees.TreeReaderFactory trf)">0</method>
			<method name="static java.util.List access$000(edu.stanford.nlp.trees.DiskTreebank x0)">1</method>
			<method name="public void _init_(int initialCapacity, edu.stanford.nlp.trees.TreeReaderFactory trf)">0</method>
			<method name="public void printFileNames()">1</method>
			<method name="public java.util.List getCurrentPaths()">1</method>
			<method name="static java.util.List access$100(edu.stanford.nlp.trees.DiskTreebank x0)">1</method>
			<method name="static String access$202(edu.stanford.nlp.trees.DiskTreebank x0, String x1)">1</method>
			<method name="public void _init_(int initialCapacity)">0</method>
			<method name="public void _init_(String encoding)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar</name>
		<wmc>23</wmc>
		<dit>0</dit>
		<noc>1</noc>
		<cbo>26</cbo>
		<rfc>103</rfc>
		<lcom>119</lcom>
		<ca>6</ca>
		<ce>20</ce>
		<npm>13</npm>
		<lcom3>0.8246753246753247</lcom3>
		<loc>2637</loc>
		<dam>0.47619047619047616</dam>
		<moa>4</moa>
		<mfa>0.0</mfa>
		<cam>0.14492753623188406</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>112.73913043478261</amc>
		<cc>
			<method name="private short tagProject(short tag)">3</method>
			<method name="protected void expandDependency(edu.stanford.nlp.parser.lexparser.IntDependency dependency, double count)">4</method>
			<method name="protected static edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar$EndHead treeToDependencyHelper(edu.stanford.nlp.trees.Tree tree, java.util.List depList, int loc, edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex)">13</method>
			<method name="public double scoreAll(java.util.Collection deps)">2</method>
			<method name="public void dumpSizes()">1</method>
			<method name="protected double probTB(edu.stanford.nlp.parser.lexparser.IntDependency dependency)">21</method>
			<method name="public void tune(java.util.Collection trees)">21</method>
			<method name="private edu.stanford.nlp.parser.lexparser.IntTaggedWord getCachedITW(short tag)">4</method>
			<method name="private void writeObject(java.io.ObjectOutputStream stream)">1</method>
			<method name="public double countHistory(edu.stanford.nlp.parser.lexparser.IntDependency dependency)">1</method>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.TreebankLangParserParams tlpParams, boolean directional, boolean distance, boolean coarseDistance, boolean basicCategoryTagsInDependencyGrammar, edu.stanford.nlp.parser.lexparser.Options op, edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex)">0</method>
			<method name="public void writeData(java.io.PrintWriter out)">1</method>
			<method name="public void addRule(edu.stanford.nlp.parser.lexparser.IntDependency dependency, double count)">2</method>
			<method name="public double scoreTB(edu.stanford.nlp.parser.lexparser.IntDependency dependency)">1</method>
			<method name="private void expandStop(edu.stanford.nlp.parser.lexparser.IntDependency dependency, short distBinDist, double count, boolean wildForStop)">4</method>
			<method name="public static java.util.List treeToDependencyList(edu.stanford.nlp.trees.Tree tree, edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex)">1</method>
			<method name="protected double getStopProb(edu.stanford.nlp.parser.lexparser.IntDependency dependency)">2</method>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.TagProjection tagProjection, edu.stanford.nlp.parser.lexparser.TreebankLangParserParams tlpParams, boolean directional, boolean useDistance, boolean useCoarseDistance, edu.stanford.nlp.parser.lexparser.Options op, edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex)">0</method>
			<method name="public void readData(java.io.BufferedReader in)">1</method>
			<method name="private void readObject(java.io.ObjectInputStream stream)">1</method>
			<method name="public boolean pruneTW(edu.stanford.nlp.parser.lexparser.IntTaggedWord argTW)">3</method>
			<method name="public String toString()">1</method>
			<method name="private void expandArg(edu.stanford.nlp.parser.lexparser.IntDependency dependency, short valBinDist, double count)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.TreebankLanguagePack</name>
		<wmc>39</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>105</cbo>
		<rfc>39</rfc>
		<lcom>741</lcom>
		<ca>98</ca>
		<ce>7</ce>
		<npm>39</npm>
		<lcom3>1.0263157894736843</lcom3>
		<loc>40</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.26666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract boolean isPunctuationTag(String)">1</method>
			<method name="public abstract String[] punctuationTags()">1</method>
			<method name="public abstract boolean isPunctuationWord(String)">1</method>
			<method name="public abstract String stripGF(String)">1</method>
			<method name="public abstract String basicCategory(String)">1</method>
			<method name="public abstract edu.stanford.nlp.trees.TreeReaderFactory treeReaderFactory()">1</method>
			<method name="public abstract String[] punctuationWords()">1</method>
			<method name="public abstract edu.stanford.nlp.trees.GrammaticalStructureFactory grammaticalStructureFactory(edu.stanford.nlp.util.Filter, edu.stanford.nlp.trees.HeadFinder)">1</method>
			<method name="public abstract String[] startSymbols()">1</method>
			<method name="public abstract String[] sentenceFinalPunctuationTags()">1</method>
			<method name="public abstract edu.stanford.nlp.util.Function getCategoryAndFunctionFunction()">1</method>
			<method name="public abstract edu.stanford.nlp.util.Filter punctuationTagAcceptFilter()">1</method>
			<method name="public abstract edu.stanford.nlp.util.Filter punctuationWordRejectFilter()">1</method>
			<method name="public abstract edu.stanford.nlp.util.Filter punctuationTagRejectFilter()">1</method>
			<method name="public abstract boolean isLabelAnnotationIntroducingCharacter(char)">1</method>
			<method name="public abstract edu.stanford.nlp.international.morph.MorphoFeatureSpecification morphFeatureSpec()">1</method>
			<method name="public abstract edu.stanford.nlp.trees.HeadFinder headFinder()">1</method>
			<method name="public abstract edu.stanford.nlp.util.Filter startSymbolAcceptFilter()">1</method>
			<method name="public abstract String categoryAndFunction(String)">1</method>
			<method name="public abstract edu.stanford.nlp.process.TokenizerFactory treeTokenizerFactory()">1</method>
			<method name="public abstract edu.stanford.nlp.trees.GrammaticalStructureFactory grammaticalStructureFactory()">1</method>
			<method name="public abstract edu.stanford.nlp.util.Filter punctuationWordAcceptFilter()">1</method>
			<method name="public abstract boolean isEvalBIgnoredPunctuationTag(String)">1</method>
			<method name="public abstract edu.stanford.nlp.util.Filter sentenceFinalPunctuationTagAcceptFilter()">1</method>
			<method name="public abstract edu.stanford.nlp.util.Filter evalBIgnoredPunctuationTagAcceptFilter()">1</method>
			<method name="public abstract String getEncoding()">1</method>
			<method name="public abstract boolean isStartSymbol(String)">1</method>
			<method name="public abstract edu.stanford.nlp.util.Filter evalBIgnoredPunctuationTagRejectFilter()">1</method>
			<method name="public abstract String[] evalBIgnoredPunctuationTags()">1</method>
			<method name="public abstract void setGfCharacter(char)">1</method>
			<method name="public abstract edu.stanford.nlp.process.TokenizerFactory getTokenizerFactory()">1</method>
			<method name="public abstract edu.stanford.nlp.trees.GrammaticalStructureFactory grammaticalStructureFactory(edu.stanford.nlp.util.Filter)">1</method>
			<method name="public abstract edu.stanford.nlp.trees.HeadFinder typedDependencyHeadFinder()">1</method>
			<method name="public abstract edu.stanford.nlp.util.Function getBasicCategoryFunction()">1</method>
			<method name="public abstract boolean isSentenceFinalPunctuationTag(String)">1</method>
			<method name="public abstract char[] labelAnnotationIntroducingCharacters()">1</method>
			<method name="public abstract String treebankFileExtension()">1</method>
			<method name="public abstract String startSymbol()">1</method>
			<method name="public abstract String[] sentenceFinalPunctuationWords()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$TemporalSet</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>2</noc>
		<cbo>5</cbo>
		<rfc>5</rfc>
		<lcom>3</lcom>
		<ca>3</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>1.5</lcom3>
		<loc>13</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public edu.stanford.nlp.time.SUTime$TimexType getTimexType()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(edu.stanford.nlp.time.SUTime$TemporalSet t)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$CategoryAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.sequences.BestSequenceFinder</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>7</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract int[] bestSequence(edu.stanford.nlp.sequences.SequenceModel)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$UnbrokenCategoryIsDominatedBy</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>19</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>8</ce>
		<npm>2</npm>
		<lcom3>0.7</lcom3>
		<loc>87</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.30952380952380953</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.166666666666666</amc>
		<cc>
			<method name="static edu.stanford.nlp.trees.tregex.Relation$UnbrokenCategoryDominates access$1300(edu.stanford.nlp.trees.tregex.Relation$UnbrokenCategoryIsDominatedBy x0)">1</method>
			<method name="public boolean equals(Object o)">4</method>
			<method name="public int hashCode()">1</method>
			<method name="void _init_(String arg, edu.stanford.nlp.util.Function basicCatFunction)">0</method>
			<method name="java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">1</method>
			<method name="boolean satisfies(edu.stanford.nlp.trees.Tree t1, edu.stanford.nlp.trees.Tree t2, edu.stanford.nlp.trees.Tree root, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.CorefCoreAnnotations$CorefClusterAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>9</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.ExtractorFrenchNounSuffix</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>9</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="boolean extractFeature(String cword)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.LabeledWord</name>
		<wmc>10</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>19</rfc>
		<lcom>25</lcom>
		<ca>2</ca>
		<ce>4</ce>
		<npm>10</npm>
		<lcom3>0.8888888888888888</lcom3>
		<loc>62</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.9</amc>
		<cc>
			<method name="public String toString(String divider)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public edu.stanford.nlp.ling.LabelFactory labelFactory()">1</method>
			<method name="public void _init_(String word, edu.stanford.nlp.ling.Label tag)">0</method>
			<method name="public void setTag(edu.stanford.nlp.ling.Label tag)">1</method>
			<method name="public void _init_(String word)">0</method>
			<method name="public void _init_(edu.stanford.nlp.ling.Label word, edu.stanford.nlp.ling.Label tag)">0</method>
			<method name="public static edu.stanford.nlp.ling.LabelFactory factory()">1</method>
			<method name="public String toString()">1</method>
			<method name="public edu.stanford.nlp.ling.Label tag()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.TimeFormatter$TimeZoneOffsetComponent</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>20</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>0.25</lcom3>
		<loc>215</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.48</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>41.8</amc>
		<cc>
			<method name="private int parseInteger(String str, int pos, int length)">1</method>
			<method name="protected StringBuilder appendRegex0(StringBuilder sb)">2</method>
			<method name="public edu.stanford.nlp.time.SUTime$Temporal updateTemporal(edu.stanford.nlp.time.SUTime$Temporal t, String fieldValueStr)">1</method>
			<method name="public int parseOffsetMillis(String str)">16</method>
			<method name="public void _init_(String zeroOffsetParseText)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseEnglishWordMap</name>
		<wmc>20</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>82</rfc>
		<lcom>10</lcom>
		<ca>2</ca>
		<ce>6</ce>
		<npm>16</npm>
		<lcom3>0.8552631578947368</lcom3>
		<loc>805</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2807017543859649</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>38.85</amc>
		<cc>
			<method name="public void readCEDict(String dictPath, String pattern, String delimiter, String charset)">8</method>
			<method name="public String getFirstTranslation(String key)">2</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(String dictPath)">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public java.util.Set getAllTranslations(String key)">1</method>
			<method name="public void _init_(String dictPath, String pattern, String delimiter, String charset)">0</method>
			<method name="public int addMap(java.util.Map addM)">3</method>
			<method name="public void _init_(String dictPath, boolean normalized)">0</method>
			<method name="private static boolean isDigits(String in)">3</method>
			<method name="public int size()">1</method>
			<method name="private java.util.Set normalize(java.util.Set trans)">3</method>
			<method name="public boolean containsKey(String key)">1</method>
			<method name="public java.util.Map getReverseMap()">3</method>
			<method name="public void _init_(String dictPath, String pattern, String delimiter, String charset, boolean normalized)">0</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="public void readCEDict(String dictPath)">1</method>
			<method name="public String toString()">1</method>
			<method name="public static edu.stanford.nlp.trees.international.pennchinese.ChineseEnglishWordMap getInstance()">1</method>
			<method name="private String normalize(String t)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.io.EncodingPrintWriter$err</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>23</rfc>
		<lcom>15</lcom>
		<ca>7</ca>
		<ce>1</ce>
		<npm>4</npm>
		<lcom3>2.0</lcom3>
		<loc>83</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.833333333333334</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public static void println(String o)">1</method>
			<method name="public static void print(String o, String encoding)">1</method>
			<method name="public static void println(String o, String encoding)">1</method>
			<method name="public static void print(String o)">1</method>
			<method name="private static void setupErrWriter(String encoding)">4</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.sequences.CoolingSchedule$2</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.5</lcom3>
		<loc>37</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.333333333333334</amc>
		<cc>
			<method name="public int numIterations()">1</method>
			<method name="void _init_(double, int)">0</method>
			<method name="public double getTemperature(int iteration)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.process.WordSegmentingTokenizer$WordSegmentingTokenizerFactory</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>10</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>5</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>60</loc>
		<dam>0.6666666666666666</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.55</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.4</amc>
		<cc>
			<method name="public void setOptions(String options)">1</method>
			<method name="public edu.stanford.nlp.process.Tokenizer getTokenizer(java.io.Reader r)">1</method>
			<method name="public void _init_(edu.stanford.nlp.process.WordSegmenter wordSegmenter)">0</method>
			<method name="public java.util.Iterator getIterator(java.io.Reader r)">1</method>
			<method name="public edu.stanford.nlp.process.Tokenizer getTokenizer(java.io.Reader r, String extraOptions)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.sequences.CoolingSchedule$1</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>5</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.5</lcom3>
		<loc>30</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.0</amc>
		<cc>
			<method name="public int numIterations()">1</method>
			<method name="void _init_(int, double, double)">0</method>
			<method name="public double getTemperature(int iteration)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$PositionAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.XMLOutputter$Options</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>24</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.pascal.ISODateInstance$DateField</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.9166666666666666</lcom3>
		<loc>56</loc>
		<dam>0.25</dam>
		<moa>4</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>12.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static edu.stanford.nlp.ie.pascal.ISODateInstance$DateField valueOf(String name)">1</method>
			<method name="public static edu.stanford.nlp.ie.pascal.ISODateInstance$DateField[] values()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Iterables$IncrementComparator</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>6</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract int compare(Object, Object)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$NumericFunction</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>9</noc>
		<cbo>13</cbo>
		<rfc>20</rfc>
		<lcom>0</lcom>
		<ca>9</ca>
		<ce>4</ce>
		<npm>4</npm>
		<lcom3>0.4</lcom3>
		<loc>131</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3888888888888889</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>20.5</amc>
		<cc>
			<method name="public String getParamDesc()">1</method>
			<method name="protected void _init_(String name, int nargs, String resultTypeName)">0</method>
			<method name="protected void _init_(String name, int nargs)">0</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.Env env, java.util.List in)">4</method>
			<method name="public boolean checkArgs(java.util.List in)">5</method>
			<method name="public transient abstract Number compute(Number[])">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$FilterExtractRule</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>7</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>39</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.333333333333334</amc>
		<cc>
			<method name="public boolean extract(Object in, java.util.List out)">2</method>
			<method name="public transient void _init_(edu.stanford.nlp.util.Filter filter, edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$ExtractRule[] rules)">0</method>
			<method name="public void _init_(edu.stanford.nlp.util.Filter filter, edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$ExtractRule rule)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.BinaryHeapPriorityQueue</name>
		<wmc>45</wmc>
		<dit>3</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>79</rfc>
		<lcom>882</lcom>
		<ca>6</ca>
		<ce>4</ce>
		<npm>30</npm>
		<lcom3>0.375</lcom3>
		<loc>846</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.31666666666666665</mfa>
		<cam>0.24126984126984127</cam>
		<ic>2</ic>
		<cbm>10</cbm>
		<amc>17.755555555555556</amc>
		<cc>
			<method name="public void clear()">1</method>
			<method name="public boolean contains(Object key)">1</method>
			<method name="public boolean remove(Object key)">2</method>
			<method name="private void heapify(edu.stanford.nlp.util.BinaryHeapPriorityQueue$Entry entry)">1</method>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="public String toString(int maxKeysToPrint)">6</method>
			<method name="public boolean hasNext()">2</method>
			<method name="private static int compare(double a, double b)">3</method>
			<method name="private void heapifyDown(edu.stanford.nlp.util.BinaryHeapPriorityQueue$Entry entry)">7</method>
			<method name="public double getPriority()">2</method>
			<method name="private edu.stanford.nlp.util.BinaryHeapPriorityQueue$Entry rightChild(edu.stanford.nlp.util.BinaryHeapPriorityQueue$Entry entry)">2</method>
			<method name="private edu.stanford.nlp.util.BinaryHeapPriorityQueue$Entry leftChild(edu.stanford.nlp.util.BinaryHeapPriorityQueue$Entry entry)">2</method>
			<method name="public int size()">1</method>
			<method name="public Object getObject(Object key)">2</method>
			<method name="private void heapifyUp(edu.stanford.nlp.util.BinaryHeapPriorityQueue$Entry entry)">3</method>
			<method name="public void _init_(edu.stanford.nlp.util.MapFactory mapFactory, int initCapacity)">0</method>
			<method name="public boolean add(Object key)">2</method>
			<method name="public edu.stanford.nlp.util.BinaryHeapPriorityQueue deepCopy()">1</method>
			<method name="public edu.stanford.nlp.util.BinaryHeapPriorityQueue deepCopy(edu.stanford.nlp.util.MapFactory mapFactory)">2</method>
			<method name="private void removeEntry(edu.stanford.nlp.util.BinaryHeapPriorityQueue$Entry entry)">2</method>
			<method name="public String toString()">1</method>
			<method name="private void removeLastEntry()">1</method>
			<method name="private edu.stanford.nlp.util.BinaryHeapPriorityQueue$Entry getEntry(Object key)">1</method>
			<method name="private edu.stanford.nlp.util.BinaryHeapPriorityQueue$Entry getLastEntry()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public boolean isEmpty()">1</method>
			<method name="public Object getFirst()">2</method>
			<method name="private edu.stanford.nlp.util.BinaryHeapPriorityQueue$Entry getEntry(int index)">1</method>
			<method name="public boolean decreasePriority(Object key, double priority)">3</method>
			<method name="private void swap(edu.stanford.nlp.util.BinaryHeapPriorityQueue$Entry entryA, edu.stanford.nlp.util.BinaryHeapPriorityQueue$Entry entryB)">1</method>
			<method name="public void remove()">1</method>
			<method name="public boolean changePriority(Object key, double priority)">3</method>
			<method name="public Object next()">1</method>
			<method name="public double getPriority(Object key)">2</method>
			<method name="public Object removeFirst()">1</method>
			<method name="private edu.stanford.nlp.util.BinaryHeapPriorityQueue$Entry makeEntry(Object key)">1</method>
			<method name="public boolean add(Object key, double priority)">2</method>
			<method name="public void _init_(edu.stanford.nlp.util.MapFactory mapFactory)">0</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="public void _init_(int initCapacity)">0</method>
			<method name="public String toVerticalString()">2</method>
			<method name="private int compare(edu.stanford.nlp.util.BinaryHeapPriorityQueue$Entry entryA, edu.stanford.nlp.util.BinaryHeapPriorityQueue$Entry entryB)">1</method>
			<method name="public boolean relaxPriority(Object key, double priority)">3</method>
			<method name="public java.util.List toSortedList()">2</method>
			<method name="private edu.stanford.nlp.util.BinaryHeapPriorityQueue$Entry parent(edu.stanford.nlp.util.BinaryHeapPriorityQueue$Entry entry)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.HasOffset</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>4</rfc>
		<lcom>6</lcom>
		<ca>5</ca>
		<ce>0</ce>
		<npm>4</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract void setEndPosition(int)">1</method>
			<method name="public abstract int beginPosition()">1</method>
			<method name="public abstract void setBeginPosition(int)">1</method>
			<method name="public abstract int endPosition()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.objectbank.ReaderIteratorFactory$ReaderIterator</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>33</rfc>
		<lcom>2</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>4</npm>
		<lcom3>0.16666666666666674</lcom3>
		<loc>201</loc>
		<dam>0.6666666666666666</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>38.6</amc>
		<cc>
			<method name="public boolean hasNext()">2</method>
			<method name="private void setNextObject()">9</method>
			<method name="public java.io.Reader next()">2</method>
			<method name="public volatile Object next()">1</method>
			<method name="public void _init_(edu.stanford.nlp.objectbank.ReaderIteratorFactory)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.process.WordSegmentingTokenizer</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>16</rfc>
		<lcom>8</lcom>
		<ca>2</ca>
		<ce>8</ce>
		<npm>3</npm>
		<lcom3>0.41666666666666663</lcom3>
		<loc>83</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.45</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.0</amc>
		<cc>
			<method name="public static edu.stanford.nlp.process.TokenizerFactory factory(edu.stanford.nlp.process.WordSegmenter wordSegmenter)">1</method>
			<method name="public void _init_(edu.stanford.nlp.process.WordSegmenter segmenter, edu.stanford.nlp.process.Tokenizer tokenizer)">0</method>
			<method name="public void _init_(edu.stanford.nlp.process.WordSegmenter segmenter, java.io.Reader r)">0</method>
			<method name="protected volatile Object getNext()">1</method>
			<method name="protected edu.stanford.nlp.ling.HasWord getNext()">6</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.DependencyPrinter</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract String dependenciesToString(edu.stanford.nlp.trees.GrammaticalStructure, java.util.Collection, edu.stanford.nlp.trees.Tree)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.sequences.ColumnDocumentReaderAndWriter</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>23</rfc>
		<lcom>16</lcom>
		<ca>1</ca>
		<ce>9</ce>
		<npm>5</npm>
		<lcom3>0.8571428571428571</lcom3>
		<loc>104</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.23214285714285715</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.5</amc>
		<cc>
			<method name="public void init(String map)">1</method>
			<method name="static int access$108(edu.stanford.nlp.sequences.ColumnDocumentReaderAndWriter x0)">1</method>
			<method name="public void printAnswers(java.util.List doc, java.io.PrintWriter out)">2</method>
			<method name="static String[] access$200(edu.stanford.nlp.sequences.ColumnDocumentReaderAndWriter x0)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void init(edu.stanford.nlp.sequences.SeqClassifierFlags flags)">1</method>
			<method name="static int access$100(edu.stanford.nlp.sequences.ColumnDocumentReaderAndWriter x0)">1</method>
			<method name="public java.util.Iterator getIterator(java.io.Reader r)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.FastFactoredParser</name>
		<wmc>12</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>22</cbo>
		<rfc>47</rfc>
		<lcom>32</lcom>
		<ca>1</ca>
		<ce>21</ce>
		<npm>8</npm>
		<lcom3>0.7727272727272727</lcom3>
		<loc>241</loc>
		<dam>1.0</dam>
		<moa>7</moa>
		<mfa>0.0</mfa>
		<cam>0.26851851851851855</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.25</amc>
		<cc>
			<method name="protected int project(int state)">1</method>
			<method name="void _init_(edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser pparser, edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar dg, edu.stanford.nlp.parser.lexparser.Options op, int numToFind, edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex)">0</method>
			<method name="public java.util.List getKBestParses(int k)">1</method>
			<method name="public boolean parse(java.util.List words)">5</method>
			<method name="public double getBestScore()">1</method>
			<method name="private double depScoreTree(edu.stanford.nlp.trees.Tree tr)">1</method>
			<method name="public boolean hasParse()">2</method>
			<method name="public java.util.List getKSampledParses(int k)">1</method>
			<method name="void _init_(edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser pparser, edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar dg, edu.stanford.nlp.parser.lexparser.Options op, int numToFind, edu.stanford.nlp.parser.lexparser.GrammarProjection projection, edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex)">0</method>
			<method name="public edu.stanford.nlp.trees.Tree getBestParse()">1</method>
			<method name="public java.util.List getBestParses()">1</method>
			<method name="public java.util.List getKGoodParses(int k)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.SystemUtils</name>
		<wmc>14</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>45</rfc>
		<lcom>91</lcom>
		<ca>6</ca>
		<ce>2</ce>
		<npm>13</npm>
		<lcom3>2.0</lcom3>
		<loc>324</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.17346938775510204</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>22.142857142857142</amc>
		<cc>
			<method name="public static int getPID()">1</method>
			<method name="public static void runShellCommand(String cmd, StringBuilder outputLines, StringBuilder errorLines)">1</method>
			<method name="public static void runShellCommand(String[] cmd, StringBuilder outputLines)">1</method>
			<method name="public static int getPIDNoExceptions()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public static void run(ProcessBuilder builder, java.io.Writer output, java.io.Writer error)">1</method>
			<method name="public static void runShellCommand(String cmd)">1</method>
			<method name="public static void runShellCommand(String[] cmd, StringBuilder outputLines, StringBuilder errorLines)">1</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="public static void run(ProcessBuilder builder)">1</method>
			<method name="public static void runShellCommand(String[] cmd)">1</method>
			<method name="private static void consume(Process process, java.io.Writer outputWriter, java.io.Writer errorWriter)">1</method>
			<method name="public static void runShellCommand(String cmd, StringBuilder outputLines)">1</method>
			<method name="public static int getMemoryInUse()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.MUCMentionExtractor</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>20</cbo>
		<rfc>64</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>19</ce>
		<npm>4</npm>
		<lcom3>0.22222222222222218</lcom3>
		<loc>799</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.55</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>198.0</amc>
		<cc>
			<method name="public void resetDocs()">1</method>
			<method name="public edu.stanford.nlp.dcoref.Document nextDoc()">1</method>
			<method name="public void _init_(edu.stanford.nlp.dcoref.Dictionaries dict, java.util.Properties props, edu.stanford.nlp.dcoref.Semantics semantics)">0</method>
			<method name="public void _init_(edu.stanford.nlp.dcoref.Dictionaries dict, java.util.Properties props, edu.stanford.nlp.dcoref.Semantics semantics, edu.stanford.nlp.classify.LogisticClassifier singletonModel)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.international.Languages$1</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>42</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>40.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.HistoryTable</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>13</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>0.6</lcom3>
		<loc>42</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.666666666666667</amc>
		<cc>
			<method name="edu.stanford.nlp.tagger.maxent.History getHistory(int index)">1</method>
			<method name="void release()">1</method>
			<method name="int getIndex(edu.stanford.nlp.tagger.maxent.History h)">1</method>
			<method name="public void _init_()">0</method>
			<method name="int size()">1</method>
			<method name="int add(edu.stanford.nlp.tagger.maxent.History h)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.MultiNodePattern</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>4</noc>
		<cbo>8</cbo>
		<rfc>7</rfc>
		<lcom>3</lcom>
		<ca>8</ca>
		<ce>0</ce>
		<npm>5</npm>
		<lcom3>0.6</lcom3>
		<loc>31</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.8333333333333335</amc>
		<cc>
			<method name="public int getMinNodes()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void setMaxNodes(int maxNodes)">1</method>
			<method name="public int getMaxNodes()">1</method>
			<method name="public void setMinNodes(int minNodes)">1</method>
			<method name="protected abstract java.util.Collection match(java.util.List, int)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.NegraPennCollinizer</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>25</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>8</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>136</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.5833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>43.333333333333336</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.TreebankLangParserParams tlpp, boolean deletePunct)">0</method>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.TreebankLangParserParams tlpp)">0</method>
			<method name="public edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree tree)">11</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.EvalbFormatWriter</name>
		<wmc>10</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>22</rfc>
		<lcom>3</lcom>
		<ca>2</ca>
		<ce>2</ce>
		<npm>9</npm>
		<lcom3>0.5740740740740741</lcom3>
		<loc>157</loc>
		<dam>0.6666666666666666</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.3888888888888889</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>14.1</amc>
		<cc>
			<method name="public static void initEVALBfiles(edu.stanford.nlp.parser.lexparser.TreebankLangParserParams tlpParams)">1</method>
			<method name="public void initFiles(edu.stanford.nlp.parser.lexparser.TreebankLangParserParams tlpParams, String goldFilename, String testFilename)">1</method>
			<method name="public static void writeEVALBline(edu.stanford.nlp.trees.Tree gold, edu.stanford.nlp.trees.Tree test)">1</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static void closeEVALBfiles()">1</method>
			<method name="public void initFiles(edu.stanford.nlp.parser.lexparser.TreebankLangParserParams tlpParams, String testFilename)">1</method>
			<method name="public void closeFiles()">3</method>
			<method name="public void writeTree(edu.stanford.nlp.trees.Tree test)">2</method>
			<method name="public void writeTrees(edu.stanford.nlp.trees.Tree gold, edu.stanford.nlp.trees.Tree test)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.sentiment.BuildBinarizedDataset</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>15</cbo>
		<rfc>56</rfc>
		<lcom>10</lcom>
		<ca>0</ca>
		<ce>15</ce>
		<npm>5</npm>
		<lcom3>2.0</lcom3>
		<loc>424</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.25</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>83.8</amc>
		<cc>
			<method name="public static void main(String[] args)">8</method>
			<method name="public static void setUnknownLabels(edu.stanford.nlp.trees.Tree tree, Integer defaultLabel)">3</method>
			<method name="public void _init_()">0</method>
			<method name="public static void extractLabels(java.util.Map spanToLabels, java.util.List tokens, String line)">7</method>
			<method name="public static boolean setSpanLabel(edu.stanford.nlp.trees.Tree tree, edu.stanford.nlp.util.Pair span, String value)">8</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.MaxentTagger</name>
		<wmc>62</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>66</cbo>
		<rfc>313</rfc>
		<lcom>1535</lcom>
		<ca>16</ca>
		<ce>57</ce>
		<npm>31</npm>
		<lcom3>0.8631147540983606</lcom3>
		<loc>3407</loc>
		<dam>0.175</dam>
		<moa>8</moa>
		<mfa>0.0</mfa>
		<cam>0.09978617248752673</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>53.306451612903224</amc>
		<cc>
			<method name="protected edu.stanford.nlp.process.TokenizerFactory chooseTokenizerFactory()">1</method>
			<method name="protected void saveModel(java.io.DataOutputStream file)">1</method>
			<method name="public void _init_(String modelFile)">0</method>
			<method name="public void _init_(String modelFile, java.util.Properties config)">0</method>
			<method name="public void runTagger(Iterable document, java.io.BufferedWriter writer, edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter$OutputStyle outputStyle)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="double getInactiveTagDefaultScore(int nDefault)">2</method>
			<method name="public void tagCoreLabels(java.util.List sentence)">1</method>
			<method name="public void _init_(String modelFile, java.util.Properties config, boolean printLoading)">0</method>
			<method name="protected void readModelAndInit(java.util.Properties config, java.io.DataInputStream rf, boolean printLoading)">16</method>
			<method name="protected void saveModel(String filename)">1</method>
			<method name="protected void dumpModel(java.io.PrintStream out)">5</method>
			<method name="private void simplifyLambda()">7</method>
			<method name="public int getTagIndex(String tag)">1</method>
			<method name="private synchronized void initDefaultScores()">3</method>
			<method name="private void removeDeadRules()">6</method>
			<method name="private static void printErrWordsPerSec(long milliSec, int numWords)">1</method>
			<method name="public volatile Object apply(Object x0)">1</method>
			<method name="private static void runTest(edu.stanford.nlp.tagger.maxent.TaggerConfig config)">2</method>
			<method name="public transient void tagFromXML(java.io.Reader input, java.io.Writer writer, String[] xmlTags)">2</method>
			<method name="private static void trainAndSaveModel(edu.stanford.nlp.tagger.maxent.TaggerConfig config)">1</method>
			<method name="private static void dumpModel(edu.stanford.nlp.tagger.maxent.TaggerConfig config)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public java.util.List process(java.util.List sentences)">2</method>
			<method name="public java.util.ArrayList tagSentence(java.util.List sentence, boolean reuseTags)">1</method>
			<method name="public void tagAndOutputSentence(java.util.List sentence, boolean outputLemmas, edu.stanford.nlp.process.Morphology morpha, edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter$OutputStyle outputStyle, boolean outputVerbosity, int numSentences, String separator, java.io.Writer writer)">1</method>
			<method name="private void tagFromXML()">2</method>
			<method name="public java.util.ArrayList tagSentence(java.util.List sentence)">1</method>
			<method name="protected void readModelAndInit(java.util.Properties config, String modelFileOrUrl, boolean printLoading)">1</method>
			<method name="public int addTag(String tag)">1</method>
			<method name="public int numTags()">1</method>
			<method name="private void saveExtractors(java.io.OutputStream os)">1</method>
			<method name="public String tagString(String toTag)">1</method>
			<method name="private static void runTagger(edu.stanford.nlp.tagger.maxent.TaggerConfig config)">1</method>
			<method name="public edu.stanford.nlp.tagger.maxent.TTags getTags()">1</method>
			<method name="private void readExtractors(java.io.InputStream file)">1</method>
			<method name="void init(edu.stanford.nlp.tagger.maxent.TaggerConfig config)">21</method>
			<method name="public void outputTaggedSentence(java.util.List sentence, boolean outputLemmas, edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter$OutputStyle outputStyle, boolean outputVerbosity, int numSentences, String separator, java.io.Writer writer)">2</method>
			<method name="public java.util.List tagCoreLabelsOrHasWords(java.util.List sentence, edu.stanford.nlp.process.Morphology morpha, boolean outputLemmas)">5</method>
			<method name="public static java.util.List tokenizeText(java.io.Reader r)">1</method>
			<method name="public void runTaggerSGML(java.io.BufferedReader reader, java.io.BufferedWriter writer, edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter$OutputStyle outputStyle)">1</method>
			<method name="public String getTag(int index)">1</method>
			<method name="public void runTagger(java.io.BufferedReader reader, java.io.BufferedWriter writer, String tagInside, edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter$OutputStyle outputStyle)">1</method>
			<method name="public static void lemmatize(java.util.List sentence, edu.stanford.nlp.process.Morphology morpha)">2</method>
			<method name="private void setExtractorsGlobal()">1</method>
			<method name="private static java.util.List castCoreLabels(java.util.List sent)">3</method>
			<method name="private void runTagger()">1</method>
			<method name="public String tagTokenizedString(String toTag)">1</method>
			<method name="public void tagCoreLabels(java.util.List sentence, boolean reuseTags)">3</method>
			<method name="public static java.util.List tokenizeText(java.io.Reader r, edu.stanford.nlp.process.TokenizerFactory tokenizerFactory)">3</method>
			<method name="private static String getXMLWords(java.util.List sentence, int sentNum, boolean outputLemmas)">10</method>
			<method name="boolean hasApproximateScoring()">2</method>
			<method name="edu.stanford.nlp.maxent.iis.LambdaSolve getLambdaSolve()">1</method>
			<method name="private static void runTraining(edu.stanford.nlp.tagger.maxent.TaggerConfig config)">1</method>
			<method name="private static String getTsvWords(boolean verbose, boolean outputLemmas, java.util.List sentence)">9</method>
			<method name="public java.util.ArrayList apply(java.util.List in)">1</method>
			<method name="protected static edu.stanford.nlp.process.TokenizerFactory chooseTokenizerFactory(boolean tokenize, String tokenizerFactory, String tokenizerOptions, boolean invertible)">7</method>
			<method name="public transient void tagFromXML(java.io.InputStream input, java.io.Writer writer, String[] xmlTags)">2</method>
			<method name="boolean isRare(String word)">2</method>
			<method name="public void runTaggerStdin(java.io.BufferedReader reader, java.io.BufferedWriter writer, edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter$OutputStyle outputStyle)">1</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="private static void writeXMLSentence(java.io.Writer w, java.util.List sent, int sentNum, boolean outputLemmas)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.MapFactory$WeakHashMapFactory</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>9</rfc>
		<lcom>15</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>4</npm>
		<lcom3>1.2</lcom3>
		<loc>35</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4583333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.666666666666667</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public java.util.Map setMap(java.util.Map map)">1</method>
			<method name="public java.util.Map newMap()">1</method>
			<method name="void _init_(edu.stanford.nlp.util.MapFactory$1 x0)">0</method>
			<method name="public java.util.Map newMap(int initCapacity)">1</method>
			<method name="public java.util.Map setMap(java.util.Map map, int initCapacity)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.RelationFeatureFactory</name>
		<wmc>17</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>24</cbo>
		<rfc>114</rfc>
		<lcom>116</lcom>
		<ca>3</ca>
		<ce>21</ce>
		<npm>12</npm>
		<lcom3>0.8333333333333334</lcom3>
		<loc>3739</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.234375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>218.58823529411765</amc>
		<cc>
			<method name="public static String dependencyPath(java.util.List edgePath, edu.stanford.nlp.ling.IndexedWord node)">1</method>
			<method name="public boolean addFeatures(edu.stanford.nlp.stats.Counter features, edu.stanford.nlp.ie.machinereading.structure.RelationMention rel, java.util.List types)">1</method>
			<method name="public edu.stanford.nlp.ling.Datum createDatum(edu.stanford.nlp.ie.machinereading.structure.RelationMention rel, java.util.logging.Logger logger)">2</method>
			<method name="static void _clinit_()">0</method>
			<method name="private static boolean usingFeature(java.util.List types, java.util.List checklist, String type)">3</method>
			<method name="public static java.util.List dependencyPathAsList(java.util.List edgePath, edu.stanford.nlp.ling.IndexedWord node, boolean generalize)">5</method>
			<method name="private static edu.stanford.nlp.trees.GrammaticalRelation generalizeRelation(edu.stanford.nlp.trees.GrammaticalRelation gr)">4</method>
			<method name="public void setDoNotLexicalizeFirstArgument(boolean doNotLexicalizeFirstArg)">1</method>
			<method name="protected void addDependencyPathFeatures(edu.stanford.nlp.stats.Counter features, edu.stanford.nlp.ie.machinereading.structure.RelationMention rel, edu.stanford.nlp.ie.machinereading.structure.EntityMention arg0, edu.stanford.nlp.ie.machinereading.structure.EntityMention arg1, java.util.List types, java.util.List checklist, java.util.logging.Logger logger)">73</method>
			<method name="public transient void _init_(String[] featureList)">0</method>
			<method name="public edu.stanford.nlp.ling.Datum createDatum(edu.stanford.nlp.ie.machinereading.structure.RelationMention rel)">1</method>
			<method name="public static String generalizedDependencyPath(java.util.List edgePath, edu.stanford.nlp.ling.IndexedWord node)">1</method>
			<method name="public edu.stanford.nlp.ling.Datum createDatum(edu.stanford.nlp.ie.machinereading.structure.RelationMention rel, String positiveLabel)">3</method>
			<method name="public String getFeature(edu.stanford.nlp.ie.machinereading.structure.RelationMention rel, String featureType)">2</method>
			<method name="String sentToString(edu.stanford.nlp.util.CoreMap sentence)">4</method>
			<method name="public java.util.Set getFeatures(edu.stanford.nlp.ie.machinereading.structure.RelationMention rel, String featureType)">1</method>
			<method name="public boolean addFeatures(edu.stanford.nlp.stats.Counter features, edu.stanford.nlp.ie.machinereading.structure.RelationMention rel, java.util.List types, java.util.logging.Logger logger)">129</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.ProjectionScorer</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>18</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>6</npm>
		<lcom3>0.19047619047619044</lcom3>
		<loc>133</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.32142857142857145</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.25</amc>
		<cc>
			<method name="public double iScore(edu.stanford.nlp.parser.lexparser.Edge edge)">1</method>
			<method name="protected edu.stanford.nlp.parser.lexparser.Edge project(edu.stanford.nlp.parser.lexparser.Edge edge)">1</method>
			<method name="public boolean iPossible(edu.stanford.nlp.parser.lexparser.Hook hook)">1</method>
			<method name="public double oScore(edu.stanford.nlp.parser.lexparser.Edge edge)">1</method>
			<method name="public boolean parse(java.util.List words)">1</method>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.Scorer scorer, edu.stanford.nlp.parser.lexparser.GrammarProjection gp, edu.stanford.nlp.parser.lexparser.Options op)">0</method>
			<method name="public boolean oPossible(edu.stanford.nlp.parser.lexparser.Hook hook)">1</method>
			<method name="protected edu.stanford.nlp.parser.lexparser.Hook project(edu.stanford.nlp.parser.lexparser.Hook hook)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.metrics.AbstractEval$CatErrorEval</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>29</rfc>
		<lcom>9</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>3</npm>
		<lcom3>0.6</lcom3>
		<loc>149</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.3611111111111111</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>23.5</amc>
		<cc>
			<method name="public void evaluate(edu.stanford.nlp.trees.Tree t1, edu.stanford.nlp.trees.Tree t2, java.io.PrintWriter pw)">3</method>
			<method name="public void display(boolean verbose, java.io.PrintWriter pw)">1</method>
			<method name="protected java.util.Set makeObjects(edu.stanford.nlp.trees.Tree tree)">1</method>
			<method name="private static void display(edu.stanford.nlp.stats.ClassicCounter c, java.io.PrintWriter pw)">2</method>
			<method name="public void _init_(String str)">0</method>
			<method name="private static java.util.List myMakeObjects(edu.stanford.nlp.trees.Tree tree)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.TreeLengthComparator</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>38</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.666666666666666</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="public int compare(edu.stanford.nlp.trees.Tree t1, edu.stanford.nlp.trees.Tree t2)">4</method>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.concurrent.SynchronizedInterner$1</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>9</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>47</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>22.0</amc>
		<cc>
			<method name="void _init_(String[])">0</method>
			<method name="public void run()">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.AbstractTreebankLanguagePack</name>
		<wmc>41</wmc>
		<dit>1</dit>
		<noc>6</noc>
		<cbo>20</cbo>
		<rfc>61</rfc>
		<lcom>758</lcom>
		<ca>6</ca>
		<ce>14</ce>
		<npm>38</npm>
		<lcom3>0.9475</lcom3>
		<loc>384</loc>
		<dam>0.9</dam>
		<moa>5</moa>
		<mfa>0.0</mfa>
		<cam>0.28</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.121951219512194</amc>
		<cc>
			<method name="public abstract String[] punctuationTags()">1</method>
			<method name="public edu.stanford.nlp.trees.GrammaticalStructureFactory grammaticalStructureFactory(edu.stanford.nlp.util.Filter puncFilt, edu.stanford.nlp.trees.HeadFinder typedDependencyHeadFinder)">1</method>
			<method name="public edu.stanford.nlp.process.TokenizerFactory treeTokenizerFactory()">1</method>
			<method name="public edu.stanford.nlp.util.Filter punctuationTagRejectFilter()">1</method>
			<method name="public char[] labelAnnotationIntroducingCharacters()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public String stripGF(String category)">3</method>
			<method name="public String getEncoding()">1</method>
			<method name="public String categoryAndFunction(String category)">3</method>
			<method name="public String[] evalBIgnoredPunctuationTags()">1</method>
			<method name="public edu.stanford.nlp.util.Function getBasicCategoryFunction()">1</method>
			<method name="public boolean isPunctuationWord(String str)">1</method>
			<method name="public abstract String[] punctuationWords()">1</method>
			<method name="public abstract String[] startSymbols()">1</method>
			<method name="public abstract String[] sentenceFinalPunctuationTags()">1</method>
			<method name="public boolean isStartSymbol(String str)">1</method>
			<method name="public edu.stanford.nlp.util.Filter evalBIgnoredPunctuationTagAcceptFilter()">1</method>
			<method name="public edu.stanford.nlp.util.Filter evalBIgnoredPunctuationTagRejectFilter()">1</method>
			<method name="public edu.stanford.nlp.trees.GrammaticalStructureFactory grammaticalStructureFactory()">1</method>
			<method name="public boolean isEvalBIgnoredPunctuationTag(String str)">1</method>
			<method name="public void _init_(char gfChar)">0</method>
			<method name="public void setGfCharacter(char gfCharacter)">1</method>
			<method name="public boolean isPunctuationTag(String str)">1</method>
			<method name="public String basicCategory(String category)">2</method>
			<method name="public String startSymbol()">3</method>
			<method name="public edu.stanford.nlp.util.Function getCategoryAndFunctionFunction()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public char getGfCharacter()">1</method>
			<method name="public edu.stanford.nlp.util.Filter startSymbolAcceptFilter()">1</method>
			<method name="public edu.stanford.nlp.trees.TreeReaderFactory treeReaderFactory()">1</method>
			<method name="private int postBasicCategoryIndex(String category)">7</method>
			<method name="private int lastIndexOfNumericTag(String category)">7</method>
			<method name="public boolean isLabelAnnotationIntroducingCharacter(char ch)">3</method>
			<method name="public edu.stanford.nlp.trees.GrammaticalStructureFactory grammaticalStructureFactory(edu.stanford.nlp.util.Filter puncFilt)">1</method>
			<method name="public edu.stanford.nlp.process.TokenizerFactory getTokenizerFactory()">1</method>
			<method name="public boolean isSentenceFinalPunctuationTag(String str)">1</method>
			<method name="public edu.stanford.nlp.util.Filter punctuationTagAcceptFilter()">1</method>
			<method name="public edu.stanford.nlp.international.morph.MorphoFeatureSpecification morphFeatureSpec()">1</method>
			<method name="public edu.stanford.nlp.util.Filter punctuationWordRejectFilter()">1</method>
			<method name="public edu.stanford.nlp.util.Filter sentenceFinalPunctuationTagAcceptFilter()">1</method>
			<method name="public edu.stanford.nlp.util.Filter punctuationWordAcceptFilter()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequencePattern$ConjStartState</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>12</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>5</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>63</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.7</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>30.0</amc>
		<cc>
			<method name="public void _init_(int childCount)">0</method>
			<method name="protected boolean match(int bid, edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates matchedStates, boolean consume, edu.stanford.nlp.ling.tokensregex.SequencePattern$State prevState)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.DeterministicCorefAnnotator</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>21</cbo>
		<rfc>51</rfc>
		<lcom>8</lcom>
		<ca>1</ca>
		<ce>20</ce>
		<npm>5</npm>
		<lcom3>0.85</lcom3>
		<loc>401</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.4666666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>78.2</amc>
		<cc>
			<method name="public static String signature(java.util.Properties props)">1</method>
			<method name="public void annotate(edu.stanford.nlp.pipeline.Annotation annotation)">8</method>
			<method name="public java.util.Set requires()">1</method>
			<method name="public void _init_(java.util.Properties props)">0</method>
			<method name="public java.util.Set requirementsSatisfied()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.classify.GeneralDataset</name>
		<wmc>43</wmc>
		<dit>1</dit>
		<noc>2</noc>
		<cbo>39</cbo>
		<rfc>102</rfc>
		<lcom>685</lcom>
		<ca>30</ca>
		<ce>12</ce>
		<npm>37</npm>
		<lcom3>0.8253968253968254</lcom3>
		<loc>1006</loc>
		<dam>0.6666666666666666</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.11627906976744186</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>22.25581395348837</amc>
		<cc>
			<method name="public String[] makeSvmLabelMap()">2</method>
			<method name="public void clear()">1</method>
			<method name="public abstract void summaryStatistics()">1</method>
			<method name="protected int[] trimToSize(int[] i)">1</method>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="public void printSVMLightFormat()">1</method>
			<method name="public abstract void add(edu.stanford.nlp.ling.Datum)">1</method>
			<method name="public void addAll(Iterable data)">2</method>
			<method name="public abstract edu.stanford.nlp.util.Pair split(int, int)">1</method>
			<method name="public void clear(int numDatums)">1</method>
			<method name="public int size()">1</method>
			<method name="public edu.stanford.nlp.classify.GeneralDataset mapDataset(edu.stanford.nlp.classify.GeneralDataset dataset, edu.stanford.nlp.util.Index newLabelIndex, java.util.Map labelMapping, Object defaultLabel)">3</method>
			<method name="public int numFeatures()">1</method>
			<method name="public edu.stanford.nlp.stats.ClassicCounter numDatumsPerLabel()">2</method>
			<method name="public int numClasses()">1</method>
			<method name="protected void trimLabels()">1</method>
			<method name="public edu.stanford.nlp.classify.GeneralDataset sampleDataset(int randomSeed, double sampleFrac, boolean sampleWithReplacement)">5</method>
			<method name="protected int[][] trimToSize(int[][] i)">1</method>
			<method name="public void applyFeatureCountThreshold(int k)">7</method>
			<method name="public abstract void printSparseFeatureMatrix(java.io.PrintWriter)">1</method>
			<method name="public java.util.Iterator labelIterator()">1</method>
			<method name="public edu.stanford.nlp.classify.GeneralDataset mapDataset(edu.stanford.nlp.classify.GeneralDataset dataset)">3</method>
			<method name="public edu.stanford.nlp.util.Pair splitOutFold(int fold, int numFolds)">6</method>
			<method name="public float[] getFeatureCounts()">3</method>
			<method name="public int numFeatureTypes()">1</method>
			<method name="public abstract edu.stanford.nlp.ling.RVFDatum getRVFDatum(int)">1</method>
			<method name="public void _init_()">0</method>
			<method name="protected abstract void initialize(int)">1</method>
			<method name="public void printSVMLightFormat(java.io.PrintWriter pw)">4</method>
			<method name="public static edu.stanford.nlp.ling.Datum mapDatum(edu.stanford.nlp.ling.Datum d, java.util.Map labelMapping, Object defaultLabel)">3</method>
			<method name="protected void trimData()">1</method>
			<method name="public void randomize(int randomSeed)">2</method>
			<method name="public abstract edu.stanford.nlp.util.Pair split(double)">1</method>
			<method name="public abstract void printSparseFeatureMatrix()">1</method>
			<method name="protected double[][] trimToSize(double[][] i)">1</method>
			<method name="public abstract edu.stanford.nlp.ling.Datum getDatum(int)">1</method>
			<method name="public void applyFeatureMaxCountThreshold(int k)">7</method>
			<method name="public int numFeatureTokens()">2</method>
			<method name="public abstract double[][] getValuesArray()">1</method>
			<method name="public edu.stanford.nlp.util.Index featureIndex()">1</method>
			<method name="public edu.stanford.nlp.util.Index labelIndex()">1</method>
			<method name="public int[] getLabelsArray()">1</method>
			<method name="public int[][] getDataArray()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalStructure$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.TimeFormatter$RegexComponent</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>17</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.0</amc>
		<cc>
			<method name="protected StringBuilder appendRegex0(StringBuilder sb)">1</method>
			<method name="public void _init_(String regex)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.SimpleConstituent</name>
		<wmc>9</wmc>
		<dit>0</dit>
		<noc>2</noc>
		<cbo>11</cbo>
		<rfc>10</rfc>
		<lcom>24</lcom>
		<ca>6</ca>
		<ce>5</ce>
		<npm>9</npm>
		<lcom3>0.75</lcom3>
		<loc>43</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6111111111111112</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.5555555555555554</amc>
		<cc>
			<method name="public void setStart(int start)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public edu.stanford.nlp.ling.LabelFactory labelFactory()">1</method>
			<method name="public void setEnd(int end)">1</method>
			<method name="public int end()">1</method>
			<method name="public void _init_(int start, int end)">0</method>
			<method name="public static edu.stanford.nlp.trees.ConstituentFactory factory()">1</method>
			<method name="public edu.stanford.nlp.trees.ConstituentFactory constituentFactory()">1</method>
			<method name="public int start()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams</name>
		<wmc>24</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>44</cbo>
		<rfc>106</rfc>
		<lcom>200</lcom>
		<ca>2</ca>
		<ce>43</ce>
		<npm>16</npm>
		<lcom3>0.8235294117647058</lcom3>
		<loc>2216</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.1497584541062802</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>90.625</amc>
		<cc>
			<method name="static boolean access$000(edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams x0)">1</method>
			<method name="public edu.stanford.nlp.trees.TreeTransformer subcategoryStripper()">1</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public int setOptionFlag(String[] args, int i)">18</method>
			<method name="public edu.stanford.nlp.trees.MemoryTreebank memoryTreebank()">1</method>
			<method name="public edu.stanford.nlp.trees.HeadFinder typedDependencyHeadFinder()">1</method>
			<method name="public edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.Tree root)">8</method>
			<method name="public edu.stanford.nlp.trees.TreeReaderFactory treeReaderFactory()">1</method>
			<method name="public java.util.List defaultTestSentence()">1</method>
			<method name="public String[] sisterSplitters()">1</method>
			<method name="static boolean access$100(edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams x0)">1</method>
			<method name="private void initializeAnnotationPatterns()">3</method>
			<method name="public edu.stanford.nlp.trees.HeadFinder headFinder()">2</method>
			<method name="public static void main(String[] args)">4</method>
			<method name="public edu.stanford.nlp.trees.TreeTransformer collinizer()">2</method>
			<method name="public edu.stanford.nlp.trees.TreeTransformer collinizerEvalb()">1</method>
			<method name="private String setupMorphoFeatures(String activeFeats)">2</method>
			<method name="private void setHeadFinder(edu.stanford.nlp.trees.HeadFinder hf)">4</method>
			<method name="private void removeBaselineFeature(String featName)">2</method>
			<method name="public void display()">1</method>
			<method name="public edu.stanford.nlp.trees.DiskTreebank diskTreebank()">1</method>
			<method name="public edu.stanford.nlp.parser.lexparser.Lexicon lex(edu.stanford.nlp.parser.lexparser.Options op, edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex)">3</method>
			<method name="static boolean access$200(edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Iterables$9$1</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>12</rfc>
		<lcom>7</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>4</npm>
		<lcom3>0.33333333333333337</lcom3>
		<loc>117</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.5833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.0</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.util.Iterables$9)">0</method>
			<method name="public boolean hasNext()">3</method>
			<method name="public void remove()">1</method>
			<method name="private edu.stanford.nlp.util.Pair nextPair()">7</method>
			<method name="public edu.stanford.nlp.util.Pair next()">3</method>
			<method name="public volatile Object next()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.CorefChain$MentionComparator</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>57</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.0</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="protected void _init_()">0</method>
			<method name="public int compare(edu.stanford.nlp.dcoref.Mention m1, edu.stanford.nlp.dcoref.Mention m2)">7</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.PropertiesUtils</name>
		<wmc>22</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>25</cbo>
		<rfc>69</rfc>
		<lcom>231</lcom>
		<ca>20</ca>
		<ce>5</ce>
		<npm>21</npm>
		<lcom3>2.0</lcom3>
		<loc>415</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.17803030303030304</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>17.863636363636363</amc>
		<cc>
			<method name="public static boolean hasProperty(java.util.Properties props, String key)">5</method>
			<method name="public static java.util.Map asMap(java.util.Properties properties)">2</method>
			<method name="public static String[] getStringArray(java.util.Properties props, String key, String[] defaults)">2</method>
			<method name="public static int[] getIntArray(java.util.Properties props, String key)">1</method>
			<method name="public static java.util.Properties fromString(String str)">1</method>
			<method name="public static String getSignature(String name, java.util.Properties properties, edu.stanford.nlp.util.PropertiesUtils$Property[] supportedProperties)">4</method>
			<method name="public static String[] getStringArray(java.util.Properties props, String key)">2</method>
			<method name="public static double getDouble(java.util.Properties props, String key)">1</method>
			<method name="private void _init_()">0</method>
			<method name="public static int getInt(java.util.Properties props, String key)">1</method>
			<method name="public static Object get(java.util.Properties props, String key, Object defaultValue, java.lang.reflect.Type type)">2</method>
			<method name="public static long getLong(java.util.Properties props, String key, long defaultValue)">2</method>
			<method name="public static String asString(java.util.Properties props)">1</method>
			<method name="public static boolean getBool(java.util.Properties props, String key, boolean defaultValue)">2</method>
			<method name="public static java.util.List getSortedEntries(java.util.Properties properties)">1</method>
			<method name="public static int getInt(java.util.Properties props, String key, int defaultValue)">2</method>
			<method name="public static double getDouble(java.util.Properties props, String key, double defaultValue)">2</method>
			<method name="public static void printProperties(String message, java.util.Properties properties)">1</method>
			<method name="public static double[] getDoubleArray(java.util.Properties props, String key)">1</method>
			<method name="public static boolean getBool(java.util.Properties props, String key)">1</method>
			<method name="public static void checkProperties(java.util.Properties properties, java.util.Properties defaults)">5</method>
			<method name="public static void printProperties(String message, java.util.Properties properties, java.io.PrintStream stream)">4</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.UnknownGTTrainer</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>36</rfc>
		<lcom>9</lcom>
		<ca>3</ca>
		<ce>5</ce>
		<npm>6</npm>
		<lcom3>0.5714285714285714</lcom3>
		<loc>274</loc>
		<dam>0.0</dam>
		<moa>4</moa>
		<mfa>0.0</mfa>
		<cam>0.43333333333333335</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>43.5</amc>
		<cc>
			<method name="public void train(edu.stanford.nlp.ling.TaggedWord tw, double weight)">1</method>
			<method name="public void train(java.util.Collection trees, double weight)">2</method>
			<method name="public void finishTraining()">4</method>
			<method name="public void train(edu.stanford.nlp.trees.Tree tree, double weight)">2</method>
			<method name="public void _init_()">0</method>
			<method name="public void train(java.util.Collection trees)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$ForcedSentenceEndAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$CollapsedCCProcessedDependenciesAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.sievepasses.DiscourseMatch</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>8</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.tsurgeon.PruneNode</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>12</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>79</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.75</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern[] children)">0</method>
			<method name="private static edu.stanford.nlp.trees.Tree pruneHelper(edu.stanford.nlp.trees.Tree root, edu.stanford.nlp.trees.Tree nodeToPrune)">3</method>
			<method name="public edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.tregex.TregexMatcher m)">4</method>
			<method name="public void _init_(java.util.List children)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$WordPositionAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$UnbrokenCategoryPrecedes</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>21</rfc>
		<lcom>8</lcom>
		<ca>2</ca>
		<ce>6</ce>
		<npm>0</npm>
		<lcom3>0.65</lcom3>
		<loc>138</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.43333333333333335</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>25.6</amc>
		<cc>
			<method name="private boolean pathMatchesNode(edu.stanford.nlp.trees.Tree node)">4</method>
			<method name="void _init_(String arg, edu.stanford.nlp.util.Function basicCatFunction)">0</method>
			<method name="java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">1</method>
			<method name="boolean satisfies(edu.stanford.nlp.trees.Tree t1, edu.stanford.nlp.trees.Tree t2, edu.stanford.nlp.trees.Tree root, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">1</method>
			<method name="static boolean access$1400(edu.stanford.nlp.trees.tregex.Relation$UnbrokenCategoryPrecedes x0, edu.stanford.nlp.trees.Tree x1)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.CoNLL2011DocumentReader</name>
		<wmc>16</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>19</cbo>
		<rfc>95</rfc>
		<lcom>100</lcom>
		<ca>3</ca>
		<ce>18</ce>
		<npm>10</npm>
		<lcom3>0.975</lcom3>
		<loc>961</loc>
		<dam>0.9375</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.14358974358974358</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>58.0625</amc>
		<cc>
			<method name="static String access$000(String[] x0, int x1)">1</method>
			<method name="public void _init_(String filepath, edu.stanford.nlp.dcoref.CoNLL2011DocumentReader$Options options)">0</method>
			<method name="static String access$100(java.util.List x0, int x1)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void reset()">2</method>
			<method name="public edu.stanford.nlp.dcoref.CoNLL2011DocumentReader$Document getNextDocument()">5</method>
			<method name="public void close()">1</method>
			<method name="private static java.util.List getFiles(String filepath, java.util.regex.Pattern filter)">2</method>
			<method name="public static edu.stanford.nlp.util.Pair getMention(Integer index, String corefG, java.util.List sentenceAnno)">4</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="private static String getField(String[] fields, int pos)">2</method>
			<method name="private static String concatField(java.util.List sentWords, int pos)">3</method>
			<method name="public static boolean include(java.util.Map sentenceInfo, edu.stanford.nlp.util.Pair mention, String corefG)">2</method>
			<method name="public static void writeTabSep(java.io.PrintWriter pw, edu.stanford.nlp.util.CoreMap sentence, edu.stanford.nlp.util.CollectionValuedMap chainmap)">13</method>
			<method name="public static void usage()">1</method>
			<method name="public void _init_(String filepath)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.Semantics</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>6</rfc>
		<lcom>1</lcom>
		<ca>9</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>1.0</lcom3>
		<loc>21</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(edu.stanford.nlp.dcoref.Dictionaries dict)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalRelations$TopicGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.classify.LinearClassifierFactory$Factory15</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>5</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>2</npm>
		<lcom3>1.3333333333333333</lcom3>
		<loc>19</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.5</amc>
		<cc>
			<method name="public edu.stanford.nlp.optimization.Minimizer create()">1</method>
			<method name="private void _init_()">0</method>
			<method name="public volatile Object create()">1</method>
			<method name="void _init_(edu.stanford.nlp.classify.LinearClassifierFactory$1 x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.SGDMinimizer</name>
		<wmc>19</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>13</cbo>
		<rfc>54</rfc>
		<lcom>107</lcom>
		<ca>3</ca>
		<ce>10</ce>
		<npm>11</npm>
		<lcom3>0.8071895424836601</lcom3>
		<loc>1075</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.2833333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>54.68421052631579</amc>
		<cc>
			<method name="public double tune(edu.stanford.nlp.optimization.AbstractStochasticCachingDiffUpdateFunction function, double[] initial, int sampleSize, double seta)">9</method>
			<method name="protected String getName()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void _init_(double sigma, int numPasses, int tuningSamples, int batchSize)">0</method>
			<method name="public double getObjective(edu.stanford.nlp.optimization.AbstractStochasticCachingDiffUpdateFunction function, double[] w, double wscale, int[] sample)">1</method>
			<method name="public double tryEta(edu.stanford.nlp.optimization.AbstractStochasticCachingDiffUpdateFunction function, double[] initial, int[] sample, double eta)">3</method>
			<method name="public void _init_(double sigma, int numPasses, int tuningSamples)">0</method>
			<method name="public void _init_(double sigma, int numPasses)">0</method>
			<method name="public double[] minimize(edu.stanford.nlp.optimization.Function function, double functionTolerance, double[] initial)">1</method>
			<method name="protected void init(edu.stanford.nlp.optimization.AbstractStochasticCachingDiffUpdateFunction func)">1</method>
			<method name="protected void say(String s)">2</method>
			<method name="public void shutUp()">1</method>
			<method name="protected void sayln(String s)">2</method>
			<method name="public double[] minimize(edu.stanford.nlp.optimization.Function f, double functionTolerance, double[] initial, int maxIterations)">16</method>
			<method name="private static double getNorm(double[] w)">2</method>
			<method name="private void rescale()">3</method>
			<method name="public void _init_(edu.stanford.nlp.classify.LogPrior prior, int numPasses, int batchSize, int tuningSamples)">0</method>
			<method name="public void setEvaluators(int iters, edu.stanford.nlp.optimization.Evaluator[] evaluators)">1</method>
			<method name="private void doEvaluation(double[] x)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer$TreeNullAnnotator</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>22</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>10</ce>
		<npm>2</npm>
		<lcom3>0.25</lcom3>
		<loc>125</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>40.0</amc>
		<cc>
			<method name="public edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree t)">1</method>
			<method name="private edu.stanford.nlp.trees.Tree transformTreeHelper(edu.stanford.nlp.trees.Tree t)">6</method>
			<method name="public void _init_(edu.stanford.nlp.trees.HeadFinder hf)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.UnknownWordModel</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>17</cbo>
		<rfc>8</rfc>
		<lcom>28</lcom>
		<ca>15</ca>
		<ce>3</ce>
		<npm>8</npm>
		<lcom3>2.0</lcom3>
		<loc>8</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4791666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract double scoreProbTagGivenWordSignature(edu.stanford.nlp.parser.lexparser.IntTaggedWord, int, double, String)">1</method>
			<method name="public abstract void addTagging(boolean, edu.stanford.nlp.parser.lexparser.IntTaggedWord, double)">1</method>
			<method name="public abstract int getSignatureIndex(int, int, String)">1</method>
			<method name="public abstract String getSignature(String, int)">1</method>
			<method name="public abstract int getUnknownLevel()">1</method>
			<method name="public abstract float score(edu.stanford.nlp.parser.lexparser.IntTaggedWord, int, double, double, double, String)">1</method>
			<method name="public abstract edu.stanford.nlp.stats.Counter unSeenCounter()">1</method>
			<method name="public abstract edu.stanford.nlp.parser.lexparser.Lexicon getLexicon()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.NERFeatureFactory$Bin2Annotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.LinearGrammarSmoother</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>13</cbo>
		<rfc>30</rfc>
		<lcom>9</lcom>
		<ca>1</ca>
		<ce>12</ce>
		<npm>4</npm>
		<lcom3>0.7142857142857143</lcom3>
		<loc>300</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.30357142857142855</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>40.857142857142854</amc>
		<cc>
			<method name="private void updateCounters(edu.stanford.nlp.parser.lexparser.Rule rule, edu.stanford.nlp.stats.Counter symWeights, edu.stanford.nlp.stats.Counter symCounts)">1</method>
			<method name="public String basicCategory(String category)">2</method>
			<method name="public edu.stanford.nlp.util.Pair apply(edu.stanford.nlp.util.Pair bgug)">5</method>
			<method name="private int postBasicCategoryIndex(String category)">6</method>
			<method name="private float smoothRuleWeight(edu.stanford.nlp.parser.lexparser.Rule rule, edu.stanford.nlp.stats.Counter symWeights, edu.stanford.nlp.stats.Counter symCounts)">1</method>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.TrainOptions trainOptions, edu.stanford.nlp.util.Index stateIndex, edu.stanford.nlp.util.Index tagIndex)">0</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.crf.CRFClassifierNonlinear</name>
		<wmc>12</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>20</cbo>
		<rfc>71</rfc>
		<lcom>14</lcom>
		<ca>1</ca>
		<ce>20</ce>
		<npm>5</npm>
		<lcom3>0.5454545454545454</lcom3>
		<loc>1563</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.15555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>128.83333333333334</amc>
		<cc>
			<method name="protected double[] trainWeights(int[][][][] data, int[][] labels, edu.stanford.nlp.optimization.Evaluator[] evaluators, int pruneFeatureItr, double[][][][] featureVals)">3</method>
			<method name="protected edu.stanford.nlp.ie.crf.CliquePotentialFunction getCliquePotentialFunctionForTest()">3</method>
			<method name="public void serializeClassifier(java.io.ObjectOutputStream oos)">2</method>
			<method name="protected void _init_()">0</method>
			<method name="public void _init_(java.util.Properties props)">0</method>
			<method name="public void loadClassifier(java.io.ObjectInputStream ois, java.util.Properties props)">1</method>
			<method name="private double[] trainWeightsUsingNonLinearCRF(edu.stanford.nlp.optimization.AbstractCachingDiffFunction func, edu.stanford.nlp.optimization.Evaluator[] evaluators)">6</method>
			<method name="private int[][][] transformDocData(int[][][] docData)">7</method>
			<method name="public edu.stanford.nlp.util.Triple documentToDataAndLabels(java.util.List document)">1</method>
			<method name="protected void loadTextClassifier(java.io.BufferedReader br)">1</method>
			<method name="protected void serializeTextClassifier(java.io.PrintWriter pw)">1</method>
			<method name="public void _init_(edu.stanford.nlp.sequences.SeqClassifierFlags flags)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.CorefCoreAnnotations$CorefClusterIdAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$ChineseIsSegmentedAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.MultiTokenTag$Tag</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>7</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>3</npm>
		<lcom3>0.375</lcom3>
		<loc>82</loc>
		<dam>0.25</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>25.0</amc>
		<cc>
			<method name="public boolean equals(Object o)">7</method>
			<method name="public int hashCode()">1</method>
			<method name="public void _init_(String name, String tag, int length)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$16$1</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>7</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>0.5</lcom3>
		<loc>66</loc>
		<dam>0.0</dam>
		<moa>4</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.333333333333332</amc>
		<cc>
			<method name="public void advance()">3</method>
			<method name="void initialize()">2</method>
			<method name="void _init_(edu.stanford.nlp.trees.tregex.Relation$16, edu.stanford.nlp.trees.tregex.TregexMatcher, edu.stanford.nlp.trees.Tree)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.negra.NegraLabel$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.GeneralizedCounter$CounterView</name>
		<wmc>20</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>42</rfc>
		<lcom>134</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>18</npm>
		<lcom3>0.7105263157894737</lcom3>
		<loc>192</loc>
		<dam>0.5</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.30833333333333335</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.5</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.stats.GeneralizedCounter x0, edu.stanford.nlp.stats.GeneralizedCounter$1 x1)">0</method>
			<method name="public void clear()">1</method>
			<method name="public volatile void setCount(Object x0, double x1)">1</method>
			<method name="public boolean equals(Object o)">3</method>
			<method name="public double incrementCount(java.util.List o, double count)">1</method>
			<method name="public volatile double incrementCount(Object x0, double x1)">1</method>
			<method name="public java.util.Set keySet()">1</method>
			<method name="public boolean isEmpty()">1</method>
			<method name="public void setCount(java.util.List o, double count)">1</method>
			<method name="public java.util.Set entrySet()">1</method>
			<method name="public double totalCount()">1</method>
			<method name="public double getCount(Object o)">2</method>
			<method name="public int size()">1</method>
			<method name="public volatile boolean containsKey(Object x0)">1</method>
			<method name="public int hashCode()">2</method>
			<method name="public boolean containsKey(java.util.List key)">1</method>
			<method name="public String toString()">2</method>
			<method name="public volatile double remove(Object x0)">1</method>
			<method name="private void _init_(edu.stanford.nlp.stats.GeneralizedCounter)">0</method>
			<method name="public double remove(java.util.List o)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequencePattern$Parser</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>3</rfc>
		<lcom>3</lcom>
		<ca>4</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>3</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract edu.stanford.nlp.util.Pair parseSequenceWithAction(edu.stanford.nlp.ling.tokensregex.Env, String)">1</method>
			<method name="public abstract edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr parseNode(edu.stanford.nlp.ling.tokensregex.Env, String)">1</method>
			<method name="public abstract edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr parseSequence(edu.stanford.nlp.ling.tokensregex.Env, String)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.NodePattern$ConjNodePattern</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>9</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>38</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.333333333333334</amc>
		<cc>
			<method name="public boolean match(Object node)">2</method>
			<method name="public String toString()">1</method>
			<method name="public void _init_(java.util.List nodePatterns)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$LMiddleAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.TokenSequenceMatcher</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>4</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>9</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.0</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.SequencePattern pattern, java.util.List tokens)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.PhraseTable$StringList</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>10</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>5</npm>
		<lcom3>0.25</lcom3>
		<loc>32</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.2</amc>
		<cc>
			<method name="public int size()">1</method>
			<method name="public void _init_(java.util.List words)">0</method>
			<method name="public String getWord(int i)">1</method>
			<method name="public String toString()">1</method>
			<method name="public void _init_(String[] wordsArray)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.BinaryRule</name>
		<wmc>13</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>13</cbo>
		<rfc>25</rfc>
		<lcom>0</lcom>
		<ca>10</ca>
		<ce>3</ce>
		<npm>12</npm>
		<lcom3>0.6145833333333334</lcom3>
		<loc>324</loc>
		<dam>0.5</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2619047619047619</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>23.307692307692307</amc>
		<cc>
			<method name="public volatile int compareTo(Object x0)">1</method>
			<method name="public int compareTo(edu.stanford.nlp.parser.lexparser.BinaryRule br)">7</method>
			<method name="public int parent()">1</method>
			<method name="public void _init_(int parent, int leftChild, int rightChild)">0</method>
			<method name="public boolean equals(Object o)">6</method>
			<method name="public int hashCode()">2</method>
			<method name="static void _clinit_()">0</method>
			<method name="public String toStringNoScore(edu.stanford.nlp.util.Index index)">2</method>
			<method name="public float score()">1</method>
			<method name="public void _init_(String s, edu.stanford.nlp.util.Index index)">0</method>
			<method name="public String toString()">1</method>
			<method name="public String toString(edu.stanford.nlp.util.Index index)">1</method>
			<method name="public void _init_(int parent, int leftChild, int rightChild, double score)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.process.LowercaseFunction</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>5</rfc>
		<lcom>3</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>3</npm>
		<lcom3>1.5</lcom3>
		<loc>19</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public String apply(String input)">2</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.io.IOUtils$1</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>4</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>1.0</lcom3>
		<loc>18</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.0</amc>
		<cc>
			<method name="void _init_(java.io.File, java.util.regex.Pattern)">0</method>
			<method name="public java.util.Iterator iterator()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.objectbank.ReaderIteratorFactory</name>
		<wmc>11</wmc>
		<dit>1</dit>
		<noc>1</noc>
		<cbo>7</cbo>
		<rfc>20</rfc>
		<lcom>0</lcom>
		<ca>7</ca>
		<ce>1</ce>
		<npm>11</npm>
		<lcom3>0.35</lcom3>
		<loc>84</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.454545454545454</amc>
		<cc>
			<method name="public boolean addAll(java.util.Collection c)">1</method>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="public void _init_(Object o, String encoding)">0</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(java.util.Collection c)">0</method>
			<method name="public boolean removeAll(java.util.Collection c)">1</method>
			<method name="public void _init_(java.util.Collection c, String encoding)">0</method>
			<method name="public boolean remove(Object o)">1</method>
			<method name="public boolean retainAll(java.util.Collection c)">1</method>
			<method name="public boolean add(Object o)">1</method>
			<method name="public void _init_(Object o)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.ExtractorFrames$ExtractorThreeTags</name>
		<wmc>7</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>16</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>6</npm>
		<lcom3>0.7083333333333334</lcom3>
		<loc>124</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.35714285714285715</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.142857142857142</amc>
		<cc>
			<method name="String extract(edu.stanford.nlp.tagger.maxent.History h, edu.stanford.nlp.tagger.maxent.PairsHolder pH)">1</method>
			<method name="public int leftContext()">2</method>
			<method name="public boolean isLocal()">1</method>
			<method name="public int rightContext()">2</method>
			<method name="public boolean isDynamic()">1</method>
			<method name="public void _init_(int position1, int position2, int position3)">0</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.neural.NeuralUtils$1</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>1.5</lcom3>
		<loc>20</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.333333333333333</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="public boolean accept(String s)">2</method>
			<method name="public volatile boolean accept(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.DictionaryExtractor</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>1</noc>
		<cbo>4</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>1.5</lcom3>
		<loc>15</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="protected void setGlobalHolder(edu.stanford.nlp.tagger.maxent.MaxentTagger tagger)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.TreebankFactory</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract edu.stanford.nlp.trees.Treebank treebank()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.TokensRegexAnnotator$Options</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>8</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.Timex</name>
		<wmc>26</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>67</rfc>
		<lcom>169</lcom>
		<ca>7</ca>
		<ce>2</ce>
		<npm>21</npm>
		<lcom3>0.6977777777777777</lcom3>
		<loc>1303</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.1778846153846154</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>48.76923076923077</amc>
		<cc>
			<method name="public void _init_(org.w3c.dom.Element element)">0</method>
			<method name="public boolean equals(Object o)">12</method>
			<method name="private static java.util.Calendar makeCalendar(int year, int month, int day)">1</method>
			<method name="public static edu.stanford.nlp.time.Timex fromXml(String xml)">2</method>
			<method name="public edu.stanford.nlp.util.Pair getRange()">1</method>
			<method name="private static java.util.Calendar copyCalendar(java.util.Calendar c)">1</method>
			<method name="public int beginPoint()">1</method>
			<method name="public String text()">1</method>
			<method name="public String timexType()">1</method>
			<method name="public String toString()">1</method>
			<method name="public String tid()">1</method>
			<method name="public String value()">1</method>
			<method name="public void _init_()">0</method>
			<method name="private static java.util.Calendar makeCalendar(int year, int dayOfYear)">1</method>
			<method name="public void _init_(String type, String val, String altVal, String tid, String text, int beginPoint, int endPoint)">0</method>
			<method name="public int endPoint()">1</method>
			<method name="public edu.stanford.nlp.util.Pair getRange(edu.stanford.nlp.time.Timex documentTime)">31</method>
			<method name="public static edu.stanford.nlp.time.Timex fromMap(String text, java.util.Map map)">2</method>
			<method name="public java.util.Calendar getDate()">3</method>
			<method name="public void _init_(String val)">0</method>
			<method name="private void init(String xml, org.w3c.dom.Element element)">7</method>
			<method name="public int hashCode()">3</method>
			<method name="public String altVal()">1</method>
			<method name="public org.w3c.dom.Element toXmlElement()">8</method>
			<method name="private void init(org.w3c.dom.Element element)">1</method>
			<method name="public void _init_(String type, String val)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.SplittingGrammarExtractor</name>
		<wmc>41</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>28</cbo>
		<rfc>150</rfc>
		<lcom>594</lcom>
		<ca>2</ca>
		<ce>27</ce>
		<npm>34</npm>
		<lcom3>0.851</lcom3>
		<loc>5758</loc>
		<dam>0.0</dam>
		<moa>13</moa>
		<mfa>0.0</mfa>
		<cam>0.20209059233449478</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>138.82926829268294</amc>
		<cc>
			<method name="public void mergeStates()">5</method>
			<method name="public void outputTransitions(edu.stanford.nlp.trees.Tree tree, java.util.IdentityHashMap unaryTransitions, java.util.IdentityHashMap binaryTransitions)">1</method>
			<method name="public void countOriginalStates()">3</method>
			<method name="public boolean useNewBetas(boolean testConverged, edu.stanford.nlp.util.TwoDimensionalMap tempUnaryBetas, edu.stanford.nlp.util.ThreeDimensionalMap tempBinaryBetas)">4</method>
			<method name="public void outputTransitions(edu.stanford.nlp.trees.Tree tree, int depth, java.util.IdentityHashMap unaryTransitions, java.util.IdentityHashMap binaryTransitions)">13</method>
			<method name="public void recalculateTemporaryBetas(edu.stanford.nlp.trees.Tree tree, boolean splitStates, java.util.Map totalStateMass, edu.stanford.nlp.util.TwoDimensionalMap tempUnaryBetas, edu.stanford.nlp.util.ThreeDimensionalMap tempBinaryBetas)">3</method>
			<method name="public void countMergeEffects(edu.stanford.nlp.trees.Tree tree, java.util.Map totalStateMass, java.util.Map deltaAnnotations, java.util.IdentityHashMap probIn, java.util.IdentityHashMap probOut)">8</method>
			<method name="public void recountOutside(edu.stanford.nlp.trees.Tree child, edu.stanford.nlp.trees.Tree parent, java.util.IdentityHashMap probIn, java.util.IdentityHashMap probOut)">3</method>
			<method name="public String state(String tag, int i)">3</method>
			<method name="public void recountOutside(edu.stanford.nlp.trees.Tree left, edu.stanford.nlp.trees.Tree right, edu.stanford.nlp.trees.Tree parent, java.util.IdentityHashMap probIn, java.util.IdentityHashMap probOut)">4</method>
			<method name="double[] neginfDoubles(int size)">2</method>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.Options op)">0</method>
			<method name="java.util.Map buildMergeCorrespondence(java.util.List deltas)">4</method>
			<method name="public void buildStateIndex()">2</method>
			<method name="public int getStateSplitCount(String label)">1</method>
			<method name="public boolean recalculateBetas(boolean splitStates)">6</method>
			<method name="public int getStateSplitCount(edu.stanford.nlp.trees.Tree tree)">1</method>
			<method name="private int initialBetasAndLexicon(edu.stanford.nlp.trees.Tree tree, int position, double weight)">6</method>
			<method name="public void extract(java.util.Collection treeList)">1</method>
			<method name="public void outputBetas()">6</method>
			<method name="public void recountTree(edu.stanford.nlp.trees.Tree tree, boolean splitStates, java.util.IdentityHashMap probIn, java.util.IdentityHashMap probOut, java.util.IdentityHashMap unaryTransitions, java.util.IdentityHashMap binaryTransitions)">2</method>
			<method name="private void initialBetasAndLexicon()">2</method>
			<method name="public void rescaleTemporaryBetas(edu.stanford.nlp.util.TwoDimensionalMap tempUnaryBetas, edu.stanford.nlp.util.ThreeDimensionalMap tempBinaryBetas)">12</method>
			<method name="public int recalculateTemporaryBetas(edu.stanford.nlp.trees.Tree tree, double[] stateWeights, int position, java.util.IdentityHashMap unaryTransitions, java.util.IdentityHashMap binaryTransitions, java.util.Map totalStateMass, edu.stanford.nlp.util.TwoDimensionalMap tempUnaryBetas, edu.stanford.nlp.util.ThreeDimensionalMap tempBinaryBetas)">22</method>
			<method name="public void recalculateMergedBetas(java.util.Map mergeCorrespondence)">2</method>
			<method name="public void recalculateTemporaryBetas(boolean splitStates, java.util.Map totalStateMass, edu.stanford.nlp.util.TwoDimensionalMap tempUnaryBetas, edu.stanford.nlp.util.ThreeDimensionalMap tempBinaryBetas)">3</method>
			<method name="public void mergeTransitions(edu.stanford.nlp.trees.Tree parent, java.util.IdentityHashMap oldUnaryTransitions, java.util.IdentityHashMap oldBinaryTransitions, java.util.IdentityHashMap newUnaryTransitions, java.util.IdentityHashMap newBinaryTransitions, double[] stateWeights, java.util.Map mergeCorrespondence)">30</method>
			<method name="public int recountInside(edu.stanford.nlp.trees.Tree tree, boolean splitStates, int loc, java.util.IdentityHashMap probIn)">19</method>
			<method name="private void splitStateCounts()">3</method>
			<method name="public void splitBetas()">20</method>
			<method name="public boolean testConvergence(edu.stanford.nlp.util.TwoDimensionalMap tempUnaryBetas, edu.stanford.nlp.util.ThreeDimensionalMap tempBinaryBetas)">8</method>
			<method name="private void countOriginalStates(edu.stanford.nlp.trees.Tree tree)">4</method>
			<method name="boolean DEBUG()">3</method>
			<method name="public void recountOutside(edu.stanford.nlp.trees.Tree tree, java.util.IdentityHashMap probIn, java.util.IdentityHashMap probOut)">1</method>
			<method name="public void recountTree(edu.stanford.nlp.trees.Tree tree, boolean splitStates, java.util.IdentityHashMap unaryTransitions, java.util.IdentityHashMap binaryTransitions)">1</method>
			<method name="public void countMergeEffects(edu.stanford.nlp.trees.Tree tree, java.util.Map totalStateMass, java.util.Map deltaAnnotations)">2</method>
			<method name="public void recountWeights(edu.stanford.nlp.trees.Tree tree, java.util.IdentityHashMap probIn, java.util.IdentityHashMap probOut, java.util.IdentityHashMap unaryTransitions, java.util.IdentityHashMap binaryTransitions)">20</method>
			<method name="public void recurseOutside(edu.stanford.nlp.trees.Tree tree, java.util.IdentityHashMap probIn, java.util.IdentityHashMap probOut)">4</method>
			<method name="public void extract(java.util.Collection trees1, double weight1, java.util.Collection trees2, double weight2)">5</method>
			<method name="public void buildGrammars()">8</method>
			<method name="public void saveTrees(java.util.Collection trees1, double weight1, java.util.Collection trees2, double weight2)">5</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$CoNLLDepTypeAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.semgraph.SemanticGraph</name>
		<wmc>116</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>31</cbo>
		<rfc>263</rfc>
		<lcom>5824</lcom>
		<ca>15</ca>
		<ce>18</ce>
		<npm>100</npm>
		<lcom3>0.8362318840579711</lcom3>
		<loc>3928</loc>
		<dam>0.8333333333333334</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.12228260869565218</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>32.810344827586206</amc>
		<cc>
			<method name="public boolean hasChildWithReln(edu.stanford.nlp.ling.IndexedWord vertex, edu.stanford.nlp.trees.GrammaticalRelation reln)">3</method>
			<method name="public boolean isAuxiliaryVerb(edu.stanford.nlp.ling.IndexedWord vertex)">4</method>
			<method name="static void _clinit_()">0</method>
			<method name="public java.util.Set vertexSet()">1</method>
			<method name="public String toDotFormat(String graphname, String indexedWordFormat)">3</method>
			<method name="public String toCompactString()">1</method>
			<method name="public int isAncestor(edu.stanford.nlp.ling.IndexedWord child, edu.stanford.nlp.ling.IndexedWord ancestor)">4</method>
			<method name="static java.util.regex.Pattern access$100()">1</method>
			<method name="public String toEnUncollapsedSentenceString()">5</method>
			<method name="public edu.stanford.nlp.semgraph.SemanticGraphEdge getEdge(edu.stanford.nlp.ling.IndexedWord gov, edu.stanford.nlp.ling.IndexedWord dep, edu.stanford.nlp.trees.GrammaticalRelation reln)">4</method>
			<method name="public java.util.List topologicalSort()">1</method>
			<method name="static java.util.Collection access$000(edu.stanford.nlp.semgraph.SemanticGraph x0)">1</method>
			<method name="public int inDegree(edu.stanford.nlp.ling.IndexedWord vertex)">1</method>
			<method name="public String toCompactString(boolean showTags)">4</method>
			<method name="public void _init_()">0</method>
			<method name="public java.util.List getPathToRoot(edu.stanford.nlp.ling.IndexedWord vertex)">1</method>
			<method name="public boolean containsEdge(edu.stanford.nlp.ling.IndexedWord source, edu.stanford.nlp.ling.IndexedWord target)">1</method>
			<method name="public int commonAncestor(edu.stanford.nlp.ling.IndexedWord v1, edu.stanford.nlp.ling.IndexedWord v2)">7</method>
			<method name="public boolean hasChild(edu.stanford.nlp.ling.IndexedWord vertex, edu.stanford.nlp.trees.GrammaticalRelation reln, String childLemma)">3</method>
			<method name="public boolean attachedNegatedVerb(edu.stanford.nlp.ling.IndexedWord vertex)">2</method>
			<method name="public java.util.Collection getChildren(edu.stanford.nlp.ling.IndexedWord vertex)">2</method>
			<method name="public edu.stanford.nlp.semgraph.SemanticGraphEdge addEdge(edu.stanford.nlp.ling.IndexedWord s, edu.stanford.nlp.ling.IndexedWord d, edu.stanford.nlp.trees.GrammaticalRelation reln, double weight, boolean isExtra)">1</method>
			<method name="public static edu.stanford.nlp.semgraph.SemanticGraph valueOf(String s)">1</method>
			<method name="public edu.stanford.nlp.semgraph.SemanticGraphEdge getEdge(edu.stanford.nlp.ling.IndexedWord gov, edu.stanford.nlp.ling.IndexedWord dep)">3</method>
			<method name="public boolean hasParentWithReln(edu.stanford.nlp.ling.IndexedWord vertex, edu.stanford.nlp.trees.GrammaticalRelation reln)">3</method>
			<method name="public edu.stanford.nlp.ling.IndexedWord getNodeByIndex(int index)">1</method>
			<method name="public edu.stanford.nlp.ling.IndexedWord getNodeByWordPattern(String pattern)">4</method>
			<method name="public void setRoot(edu.stanford.nlp.ling.IndexedWord word)">1</method>
			<method name="public edu.stanford.nlp.trees.GrammaticalRelation reln(edu.stanford.nlp.ling.IndexedWord a, edu.stanford.nlp.ling.IndexedWord b)">3</method>
			<method name="public void _init_(edu.stanford.nlp.semgraph.SemanticGraph g)">0</method>
			<method name="public void addVertex(edu.stanford.nlp.ling.IndexedWord vertex)">1</method>
			<method name="public java.util.Set descendants(edu.stanford.nlp.ling.IndexedWord vertex)">2</method>
			<method name="private void recToString(edu.stanford.nlp.ling.IndexedWord curr, StringBuilder sb, int offset, java.util.Set used)">2</method>
			<method name="public boolean isDag()">2</method>
			<method name="public java.util.List findAllRelns(edu.stanford.nlp.trees.GrammaticalRelation tgtRelation)">2</method>
			<method name="public void addRoot(edu.stanford.nlp.ling.IndexedWord root)">1</method>
			<method name="public java.util.List getAllNodesByWordPattern(String pattern)">4</method>
			<method name="public java.util.Set childRelns(edu.stanford.nlp.ling.IndexedWord vertex)">3</method>
			<method name="public String toString(String format)">5</method>
			<method name="public String toDotFormat(String graphname)">1</method>
			<method name="public void _init_(java.util.Collection dependencies, String docID, int sentIndex, boolean lemmatize)">0</method>
			<method name="public java.util.List childPairs(edu.stanford.nlp.ling.IndexedWord vertex)">3</method>
			<method name="public String toRecoveredSentenceString()">3</method>
			<method name="public java.util.Collection getSiblings(edu.stanford.nlp.ling.IndexedWord vertex)">2</method>
			<method name="public String toDotFormat()">1</method>
			<method name="private static String toPOSStyle(edu.stanford.nlp.ling.IndexedWord fl)">1</method>
			<method name="public String toFormattedString(edu.stanford.nlp.semgraph.SemanticGraphFormatter formatter)">1</method>
			<method name="public void resetRoots()">4</method>
			<method name="public void setRoots(java.util.Collection words)">1</method>
			<method name="public java.util.List getAllEdges(edu.stanford.nlp.ling.IndexedWord gov, edu.stanford.nlp.ling.IndexedWord dep)">1</method>
			<method name="public edu.stanford.nlp.ling.IndexedWord getChildWithReln(edu.stanford.nlp.ling.IndexedWord vertex, edu.stanford.nlp.trees.GrammaticalRelation reln)">4</method>
			<method name="public java.util.List getShortestDirectedPathEdges(edu.stanford.nlp.ling.IndexedWord source, edu.stanford.nlp.ling.IndexedWord target)">1</method>
			<method name="public java.util.Collection getParents(edu.stanford.nlp.ling.IndexedWord vertex)">2</method>
			<method name="public java.util.List incomingEdgeList(edu.stanford.nlp.ling.IndexedWord v)">2</method>
			<method name="public int hashCode()">1</method>
			<method name="public edu.stanford.nlp.ling.IndexedWord getParent(edu.stanford.nlp.ling.IndexedWord vertex)">3</method>
			<method name="public boolean matchPatternToVertex(String pattern, edu.stanford.nlp.ling.IndexedWord vertex)">10</method>
			<method name="public boolean removeVertex(edu.stanford.nlp.ling.IndexedWord vertex)">1</method>
			<method name="public edu.stanford.nlp.ling.IndexedWord getNodeByIndexSafe(int index)">2</method>
			<method name="public boolean isInConditionalContext(edu.stanford.nlp.ling.IndexedWord vertex)">2</method>
			<method name="public boolean equals(Object o)">4</method>
			<method name="private java.util.List getPathToRoot(edu.stanford.nlp.ling.IndexedWord vertex, java.util.List used)">5</method>
			<method name="public void _init_(java.util.Collection dependencies, String docID, int sentIndex)">0</method>
			<method name="public boolean containsVertex(edu.stanford.nlp.ling.IndexedWord vertex)">1</method>
			<method name="public String toRecoveredSentenceStringWithIndexMarking()">3</method>
			<method name="public java.util.List getShortestDirectedPathNodes(edu.stanford.nlp.ling.IndexedWord source, edu.stanford.nlp.ling.IndexedWord target)">1</method>
			<method name="public java.util.List getOutEdgesSorted(edu.stanford.nlp.ling.IndexedWord vertex)">1</method>
			<method name="public java.util.List getChildrenWithRelns(edu.stanford.nlp.ling.IndexedWord vertex, java.util.Collection relns)">4</method>
			<method name="private static String toDepStyle(edu.stanford.nlp.ling.IndexedWord fl)">1</method>
			<method name="public boolean hasChildren(edu.stanford.nlp.ling.IndexedWord vertex)">2</method>
			<method name="public String toList()">3</method>
			<method name="public java.util.List outgoingEdgeList(edu.stanford.nlp.ling.IndexedWord v)">2</method>
			<method name="public int size()">1</method>
			<method name="public java.util.List getParentList(edu.stanford.nlp.ling.IndexedWord vertex)">2</method>
			<method name="public boolean containsEdge(edu.stanford.nlp.semgraph.SemanticGraphEdge edge)">1</method>
			<method name="public java.util.Set getEdgeSet()">2</method>
			<method name="public int outDegree(edu.stanford.nlp.ling.IndexedWord vertex)">1</method>
			<method name="public Iterable outgoingEdgeIterable(edu.stanford.nlp.ling.IndexedWord v)">1</method>
			<method name="public java.util.List parentPairs(edu.stanford.nlp.ling.IndexedWord vertex)">3</method>
			<method name="public java.util.List edgeListSorted()">2</method>
			<method name="public boolean isEmpty()">1</method>
			<method name="private void toCompactStringHelper(edu.stanford.nlp.ling.IndexedWord node, StringBuilder sb, java.util.Set used, boolean showTags)">6</method>
			<method name="private static String space(int width)">2</method>
			<method name="public edu.stanford.nlp.ling.IndexedWord getCommonAncestor(edu.stanford.nlp.ling.IndexedWord v1, edu.stanford.nlp.ling.IndexedWord v2)">9</method>
			<method name="public java.util.Collection getRoots()">1</method>
			<method name="public java.util.List vertexListSorted()">1</method>
			<method name="public boolean isNegatedVertex(edu.stanford.nlp.ling.IndexedWord vertex)">5</method>
			<method name="public String toPOSList()">2</method>
			<method name="public void _init_(edu.stanford.nlp.semgraph.SemanticGraph g, java.util.Map prevToNewMap)">0</method>
			<method name="public boolean removeEdge(edu.stanford.nlp.semgraph.SemanticGraphEdge e)">1</method>
			<method name="public java.util.Collection typedDependencies()">2</method>
			<method name="public int edgeCount()">1</method>
			<method name="public Iterable edgeIterable()">1</method>
			<method name="public java.util.List getShortestUndirectedPathNodes(edu.stanford.nlp.ling.IndexedWord source, edu.stanford.nlp.ling.IndexedWord target)">1</method>
			<method name="private boolean isDagHelper(edu.stanford.nlp.ling.IndexedWord current, java.util.Set unused, java.util.Set trail)">4</method>
			<method name="public java.util.List getParentsWithReln(edu.stanford.nlp.ling.IndexedWord vertex, edu.stanford.nlp.trees.GrammaticalRelation reln)">4</method>
			<method name="public java.util.List getChildList(edu.stanford.nlp.ling.IndexedWord vertex)">2</method>
			<method name="public void prettyPrint(edu.stanford.nlp.semgraph.SemanticGraphFormatter formatter)">1</method>
			<method name="public edu.stanford.nlp.ling.IndexedWord getFirstRoot()">2</method>
			<method name="private String toXMLString()">2</method>
			<method name="public void prettyPrint()">1</method>
			<method name="public void _init_(java.util.Collection dependencies)">0</method>
			<method name="public Iterable incomingEdgeIterable(edu.stanford.nlp.ling.IndexedWord v)">1</method>
			<method name="public java.util.List getIncomingEdgesSorted(edu.stanford.nlp.ling.IndexedWord vertex)">1</method>
			<method name="public String toString()">4</method>
			<method name="public String toFormattedString()">1</method>
			<method name="private void descendantsHelper(edu.stanford.nlp.ling.IndexedWord curr, java.util.Set descendantSet)">3</method>
			<method name="public java.util.Set relns(edu.stanford.nlp.ling.IndexedWord vertex)">3</method>
			<method name="private boolean isNegatedVerb(edu.stanford.nlp.ling.IndexedWord vertex)">4</method>
			<method name="public java.util.Set getLeafVertices()">2</method>
			<method name="private String toReadableString()">3</method>
			<method name="public java.util.List getChildrenWithReln(edu.stanford.nlp.ling.IndexedWord vertex, edu.stanford.nlp.trees.GrammaticalRelation reln)">4</method>
			<method name="private java.util.List getVerticesWithoutParents()">2</method>
			<method name="public java.util.List getShortestUndirectedPathEdges(edu.stanford.nlp.ling.IndexedWord source, edu.stanford.nlp.ling.IndexedWord target)">1</method>
			<method name="private void insertSpecificIntoList(String specific, edu.stanford.nlp.ling.IndexedWord relnTgtNode, java.util.List tgtList)">3</method>
			<method name="public boolean matchPatternToVertex(String pattern, edu.stanford.nlp.ling.IndexedWord vertex, boolean det)">13</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$StemAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.WordTag</name>
		<wmc>25</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>14</cbo>
		<rfc>42</rfc>
		<lcom>240</lcom>
		<ca>9</ca>
		<ce>5</ce>
		<npm>24</npm>
		<lcom3>0.7708333333333334</lcom3>
		<loc>295</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.22285714285714286</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>10.64</amc>
		<cc>
			<method name="public void setFromString(String wordTagString)">1</method>
			<method name="public String toString(String divider)">2</method>
			<method name="public String tag()">1</method>
			<method name="public boolean equals(Object o)">9</method>
			<method name="public void setValue(String value)">1</method>
			<method name="public void setFromString(String wordTagString, String divider)">2</method>
			<method name="public void _init_(edu.stanford.nlp.ling.Label word, edu.stanford.nlp.ling.Label tag)">0</method>
			<method name="public void setTag(String tag)">1</method>
			<method name="public static edu.stanford.nlp.ling.WordTag valueOf(String s)">1</method>
			<method name="private void _init_()">0</method>
			<method name="public void _init_(String word, String tag)">0</method>
			<method name="public void read(java.io.DataInputStream in)">1</method>
			<method name="public static edu.stanford.nlp.ling.WordTag valueOf(String s, String tagDivider)">1</method>
			<method name="public String toString()">1</method>
			<method name="public String value()">1</method>
			<method name="public int compareTo(edu.stanford.nlp.ling.WordTag wordTag)">5</method>
			<method name="public void _init_(String word)">0</method>
			<method name="public String word()">1</method>
			<method name="public volatile int compareTo(Object x0)">1</method>
			<method name="public int hashCode()">3</method>
			<method name="public edu.stanford.nlp.ling.LabelFactory labelFactory()">1</method>
			<method name="public void setWord(String word)">1</method>
			<method name="public void _init_(edu.stanford.nlp.ling.Label word)">0</method>
			<method name="public void save(java.io.DataOutputStream out)">1</method>
			<method name="public static edu.stanford.nlp.ling.LabelFactory factory()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonRuntimeException</name>
		<wmc>1</wmc>
		<dit>4</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>6</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>1.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.0</amc>
		<cc>
			<method name="public void _init_(String message)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.AbstractUnknownWordModelTrainer</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>5</noc>
		<cbo>11</cbo>
		<rfc>13</rfc>
		<lcom>13</lcom>
		<ca>5</ca>
		<ce>6</ce>
		<npm>6</npm>
		<lcom3>0.9333333333333333</lcom3>
		<loc>88</loc>
		<dam>0.0</dam>
		<moa>4</moa>
		<mfa>0.0</mfa>
		<cam>0.38095238095238093</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.666666666666666</amc>
		<cc>
			<method name="public final void train(java.util.Collection trees, double weight)">2</method>
			<method name="public void incrementTreesRead(double weight)">1</method>
			<method name="public final void train(edu.stanford.nlp.trees.Tree tree, double weight)">2</method>
			<method name="public void _init_()">0</method>
			<method name="public void initializeTraining(edu.stanford.nlp.parser.lexparser.Options op, edu.stanford.nlp.parser.lexparser.Lexicon lex, edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex, double totalTrees)">1</method>
			<method name="public final void train(java.util.Collection trees)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.GrammaticalRelation</name>
		<wmc>27</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>29</cbo>
		<rfc>77</rfc>
		<lcom>273</lcom>
		<ca>19</ca>
		<ce>11</ce>
		<npm>23</npm>
		<lcom3>0.8098290598290598</lcom3>
		<loc>838</loc>
		<dam>0.7777777777777778</dam>
		<moa>6</moa>
		<mfa>0.0</mfa>
		<cam>0.17159763313609466</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>29.37037037037037</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.trees.GrammaticalRelation$Language language, String shortName, String longName, Class annotation, edu.stanford.nlp.trees.GrammaticalRelation parent)">0</method>
			<method name="public boolean equals(Object o)">9</method>
			<method name="public boolean isApplicable(edu.stanford.nlp.trees.Tree t)">4</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static edu.stanford.nlp.trees.GrammaticalRelation valueOf(String s, java.util.Collection values)">2</method>
			<method name="public String getShortName()">1</method>
			<method name="public final String toString()">2</method>
			<method name="public String getSpecific()">1</method>
			<method name="public edu.stanford.nlp.trees.GrammaticalRelation getParent()">1</method>
			<method name="public static edu.stanford.nlp.trees.GrammaticalRelation valueOf(String s)">3</method>
			<method name="public boolean isFromString()">2</method>
			<method name="public static edu.stanford.nlp.trees.GrammaticalRelation valueOf(edu.stanford.nlp.trees.GrammaticalRelation$Language language, String s)">5</method>
			<method name="public static edu.stanford.nlp.trees.GrammaticalRelation getRelation(Class annotation)">1</method>
			<method name="public void _init_(edu.stanford.nlp.trees.GrammaticalRelation$Language language, String shortName, String longName, Class annotation, edu.stanford.nlp.trees.GrammaticalRelation parent, String sourcePattern, edu.stanford.nlp.trees.tregex.TregexPatternCompiler tregexCompiler, String[] targetPatterns)">0</method>
			<method name="public String getLongName()">1</method>
			<method name="private void addChild(edu.stanford.nlp.trees.GrammaticalRelation child)">1</method>
			<method name="public int compareTo(edu.stanford.nlp.trees.GrammaticalRelation o)">1</method>
			<method name="public java.util.Collection getRelatedNodes(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.Tree root, edu.stanford.nlp.trees.HeadFinder headFinder)">4</method>
			<method name="public void _init_(edu.stanford.nlp.trees.GrammaticalRelation$Language language, String shortName, String longName, Class annotation, edu.stanford.nlp.trees.GrammaticalRelation parent, String specificString)">0</method>
			<method name="public static Class getAnnotationClass(edu.stanford.nlp.trees.GrammaticalRelation relation)">1</method>
			<method name="public boolean isAncestor(edu.stanford.nlp.trees.GrammaticalRelation gr)">3</method>
			<method name="public volatile int compareTo(Object x0)">1</method>
			<method name="private void toPrettyString(int indentLevel, StringBuilder buf)">3</method>
			<method name="public int hashCode()">4</method>
			<method name="public static void main(String[] args)">2</method>
			<method name="public String toPrettyString()">1</method>
			<method name="private void _init_(edu.stanford.nlp.trees.GrammaticalRelation$Language language, String shortName, String longName, Class annotation, edu.stanford.nlp.trees.GrammaticalRelation parent, String sourcePattern, edu.stanford.nlp.trees.tregex.TregexPatternCompiler tregexCompiler, String[] targetPatterns, String specificString)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.XMLOutputter</name>
		<wmc>21</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>28</cbo>
		<rfc>91</rfc>
		<lcom>204</lcom>
		<ca>1</ca>
		<ce>28</ce>
		<npm>7</npm>
		<lcom3>0.95</lcom3>
		<loc>1375</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.13095238095238096</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>64.28571428571429</amc>
		<cc>
			<method name="public static edu.stanford.nlp.pipeline.XMLOutputter$Options getOptions(edu.stanford.nlp.pipeline.StanfordCoreNLP pipeline)">1</method>
			<method name="private static void addDependencyInfo(nu.xom.Element depInfo, String rel, boolean isExtra, int source, String sourceWord, Integer sourceCopy, int target, String targetWord, Integer targetCopy, String curNS)">4</method>
			<method name="public static void xmlPrint(edu.stanford.nlp.pipeline.Annotation annotation, java.io.OutputStream os, edu.stanford.nlp.pipeline.XMLOutputter$Options options)">1</method>
			<method name="private static void addWordInfo(nu.xom.Element wordInfo, edu.stanford.nlp.util.CoreMap token, int id, String curNS)">10</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="private static nu.xom.Element toXML(edu.stanford.nlp.ie.machinereading.structure.RelationMention relation, String curNS)">3</method>
			<method name="private static void addConstituentTreeInfo(nu.xom.Element treeInfo, edu.stanford.nlp.trees.Tree tree, edu.stanford.nlp.trees.TreePrint constituentTreePrinter)">1</method>
			<method name="public static nu.xom.Document annotationToDoc(edu.stanford.nlp.pipeline.Annotation annotation, edu.stanford.nlp.pipeline.StanfordCoreNLP pipeline)">1</method>
			<method name="private static nu.xom.Element buildDependencyTreeInfo(String dependencyType, edu.stanford.nlp.semgraph.SemanticGraph graph, java.util.List tokens, String curNS)">4</method>
			<method name="private static void addEntities(java.util.List entities, nu.xom.Element top, String curNS)">2</method>
			<method name="private static boolean addCorefGraphInfo(edu.stanford.nlp.pipeline.XMLOutputter$Options options, nu.xom.Element corefInfo, java.util.List sentences, java.util.Map corefChains, String curNS)">5</method>
			<method name="public static void xmlPrint(edu.stanford.nlp.pipeline.Annotation annotation, java.io.OutputStream os, edu.stanford.nlp.pipeline.StanfordCoreNLP pipeline)">1</method>
			<method name="private static void addRelations(java.util.List relations, nu.xom.Element top, String curNS, double beam)">2</method>
			<method name="private static void addCorefMention(edu.stanford.nlp.pipeline.XMLOutputter$Options options, nu.xom.Element chainElem, String curNS, java.util.List sentences, edu.stanford.nlp.dcoref.CorefChain$CorefMention mention, boolean representative)">4</method>
			<method name="public static void xmlPrint(edu.stanford.nlp.pipeline.Annotation annotation, java.io.OutputStream os)">1</method>
			<method name="public static nu.xom.Document annotationToDoc(edu.stanford.nlp.pipeline.Annotation annotation, edu.stanford.nlp.pipeline.XMLOutputter$Options options)">16</method>
			<method name="private static nu.xom.Element makeProbabilitiesElement(edu.stanford.nlp.ie.machinereading.structure.ExtractionObject object, String curNS)">3</method>
			<method name="private static void setSingleElement(nu.xom.Element tokenElement, String elemName, String curNS, String value)">2</method>
			<method name="static edu.stanford.nlp.trees.TreePrint access$000()">1</method>
			<method name="private static nu.xom.Element toXML(edu.stanford.nlp.ie.machinereading.structure.EntityMention entity, String curNS)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.process.WhitespaceTokenizer</name>
		<wmc>12</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>17</cbo>
		<rfc>30</rfc>
		<lcom>64</lcom>
		<ca>9</ca>
		<ce>9</ce>
		<npm>10</npm>
		<lcom3>0.45454545454545453</lcom3>
		<loc>213</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.20833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.583333333333332</amc>
		<cc>
			<method name="public static edu.stanford.nlp.process.WhitespaceTokenizer newCoreLabelWhitespaceTokenizer(java.io.Reader r)">1</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="public static edu.stanford.nlp.process.WhitespaceTokenizer$WhitespaceTokenizerFactory newCoreLabelTokenizerFactory()">1</method>
			<method name="protected volatile Object getNext()">1</method>
			<method name="protected edu.stanford.nlp.ling.HasWord getNext()">3</method>
			<method name="public static edu.stanford.nlp.process.WhitespaceTokenizer newWordWhitespaceTokenizer(java.io.Reader r)">1</method>
			<method name="public static edu.stanford.nlp.process.WhitespaceTokenizer$WhitespaceTokenizerFactory newCoreLabelTokenizerFactory(String options)">1</method>
			<method name="public static edu.stanford.nlp.process.TokenizerFactory factory(boolean eolIsSignificant)">1</method>
			<method name="public static edu.stanford.nlp.process.TokenizerFactory factory()">1</method>
			<method name="public void _init_(edu.stanford.nlp.process.LexedTokenFactory factory, java.io.Reader r, boolean eolIsSignificant)">0</method>
			<method name="public static edu.stanford.nlp.process.WhitespaceTokenizer newCoreLabelWhitespaceTokenizer(java.io.Reader r, boolean tokenizeNLs)">1</method>
			<method name="public static edu.stanford.nlp.process.WhitespaceTokenizer newWordWhitespaceTokenizer(java.io.Reader r, boolean eolIsSignificant)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$Duration</name>
		<wmc>33</wmc>
		<dit>0</dit>
		<noc>3</noc>
		<cbo>58</cbo>
		<rfc>66</rfc>
		<lcom>528</lcom>
		<ca>46</ca>
		<ce>24</ce>
		<npm>33</npm>
		<lcom3>1.03125</lcom3>
		<loc>513</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.20454545454545456</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>14.515151515151516</amc>
		<cc>
			<method name="public static edu.stanford.nlp.time.SUTime$Duration max(edu.stanford.nlp.time.SUTime$Duration d1, edu.stanford.nlp.time.SUTime$Duration d2)">5</method>
			<method name="public edu.stanford.nlp.time.SUTime$Time toTime(edu.stanford.nlp.time.SUTime$Time refTime, int flags)">17</method>
			<method name="public volatile edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time x0, int x1)">1</method>
			<method name="public boolean isComparable(edu.stanford.nlp.time.SUTime$Duration d)">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Range getRange(int flags, edu.stanford.nlp.time.SUTime$Duration granularity)">1</method>
			<method name="public static edu.stanford.nlp.time.SUTime$Duration getInexactDuration(org.joda.time.Duration d)">1</method>
			<method name="public org.joda.time.DateTimeFieldType[] getDateTimeFields()">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Duration intersect(edu.stanford.nlp.time.SUTime$Duration d)">4</method>
			<method name="public static edu.stanford.nlp.time.SUTime$Duration getDuration(org.joda.time.Duration d)">1</method>
			<method name="public abstract org.joda.time.Period getJodaTimePeriod()">1</method>
			<method name="public int compareTo(edu.stanford.nlp.time.SUTime$Duration d)">10</method>
			<method name="public abstract edu.stanford.nlp.time.SUTime$Duration multiplyBy(int)">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Time toTime(edu.stanford.nlp.time.SUTime$Time refTime)">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Duration getPeriod()">2</method>
			<method name="public edu.stanford.nlp.time.SUTime$Time getTime()">1</method>
			<method name="public abstract edu.stanford.nlp.time.SUTime$Duration add(edu.stanford.nlp.time.SUTime$Duration)">1</method>
			<method name="public static edu.stanford.nlp.time.SUTime$Duration min(edu.stanford.nlp.time.SUTime$Duration d1, edu.stanford.nlp.time.SUTime$Duration d2)">5</method>
			<method name="public void _init_()">0</method>
			<method name="public abstract edu.stanford.nlp.time.SUTime$Duration divideBy(int)">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Duration subtract(edu.stanford.nlp.time.SUTime$Duration d)">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$InexactDuration makeInexact()">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Duration getDuration()">1</method>
			<method name="public boolean isGrounded()">1</method>
			<method name="public abstract org.joda.time.Duration getJodaTimeDuration()">1</method>
			<method name="public String toFormattedString(int flags)">5</method>
			<method name="public volatile int compareTo(Object x0)">1</method>
			<method name="public void _init_(edu.stanford.nlp.time.SUTime$Duration d)">0</method>
			<method name="public edu.stanford.nlp.time.SUTime$Temporal intersect(edu.stanford.nlp.time.SUTime$Temporal t)">7</method>
			<method name="public edu.stanford.nlp.time.SUTime$TimexType getTimexType()">1</method>
			<method name="public static edu.stanford.nlp.time.SUTime$Duration getDuration(org.joda.time.ReadablePeriod p)">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Duration resolve(edu.stanford.nlp.time.SUTime$Time refTime, int flags)">1</method>
			<method name="public volatile boolean isComparable(Object x0)">1</method>
			<method name="public static edu.stanford.nlp.time.SUTime$Duration getInexactDuration(org.joda.time.ReadablePeriod p)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.IndexedWord$1</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>10</rfc>
		<lcom>10</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>4</npm>
		<lcom3>2.0</lcom3>
		<loc>31</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.2</amc>
		<cc>
			<method name="public edu.stanford.nlp.ling.Label newLabel(String labelStr, int options)">1</method>
			<method name="void _init_()">0</method>
			<method name="public edu.stanford.nlp.ling.Label newLabel(String labelStr)">1</method>
			<method name="public edu.stanford.nlp.ling.Label newLabel(edu.stanford.nlp.ling.Label oldLabel)">1</method>
			<method name="public edu.stanford.nlp.ling.Label newLabelFromString(String encodedLabelStr)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTimeMain</name>
		<wmc>26</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>38</cbo>
		<rfc>170</rfc>
		<lcom>307</lcom>
		<ca>0</ca>
		<ce>38</ce>
		<npm>16</npm>
		<lcom3>0.8640000000000001</lcom3>
		<loc>2936</loc>
		<dam>0.8</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.1457142857142857</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>111.73076923076923</amc>
		<cc>
			<method name="private static java.util.List updateTimexText(java.util.Map timexMap, edu.stanford.nlp.pipeline.Annotation docAnnotation)">3</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static void processTempEval3File(edu.stanford.nlp.pipeline.AnnotationPipeline pipeline, String in, String out)">1</method>
			<method name="private static edu.stanford.nlp.time.SUTimeMain$TimexAttributes findTimex(java.util.Map timexMap, String docId, String tid)">2</method>
			<method name="private void _init_()">0</method>
			<method name="private static void processTempEval2Doc(edu.stanford.nlp.pipeline.AnnotationPipeline pipeline, edu.stanford.nlp.pipeline.Annotation docAnnotation, java.util.Map timexMap, java.io.PrintWriter extPw, java.io.PrintWriter attrPw, java.io.PrintWriter debugPw, java.io.PrintWriter attrDebugPwGold, java.io.PrintWriter attrDebugPw)">26</method>
			<method name="private static java.util.Map readTimexAttrExts(String extentsFile, String attrsFile)">1</method>
			<method name="public static String textToAnnotatedXml(edu.stanford.nlp.pipeline.AnnotationPipeline pipeline, String text, String date)">1</method>
			<method name="public static void configLogger(String out)">1</method>
			<method name="public static void processTempEval3(edu.stanford.nlp.pipeline.AnnotationPipeline pipeline, String in, String out, String evalCmd)">1</method>
			<method name="public static void processTempEval2(edu.stanford.nlp.pipeline.AnnotationPipeline pipeline, String in, String out, String eval, String dct)">1</method>
			<method name="public static void processTextFile(edu.stanford.nlp.pipeline.AnnotationPipeline pipeline, String in, String out, String date)">1</method>
			<method name="private static java.util.List createTimexNodesPresorted(String str, Integer charBeginOffset, java.util.List timexList)">6</method>
			<method name="private static void processTimebankCsvSent(edu.stanford.nlp.pipeline.AnnotationPipeline pipeline, edu.stanford.nlp.time.SUTimeMain$TimebankSent sent, java.io.PrintWriter pw, edu.stanford.nlp.time.SUTimeMain$EvalStats evalStats)">14</method>
			<method name="private static java.util.List createTimexNodes(String str, Integer charBeginOffset, java.util.List timexAnns)">2</method>
			<method name="public static org.w3c.dom.Document annotationToXmlDocument(edu.stanford.nlp.pipeline.Annotation annotation)">1</method>
			<method name="public static String joinWordTags(java.util.List l, String glue, int start, int end)">1</method>
			<method name="public static edu.stanford.nlp.pipeline.Annotation textToAnnotation(edu.stanford.nlp.pipeline.AnnotationPipeline pipeline, String text, String date)">1</method>
			<method name="public static void processText(edu.stanford.nlp.pipeline.AnnotationPipeline pipeline, String text, String out, String date)">1</method>
			<method name="private static edu.stanford.nlp.util.CoreMap wordsToSentence(java.util.List sentWords)">2</method>
			<method name="public static org.w3c.dom.Element annotationToTmlTextElement(edu.stanford.nlp.pipeline.Annotation annotation)">2</method>
			<method name="public static edu.stanford.nlp.pipeline.Annotation sentencesToDocument(String documentID, String docDate, java.util.List sentences)">4</method>
			<method name="public static edu.stanford.nlp.pipeline.AnnotationPipeline getPipeline(java.util.Properties props, boolean tokenize)">1</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="public static void processTimebankCsv(edu.stanford.nlp.pipeline.AnnotationPipeline pipeline, String in, String out, String eval)">1</method>
			<method name="public static void processTempEval2Tab(edu.stanford.nlp.pipeline.AnnotationPipeline pipeline, String in, String out, java.util.Map docDates)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Triple</name>
		<wmc>15</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>31</cbo>
		<rfc>25</rfc>
		<lcom>19</lcom>
		<ca>27</ca>
		<ce>4</ce>
		<npm>15</npm>
		<lcom3>0.48214285714285715</lcom3>
		<loc>237</loc>
		<dam>0.25</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.32</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>14.533333333333333</amc>
		<cc>
			<method name="public java.util.List asList()">1</method>
			<method name="public boolean equals(Object o)">12</method>
			<method name="public Object first()">1</method>
			<method name="public void setFirst(Object o)">1</method>
			<method name="public void prettyLog(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels channels, String description)">1</method>
			<method name="public static edu.stanford.nlp.util.Triple makeTriple(Object x, Object y, Object z)">1</method>
			<method name="public volatile int compareTo(Object x0)">1</method>
			<method name="public void setSecond(Object o)">1</method>
			<method name="public int hashCode()">4</method>
			<method name="public void _init_(Object first, Object second, Object third)">0</method>
			<method name="public void setThird(Object o)">1</method>
			<method name="public Object second()">1</method>
			<method name="public int compareTo(edu.stanford.nlp.util.Triple another)">3</method>
			<method name="public String toString()">1</method>
			<method name="public Object third()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.Extractors</name>
		<wmc>11</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>38</rfc>
		<lcom>0</lcom>
		<ca>6</ca>
		<ce>4</ce>
		<npm>4</npm>
		<lcom3>0.8333333333333334</lcom3>
		<loc>317</loc>
		<dam>0.5</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.25757575757575757</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>27.272727272727273</amc>
		<cc>
			<method name="public int size()">1</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="boolean equals(edu.stanford.nlp.tagger.maxent.History h, edu.stanford.nlp.tagger.maxent.History h1)">3</method>
			<method name="int rightContext()">3</method>
			<method name="int leftContext()">3</method>
			<method name="String extract(int i, edu.stanford.nlp.tagger.maxent.History h)">1</method>
			<method name="edu.stanford.nlp.tagger.maxent.Extractor get(int index)">1</method>
			<method name="protected void setGlobalHolder(edu.stanford.nlp.tagger.maxent.MaxentTagger tagger)">2</method>
			<method name="public void _init_(edu.stanford.nlp.tagger.maxent.Extractor[] extrs)">0</method>
			<method name="public String toString()">3</method>
			<method name="void initTypes()">6</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$PeriodicTemporalSet</name>
		<wmc>15</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>12</cbo>
		<rfc>30</rfc>
		<lcom>0</lcom>
		<ca>4</ca>
		<ce>8</ce>
		<npm>15</npm>
		<lcom3>0.511904761904762</lcom3>
		<loc>295</loc>
		<dam>0.16666666666666666</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.22666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.266666666666666</amc>
		<cc>
			<method name="public edu.stanford.nlp.time.SUTime$Time getTime()">1</method>
			<method name="public void _init_(edu.stanford.nlp.time.SUTime$Temporal base, edu.stanford.nlp.time.SUTime$Duration periodicity, String quant, String freq)">0</method>
			<method name="public edu.stanford.nlp.time.SUTime$PeriodicTemporalSet divideDurationBy(int scale)">1</method>
			<method name="public volatile edu.stanford.nlp.time.SUTime$Temporal setTimeZone(org.joda.time.DateTimeZone x0)">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Range getRange(int flags, edu.stanford.nlp.time.SUTime$Duration granularity)">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Duration getDuration()">1</method>
			<method name="public java.util.Map getTimexAttributes(edu.stanford.nlp.time.SUTime$TimeIndex timeIndex)">4</method>
			<method name="public boolean isGrounded()">3</method>
			<method name="public edu.stanford.nlp.time.SUTime$PeriodicTemporalSet setTimeZone(org.joda.time.DateTimeZone tz)">1</method>
			<method name="public String toFormattedString(int flags)">5</method>
			<method name="public edu.stanford.nlp.time.SUTime$PeriodicTemporalSet multiplyDurationBy(int scale)">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Temporal intersect(edu.stanford.nlp.time.SUTime$Temporal t)">4</method>
			<method name="public edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time refTime, int flags)">3</method>
			<method name="public edu.stanford.nlp.time.SUTime$Duration getPeriod()">1</method>
			<method name="public void _init_(edu.stanford.nlp.time.SUTime$PeriodicTemporalSet p, edu.stanford.nlp.time.SUTime$Temporal base, edu.stanford.nlp.time.SUTime$Duration periodicity, edu.stanford.nlp.time.SUTime$Range range, String quant, String freq)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.GrammaticalRelation$GovernorGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.ExtractorCapDistLC</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>16</rfc>
		<lcom>4</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>1.0</lcom3>
		<loc>125</loc>
		<dam>0.5</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>29.75</amc>
		<cc>
			<method name="String extract(edu.stanford.nlp.tagger.maxent.History h, edu.stanford.nlp.tagger.maxent.PairsHolder pH)">9</method>
			<method name="public boolean isLocal()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public boolean isDynamic()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.GoldenSectionLineSearch</name>
		<wmc>12</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>38</rfc>
		<lcom>28</lcom>
		<ca>4</ca>
		<ce>5</ce>
		<npm>10</npm>
		<lcom3>0.5050505050505051</lcom3>
		<loc>583</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3939393939393939</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>46.833333333333336</amc>
		<cc>
			<method name="public void _init_(boolean geometric, double tol, double low, double high, boolean verbose)">0</method>
			<method name="public void _init_(boolean geometric)">0</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="public void discretizeCompute(edu.stanford.nlp.util.Function function, int numPoints, double low, double high)">2</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void dumpMemory()">2</method>
			<method name="public void _init_(double tol, double low, double high, boolean verbose)">0</method>
			<method name="public double minimize(edu.stanford.nlp.util.Function function, double tol, double low, double high)">1</method>
			<method name="public void _init_(boolean geometric, double tol, double low, double high)">0</method>
			<method name="public void _init_(double tol, double low, double high)">0</method>
			<method name="public double minimize(edu.stanford.nlp.util.Function function)">23</method>
			<method name="private double goldenMean(double a, double b)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.MLEDependencyGrammarExtractor</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>1</noc>
		<cbo>15</cbo>
		<rfc>16</rfc>
		<lcom>0</lcom>
		<ca>5</ca>
		<ce>10</ce>
		<npm>3</npm>
		<lcom3>0.20833333333333334</lcom3>
		<loc>124</loc>
		<dam>1.0</dam>
		<moa>4</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>28.0</amc>
		<cc>
			<method name="public edu.stanford.nlp.parser.lexparser.DependencyGrammar formResult()">2</method>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.Options op, edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex)">0</method>
			<method name="protected void tallyRoot(edu.stanford.nlp.trees.Tree lt, double weight)">2</method>
			<method name="public volatile Object formResult()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalRelations$TemporalClauseGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.dvparser.DVParserCostAndGradient</name>
		<wmc>13</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>27</cbo>
		<rfc>107</rfc>
		<lcom>4</lcom>
		<ca>3</ca>
		<ce>25</ce>
		<npm>10</npm>
		<lcom3>0.6833333333333332</lcom3>
		<loc>1408</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.2692307692307692</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>106.92307692307692</amc>
		<cc>
			<method name="public double getMargin(edu.stanford.nlp.trees.Tree goldTree, edu.stanford.nlp.trees.Tree bestHypothesis)">1</method>
			<method name="private org.ejml.simple.SimpleMatrix concatenateContextWords(org.ejml.simple.SimpleMatrix childVec, edu.stanford.nlp.util.IntPair span, java.util.List words)">3</method>
			<method name="public double score(edu.stanford.nlp.trees.Tree tree, java.util.IdentityHashMap nodeVectors)">2</method>
			<method name="public edu.stanford.nlp.trees.DeepTree getHighestScoringTree(edu.stanford.nlp.trees.Tree tree, double lambda)">6</method>
			<method name="public int domainDimension()">1</method>
			<method name="public static void outputSpans(edu.stanford.nlp.trees.Tree tree)">2</method>
			<method name="private java.util.List getContextWords(edu.stanford.nlp.trees.Tree tree)">3</method>
			<method name="public void backpropDerivative(edu.stanford.nlp.trees.Tree tree, java.util.List words, java.util.IdentityHashMap nodeVectors, edu.stanford.nlp.util.TwoDimensionalMap binaryW_dfs, java.util.Map unaryW_dfs, edu.stanford.nlp.util.TwoDimensionalMap binaryScoreDerivatives, java.util.Map unaryScoreDerivatives, java.util.Map wordVectorDerivatives, org.ejml.simple.SimpleMatrix deltaUp)">7</method>
			<method name="public void backpropDerivative(edu.stanford.nlp.trees.Tree tree, java.util.List words, java.util.IdentityHashMap nodeVectors, edu.stanford.nlp.util.TwoDimensionalMap binaryW_dfs, java.util.Map unaryW_dfs, edu.stanford.nlp.util.TwoDimensionalMap binaryScoreDerivatives, java.util.Map unaryScoreDerivatives, java.util.Map wordVectorDerivatives)">1</method>
			<method name="public java.util.List getAllHighestScoringTreesTest(java.util.List trees)">2</method>
			<method name="private void forwardPropagateTree(edu.stanford.nlp.trees.Tree tree, java.util.List words, java.util.IdentityHashMap nodeVectors, java.util.IdentityHashMap scores)">10</method>
			<method name="public void calculate(double[] theta)">12</method>
			<method name="public void _init_(java.util.List trainingBatch, java.util.IdentityHashMap topParses, edu.stanford.nlp.parser.dvparser.DVModel dvModel, edu.stanford.nlp.parser.lexparser.Options op)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$MaleGazAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.TreePrint</name>
		<wmc>25</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>56</cbo>
		<rfc>179</rfc>
		<lcom>262</lcom>
		<ca>14</ca>
		<ce>43</ce>
		<npm>14</npm>
		<lcom3>0.815</lcom3>
		<loc>2328</loc>
		<dam>0.88</dam>
		<moa>7</moa>
		<mfa>0.0</mfa>
		<cam>0.21180555555555555</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>91.12</amc>
		<cc>
			<method name="public void _init_(String formatString, String optionsString, edu.stanford.nlp.trees.TreebankLanguagePack tlp, edu.stanford.nlp.trees.HeadFinder hf, edu.stanford.nlp.trees.HeadFinder typedDependencyHF)">0</method>
			<method name="private static boolean propertyToBoolean(java.util.Properties prop, String key)">1</method>
			<method name="private static String toString(java.util.Collection dependencies, String format, boolean includeTags)">7</method>
			<method name="private static synchronized edu.stanford.nlp.trees.Tree getCollocationProcessedTree(edu.stanford.nlp.trees.Tree tree, edu.stanford.nlp.trees.HeadFinder hf)">3</method>
			<method name="public void _init_(String formats, edu.stanford.nlp.trees.TreebankLanguagePack tlp)">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="private static String toString(java.util.Collection dependencies, boolean extraSep, boolean includeTags)">6</method>
			<method name="private edu.stanford.nlp.trees.Tree[] headMarkChildren(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.Tree head)">2</method>
			<method name="private edu.stanford.nlp.trees.Tree markHeadNodes(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.Tree head)">3</method>
			<method name="public void printTrees(java.util.List trees, String id, java.io.PrintWriter pw)">9</method>
			<method name="private static String toXMLString(java.util.Collection dependencies, boolean includeTags)">9</method>
			<method name="public void _init_(String formats)">0</method>
			<method name="private static edu.stanford.nlp.ling.Label headMark(edu.stanford.nlp.ling.Label l)">1</method>
			<method name="private void printTreeInternal(edu.stanford.nlp.trees.Tree t, java.io.PrintWriter pw, boolean inXml)">60</method>
			<method name="public static void main(String[] args)">10</method>
			<method name="public edu.stanford.nlp.trees.Tree markHeadNodes(edu.stanford.nlp.trees.Tree t)">1</method>
			<method name="public void printTree(edu.stanford.nlp.trees.Tree t, String id, java.io.PrintWriter pw)">9</method>
			<method name="public void printHeader(java.io.PrintWriter pw, String charset)">2</method>
			<method name="public static void print(java.util.Collection dependencies, boolean includeTags, java.io.PrintWriter pw)">1</method>
			<method name="public void printFooter(java.io.PrintWriter pw)">2</method>
			<method name="private static String toReadableString(java.util.Collection dependencies)">2</method>
			<method name="public void _init_(String formats, String options, edu.stanford.nlp.trees.TreebankLanguagePack tlp)">0</method>
			<method name="public void printTree(edu.stanford.nlp.trees.Tree t)">1</method>
			<method name="public static void print(java.util.Collection dependencies, String format, boolean includeTags, java.io.PrintWriter pw)">1</method>
			<method name="public void printTree(edu.stanford.nlp.trees.Tree t, java.io.PrintWriter pw)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.NPTmpRetainingTreeNormalizer$1</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>14</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>44</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>20.5</amc>
		<cc>
			<method name="public edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree t)">4</method>
			<method name="void _init_(edu.stanford.nlp.trees.NPTmpRetainingTreeNormalizer)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.ExtractorMidSentenceCap</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>9</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>1.3333333333333333</lcom3>
		<loc>39</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.5</amc>
		<cc>
			<method name="String extract(edu.stanford.nlp.tagger.maxent.History h, edu.stanford.nlp.tagger.maxent.PairsHolder pH)">4</method>
			<method name="public boolean isLocal()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public boolean isDynamic()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.NPTmpRetainingTreeNormalizer$2</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>9</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>2</npm>
		<lcom3>1.25</lcom3>
		<loc>74</loc>
		<dam>0.5</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>23.0</amc>
		<cc>
			<method name="public boolean accept(edu.stanford.nlp.trees.Tree t)">11</method>
			<method name="void _init_(edu.stanford.nlp.trees.NPTmpRetainingTreeNormalizer)">0</method>
			<method name="public volatile boolean accept(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.MutableInteger</name>
		<wmc>15</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>17</rfc>
		<lcom>0</lcom>
		<ca>8</ca>
		<ce>0</ce>
		<npm>15</npm>
		<lcom3>0.5357142857142857</lcom3>
		<loc>106</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.3157894736842105</mfa>
		<cam>0.35</cam>
		<ic>1</ic>
		<cbm>2</cbm>
		<amc>5.933333333333334</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public byte byteValue()">1</method>
			<method name="public double doubleValue()">1</method>
			<method name="public void incValue(int val)">1</method>
			<method name="public void _init_(int i)">0</method>
			<method name="public void set(int i)">1</method>
			<method name="public volatile int compareTo(Object x0)">1</method>
			<method name="public int compareTo(edu.stanford.nlp.util.MutableInteger anotherMutableInteger)">3</method>
			<method name="public long longValue()">1</method>
			<method name="public int hashCode()">1</method>
			<method name="public float floatValue()">1</method>
			<method name="public int intValue()">1</method>
			<method name="public short shortValue()">1</method>
			<method name="public boolean equals(Object obj)">3</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.classify.LinearClassifierFactory$11</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>2</npm>
		<lcom3>0.75</lcom3>
		<loc>25</loc>
		<dam>0.5</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.666666666666667</amc>
		<cc>
			<method name="public edu.stanford.nlp.optimization.Minimizer create()">2</method>
			<method name="void _init_(edu.stanford.nlp.classify.LinearClassifierFactory)">0</method>
			<method name="public volatile Object create()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.classify.LinearClassifierFactory$10</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>7</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>56</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.4666666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.0</amc>
		<cc>
			<method name="public edu.stanford.nlp.optimization.Minimizer create()">1</method>
			<method name="void _init_(edu.stanford.nlp.classify.LinearClassifierFactory, double, int, edu.stanford.nlp.optimization.StochasticCalculateMethods, int)">0</method>
			<method name="public volatile Object create()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.NPTmpRetainingTreeNormalizer$3</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>11</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>2</npm>
		<lcom3>1.25</lcom3>
		<loc>52</loc>
		<dam>0.5</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.666666666666666</amc>
		<cc>
			<method name="public boolean accept(edu.stanford.nlp.trees.Tree t)">7</method>
			<method name="void _init_(edu.stanford.nlp.trees.NPTmpRetainingTreeNormalizer)">0</method>
			<method name="public volatile boolean accept(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.classify.LinearClassifierFactory$13</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>16</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>64</loc>
		<dam>0.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.4444444444444444</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.333333333333332</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.classify.LinearClassifierFactory, edu.stanford.nlp.classify.CrossValidator, edu.stanford.nlp.util.Function)">0</method>
			<method name="public Double apply(Double sigmaToTry)">1</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.CoreMapNodePattern$StringAnnotationRegexPattern</name>
		<wmc>9</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>18</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>9</npm>
		<lcom3>0.0</lcom3>
		<loc>78</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.37777777777777777</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.555555555555555</amc>
		<cc>
			<method name="public volatile Object matchWithResult(Object x0)">1</method>
			<method name="public Object matchWithResult(String str)">2</method>
			<method name="public boolean match(String str)">2</method>
			<method name="public java.util.regex.Matcher matcher(String str)">1</method>
			<method name="public void _init_(java.util.regex.Pattern pattern)">0</method>
			<method name="public void _init_(String regex, int flags)">0</method>
			<method name="public volatile boolean match(Object x0)">1</method>
			<method name="public String toString()">1</method>
			<method name="public java.util.regex.Pattern getPattern()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.NPTmpRetainingTreeNormalizer$4</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>33</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>709</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>353.0</amc>
		<cc>
			<method name="public edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree t)">58</method>
			<method name="void _init_(edu.stanford.nlp.trees.NPTmpRetainingTreeNormalizer)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.classify.LinearClassifierFactory$12</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>13</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>10</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>68</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.4666666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>21.0</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.classify.LinearClassifierFactory, edu.stanford.nlp.stats.Scorer)">0</method>
			<method name="public Double apply(edu.stanford.nlp.util.Triple fold)">1</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.Sentence</name>
		<wmc>13</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>36</cbo>
		<rfc>48</rfc>
		<lcom>78</lcom>
		<ca>26</ca>
		<ce>10</ce>
		<npm>12</npm>
		<lcom3>2.0</lcom3>
		<loc>445</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.21978021978021978</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>33.23076923076923</amc>
		<cc>
			<method name="public static String wordToString(Object o, boolean justValue, String separator)">17</method>
			<method name="public static String wordToString(Object o, boolean justValue)">1</method>
			<method name="public static java.util.ArrayList toTaggedList(java.util.List lex, java.util.List tags)">3</method>
			<method name="public static transient java.util.ArrayList toUntaggedList(String[] words)">2</method>
			<method name="public static String listToString(java.util.List list, boolean justValue)">1</method>
			<method name="private void _init_()">0</method>
			<method name="public static String listToString(java.util.List list, boolean justValue, String separator)">2</method>
			<method name="public static transient java.util.List toWordList(String[] words)">2</method>
			<method name="public static String extractNgram(java.util.List list, int start, int end)">7</method>
			<method name="public static transient java.util.List toCoreLabelList(String[] words)">2</method>
			<method name="public static java.util.List toCoreLabelList(java.util.List words)">5</method>
			<method name="public static java.util.ArrayList toUntaggedList(java.util.List lex)">2</method>
			<method name="public static String listToString(java.util.List list)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.QNMinimizer$eState</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>3</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.9583333333333334</lcom3>
		<loc>100</loc>
		<dam>0.125</dam>
		<moa>8</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>22.0</amc>
		<cc>
			<method name="public static edu.stanford.nlp.optimization.QNMinimizer$eState valueOf(String name)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static edu.stanford.nlp.optimization.QNMinimizer$eState[] values()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.CoreMapNodePattern$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>8</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.international.arabic.process.ArabicTokenizer$ArabicTokenizerFactory</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>12</rfc>
		<lcom>9</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>5</npm>
		<lcom3>0.4666666666666667</lcom3>
		<loc>74</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4583333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.833333333333334</amc>
		<cc>
			<method name="public void setOptions(String options)">2</method>
			<method name="public edu.stanford.nlp.process.Tokenizer getTokenizer(java.io.Reader r)">1</method>
			<method name="public static edu.stanford.nlp.process.TokenizerFactory newTokenizerFactory()">1</method>
			<method name="private void _init_(edu.stanford.nlp.process.LexedTokenFactory factory)">0</method>
			<method name="public java.util.Iterator getIterator(java.io.Reader r)">1</method>
			<method name="public edu.stanford.nlp.process.Tokenizer getTokenizer(java.io.Reader r, String extraOptions)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.SMDMinimizer$1</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>3</npm>
		<lcom3>0.25</lcom3>
		<loc>83</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.4</amc>
		<cc>
			<method name="public double[] derivativeAt(double[] x)">2</method>
			<method name="void _init_(double[])">0</method>
			<method name="private double valuePow(double[] x, double pow)">2</method>
			<method name="public int domainDimension()">1</method>
			<method name="public double valueAt(double[] x)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.ArrayCoreMap$1$1</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>9</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>4</npm>
		<lcom3>0.125</lcom3>
		<loc>59</loc>
		<dam>0.5</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.4</amc>
		<cc>
			<method name="public Class next()">1</method>
			<method name="public boolean hasNext()">2</method>
			<method name="public void remove()">1</method>
			<method name="public volatile Object next()">1</method>
			<method name="void _init_(edu.stanford.nlp.util.ArrayCoreMap$1)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.AbstractSequenceClassifier$2</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>13</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>0.3333333333333333</lcom3>
		<loc>45</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.0</amc>
		<cc>
			<method name="public edu.stanford.nlp.util.concurrent.ThreadsafeProcessor newInstance()">1</method>
			<method name="public java.util.List process(java.util.List doc)">2</method>
			<method name="public volatile Object process(Object x0)">1</method>
			<method name="void _init_(edu.stanford.nlp.ie.AbstractSequenceClassifier)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.AbstractSequenceClassifier$1</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>15</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>79</loc>
		<dam>0.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>24.0</amc>
		<cc>
			<method name="public volatile Object drawSample()">1</method>
			<method name="void _init_(edu.stanford.nlp.ie.AbstractSequenceClassifier, java.util.List)">0</method>
			<method name="public java.util.List drawSample()">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.ChineseLexicon</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>7</rfc>
		<lcom>1</lcom>
		<ca>3</ca>
		<ce>8</ce>
		<npm>2</npm>
		<lcom3>1.6</lcom3>
		<loc>55</loc>
		<dam>0.6</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5714285714285714</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>24.0</amc>
		<cc>
			<method name="public float score(edu.stanford.nlp.parser.lexparser.IntTaggedWord iTW, int loc, String word, String featureSpec)">3</method>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.Options op, edu.stanford.nlp.parser.lexparser.ChineseTreebankParserParams params, edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.TextOutputter</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>13</cbo>
		<rfc>41</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>13</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>484</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4666666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>160.33333333333334</amc>
		<cc>
			<method name="public static void prettyPrint(edu.stanford.nlp.pipeline.Annotation annotation, java.io.OutputStream stream, edu.stanford.nlp.pipeline.StanfordCoreNLP pipeline)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public static void prettyPrint(edu.stanford.nlp.pipeline.Annotation annotation, java.io.PrintWriter os, edu.stanford.nlp.pipeline.StanfordCoreNLP pipeline)">23</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.io.TaggedFileRecord$Format</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.9166666666666666</lcom3>
		<loc>56</loc>
		<dam>0.25</dam>
		<moa>4</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>12.0</amc>
		<cc>
			<method name="public static edu.stanford.nlp.tagger.io.TaggedFileRecord$Format[] values()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static edu.stanford.nlp.tagger.io.TaggedFileRecord$Format valueOf(String name)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequenceMatchResult$MatchedGroupInfo</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>4</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>20</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.0</amc>
		<cc>
			<method name="public void _init_(String text, java.util.List nodes, java.util.List matchResults, Object value)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CoreMapFunctionApplier</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>9</rfc>
		<lcom>1</lcom>
		<ca>4</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>58</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.4444444444444444</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>17.333333333333332</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.Env env, Class annotationField, edu.stanford.nlp.util.Function func)">0</method>
			<method name="public Object apply(edu.stanford.nlp.util.CoreMap cm)">3</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.TregexPattern$TRegexTreeVisitor</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>28</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>2</npm>
		<lcom3>0.8</lcom3>
		<loc>287</loc>
		<dam>0.2</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.26666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>44.333333333333336</amc>
		<cc>
			<method name="static boolean access$002(boolean x0)">1</method>
			<method name="void _init_(edu.stanford.nlp.trees.tregex.TregexPattern p, String[] handles, String encoding)">0</method>
			<method name="public int numMatches()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="static boolean access$000()">1</method>
			<method name="public void visitTree(edu.stanford.nlp.trees.Tree t)">17</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.io.FileSequentialCollection$FileSequentialCollectionIterator</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>29</rfc>
		<lcom>7</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>5</npm>
		<lcom3>0.4</lcom3>
		<loc>276</loc>
		<dam>0.8333333333333334</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>44.0</amc>
		<cc>
			<method name="public boolean hasNext()">2</method>
			<method name="public void remove()">1</method>
			<method name="public java.io.File next()">2</method>
			<method name="private java.io.File primeNextFile()">13</method>
			<method name="public volatile Object next()">1</method>
			<method name="public void _init_(edu.stanford.nlp.io.FileSequentialCollection)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.international.arabic.process.IOBUtils</name>
		<wmc>14</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>53</rfc>
		<lcom>81</lcom>
		<ca>2</ca>
		<ce>8</ce>
		<npm>5</npm>
		<lcom3>0.9551282051282051</lcom3>
		<loc>664</loc>
		<dam>0.9166666666666666</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2403846153846154</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>45.57142857142857</amc>
		<cc>
			<method name="private static boolean shouldNotSegment(String token)">4</method>
			<method name="private static boolean addSuffixMarker(int focus, java.util.List labeledSequence)">5</method>
			<method name="public static String getBoundaryCharacter()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private static String stripSegmentationMarkers(String tok, edu.stanford.nlp.international.arabic.process.IOBUtils$TokenType tokType)">6</method>
			<method name="public static String IOBToString(java.util.List labeledSequence, String prefixMarker, String suffixMarker)">21</method>
			<method name="public static java.util.List StringToIOB(java.util.List tokenList, Character segMarker, boolean applyRewriteRules)">8</method>
			<method name="public static java.util.List StringToIOB(String str, Character segMarker)">1</method>
			<method name="private static boolean addPrefixMarker(int focus, java.util.List labeledSequence)">4</method>
			<method name="private static edu.stanford.nlp.international.arabic.process.IOBUtils$TokenType getTokenType(String token, String segMarker)">7</method>
			<method name="private void _init_()">0</method>
			<method name="private static void tokenToDatums(java.util.List iobList, String token, edu.stanford.nlp.international.arabic.process.IOBUtils$TokenType tokType, edu.stanford.nlp.ling.CoreLabel tokenLabel, String lastToken, int charIndex, boolean applyRewriteRules)">9</method>
			<method name="private static edu.stanford.nlp.ling.CoreLabel createDatum(String token, String label, int index)">1</method>
			<method name="public static java.util.List StringToIOB(String string)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$NumericCompositeTypeAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$D2_LEndAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.classify.NBLinearClassifierFactory$1</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>20</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>150</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4444444444444444</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>48.0</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.classify.NBLinearClassifierFactory, int[][], int[])">0</method>
			<method name="public Double apply(Double trialSigma)">4</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.TestSentence</name>
		<wmc>34</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>32</cbo>
		<rfc>123</rfc>
		<lcom>15</lcom>
		<ca>7</ca>
		<ce>26</ce>
		<npm>10</npm>
		<lcom3>0.8581818181818182</lcom3>
		<loc>2014</loc>
		<dam>0.76</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.18181818181818182</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>57.5</amc>
		<cc>
			<method name="public double scoreOf(int[] sequence)">1</method>
			<method name="public double[] scoresOf(int[] tags, int pos)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="protected String[] stringTagsAt(int pos)">6</method>
			<method name="protected void writeTagsAndErrors(String[] finalTags, edu.stanford.nlp.io.PrintFile pf, boolean verboseResults)">12</method>
			<method name="protected void initializeScorer()">2</method>
			<method name="private double[] getApproximateScores(edu.stanford.nlp.tagger.maxent.History h)">1</method>
			<method name="static String toNice(String s)">2</method>
			<method name="void printTop(edu.stanford.nlp.io.PrintFile pfu)">7</method>
			<method name="protected void revert(int prevSize)">1</method>
			<method name="public double scoreOf(int[] tags, int pos)">3</method>
			<method name="public int rightWindow()">1</method>
			<method name="String getTaggedNice()">2</method>
			<method name="public void setCorrectTags(java.util.List sentence)">2</method>
			<method name="private double[] getScores(edu.stanford.nlp.tagger.maxent.History h)">2</method>
			<method name="public int length()">1</method>
			<method name="public int[] getPossibleValues(int pos)">2</method>
			<method name="public java.util.ArrayList tagSentence(java.util.List s, boolean reuseTags)">9</method>
			<method name="private double[] getExactScores(edu.stanford.nlp.tagger.maxent.History h)">2</method>
			<method name="private double[] getExactHistories(edu.stanford.nlp.tagger.maxent.History h, java.util.List extractors, java.util.List extractorsRare)">6</method>
			<method name="public int leftWindow()">1</method>
			<method name="java.util.ArrayList getTaggedSentence()">6</method>
			<method name="private java.util.ArrayList testTagInference()">1</method>
			<method name="protected double[] getHistories(String[] tags, edu.stanford.nlp.tagger.maxent.History h)">6</method>
			<method name="protected void init()">3</method>
			<method name="protected void cleanUpScorer()">1</method>
			<method name="private void getTop3(double[][][] probabilities, int current, double[] probs, String[] tags)">6</method>
			<method name="protected void calculateProbs(double[][][] probabilities)">6</method>
			<method name="private void setHistory(int current, edu.stanford.nlp.tagger.maxent.History h, int[] tags)">4</method>
			<method name="void printUnknown(int numSent, edu.stanford.nlp.io.PrintFile pfu)">8</method>
			<method name="private double[] getApproximateHistories(String[] tags, edu.stanford.nlp.tagger.maxent.History h, java.util.List extractors, java.util.List extractorsRare)">6</method>
			<method name="private void runTagInference()">2</method>
			<method name="public void _init_(edu.stanford.nlp.tagger.maxent.MaxentTagger maxentTagger)">0</method>
			<method name="private double[] getHistories(String[] tags, edu.stanford.nlp.tagger.maxent.History h, java.util.List extractors, java.util.List extractorsRare)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.CollectionFactory</name>
		<wmc>9</wmc>
		<dit>1</dit>
		<noc>5</noc>
		<cbo>15</cbo>
		<rfc>16</rfc>
		<lcom>28</lcom>
		<ca>14</ca>
		<ce>6</ce>
		<npm>8</npm>
		<lcom3>0.925</lcom3>
		<loc>57</loc>
		<dam>0.2</dam>
		<moa>4</moa>
		<mfa>0.0</mfa>
		<cam>0.25</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.777777777777778</amc>
		<cc>
			<method name="public static edu.stanford.nlp.util.CollectionFactory arrayListFactory(int size)">1</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static edu.stanford.nlp.util.CollectionFactory hashSetFactory()">1</method>
			<method name="public static edu.stanford.nlp.util.CollectionFactory arrayListFactory()">1</method>
			<method name="public static edu.stanford.nlp.util.CollectionFactory linkedListFactory()">1</method>
			<method name="public abstract java.util.Collection newCollection()">1</method>
			<method name="public abstract java.util.Collection newEmptyCollection()">1</method>
			<method name="public static edu.stanford.nlp.util.CollectionFactory treeSetFactory()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.LabeledChunkIdentifier$LabelTagType</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>8</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>3</npm>
		<lcom3>0.33333333333333326</lcom3>
		<loc>56</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.666666666666668</amc>
		<cc>
			<method name="public boolean typeMatches(edu.stanford.nlp.pipeline.LabeledChunkIdentifier$LabelTagType other)">1</method>
			<method name="public String toString()">1</method>
			<method name="public void _init_(String label, String tag, String type)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalRelations$ComplementGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.BinaryGrammarExtractor</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>15</cbo>
		<rfc>26</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>13</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>261</loc>
		<dam>1.0</dam>
		<moa>4</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>62.75</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.Options op, edu.stanford.nlp.util.Index index)">0</method>
			<method name="protected void tallyInternalNode(edu.stanford.nlp.trees.Tree lt, double weight)">2</method>
			<method name="public edu.stanford.nlp.util.Pair formResult()">5</method>
			<method name="public volatile Object formResult()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.PriorityQueue</name>
		<wmc>9</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>9</rfc>
		<lcom>36</lcom>
		<ca>8</ca>
		<ce>0</ce>
		<npm>9</npm>
		<lcom3>2.0</lcom3>
		<loc>9</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4722222222222222</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract boolean changePriority(Object, double)">1</method>
			<method name="public abstract double getPriority()">1</method>
			<method name="public abstract Object removeFirst()">1</method>
			<method name="public abstract boolean relaxPriority(Object, double)">1</method>
			<method name="public abstract String toString(int)">1</method>
			<method name="public abstract boolean add(Object, double)">1</method>
			<method name="public abstract double getPriority(Object)">1</method>
			<method name="public abstract java.util.List toSortedList()">1</method>
			<method name="public abstract Object getFirst()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.TimeAnnotations$TimexAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseSemanticHeadFinder</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>7</rfc>
		<lcom>3</lcom>
		<ca>3</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>1.5</lcom3>
		<loc>222</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>72.66666666666667</amc>
		<cc>
			<method name="private void ruleChanges()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(edu.stanford.nlp.trees.TreebankLanguagePack tlp)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$CoNLLSRLAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>9</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.crf.CRFCliqueTree</name>
		<wmc>54</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>18</cbo>
		<rfc>96</rfc>
		<lcom>985</lcom>
		<ca>8</ca>
		<ce>10</ce>
		<npm>49</npm>
		<lcom3>0.6698113207547169</lcom3>
		<loc>1550</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.1765432098765432</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>27.555555555555557</amc>
		<cc>
			<method name="public double prob(int position, int[] labels)">1</method>
			<method name="public double logProb(int position, int label)">1</method>
			<method name="public double condProbGivenNext(int position, Object label, Object[] nextLabels)">1</method>
			<method name="public int getNumClasses()">1</method>
			<method name="public double condLogProbGivenPrevious(int position, int label, int[] prevLabels)">4</method>
			<method name="public edu.stanford.nlp.stats.Counter logProbs(int position)">2</method>
			<method name="public double condLogProbGivenPrevious(int position, Object label, Object[] prevLabels)">1</method>
			<method name="public double[] getConditionalDistribution(int[] sequence, int position)">1</method>
			<method name="public int length()">1</method>
			<method name="public double condProbGivenPrevious(int position, int label, int[] prevLabels)">1</method>
			<method name="public Object backgroundSymbol()">1</method>
			<method name="public edu.stanford.nlp.stats.Counter condLogProbsGivenPrevious(int position, Object[] prevlabels)">2</method>
			<method name="public double logProbStartPos()">1</method>
			<method name="public static edu.stanford.nlp.ie.crf.CRFCliqueTree getCalibratedCliqueTree(double[] weights, double wscale, int[][] weightIndices, int[][][] data, java.util.List labelIndices, int numClasses, edu.stanford.nlp.util.Index classIndex, Object backgroundSymbol)">4</method>
			<method name="public double logProb(int position, Object label)">1</method>
			<method name="public void setInitialSequence(int[] sequence)">1</method>
			<method name="void _init_(edu.stanford.nlp.ie.crf.FactorTable[] factorTables, edu.stanford.nlp.util.Index classIndex, Object backgroundSymbol, double z)">0</method>
			<method name="public edu.stanford.nlp.stats.Counter condLogProbsGivenNext(int position, int[] nextlabels)">2</method>
			<method name="public double totalMass()">1</method>
			<method name="public double logProb(int position, int[] labels)">4</method>
			<method name="public double condProbGivenNext(int position, int label, int[] nextLabels)">1</method>
			<method name="public double prob(int position, Object label)">1</method>
			<method name="public edu.stanford.nlp.stats.Counter condLogProbsGivenNext(int position, Object[] nextlabels)">2</method>
			<method name="public edu.stanford.nlp.stats.GeneralizedCounter probs(int position, int window)">3</method>
			<method name="public int[] getPossibleValues(int position)">1</method>
			<method name="public double condLogProbGivenNext(int position, int label, int[] nextLabels)">4</method>
			<method name="public double condLogProbGivenNext(int position, Object label, Object[] nextLabels)">1</method>
			<method name="public double scoreOf(int[] sequence)">2</method>
			<method name="public double prob(int position, Object[] labels)">1</method>
			<method name="public void _init_(edu.stanford.nlp.ie.crf.FactorTable[] factorTables, edu.stanford.nlp.util.Index classIndex, Object backgroundSymbol)">0</method>
			<method name="public int window()">1</method>
			<method name="public edu.stanford.nlp.stats.Counter probs(int position)">2</method>
			<method name="public double scoreOf(int[] sequence, int pos)">1</method>
			<method name="public double prob(int position, int label)">1</method>
			<method name="public double logProb(int position, Object[] labels)">1</method>
			<method name="public int rightWindow()">1</method>
			<method name="public double[] scoresOf(int[] sequence, int position)">10</method>
			<method name="public edu.stanford.nlp.util.Index classIndex()">1</method>
			<method name="public double condProbGivenPrevious(int position, Object label, Object[] prevLabels)">1</method>
			<method name="private static edu.stanford.nlp.ie.crf.FactorTable getFactorTable(double[] weights, double wscale, int[][] weightIndices, int[][] data, java.util.List labelIndices, int numClasses)">5</method>
			<method name="public double[] logProbsToDoubleArr(int position)">2</method>
			<method name="public edu.stanford.nlp.ie.crf.FactorTable[] getFactorTables()">1</method>
			<method name="public int getNumValues()">1</method>
			<method name="public void updateSequenceElement(int[] sequence, int pos, int oldVal)">1</method>
			<method name="public int backgroundIndex()">1</method>
			<method name="public int leftWindow()">1</method>
			<method name="public static edu.stanford.nlp.ie.crf.CRFCliqueTree getCalibratedCliqueTree(int[][][] data, java.util.List labelIndices, int numClasses, edu.stanford.nlp.util.Index classIndex, Object backgroundSymbol, edu.stanford.nlp.ie.crf.CliquePotentialFunction cliquePotentialFunc, double[][][] featureVals)">5</method>
			<method name="static edu.stanford.nlp.ie.crf.FactorTable getFactorTable(int[][] data, java.util.List labelIndices, int numClasses, edu.stanford.nlp.ie.crf.CliquePotentialFunction cliquePotentialFunc, double[][] featureValByCliqueSize, int posInSent)">5</method>
			<method name="public double[] probsToDoubleArr(int position)">2</method>
			<method name="private java.util.List intArrayToListE(int[] is)">2</method>
			<method name="public edu.stanford.nlp.stats.Counter condLogProbsGivenPrevious(int position, int[] prevlabels)">2</method>
			<method name="private int[] objectArrayToIntArray(Object[] os)">2</method>
			<method name="public double[][] logProbTable()">3</method>
			<method name="public edu.stanford.nlp.stats.GeneralizedCounter logProbs(int position, int window)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.FuzzyInterval</name>
		<wmc>8</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>16</rfc>
		<lcom>28</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>6</npm>
		<lcom3>1.1428571428571428</lcom3>
		<loc>407</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.46875</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>49.75</amc>
		<cc>
			<method name="private void _init_(edu.stanford.nlp.util.FuzzyInterval$FuzzyComparable a, edu.stanford.nlp.util.FuzzyInterval$FuzzyComparable b, int flags)">0</method>
			<method name="public static edu.stanford.nlp.util.FuzzyInterval toValidInterval(edu.stanford.nlp.util.FuzzyInterval$FuzzyComparable a, edu.stanford.nlp.util.FuzzyInterval$FuzzyComparable b)">1</method>
			<method name="public static edu.stanford.nlp.util.FuzzyInterval toInterval(edu.stanford.nlp.util.FuzzyInterval$FuzzyComparable a, edu.stanford.nlp.util.FuzzyInterval$FuzzyComparable b, int flags)">2</method>
			<method name="public int getRelationFlags(edu.stanford.nlp.util.Interval other)">7</method>
			<method name="public static edu.stanford.nlp.util.FuzzyInterval toInterval(edu.stanford.nlp.util.FuzzyInterval$FuzzyComparable a, edu.stanford.nlp.util.FuzzyInterval$FuzzyComparable b)">1</method>
			<method name="public edu.stanford.nlp.util.Interval$RelType getRelation(edu.stanford.nlp.util.Interval other)">9</method>
			<method name="public static edu.stanford.nlp.util.FuzzyInterval toValidInterval(edu.stanford.nlp.util.FuzzyInterval$FuzzyComparable a, edu.stanford.nlp.util.FuzzyInterval$FuzzyComparable b, int flags)">2</method>
			<method name="private int restrictFlags(int flags)">13</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalRelations$VerbalModifierGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.FactoredLexicon</name>
		<wmc>14</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>32</cbo>
		<rfc>118</rfc>
		<lcom>9</lcom>
		<ca>2</ca>
		<ce>30</ce>
		<npm>6</npm>
		<lcom3>0.727810650887574</lcom3>
		<loc>1709</loc>
		<dam>0.9230769230769231</dam>
		<moa>9</moa>
		<mfa>0.0</mfa>
		<cam>0.17582417582417584</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>120.14285714285714</amc>
		<cc>
			<method name="public java.util.Iterator ruleIteratorByWord(int word, int loc, String featureSpec)">4</method>
			<method name="private double probWordTag(String word, int loc, int wordId, int tagId)">4</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void _init_(edu.stanford.nlp.international.morph.MorphoFeatureSpecification morphoSpec, edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex)">0</method>
			<method name="private double probLemmaTag(String word, int loc, int tagId, int lemmaId)">4</method>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.Options op, edu.stanford.nlp.international.morph.MorphoFeatureSpecification morphoSpec, edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex)">0</method>
			<method name="private double probMorphTag(int tagId, int morphId)">3</method>
			<method name="protected void initRulesWithWord()">6</method>
			<method name="public static void main(String[] args)">14</method>
			<method name="private static java.util.List getTuningSet(edu.stanford.nlp.trees.Treebank devTreebank, edu.stanford.nlp.parser.lexparser.FactoredLexicon lexicon, edu.stanford.nlp.parser.lexparser.TreebankLangParserParams tlpp)">3</method>
			<method name="public float score(edu.stanford.nlp.parser.lexparser.IntTaggedWord iTW, int loc, String word, String featureSpec)">5</method>
			<method name="public void train(java.util.Collection trees, java.util.Collection rawTrees)">13</method>
			<method name="private static java.util.List treebankToLexiconEvents(java.util.List treebank, edu.stanford.nlp.parser.lexparser.FactoredLexicon lexicon)">6</method>
			<method name="private static edu.stanford.nlp.parser.lexparser.Options getOptions(edu.stanford.nlp.international.Languages$Language language)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$DependentsAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>9</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.UnnamedDependency$DependencyFactoryHolder</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>0</npm>
		<lcom3>0.5</lcom3>
		<loc>15</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.6666666666666665</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="static edu.stanford.nlp.trees.DependencyFactory access$000()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$PhraseWordsTagAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.NERFeatureFactory$Bin3Annotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.BasicSequenceMatchResult</name>
		<wmc>35</wmc>
		<dit>1</dit>
		<noc>1</noc>
		<cbo>14</cbo>
		<rfc>49</rfc>
		<lcom>505</lcom>
		<ca>6</ca>
		<ce>9</ce>
		<npm>34</npm>
		<lcom3>0.7205882352941176</lcom3>
		<loc>583</loc>
		<dam>0.0</dam>
		<moa>4</moa>
		<mfa>0.0</mfa>
		<cam>0.5238095238095238</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.428571428571429</amc>
		<cc>
			<method name="public java.util.List groupMatchResults(String var)">2</method>
			<method name="public java.util.List groupNodes(int group)">4</method>
			<method name="public Object groupMatchResult(String var, int index)">2</method>
			<method name="public int start(String var)">2</method>
			<method name="public edu.stanford.nlp.util.Interval getInterval()">1</method>
			<method name="public void setOrder(int order)">1</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.SequenceMatchResult$MatchedGroupInfo groupInfo()">1</method>
			<method name="public Object groupMatchResult(int group, int index)">6</method>
			<method name="public java.util.List groupMatchResults(int group)">5</method>
			<method name="public int getOrder()">1</method>
			<method name="public int end(int group)">4</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.SequencePattern pattern()">1</method>
			<method name="public int groupCount()">1</method>
			<method name="public double score()">1</method>
			<method name="public java.util.List elements()">1</method>
			<method name="public String group(int group)">3</method>
			<method name="public Object groupValue(String var)">2</method>
			<method name="public String group(String var)">2</method>
			<method name="public Object nodeMatchResult(int index)">2</method>
			<method name="public int end(String var)">2</method>
			<method name="public int start(int group)">4</method>
			<method name="public int start()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public int end()">1</method>
			<method name="public String group()">1</method>
			<method name="public java.util.List groupMatchResults()">1</method>
			<method name="public Object groupValue()">1</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.BasicSequenceMatchResult toBasicSequenceMatchResult()">1</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.SequenceMatchResult$MatchedGroupInfo groupInfo(String var)">2</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.BasicSequenceMatchResult copy()">4</method>
			<method name="public Object groupValue(int group)">4</method>
			<method name="private int getFirstVarGroup(String v)">4</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.SequenceMatchResult$MatchedGroupInfo groupInfo(int group)">2</method>
			<method name="public java.util.List groupNodes()">1</method>
			<method name="public java.util.List groupNodes(String var)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$ChineseSegAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.ParentAnnotationStats</name>
		<wmc>11</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>27</cbo>
		<rfc>86</rfc>
		<lcom>41</lcom>
		<ca>7</ca>
		<ce>22</ce>
		<npm>8</npm>
		<lcom3>0.52</lcom3>
		<loc>1342</loc>
		<dam>0.8</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.20909090909090908</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>120.0909090909091</amc>
		<cc>
			<method name="private void _init_(edu.stanford.nlp.trees.TreebankLanguagePack tlp, boolean doTags)">0</method>
			<method name="public void processTreeHelper(String gP, String p, edu.stanford.nlp.trees.Tree t)">10</method>
			<method name="public static java.util.Set getEnglishSplitCategories(String treebankRoot)">1</method>
			<method name="public void printStats()">20</method>
			<method name="public static java.util.Set getSplitCategories(edu.stanford.nlp.trees.Treebank t, boolean doTags, int algorithm, double phrasalCutOff, double tagCutOff, edu.stanford.nlp.trees.TreebankLanguagePack tlp)">1</method>
			<method name="public static void main(String[] args)">7</method>
			<method name="static void _clinit_()">0</method>
			<method name="private static void getSplitters(double cutOff, java.util.Map nr, java.util.Map pr, java.util.Map gpr, java.util.Set splitters)">8</method>
			<method name="public static java.util.Set getSplitCategories(edu.stanford.nlp.trees.Treebank t, double cutOff, edu.stanford.nlp.trees.TreebankLanguagePack tlp)">1</method>
			<method name="public static java.util.List kidLabels(edu.stanford.nlp.trees.Tree t)">2</method>
			<method name="public void visitTree(edu.stanford.nlp.trees.Tree t)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.BobChrisTreeNormalizer$EmptyFilter</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>9</rfc>
		<lcom>3</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>1.5</lcom3>
		<loc>41</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.333333333333334</amc>
		<cc>
			<method name="public boolean accept(edu.stanford.nlp.trees.Tree t)">6</method>
			<method name="public void _init_()">0</method>
			<method name="public volatile boolean accept(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CoreMapToListFunctionApplier</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>8</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>48</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.4666666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>14.333333333333334</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.Env env, edu.stanford.nlp.util.Function func)">0</method>
			<method name="public Object apply(edu.stanford.nlp.util.CoreMap cm)">3</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.international.morph.MorphoFeatureSpecification</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>2</noc>
		<cbo>15</cbo>
		<rfc>21</rfc>
		<lcom>9</lcom>
		<ca>11</ca>
		<ce>4</ce>
		<npm>7</npm>
		<lcom3>1.0333333333333334</lcom3>
		<loc>77</loc>
		<dam>0.4</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5238095238095238</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.285714285714286</amc>
		<cc>
			<method name="public void activate(edu.stanford.nlp.international.morph.MorphoFeatureSpecification$MorphoFeatureType feat)">1</method>
			<method name="public static edu.stanford.nlp.util.Pair splitMorphString(String word, String morphStr)">4</method>
			<method name="public boolean isActive(edu.stanford.nlp.international.morph.MorphoFeatureSpecification$MorphoFeatureType feat)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public abstract java.util.List getValues(edu.stanford.nlp.international.morph.MorphoFeatureSpecification$MorphoFeatureType)">1</method>
			<method name="public String toString()">1</method>
			<method name="public abstract edu.stanford.nlp.international.morph.MorphoFeatures strToFeatures(String)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$CompositePartialTime</name>
		<wmc>15</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>22</cbo>
		<rfc>70</rfc>
		<lcom>0</lcom>
		<ca>4</ca>
		<ce>20</ce>
		<npm>13</npm>
		<lcom3>0.30357142857142855</lcom3>
		<loc>772</loc>
		<dam>0.25</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.3238095238095238</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>50.2</amc>
		<cc>
			<method name="public org.joda.time.format.DateTimeFormatter getFormatter(int flags)">10</method>
			<method name="public void _init_(edu.stanford.nlp.time.SUTime$PartialTime t, org.joda.time.Partial p, edu.stanford.nlp.time.SUTime$Time poy, edu.stanford.nlp.time.SUTime$Time dow, edu.stanford.nlp.time.SUTime$Time tod)">0</method>
			<method name="public volatile edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time x0, int x1)">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Time intersect(edu.stanford.nlp.time.SUTime$Time t)">16</method>
			<method name="public edu.stanford.nlp.time.SUTime$PartialTime reduceGranularityTo(edu.stanford.nlp.time.SUTime$Duration granularity)">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Range getRange(int flags, edu.stanford.nlp.time.SUTime$Duration granularity)">9</method>
			<method name="public edu.stanford.nlp.time.SUTime$Duration getDuration()">9</method>
			<method name="protected edu.stanford.nlp.time.SUTime$PartialTime addUnsupported(org.joda.time.Period p, int scalar)">1</method>
			<method name="public void _init_(edu.stanford.nlp.time.SUTime$PartialTime t, edu.stanford.nlp.time.SUTime$Time poy, edu.stanford.nlp.time.SUTime$Time dow, edu.stanford.nlp.time.SUTime$Time tod)">0</method>
			<method name="public volatile edu.stanford.nlp.time.SUTime$Time reduceGranularityTo(edu.stanford.nlp.time.SUTime$Duration x0)">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$TimexType getTimexType()">2</method>
			<method name="public edu.stanford.nlp.time.SUTime$Duration getPeriod()">11</method>
			<method name="public edu.stanford.nlp.time.SUTime$Time resolve(edu.stanford.nlp.time.SUTime$Time ref, int flags)">14</method>
			<method name="public org.joda.time.Instant getJodaTimeInstant()">10</method>
			<method name="protected edu.stanford.nlp.time.SUTime$PartialTime addSupported(org.joda.time.Period p, int scalar)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$ArgumentAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceMention</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>3</noc>
		<cbo>5</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>3</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>0.5</lcom3>
		<loc>16</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.0</amc>
		<cc>
			<method name="public edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceCharSeq getExtent()">1</method>
			<method name="public String toXml(int offset)">1</method>
			<method name="protected void _init_(String id, edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceCharSeq extent)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.CoreMapSequenceMatchAction</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>2</noc>
		<cbo>3</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>2</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>1.0</lcom3>
		<loc>11</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.PennTreebankTokenizer$EnglishTreebankStreamTokenizer</name>
		<wmc>2</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>6</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>52</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>1.0</mfa>
		<cam>0.8333333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>25.0</amc>
		<cc>
			<method name="void _init_(java.io.Reader x0, edu.stanford.nlp.trees.PennTreebankTokenizer$1 x1)">0</method>
			<method name="private void _init_(java.io.Reader r)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$ImmediatelyHeadedBy</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>15</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>8</ce>
		<npm>2</npm>
		<lcom3>0.7</lcom3>
		<loc>93</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.3333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>14.166666666666666</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.trees.HeadFinder hf)">0</method>
			<method name="static edu.stanford.nlp.trees.tregex.Relation$ImmediatelyHeads access$900(edu.stanford.nlp.trees.tregex.Relation$ImmediatelyHeadedBy x0)">1</method>
			<method name="public boolean equals(Object o)">7</method>
			<method name="public int hashCode()">2</method>
			<method name="java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">1</method>
			<method name="boolean satisfies(edu.stanford.nlp.trees.Tree t1, edu.stanford.nlp.trees.Tree t2, edu.stanford.nlp.trees.Tree root, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.DiskTreebank$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.PennTreebankLanguagePack</name>
		<wmc>17</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>27</cbo>
		<rfc>33</rfc>
		<lcom>122</lcom>
		<ca>19</ca>
		<ce>10</ce>
		<npm>16</npm>
		<lcom3>0.953125</lcom3>
		<loc>362</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.296875</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.823529411764707</amc>
		<cc>
			<method name="public String treebankFileExtension()">1</method>
			<method name="public char[] labelAnnotationIntroducingCharacters()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public edu.stanford.nlp.trees.GrammaticalStructureFactory grammaticalStructureFactory(edu.stanford.nlp.util.Filter puncFilter)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public String[] startSymbols()">1</method>
			<method name="public String[] punctuationWords()">1</method>
			<method name="public edu.stanford.nlp.trees.HeadFinder typedDependencyHeadFinder()">1</method>
			<method name="public String[] evalBIgnoredPunctuationTags()">1</method>
			<method name="public String[] sentenceFinalPunctuationTags()">1</method>
			<method name="public String[] punctuationTags()">1</method>
			<method name="public edu.stanford.nlp.trees.HeadFinder headFinder()">1</method>
			<method name="public edu.stanford.nlp.process.TokenizerFactory getTokenizerFactory()">1</method>
			<method name="public static void main(String[] args)">2</method>
			<method name="public String[] sentenceFinalPunctuationWords()">1</method>
			<method name="public edu.stanford.nlp.trees.GrammaticalStructureFactory grammaticalStructureFactory(edu.stanford.nlp.util.Filter puncFilter, edu.stanford.nlp.trees.HeadFinder hf)">1</method>
			<method name="public edu.stanford.nlp.trees.GrammaticalStructureFactory grammaticalStructureFactory()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$SectionIDAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.ConvertByteArray</name>
		<wmc>84</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>106</rfc>
		<lcom>3442</lcom>
		<ca>6</ca>
		<ce>0</ce>
		<npm>82</npm>
		<lcom3>0.9156626506024096</lcom3>
		<loc>2500</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.10180722891566266</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>28.726190476190474</amc>
		<cc>
			<method name="public static char[] byteArrToCharArr(byte[] b, int off, int length)">2</method>
			<method name="public static short byteArrToShort(byte[] b, int off)">1</method>
			<method name="public static byte[] stringUToByteArr(String s)">2</method>
			<method name="public static byte[] intArrToByteArr(int[] i)">1</method>
			<method name="public static boolean byteArrToBoolean(byte[] b, int off)">2</method>
			<method name="public static void byteArrToAStringArr(byte[] b, int off, String[] s, int pos, int length)">3</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static void charArrToByteArr(byte[] b, int pos, char[] c, int off, int len)">2</method>
			<method name="public static boolean[] byteArrToBooleanArr(byte[] b)">1</method>
			<method name="public static byte[] shortArrToByteArr(short[] s, int off, int length)">2</method>
			<method name="public static int[] byteArrToIntArr(byte[] b)">1</method>
			<method name="public static short[] byteArrToShortArr(byte[] b, int off, int length)">2</method>
			<method name="public static String byteArrToUString(byte[] b, int off, int strLen)">3</method>
			<method name="private void _init_()">0</method>
			<method name="public static byte[] charArrToByteArr(char[] c)">1</method>
			<method name="public static short[] byteArrToShortArr(byte[] b)">1</method>
			<method name="public static void intArrToByteArr(byte[] b, int pos, int[] i, int off, int len)">2</method>
			<method name="public static void uStringArrToByteArr(byte[] b, int pos, String[] s, int off, int length)">3</method>
			<method name="public static String byteArrToUString(byte[] b)">3</method>
			<method name="public static void writeBooleanToByteArr(byte[] b, int off, boolean bool)">2</method>
			<method name="public static byte[] doubleArrToByteArr(double[] d, int off, int length)">3</method>
			<method name="public static float[] readFloatArr(java.io.DataInputStream rf)">1</method>
			<method name="public static void writeAStringToByteArr(byte[] b, int off, String s)">1</method>
			<method name="public static byte[] booleanArrToByteArr(boolean[] b)">1</method>
			<method name="public static byte[] floatArrToByteArr(float[] f, int off, int length)">2</method>
			<method name="public static void aStringArrToByteArr(byte[] b, int pos, String[] s, int off, int length)">3</method>
			<method name="public static void writeShortToByteArr(byte[] b, int off, short s)">1</method>
			<method name="public static char[] byteArrToCharArr(byte[] b)">1</method>
			<method name="public static byte[] shortArrToByteArr(short[] s)">1</method>
			<method name="public static void writeLongToByteArr(byte[] b, int off, long l)">2</method>
			<method name="public static double[] byteArrToDoubleArr(byte[] b, int off, int length)">3</method>
			<method name="public static byte[] longArrToByteArr(long[] l)">1</method>
			<method name="public static String byteArrToAString(byte[] b, int off, int length)">2</method>
			<method name="public static void doubleArrToByteArr(byte[] b, int pos, double[] d, int off, int length)">3</method>
			<method name="public static byte[] stringAToByteArr(String s)">1</method>
			<method name="public static double[] byteArrToDoubleArr(byte[] b)">1</method>
			<method name="public static byte[] uStringArrToByteArr(String[] s)">1</method>
			<method name="public static byte[] aStringArrToByteArr(String[] s)">1</method>
			<method name="public static void saveDoubleArr(java.io.DataOutputStream rf, double[] arr)">1</method>
			<method name="public static void byteArrToLongArr(byte[] b, int off, long[] l, int pos, int length)">3</method>
			<method name="public static boolean[] byteArrToBooleanArr(byte[] b, int off, int length)">3</method>
			<method name="public static byte[] floatArrToByteArr(float[] f)">1</method>
			<method name="public static String[] byteArrToUStringArr(byte[] b, int off, int length)">3</method>
			<method name="public static void byteArrToShortArr(byte[] b, int off, short[] s, int pos, int length)">2</method>
			<method name="public static void writeFloatToByteArr(byte[] b, int off, float f)">1</method>
			<method name="public static void byteArrToUStringArr(byte[] b, int off, String[] s, int pos, int length)">3</method>
			<method name="public static void writeUStringToByteArr(byte[] b, int off, String s, int pos, int length)">2</method>
			<method name="public static void saveFloatArr(java.io.DataOutputStream rf, float[] arr)">1</method>
			<method name="public static byte[] uStringArrToByteArr(String[] s, int off, int length)">5</method>
			<method name="public static byte[] longArrToByteArr(long[] l, int off, int length)">3</method>
			<method name="public static byte[] aStringArrToByteArr(String[] s, int off, int length)">5</method>
			<method name="public static float[] byteArrToFloatArr(byte[] b, int off, int length)">3</method>
			<method name="public static String byteArrToAString(byte[] b)">1</method>
			<method name="public static String[] byteArrToAStringArr(byte[] b)">4</method>
			<method name="public static void byteArrToCharArr(byte[] b, int off, char[] c, int pos, int length)">2</method>
			<method name="public static double byteArrToDouble(byte[] b, int off)">1</method>
			<method name="public static void booleanArrToByteArr(byte[] bytes, int pos, boolean[] b, int off, int length)">3</method>
			<method name="public static void byteArrToFloatArr(byte[] b, int off, float[] f, int pos, int length)">3</method>
			<method name="public static long[] byteArrToLongArr(byte[] b, int off, int length)">3</method>
			<method name="public static void byteArrToIntArr(byte[] b, int off, int[] i, int pos, int length)">3</method>
			<method name="public static void writeIntToByteArr(byte[] b, int off, int i)">1</method>
			<method name="public static int byteArrToInt(byte[] b, int off)">2</method>
			<method name="public static void writeUStringToByteArr(byte[] b, int off, String s)">2</method>
			<method name="public static long[] byteArrToLongArr(byte[] b)">1</method>
			<method name="public static byte[] charArrToByteArr(char[] c, int off, int len)">2</method>
			<method name="public static String[] byteArrToAStringArr(byte[] b, int off, int length)">3</method>
			<method name="public static byte[] doubleArrToByteArr(double[] d)">1</method>
			<method name="public static char byteArrToChar(byte[] b, int off)">1</method>
			<method name="public static void writeDoubleToByteArr(byte[] b, int off, double d)">1</method>
			<method name="public static int[] byteArrToIntArr(byte[] b, int off, int length)">3</method>
			<method name="public static void floatArrToByteArr(byte[] b, int pos, float[] f, int off, int len)">2</method>
			<method name="public static void writeAStringToByteArr(byte[] b, int off, String s, int pos, int length)">1</method>
			<method name="public static void longArrToByteArr(byte[] b, int pos, long[] l, int off, int length)">3</method>
			<method name="public static byte[] intArrToByteArr(int[] i, int off, int length)">2</method>
			<method name="public static void shortArrToByteArr(byte[] b, int pos, short[] s, int off, int len)">2</method>
			<method name="public static float[] byteArrToFloatArr(byte[] b)">1</method>
			<method name="public static double[] readDoubleArr(java.io.DataInputStream rf)">1</method>
			<method name="public static String[] byteArrToUStringArr(byte[] b)">4</method>
			<method name="public static long byteArrToLong(byte[] b, int off)">2</method>
			<method name="public static float byteArrToFloat(byte[] b, int off)">1</method>
			<method name="public static void byteArrToDoubleArr(byte[] b, int off, double[] d, int pos, int length)">3</method>
			<method name="public static void byteArrToBooleanArr(byte[] b, int off, boolean[] bool, int pos, int length)">3</method>
			<method name="public static byte[] booleanArrToByteArr(boolean[] b, int off, int len)">3</method>
			<method name="public static void writeCharToByteArr(byte[] b, int off, char c)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.process.DocumentPreprocessor$XMLIterator</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>20</rfc>
		<lcom>7</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>5</npm>
		<lcom3>0.36</lcom3>
		<loc>125</loc>
		<dam>0.8</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.5833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.0</amc>
		<cc>
			<method name="private void primeNext()">6</method>
			<method name="public void _init_(edu.stanford.nlp.process.DocumentPreprocessor)">0</method>
			<method name="public java.util.List next()">2</method>
			<method name="public boolean hasNext()">2</method>
			<method name="public void remove()">1</method>
			<method name="public volatile Object next()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalRelations$AssociativeModifierGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$NumericTypeAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.ScaledSGDMinimizer$Weights</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>2</npm>
		<lcom3>1.0</lcom3>
		<loc>20</loc>
		<dam>0.3333333333333333</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.5</amc>
		<cc>
			<method name="public void _init_(double[] wt, double[] di)">0</method>
			<method name="public void _init_(double[] wt)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.Debinarizer</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>14</cbo>
		<rfc>25</rfc>
		<lcom>2</lcom>
		<ca>5</ca>
		<ce>9</ce>
		<npm>3</npm>
		<lcom3>0.22222222222222218</lcom3>
		<loc>116</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.5625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>27.25</amc>
		<cc>
			<method name="public void _init_(boolean forceCNF)">0</method>
			<method name="protected edu.stanford.nlp.trees.Tree transformTreeHelper(edu.stanford.nlp.trees.Tree t)">5</method>
			<method name="public edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree t)">2</method>
			<method name="public void _init_(boolean forceCNF, edu.stanford.nlp.ling.LabelFactory lf)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.IntervalTree$TreeNode</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>3</npm>
		<lcom3>1.0</lcom3>
		<loc>35</loc>
		<dam>0.0</dam>
		<moa>4</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.666666666666666</amc>
		<cc>
			<method name="public void clear()">1</method>
			<method name="public boolean isEmpty()">2</method>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.ParserAnnotatorUtils</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>16</cbo>
		<rfc>35</rfc>
		<lcom>6</lcom>
		<ca>2</ca>
		<ce>14</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>198</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>48.5</amc>
		<cc>
			<method name="public static edu.stanford.nlp.trees.Tree xTree(java.util.List words)">2</method>
			<method name="public static void setMissingTags(edu.stanford.nlp.util.CoreMap sentence, edu.stanford.nlp.trees.Tree tree)">6</method>
			<method name="private void _init_()">0</method>
			<method name="public static void fillInParseAnnotations(boolean verbose, boolean buildGraphs, edu.stanford.nlp.trees.GrammaticalStructureFactory gsf, edu.stanford.nlp.util.CoreMap sentence, edu.stanford.nlp.trees.Tree tree)">6</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.Counters$7</name>
		<wmc>17</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>15</cbo>
		<rfc>44</rfc>
		<lcom>42</lcom>
		<ca>9</ca>
		<ce>11</ce>
		<npm>16</npm>
		<lcom3>0.7875</lcom3>
		<loc>298</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.24369747899159663</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.235294117647058</amc>
		<cc>
			<method name="public void clear()">1</method>
			<method name="public boolean equals(Object o)">3</method>
			<method name="public java.util.Set keySet()">1</method>
			<method name="public double remove(Object key)">2</method>
			<method name="public double getCount(Object key)">2</method>
			<method name="public edu.stanford.nlp.util.Factory getFactory()">1</method>
			<method name="public void prettyLog(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels channels, String description)">1</method>
			<method name="public boolean containsKey(Object key)">1</method>
			<method name="public java.util.Set entrySet()">1</method>
			<method name="public double totalCount()">1</method>
			<method name="public int size()">1</method>
			<method name="void _init_(double, java.util.Map, Class)">0</method>
			<method name="public void setDefaultReturnValue(double rv)">1</method>
			<method name="public double defaultReturnValue()">1</method>
			<method name="public int hashCode()">1</method>
			<method name="public void setCount(Object key, double value)">11</method>
			<method name="public java.util.Collection values()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.TimeExpressionExtractor</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>5</rfc>
		<lcom>10</lcom>
		<ca>3</ca>
		<ce>2</ce>
		<npm>5</npm>
		<lcom3>2.0</lcom3>
		<loc>5</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.48</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract java.util.List extractTimeExpressionCoreMaps(edu.stanford.nlp.util.CoreMap, String)">1</method>
			<method name="public abstract java.util.List extractTimeExpressionCoreMaps(edu.stanford.nlp.util.CoreMap, edu.stanford.nlp.util.CoreMap)">1</method>
			<method name="public abstract void init(edu.stanford.nlp.time.Options)">1</method>
			<method name="public abstract void finalize(edu.stanford.nlp.util.CoreMap)">1</method>
			<method name="public abstract void init(String, java.util.Properties)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.Counters$8</name>
		<wmc>11</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>19</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>10</npm>
		<lcom3>0.0</lcom3>
		<loc>75</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.6428571428571429</mfa>
		<cam>0.45454545454545453</cam>
		<ic>1</ic>
		<cbm>7</cbm>
		<amc>5.7272727272727275</amc>
		<cc>
			<method name="public int size()">1</method>
			<method name="public java.util.Set keySet()">1</method>
			<method name="public volatile Object remove(Object x0)">1</method>
			<method name="public Double put(Object key, Double value)">1</method>
			<method name="public volatile Object get(Object x0)">1</method>
			<method name="public Double get(Object key)">1</method>
			<method name="public boolean containsKey(Object key)">1</method>
			<method name="public java.util.Set entrySet()">1</method>
			<method name="void _init_(edu.stanford.nlp.stats.Counter)">0</method>
			<method name="public volatile Object put(Object x0, Object x1)">1</method>
			<method name="public Double remove(Object key)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.dvparser.DVModel$1</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>5</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>14</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.6666666666666665</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="public org.ejml.data.DenseMatrix64F apply(org.ejml.simple.SimpleMatrix matrix)">1</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.Counters$5</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>23</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.666666666666667</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="void _init_()">0</method>
			<method name="public int compare(edu.stanford.nlp.util.Pair a, edu.stanford.nlp.util.Pair b)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.dvparser.DVModel$2</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>5</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>14</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.6666666666666665</amc>
		<cc>
			<method name="public org.ejml.simple.SimpleMatrix apply(org.ejml.data.DenseMatrix64F matrix)">1</method>
			<method name="void _init_()">0</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.TokensRegexNERAnnotator$PosMatchType</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.9166666666666666</lcom3>
		<loc>56</loc>
		<dam>0.25</dam>
		<moa>4</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>12.0</amc>
		<cc>
			<method name="public static edu.stanford.nlp.pipeline.TokensRegexNERAnnotator$PosMatchType valueOf(String name)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static edu.stanford.nlp.pipeline.TokensRegexNERAnnotator$PosMatchType[] values()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalRelations$ClausalComplementGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.Counters$6</name>
		<wmc>18</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>32</rfc>
		<lcom>81</lcom>
		<ca>3</ca>
		<ce>7</ce>
		<npm>17</npm>
		<lcom3>0.5294117647058824</lcom3>
		<loc>100</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.2962962962962963</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.5</amc>
		<cc>
			<method name="public void clear()">1</method>
			<method name="public double logIncrementCount(Object key, double value)">1</method>
			<method name="public java.util.Set keySet()">1</method>
			<method name="public double remove(Object key)">1</method>
			<method name="public double getCount(Object key)">1</method>
			<method name="public edu.stanford.nlp.util.Factory getFactory()">1</method>
			<method name="public void prettyLog(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels channels, String description)">1</method>
			<method name="public java.util.Set entrySet()">1</method>
			<method name="public boolean containsKey(Object key)">1</method>
			<method name="void _init_(edu.stanford.nlp.stats.Counter)">0</method>
			<method name="public int size()">1</method>
			<method name="public double totalCount()">1</method>
			<method name="public void setDefaultReturnValue(double rv)">1</method>
			<method name="public double defaultReturnValue()">1</method>
			<method name="public double incrementCount(Object key)">1</method>
			<method name="public void setCount(Object key, double value)">1</method>
			<method name="public double incrementCount(Object key, double value)">1</method>
			<method name="public java.util.Collection values()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.dvparser.DVModel$3</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>35</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>33.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.objectbank.LineIterator$LineIteratorFactory</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>6</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>0.75</lcom3>
		<loc>24</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.333333333333333</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.util.Function op)">0</method>
			<method name="public void _init_()">0</method>
			<method name="public java.util.Iterator getIterator(java.io.Reader r)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.CoNLL2011DocumentReader$CorpusStats</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>12</cbo>
		<rfc>42</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>12</ce>
		<npm>3</npm>
		<lcom3>0.5</lcom3>
		<loc>616</loc>
		<dam>0.0</dam>
		<moa>6</moa>
		<mfa>0.0</mfa>
		<cam>0.3333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>120.0</amc>
		<cc>
			<method name="private static void appendIntCountStats(StringBuilder sb, String label, edu.stanford.nlp.stats.IntCounter counts)">2</method>
			<method name="public void _init_()">0</method>
			<method name="public String toString()">1</method>
			<method name="private static void appendFrac(StringBuilder sb, String label, int num, int den)">1</method>
			<method name="public void process(edu.stanford.nlp.dcoref.CoNLL2011DocumentReader$Document doc)">12</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTimeMain$TimexAttributes</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>26</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>17.0</amc>
		<cc>
			<method name="public void _init_(String tid, int sentIndex, int tokenIndex)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$DayAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.TwoDimensionalIntCounter</name>
		<wmc>46</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>103</rfc>
		<lcom>655</lcom>
		<ca>1</ca>
		<ce>8</ce>
		<npm>46</npm>
		<lcom3>0.6074074074074074</lcom3>
		<loc>1069</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.17193675889328064</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>22.108695652173914</amc>
		<cc>
			<method name="public void defaultReturnValue(int rv)">1</method>
			<method name="public boolean equals(Object o)">3</method>
			<method name="public edu.stanford.nlp.stats.IntCounter totalCounts()">2</method>
			<method name="public edu.stanford.nlp.stats.IntCounter getCounter(Object o)">2</method>
			<method name="public void subtractAll(edu.stanford.nlp.stats.TwoDimensionalIntCounter c, boolean removeKeys)">3</method>
			<method name="public java.util.Set secondKeySet()">2</method>
			<method name="public void incrementCount(Object o1, Object o2, double count)">1</method>
			<method name="public void incrementCount(Object o1, Object o2, int count)">1</method>
			<method name="public boolean containsKey(Object o1, Object o2)">2</method>
			<method name="public String toCSVString(java.text.NumberFormat nf)">4</method>
			<method name="public java.util.Set entrySet()">1</method>
			<method name="public String toMatrixString(int cellSize)">1</method>
			<method name="public int size()">2</method>
			<method name="public void _init_(edu.stanford.nlp.util.MapFactory outerFactory, edu.stanford.nlp.util.MapFactory innerFactory, int initialCapacity)">0</method>
			<method name="public void subtractAll(Object key, edu.stanford.nlp.stats.IntCounter c)">1</method>
			<method name="public void addAll(edu.stanford.nlp.stats.TwoDimensionalIntCounter c)">2</method>
			<method name="public void _init_(int initialCapacity)">0</method>
			<method name="public void clean()">3</method>
			<method name="public void addAll(Object key, edu.stanford.nlp.stats.IntCounter c)">1</method>
			<method name="public edu.stanford.nlp.stats.IntCounter flatten()">2</method>
			<method name="public int defaultReturnValue()">1</method>
			<method name="public void decrementCount(Object o1, Object o2)">1</method>
			<method name="public int[][] toMatrix(java.util.List firstKeys, java.util.List secondKeys)">3</method>
			<method name="public void decrementCount(Object o1, Object o2, double count)">1</method>
			<method name="public String toString()">2</method>
			<method name="public edu.stanford.nlp.stats.IntCounter setCounter(Object o, edu.stanford.nlp.stats.IntCounter c)">1</method>
			<method name="public int remove(Object o1, Object o2)">2</method>
			<method name="public void decrementCount(Object o1, Object o2, int count)">1</method>
			<method name="public static edu.stanford.nlp.stats.TwoDimensionalIntCounter reverseIndexOrder(edu.stanford.nlp.stats.TwoDimensionalIntCounter cc)">2</method>
			<method name="public void _init_()">0</method>
			<method name="public boolean isEmpty()">1</method>
			<method name="public void incrementCount(Object o1, Object o2)">1</method>
			<method name="public static String toCSVString(edu.stanford.nlp.stats.TwoDimensionalIntCounter counter, java.text.NumberFormat nf, java.util.Comparator key1Comparator, java.util.Comparator key2Comparator)">4</method>
			<method name="public edu.stanford.nlp.util.MapFactory getInnerMapFactory()">1</method>
			<method name="public void setCount(Object o1, Object o2, double count)">1</method>
			<method name="public void setCount(Object o1, Object o2, int count)">1</method>
			<method name="public void defaultReturnValue(double rv)">1</method>
			<method name="public int hashCode()">1</method>
			<method name="public edu.stanford.nlp.util.MapFactory getOuterMapFactory()">1</method>
			<method name="public void remove(Object key)">2</method>
			<method name="public void _init_(edu.stanford.nlp.util.MapFactory outerFactory, edu.stanford.nlp.util.MapFactory innerFactory)">0</method>
			<method name="public void removeZeroCounts()">2</method>
			<method name="public java.util.Set firstKeySet()">1</method>
			<method name="public int getCount(Object o1, Object o2)">3</method>
			<method name="public int totalCount()">1</method>
			<method name="public int totalCount(Object k1)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.dvparser.DVModel</name>
		<wmc>38</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>30</cbo>
		<rfc>129</rfc>
		<lcom>81</lcom>
		<ca>5</ca>
		<ce>25</ce>
		<npm>33</npm>
		<lcom3>0.8362480127186009</lcom3>
		<loc>3043</loc>
		<dam>0.08823529411764706</dam>
		<moa>5</moa>
		<mfa>0.0</mfa>
		<cam>0.11411411411411411</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>78.1842105263158</amc>
		<cc>
			<method name="public void printMatrixStats(java.io.PrintStream out)">2</method>
			<method name="public edu.stanford.nlp.util.Pair indexToBinaryScore(int pos)">5</method>
			<method name="public org.ejml.simple.SimpleMatrix getStartWordVector()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private org.ejml.simple.SimpleMatrix randomTransformMatrix()">2</method>
			<method name="public edu.stanford.nlp.util.Pair indexToBinaryTransform(int pos)">4</method>
			<method name="public org.ejml.simple.SimpleMatrix getScoreWForNode(edu.stanford.nlp.trees.Tree node)">3</method>
			<method name="public void setRulesForTrainingSet(java.util.List sentences, java.util.Map compressedTrees)">4</method>
			<method name="public void printParameterType(int pos, java.io.PrintStream out)">5</method>
			<method name="public int unaryTransformIndex(String child)">3</method>
			<method name="public int binaryTransformIndex(String leftChild, String rightChild)">4</method>
			<method name="public void printMatrixNames(java.io.PrintStream out)">3</method>
			<method name="private org.ejml.simple.SimpleMatrix randomContextMatrix()">1</method>
			<method name="private void searchRulesForBatch(edu.stanford.nlp.util.TwoDimensionalSet binaryRules, java.util.Set unaryRules, java.util.Set words, edu.stanford.nlp.trees.Tree tree)">5</method>
			<method name="public void printAllMatrices(java.io.PrintStream out)">5</method>
			<method name="public org.ejml.simple.SimpleMatrix getUnknownWordVector()">1</method>
			<method name="public void _init_(edu.stanford.nlp.util.TwoDimensionalMap binaryTransform, java.util.Map unaryTransform, edu.stanford.nlp.util.TwoDimensionalMap binaryScore, java.util.Map unaryScore, java.util.Map wordVectors, edu.stanford.nlp.parser.lexparser.Options op)">0</method>
			<method name="public void vectorToParams(double[] theta)">1</method>
			<method name="public String basicCategory(String category)">4</method>
			<method name="public void addRandomUnaryMatrix(String childBasic)">3</method>
			<method name="public void filterRulesForBatch(java.util.Map compressedTrees)">2</method>
			<method name="public String indexToUnaryTransform(int pos)">5</method>
			<method name="public double[] paramsToVector(double scale)">1</method>
			<method name="public String indexToUnaryScore(int pos)">5</method>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.Options op, edu.stanford.nlp.util.Index stateIndex, edu.stanford.nlp.parser.lexparser.UnaryGrammar unaryGrammar, edu.stanford.nlp.parser.lexparser.BinaryGrammar binaryGrammar)">0</method>
			<method name="public void filterRulesForBatch(edu.stanford.nlp.util.TwoDimensionalSet binaryRules, java.util.Set unaryRules, java.util.Set words)">12</method>
			<method name="public String getVocabWord(String word)">18</method>
			<method name="public org.ejml.simple.SimpleMatrix getWForNode(edu.stanford.nlp.trees.Tree node)">3</method>
			<method name="public org.ejml.simple.SimpleMatrix getWordVector(String word)">1</method>
			<method name="private void readObject(java.io.ObjectInputStream in)">1</method>
			<method name="public int binaryScoreIndex(String leftChild, String rightChild)">4</method>
			<method name="public int unaryScoreIndex(String child)">3</method>
			<method name="public void filterRulesForBatch(java.util.Collection trees)">2</method>
			<method name="public void readWordVectors()">32</method>
			<method name="public int totalParamSize()">1</method>
			<method name="public org.ejml.simple.SimpleMatrix getEndWordVector()">1</method>
			<method name="public double[] paramsToVector()">1</method>
			<method name="public void addRandomBinaryMatrix(String leftBasic, String rightBasic)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.Span</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>10</rfc>
		<lcom>10</lcom>
		<ca>4</ca>
		<ce>3</ce>
		<npm>5</npm>
		<lcom3>2.0</lcom3>
		<loc>31</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.2</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public boolean equals(edu.stanford.nlp.trees.Span sp)">3</method>
			<method name="public void _init_(int start, int end)">0</method>
			<method name="public static edu.stanford.nlp.trees.ConstituentFactory factory()">1</method>
			<method name="public edu.stanford.nlp.trees.ConstituentFactory constituentFactory()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequenceMatcher$BasicMatchReplacement</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>6</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>23</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.333333333333333</amc>
		<cc>
			<method name="public void _init_(java.util.List replacement)">0</method>
			<method name="public transient void _init_(Object[] replacement)">0</method>
			<method name="public void append(edu.stanford.nlp.ling.tokensregex.SequenceMatchResult match, java.util.List list)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.Scorer</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>2</rfc>
		<lcom>1</lcom>
		<ca>9</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>2</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract double score(edu.stanford.nlp.classify.ProbabilisticClassifier, edu.stanford.nlp.classify.GeneralDataset)">1</method>
			<method name="public abstract String getDescription(int)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequencePattern$SequenceEndPatternExpr</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>4</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>17</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.666666666666667</amc>
		<cc>
			<method name="public edu.stanford.nlp.ling.tokensregex.SequencePattern$State create()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public volatile Object create()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.international.french.process.FrenchTokenizer</name>
		<wmc>9</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>13</cbo>
		<rfc>55</rfc>
		<lcom>30</lcom>
		<ca>2</ca>
		<ce>12</ce>
		<npm>4</npm>
		<lcom3>0.8125</lcom3>
		<loc>377</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.15873015873015872</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>40.44444444444444</amc>
		<cc>
			<method name="private static String usage()">1</method>
			<method name="public static void main(String[] args)">6</method>
			<method name="protected volatile Object getNext()">1</method>
			<method name="private static java.util.Map argOptionDefs()">1</method>
			<method name="public static edu.stanford.nlp.process.TokenizerFactory ftbFactory()">1</method>
			<method name="protected edu.stanford.nlp.ling.HasWord getNext()">9</method>
			<method name="public static edu.stanford.nlp.process.TokenizerFactory factory()">1</method>
			<method name="private edu.stanford.nlp.ling.CoreLabel processCompound(edu.stanford.nlp.ling.CoreLabel cl)">2</method>
			<method name="public void _init_(java.io.Reader r, edu.stanford.nlp.process.LexedTokenFactory tf, java.util.Properties lexerProperties, boolean splitCompounds)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.GrammaticalRelation$RootGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$Range</name>
		<wmc>29</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>33</cbo>
		<rfc>62</rfc>
		<lcom>58</lcom>
		<ca>21</ca>
		<ce>18</ce>
		<npm>29</npm>
		<lcom3>0.5089285714285714</lcom3>
		<loc>688</loc>
		<dam>0.25</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.24568965517241378</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>22.586206896551722</amc>
		<cc>
			<method name="public edu.stanford.nlp.time.SUTime$Range add(edu.stanford.nlp.time.SUTime$Duration d, int flags)">5</method>
			<method name="public edu.stanford.nlp.util.Interval getInterval()">1</method>
			<method name="public volatile edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time x0, int x1)">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Time end()">1</method>
			<method name="public boolean contains(edu.stanford.nlp.time.SUTime$Range r)">1</method>
			<method name="public volatile edu.stanford.nlp.time.SUTime$Temporal setTimeZone(org.joda.time.DateTimeZone x0)">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Range getRange(int flags, edu.stanford.nlp.time.SUTime$Duration granularity)">1</method>
			<method name="public java.util.Map getTimexAttributes(edu.stanford.nlp.time.SUTime$TimeIndex timeIndex)">5</method>
			<method name="public edu.stanford.nlp.time.SUTime$Time endTime()">1</method>
			<method name="public void _init_(edu.stanford.nlp.time.SUTime$Time begin, edu.stanford.nlp.time.SUTime$Time end, edu.stanford.nlp.time.SUTime$Duration duration)">0</method>
			<method name="public edu.stanford.nlp.time.SUTime$Time begin()">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Range add(edu.stanford.nlp.time.SUTime$Duration d)">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Range setTimeZone(org.joda.time.DateTimeZone tz)">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Range offset(edu.stanford.nlp.time.SUTime$Duration d, int offsetFlags, int rangeFlags)">5</method>
			<method name="public void _init_(edu.stanford.nlp.time.SUTime$Time begin, edu.stanford.nlp.time.SUTime$Time end)">0</method>
			<method name="public edu.stanford.nlp.time.SUTime$Range resolve(edu.stanford.nlp.time.SUTime$Time refTime, int flags)">10</method>
			<method name="public edu.stanford.nlp.time.SUTime$Time getTime()">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Time beginTime()">4</method>
			<method name="public void _init_(edu.stanford.nlp.time.SUTime$Range r, edu.stanford.nlp.time.SUTime$Time begin, edu.stanford.nlp.time.SUTime$Time end, edu.stanford.nlp.time.SUTime$Duration duration)">0</method>
			<method name="public edu.stanford.nlp.time.SUTime$Duration getDuration()">1</method>
			<method name="public org.joda.time.Interval getJodaTimeInterval()">1</method>
			<method name="public boolean isGrounded()">3</method>
			<method name="public String toFormattedString(int flags)">16</method>
			<method name="public edu.stanford.nlp.time.SUTime$Range offset(edu.stanford.nlp.time.SUTime$Duration d, int offsetFlags)">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Temporal intersect(edu.stanford.nlp.time.SUTime$Temporal t)">4</method>
			<method name="public edu.stanford.nlp.time.SUTime$TimexType getTimexType()">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Range subtract(edu.stanford.nlp.time.SUTime$Duration d)">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Time mid()">9</method>
			<method name="public edu.stanford.nlp.time.SUTime$Range subtract(edu.stanford.nlp.time.SUTime$Duration d, int flags)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.french.FrenchTreeNormalizer</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>13</cbo>
		<rfc>40</rfc>
		<lcom>6</lcom>
		<ca>3</ca>
		<ce>11</ce>
		<npm>4</npm>
		<lcom3>1.0</lcom3>
		<loc>234</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>45.4</amc>
		<cc>
			<method name="public edu.stanford.nlp.trees.Tree normalizeWholeTree(edu.stanford.nlp.trees.Tree tree, edu.stanford.nlp.trees.TreeFactory tf)">11</method>
			<method name="public void _init_()">0</method>
			<method name="public String normalizeNonterminal(String category)">1</method>
			<method name="private String normalizePreterminal(edu.stanford.nlp.trees.Tree t)">2</method>
			<method name="public String normalizeTerminal(String terminal)">4</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalRelations$PhrasalVerbParticleGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.SimpleTreeFactory</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>1</noc>
		<cbo>6</cbo>
		<rfc>8</rfc>
		<lcom>10</lcom>
		<ca>2</ca>
		<ce>4</ce>
		<npm>5</npm>
		<lcom3>2.0</lcom3>
		<loc>28</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.55</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.6</amc>
		<cc>
			<method name="public edu.stanford.nlp.trees.Tree newTreeNode(edu.stanford.nlp.ling.Label parentLabel, java.util.List children)">1</method>
			<method name="public edu.stanford.nlp.trees.Tree newLeaf(edu.stanford.nlp.ling.Label word)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public edu.stanford.nlp.trees.Tree newTreeNode(String parent, java.util.List children)">1</method>
			<method name="public edu.stanford.nlp.trees.Tree newLeaf(String word)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.objectbank.DelimitRegExIterator$DelimitRegExIteratorFactory</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>6</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>0.5</lcom3>
		<loc>32</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.666666666666666</amc>
		<cc>
			<method name="public void _init_(String delim, edu.stanford.nlp.util.Function op)">0</method>
			<method name="public java.util.Iterator getIterator(java.io.Reader r)">1</method>
			<method name="public static edu.stanford.nlp.objectbank.DelimitRegExIterator$DelimitRegExIteratorFactory defaultDelimitRegExIteratorFactory(String delim)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.RerankingParserQuery</name>
		<wmc>26</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>54</rfc>
		<lcom>161</lcom>
		<ca>1</ca>
		<ce>10</ce>
		<npm>25</npm>
		<lcom3>0.8133333333333332</lcom3>
		<loc>322</loc>
		<dam>1.0</dam>
		<moa>4</moa>
		<mfa>0.0</mfa>
		<cam>0.1623931623931624</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.153846153846153</amc>
		<cc>
			<method name="public boolean parseAndReport(java.util.List sentence, java.io.PrintWriter pwErr)">3</method>
			<method name="public void restoreOriginalWords(edu.stanford.nlp.trees.Tree tree)">1</method>
			<method name="public edu.stanford.nlp.trees.Tree getBestParse()">3</method>
			<method name="public edu.stanford.nlp.parser.KBestViterbiParser getFactoredParser()">1</method>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.Options op, edu.stanford.nlp.parser.lexparser.ParserQuery parserQuery, edu.stanford.nlp.parser.lexparser.Reranker reranker)">0</method>
			<method name="public edu.stanford.nlp.parser.KBestViterbiParser getPCFGParser()">1</method>
			<method name="public boolean parseSkipped()">1</method>
			<method name="public boolean parseNoMemory()">1</method>
			<method name="public boolean saidMemMessage()">1</method>
			<method name="public java.util.List getKBestPCFGParses(int kbestPCFG)">3</method>
			<method name="public edu.stanford.nlp.parser.KBestViterbiParser getDependencyParser()">1</method>
			<method name="public boolean parseSucceeded()">1</method>
			<method name="public void setConstraints(java.util.List constraints)">1</method>
			<method name="public edu.stanford.nlp.parser.lexparser.RerankerQuery rerankerQuery()">1</method>
			<method name="public java.util.List getBestPCFGParses()">5</method>
			<method name="public double getPCFGScore()">3</method>
			<method name="public java.util.List getKGoodFactoredParses(int kbest)">1</method>
			<method name="public boolean parse(java.util.List sentence)">3</method>
			<method name="public edu.stanford.nlp.trees.Tree getBestFactoredParse()">1</method>
			<method name="public edu.stanford.nlp.trees.Tree getBestPCFGParse()">1</method>
			<method name="public java.util.List originalSentence()">1</method>
			<method name="public boolean hasFactoredParse()">1</method>
			<method name="public boolean parseFallback()">1</method>
			<method name="public boolean parseUnparsable()">1</method>
			<method name="java.util.List rerank(java.util.List sentence, java.util.List bestKParses)">2</method>
			<method name="public edu.stanford.nlp.trees.Tree getBestDependencyParse(boolean debinarize)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser$LookaheadSuccess</name>
		<wmc>2</wmc>
		<dit>3</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>8</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>1.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser$1 x0)">0</method>
			<method name="private void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequencePattern$NodePatternState</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>9</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>5</ce>
		<npm>0</npm>
		<lcom3>0.0</lcom3>
		<loc>66</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>31.5</amc>
		<cc>
			<method name="protected void _init_(edu.stanford.nlp.ling.tokensregex.NodePattern p)">0</method>
			<method name="protected boolean match(int bid, edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates matchedStates, boolean consume, edu.stanford.nlp.ling.tokensregex.SequencePattern$State prevState)">7</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.dvparser.DVModelReranker$Query</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>13</cbo>
		<rfc>16</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>13</ce>
		<npm>3</npm>
		<lcom3>0.375</lcom3>
		<loc>70</loc>
		<dam>0.75</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>21.0</amc>
		<cc>
			<method name="public double score(edu.stanford.nlp.trees.Tree tree)">2</method>
			<method name="public java.util.List getDeepTrees()">1</method>
			<method name="public void _init_(edu.stanford.nlp.parser.dvparser.DVModelReranker)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.Annotator$Requirement</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>17</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>17</ca>
		<ce>0</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>12</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.5</amc>
		<cc>
			<method name="public void _init_(String name)">0</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.classify.NBLinearClassifierFactory</name>
		<wmc>9</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>23</rfc>
		<lcom>20</lcom>
		<ca>2</ca>
		<ce>5</ce>
		<npm>4</npm>
		<lcom3>0.8214285714285714</lcom3>
		<loc>459</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3055555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>49.22222222222222</amc>
		<cc>
			<method name="double[][] trainWeights(int[][] data, int[] labels)">8</method>
			<method name="double[][] weights(int[][] data, int[] labels, int testMin, int testMax, double trialSigma, int foldSize)">9</method>
			<method name="private void tuneSigma(int[][] data, int[] labels)">1</method>
			<method name="public void _init_(double sigma, boolean interpretAlwaysOnFeatureAsPrior)">0</method>
			<method name="public void _init_()">0</method>
			<method name="public void setTuneSigmaCV(int folds)">1</method>
			<method name="static int access$000(edu.stanford.nlp.classify.NBLinearClassifierFactory x0)">1</method>
			<method name="protected double[][] trainWeights(edu.stanford.nlp.classify.GeneralDataset data)">1</method>
			<method name="public void _init_(double sigma)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.AnnotationLookup$OldFeatureLabelKeys</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>1.8837209302325582</lcom3>
		<loc>59</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.0</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Filters$NegatedFilter</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>10</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>4</npm>
		<lcom3>0.5555555555555555</lcom3>
		<loc>42</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.75</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.util.Filter filter, boolean negated)">0</method>
			<method name="public boolean accept(Object o)">1</method>
			<method name="public String toString()">1</method>
			<method name="public void _init_(edu.stanford.nlp.util.Filter filter)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.crf.CRFNonLinearSecondOrderLogConditionalObjectiveFunction</name>
		<wmc>14</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>50</rfc>
		<lcom>7</lcom>
		<ca>1</ca>
		<ce>10</ce>
		<npm>7</npm>
		<lcom3>0.7903846153846155</lcom3>
		<loc>2947</loc>
		<dam>0.075</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.23076923076923078</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>206.64285714285714</amc>
		<cc>
			<method name="private double[][] emptyU()">5</method>
			<method name="static void _clinit_()">0</method>
			<method name="private double[][] emptyU4Edge()">5</method>
			<method name="public edu.stanford.nlp.util.Quadruple separateWeights(double[] x)">13</method>
			<method name="void _init_(int[][][][] data, int[][] labels, int window, edu.stanford.nlp.util.Index classIndex, java.util.List labelIndices, int[] map, int prior, edu.stanford.nlp.sequences.SeqClassifierFlags flags, int numNodeFeatures, int numEdgeFeatures)">0</method>
			<method name="private double[][] emptyW4Edge()">2</method>
			<method name="public static int getPriorType(String priorTypeStr)">6</method>
			<method name="public edu.stanford.nlp.ie.crf.CliquePotentialFunction getCliquePotentialFunction(double[] x)">1</method>
			<method name="public int domainDimension()">6</method>
			<method name="public double[][] emptyFull2D()">2</method>
			<method name="private double[][] emptyW()">2</method>
			<method name="public void calculate(double[] x)">93</method>
			<method name="void _init_(int[][][][] data, int[][] labels, int window, edu.stanford.nlp.util.Index classIndex, java.util.List labelIndices, int[] map, edu.stanford.nlp.sequences.SeqClassifierFlags flags, int numNodeFeatures, int numEdgeFeatures)">0</method>
			<method name="public double[] initial()">26</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.HasWord</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>42</cbo>
		<rfc>2</rfc>
		<lcom>1</lcom>
		<ca>42</ca>
		<ce>0</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>2</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract void setWord(String)">1</method>
			<method name="public abstract String word()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.io.TaggedFileReader</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>8</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract String filename()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.metrics.LeafAncestorEval</name>
		<wmc>10</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>13</cbo>
		<rfc>87</rfc>
		<lcom>29</lcom>
		<ca>1</ca>
		<ce>12</ce>
		<npm>4</npm>
		<lcom3>0.7647058823529412</lcom3>
		<loc>1158</loc>
		<dam>0.9411764705882353</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.2638888888888889</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>113.1</amc>
		<cc>
			<method name="private int editDistance(java.util.List l1, java.util.List l2)">6</method>
			<method name="public static void main(String[] args)">10</method>
			<method name="private String toString(java.util.List lineage)">2</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void display(boolean verbose, java.io.PrintWriter pw)">7</method>
			<method name="public void evaluate(edu.stanford.nlp.trees.Tree guess, edu.stanford.nlp.trees.Tree gold, java.io.PrintWriter pw)">6</method>
			<method name="private java.util.List makeLineages(edu.stanford.nlp.trees.Tree t)">7</method>
			<method name="public void _init_(String str)">0</method>
			<method name="private void updateCatAverages(java.util.List lineage, double score)">2</method>
			<method name="private static boolean validateCommandLine(String[] args)">8</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.FilteringTreeReader</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>7</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>0.25</lcom3>
		<loc>31</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.666666666666666</amc>
		<cc>
			<method name="public void close()">1</method>
			<method name="public edu.stanford.nlp.trees.Tree readTree()">1</method>
			<method name="public void _init_(edu.stanford.nlp.trees.TreeReader tr, edu.stanford.nlp.util.Filter f)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Index</name>
		<wmc>16</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>123</cbo>
		<rfc>16</rfc>
		<lcom>120</lcom>
		<ca>123</ca>
		<ce>0</ce>
		<npm>16</npm>
		<lcom3>2.0</lcom3>
		<loc>16</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.1875</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract int size()">1</method>
			<method name="public abstract void saveToFilename(String)">1</method>
			<method name="public abstract void lock()">1</method>
			<method name="public abstract java.util.Collection objects(int[])">1</method>
			<method name="public abstract boolean addAll(java.util.Collection)">1</method>
			<method name="public abstract Object get(int)">1</method>
			<method name="public abstract int indexOf(Object)">1</method>
			<method name="public abstract void saveToWriter(java.io.Writer)">1</method>
			<method name="public abstract Object[] toArray(Object[])">1</method>
			<method name="public abstract void unlock()">1</method>
			<method name="public abstract boolean contains(Object)">1</method>
			<method name="public abstract int indexOf(Object, boolean)">1</method>
			<method name="public abstract boolean add(Object)">1</method>
			<method name="public abstract boolean isLocked()">1</method>
			<method name="public abstract void clear()">1</method>
			<method name="public abstract java.util.List objectsList()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.BaseLexicon</name>
		<wmc>40</wmc>
		<dit>1</dit>
		<noc>2</noc>
		<cbo>29</cbo>
		<rfc>149</rfc>
		<lcom>446</lcom>
		<ca>7</ca>
		<ce>22</ce>
		<npm>31</npm>
		<lcom3>0.8500388500388499</lcom3>
		<loc>2433</loc>
		<dam>0.8181818181818182</dam>
		<moa>9</moa>
		<mfa>0.0</mfa>
		<cam>0.11605937921727395</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>59.0</amc>
		<cc>
			<method name="public boolean isKnown(int word)">4</method>
			<method name="protected java.util.List treeToEvents(edu.stanford.nlp.trees.Tree tree)">1</method>
			<method name="protected void addTagging(boolean seen, edu.stanford.nlp.parser.lexparser.IntTaggedWord itw, double count)">4</method>
			<method name="public final void trainUnannotated(java.util.List sentence, double weight)">5</method>
			<method name="public void writeData(java.io.Writer w)">1</method>
			<method name="public void finishTraining()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void addAll(java.util.List tagWords)">1</method>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.Options op, edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex)">0</method>
			<method name="void buildPT_T()">6</method>
			<method name="public final void setUnknownWordModel(edu.stanford.nlp.parser.lexparser.UnknownWordModel uwm)">1</method>
			<method name="public void printLexStats()">15</method>
			<method name="public java.util.Iterator ruleIteratorByWord(String word, int loc)">1</method>
			<method name="public void _init_(edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex)">0</method>
			<method name="public void train(edu.stanford.nlp.ling.TaggedWord tw, int loc, double weight)">2</method>
			<method name="public edu.stanford.nlp.parser.lexparser.UnknownWordModel getUnknownWordModel()">1</method>
			<method name="public final void train(java.util.List sentence, double weight)">2</method>
			<method name="public float score(edu.stanford.nlp.parser.lexparser.IntTaggedWord iTW, int loc, String word, String featureSpec)">14</method>
			<method name="public final void incrementTreesRead(double weight)">1</method>
			<method name="public void train(java.util.Collection trees, java.util.Collection rawTrees)">1</method>
			<method name="public int numRules()">2</method>
			<method name="public void trainWithExpansion(java.util.Collection taggedWords)">1</method>
			<method name="public double evaluateCoverage(java.util.Collection trees, java.util.Set missingWords, java.util.Set missingTags, java.util.Set missingTW)">5</method>
			<method name="public java.util.Iterator ruleIteratorByWord(int word, int loc, String featureSpec)">5</method>
			<method name="public java.util.Iterator ruleIteratorByWord(String word, int loc, String featureSpec)">1</method>
			<method name="protected java.util.List listToEvents(java.util.List taggedWords)">2</method>
			<method name="public void train(java.util.Collection trees, double weight)">2</method>
			<method name="public void initializeTraining(double numTrees)">1</method>
			<method name="public int getBaseTag(int tag, edu.stanford.nlp.trees.TreebankLanguagePack tlp)">2</method>
			<method name="public boolean isKnown(String word)">3</method>
			<method name="public void train(java.util.Collection trees)">1</method>
			<method name="protected void initRulesWithWord()">8</method>
			<method name="public static void main(String[] args)">8</method>
			<method name="public void addAll(java.util.List taggedWords, double weight)">1</method>
			<method name="public void train(edu.stanford.nlp.trees.Tree tree, double weight)">1</method>
			<method name="private void populateTagsToBaseTags(edu.stanford.nlp.trees.TreebankLanguagePack tlp)">2</method>
			<method name="private void readObject(java.io.ObjectInputStream ois)">1</method>
			<method name="public final void tune()">8</method>
			<method name="public void readData(java.io.BufferedReader in)">1</method>
			<method name="protected static void examineIntersection(java.util.Set s1, java.util.Set s2)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.parser.ParseException</name>
		<wmc>5</wmc>
		<dit>3</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>20</rfc>
		<lcom>4</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>3</npm>
		<lcom3>0.95</lcom3>
		<loc>381</loc>
		<dam>0.4</dam>
		<moa>1</moa>
		<mfa>0.9130434782608695</mfa>
		<cam>0.44</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>74.2</amc>
		<cc>
			<method name="static String add_escapes(String str)">14</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.parser.Token currentTokenVal, int[][] expectedTokenSequencesVal, String[] tokenImageVal)">0</method>
			<method name="public void _init_(String message)">0</method>
			<method name="private static String initialise(edu.stanford.nlp.ling.tokensregex.parser.Token currentToken, int[][] expectedTokenSequences, String[] tokenImage)">9</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.CoreMapNodePattern$StringAnnotationPattern</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>15</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>1</ce>
		<npm>6</npm>
		<lcom3>0.0</lcom3>
		<loc>60</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4583333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.833333333333334</amc>
		<cc>
			<method name="public void _init_(String str, int flags)">0</method>
			<method name="public boolean match(String str)">3</method>
			<method name="public void _init_(String str)">0</method>
			<method name="public volatile boolean match(Object x0)">1</method>
			<method name="public String getString()">1</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$HasIthChild</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>20</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>7</ce>
		<npm>2</npm>
		<lcom3>0.7</lcom3>
		<loc>100</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.3333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.333333333333334</amc>
		<cc>
			<method name="public boolean equals(Object o)">7</method>
			<method name="public int hashCode()">2</method>
			<method name="void _init_(int i)">0</method>
			<method name="static edu.stanford.nlp.trees.tregex.Relation$IthChildOf access$1100(edu.stanford.nlp.trees.tregex.Relation$HasIthChild x0)">1</method>
			<method name="java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">1</method>
			<method name="boolean satisfies(edu.stanford.nlp.trees.Tree t1, edu.stanford.nlp.trees.Tree t2, edu.stanford.nlp.trees.Tree root, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.Counters$2</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>7</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>35</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.333333333333334</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="void _init_(edu.stanford.nlp.stats.Counter)">0</method>
			<method name="public int compare(Comparable o1, Comparable o2)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.classify.SVMLightClassifierFactory</name>
		<wmc>36</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>28</cbo>
		<rfc>119</rfc>
		<lcom>466</lcom>
		<ca>5</ca>
		<ce>26</ce>
		<npm>30</npm>
		<lcom3>0.8685714285714285</lcom3>
		<loc>1081</loc>
		<dam>0.95</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.15598290598290598</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>28.47222222222222</amc>
		<cc>
			<method name="public edu.stanford.nlp.classify.SVMLightClassifier trainClassifierBasic(edu.stanford.nlp.classify.GeneralDataset dataset)">21</method>
			<method name="public boolean getDeleteTempFilesOnExitFlag()">1</method>
			<method name="public void setHeldOutPercent(double heldOutPercent)">1</method>
			<method name="public void setDeleteTempFilesOnExitFlag(boolean deleteTempFilesOnExit)">1</method>
			<method name="public void setC(double C)">1</method>
			<method name="public void crossValidateSetC(edu.stanford.nlp.classify.GeneralDataset dataset, int numFolds, edu.stanford.nlp.stats.Scorer scorer, edu.stanford.nlp.optimization.LineSearcher minimizer)">1</method>
			<method name="public void _init_(String svmLightLearn, String svmStructLearn)">0</method>
			<method name="private edu.stanford.nlp.stats.ClassicCounter convertSVMStructWeights(edu.stanford.nlp.stats.ClassicCounter weights, edu.stanford.nlp.util.Index featureIndex, edu.stanford.nlp.util.Index labelIndex)">2</method>
			<method name="public void setFolds(int folds)">1</method>
			<method name="public double getC()">1</method>
			<method name="public edu.stanford.nlp.optimization.LineSearcher getTuneMinimizer()">1</method>
			<method name="private edu.stanford.nlp.stats.ClassicCounter convertWeights(edu.stanford.nlp.stats.ClassicCounter weights, edu.stanford.nlp.util.Index featureIndex, edu.stanford.nlp.util.Index labelIndex, boolean multiclass)">2</method>
			<method name="public void heldOutSetC(edu.stanford.nlp.classify.GeneralDataset trainSet, edu.stanford.nlp.classify.GeneralDataset devSet, edu.stanford.nlp.stats.Scorer scorer, edu.stanford.nlp.optimization.LineSearcher minimizer)">1</method>
			<method name="public boolean getTuneHeldOut()">1</method>
			<method name="public volatile edu.stanford.nlp.classify.Classifier trainClassifier(java.util.List x0)">1</method>
			<method name="public int getSvmLightVerbosity()">1</method>
			<method name="public void setScorer(edu.stanford.nlp.stats.Scorer scorer)">1</method>
			<method name="public void setUseSigmoid(boolean useSigmoid)">1</method>
			<method name="public volatile edu.stanford.nlp.classify.Classifier trainClassifier(edu.stanford.nlp.classify.GeneralDataset x0)">1</method>
			<method name="public void setTuneCV(boolean tuneCV)">1</method>
			<method name="public edu.stanford.nlp.classify.SVMLightClassifier trainClassifier(java.util.List examples)">1</method>
			<method name="private static edu.stanford.nlp.util.Pair readModel(java.io.File modelFile, boolean multiclass)">7</method>
			<method name="public int getFolds()">1</method>
			<method name="public void setSvmLightVerbosity(int svmLightVerbosity)">1</method>
			<method name="public void setTuneHeldOut(boolean tuneHeldOut)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void heldOutSetC(edu.stanford.nlp.classify.GeneralDataset train, double percentHeldOut, edu.stanford.nlp.stats.Scorer scorer, edu.stanford.nlp.optimization.LineSearcher minimizer)">1</method>
			<method name="public edu.stanford.nlp.classify.SVMLightClassifier trainClassifier(edu.stanford.nlp.classify.GeneralDataset dataset)">3</method>
			<method name="public edu.stanford.nlp.stats.Scorer getScorer()">1</method>
			<method name="public double getHeldOutPercent()">1</method>
			<method name="public void setTuneMinimizer(edu.stanford.nlp.optimization.LineSearcher minimizer)">1</method>
			<method name="private edu.stanford.nlp.classify.LinearClassifier fitSigmoid(edu.stanford.nlp.classify.SVMLightClassifier classifier, edu.stanford.nlp.classify.GeneralDataset dataset)">2</method>
			<method name="public boolean getTuneCV()">1</method>
			<method name="private edu.stanford.nlp.stats.ClassicCounter convertSVMLightWeights(edu.stanford.nlp.stats.ClassicCounter weights, edu.stanford.nlp.util.Index featureIndex, edu.stanford.nlp.util.Index labelIndex)">2</method>
			<method name="public boolean getUseSigma()">1</method>
			<method name="private static edu.stanford.nlp.stats.ClassicCounter getWeights(java.util.List supportVectors)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.ExtractorsConjunction</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>15</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>2</npm>
		<lcom3>0.75</lcom3>
		<loc>91</loc>
		<dam>0.6</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.36</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.2</amc>
		<cc>
			<method name="String extract(edu.stanford.nlp.tagger.maxent.History h, edu.stanford.nlp.tagger.maxent.PairsHolder pH)">3</method>
			<method name="public boolean isLocal()">1</method>
			<method name="public boolean isDynamic()">1</method>
			<method name="protected void setGlobalHolder(edu.stanford.nlp.tagger.maxent.MaxentTagger tagger)">1</method>
			<method name="void _init_(edu.stanford.nlp.tagger.maxent.Extractor e1, edu.stanford.nlp.tagger.maxent.Extractor e2)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.Counters$1</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>5</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>19</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.0</amc>
		<cc>
			<method name="public int compare(Object o1, Object o2)">1</method>
			<method name="void _init_(edu.stanford.nlp.stats.Counter)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.classify.GeneralDataset$1</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>9</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>4</npm>
		<lcom3>0.375</lcom3>
		<loc>51</loc>
		<dam>0.5</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.8</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.classify.GeneralDataset)">0</method>
			<method name="public edu.stanford.nlp.ling.RVFDatum next()">2</method>
			<method name="public boolean hasNext()">2</method>
			<method name="public void remove()">1</method>
			<method name="public volatile Object next()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.process.WhitespaceTokenizer$WhitespaceTokenizerFactory</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>13</rfc>
		<lcom>8</lcom>
		<ca>2</ca>
		<ce>7</ce>
		<npm>8</npm>
		<lcom3>0.07142857142857142</lcom3>
		<loc>88</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.425</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.75</amc>
		<cc>
			<method name="public void setOptions(String options)">1</method>
			<method name="public void _init_(edu.stanford.nlp.process.LexedTokenFactory factory, boolean tokenizeNLs)">0</method>
			<method name="public edu.stanford.nlp.process.Tokenizer getTokenizer(java.io.Reader r)">1</method>
			<method name="public void _init_(edu.stanford.nlp.process.LexedTokenFactory factory, String options)">0</method>
			<method name="public void _init_(edu.stanford.nlp.process.LexedTokenFactory factory)">0</method>
			<method name="public static edu.stanford.nlp.process.TokenizerFactory newTokenizerFactory()">1</method>
			<method name="public java.util.Iterator getIterator(java.io.Reader r)">1</method>
			<method name="public edu.stanford.nlp.process.Tokenizer getTokenizer(java.io.Reader r, String extraOptions)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$TemporalOp</name>
		<wmc>9</wmc>
		<dit>2</dit>
		<noc>18</noc>
		<cbo>34</cbo>
		<rfc>35</rfc>
		<lcom>34</lcom>
		<ca>32</ca>
		<ce>21</ce>
		<npm>6</npm>
		<lcom3>0.993421052631579</lcom3>
		<loc>286</loc>
		<dam>0.05263157894736842</dam>
		<moa>19</moa>
		<mfa>0.6842105263157895</mfa>
		<cam>0.30357142857142855</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>28.666666666666668</amc>
		<cc>
			<method name="public static edu.stanford.nlp.time.SUTime$TemporalOp valueOf(String name)">1</method>
			<method name="public transient edu.stanford.nlp.time.SUTime$Temporal apply(Object[] args)">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal arg1, edu.stanford.nlp.time.SUTime$Temporal arg2)">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal arg1, edu.stanford.nlp.time.SUTime$Temporal arg2, int flags)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public transient edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal[] args)">2</method>
			<method name="void _init_(String x0, int x1, edu.stanford.nlp.time.SUTime$1 x2)">0</method>
			<method name="public static edu.stanford.nlp.time.SUTime$TemporalOp[] values()">1</method>
			<method name="private void _init_(String, int)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.Counters$4</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>6</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>70</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>32.5</amc>
		<cc>
			<method name="void _init_(boolean, boolean, edu.stanford.nlp.stats.Counter)">0</method>
			<method name="public int compare(Object o1, Object o2)">4</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.Counters$3</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>5</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>19</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.0</amc>
		<cc>
			<method name="public int compare(Object o1, Object o2)">1</method>
			<method name="void _init_(edu.stanford.nlp.stats.Counter)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.sequences.SequenceListener</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>2</rfc>
		<lcom>1</lcom>
		<ca>7</ca>
		<ce>0</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>2</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.8333333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract void setInitialSequence(int[])">1</method>
			<method name="public abstract void updateSequenceElement(int[], int, int)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.sentiment.SentimentPipeline$Input</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.888888888888889</lcom3>
		<loc>45</loc>
		<dam>0.3333333333333333</dam>
		<moa>3</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>9.5</amc>
		<cc>
			<method name="public static edu.stanford.nlp.sentiment.SentimentPipeline$Input[] values()">1</method>
			<method name="public static edu.stanford.nlp.sentiment.SentimentPipeline$Input valueOf(String name)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates</name>
		<wmc>32</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>21</cbo>
		<rfc>77</rfc>
		<lcom>182</lcom>
		<ca>16</ca>
		<ce>9</ce>
		<npm>0</npm>
		<lcom3>0.6129032258064516</lcom3>
		<loc>703</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.1953125</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>20.8125</amc>
		<cc>
			<method name="static void access$000(edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates x0, int x1)">1</method>
			<method name="static java.util.Collection access$100(edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates x0)">1</method>
			<method name="private void clean()">1</method>
			<method name="protected void addStates(int bid, java.util.Collection newStates)">2</method>
			<method name="static void access$600(edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates x0)">1</method>
			<method name="protected java.util.List elements()">1</method>
			<method name="private void swapAndClear()">1</method>
			<method name="protected edu.stanford.nlp.ling.tokensregex.SequenceMatcher$BranchStates getBranchStates()">1</method>
			<method name="private void _init_(edu.stanford.nlp.ling.tokensregex.SequenceMatcher matcher, edu.stanford.nlp.ling.tokensregex.SequenceMatcher$BranchStates branchStates)">0</method>
			<method name="private boolean isMatch()">2</method>
			<method name="protected edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates split(int branchLimit)">4</method>
			<method name="static boolean access$200(edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates x0, int x1)">1</method>
			<method name="protected void clearGroupStart(int bid, int captureGroupId)">1</method>
			<method name="private void setMatchedGroups(int matchStateIndex)">8</method>
			<method name="protected Object get()">1</method>
			<method name="protected int branchSize()">1</method>
			<method name="private int selectMatchIndex()">5</method>
			<method name="private void completeMatch()">1</method>
			<method name="protected void setGroupStart(int bid, int captureGroupId)">1</method>
			<method name="private boolean match(int position)">5</method>
			<method name="protected void setGroupEnd(int bid, int captureGroupId, Object value)">1</method>
			<method name="static boolean access$300(edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates x0)">1</method>
			<method name="protected void _init_(edu.stanford.nlp.ling.tokensregex.SequenceMatcher matcher, edu.stanford.nlp.ling.tokensregex.SequencePattern$State state)">0</method>
			<method name="private void swap()">1</method>
			<method name="private boolean isAllMatch()">2</method>
			<method name="protected int size()">1</method>
			<method name="private int getMatchIndex()">3</method>
			<method name="protected int compareMatches(int bid1, int bid2)">7</method>
			<method name="protected void addState(int bid, edu.stanford.nlp.ling.tokensregex.SequencePattern$State state)">1</method>
			<method name="static boolean access$400(edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates x0)">1</method>
			<method name="private java.util.Collection getMatchIndices()">3</method>
			<method name="static void access$500(edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor$Stage</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>13</rfc>
		<lcom>28</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>0.9523809523809524</lcom3>
		<loc>129</loc>
		<dam>0.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.46875</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>14.375</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="private void addBasicRule(edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$ExtractRule rule)">1</method>
			<method name="private void addCompositeRule(edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$ExtractRule rule)">1</method>
			<method name="static void access$200(edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor$Stage x0, edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$ExtractRule x1)">1</method>
			<method name="static void access$100(edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor$Stage x0, edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$ExtractRule x1)">1</method>
			<method name="private edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$ExtractRule addRule(edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$ExtractRule origRule, edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$ExtractRule rule)">3</method>
			<method name="static void access$000(edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor$Stage x0, edu.stanford.nlp.util.Filter x1)">1</method>
			<method name="private void addFilterRule(edu.stanford.nlp.util.Filter rule)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Iterables$5$1</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>8</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>3</npm>
		<lcom3>0.16666666666666666</lcom3>
		<loc>76</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>17.5</amc>
		<cc>
			<method name="public boolean hasNext()">3</method>
			<method name="public void remove()">1</method>
			<method name="public Object next()">3</method>
			<method name="void _init_(edu.stanford.nlp.util.Iterables$5)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.CorefCoreAnnotations</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams$ArabicSubcategoryStripper</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>32</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>8</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>167</loc>
		<dam>0.5</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>81.5</amc>
		<cc>
			<method name="protected void _init_(edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams)">0</method>
			<method name="public edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree tree)">12</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalRelations$PrepositionalObjectGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalRelations$DvpModifierGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$ChineseOrigSegAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.NERFeatureFactory$Bin6Annotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.crf.CRFClassifierWithLOP</name>
		<wmc>7</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>13</cbo>
		<rfc>58</rfc>
		<lcom>13</lcom>
		<ca>1</ca>
		<ce>13</ce>
		<npm>2</npm>
		<lcom3>0.7777777777777777</lcom3>
		<loc>681</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>95.85714285714286</amc>
		<cc>
			<method name="protected double[] trainWeights(int[][][][] data, int[][] labels, edu.stanford.nlp.optimization.Evaluator[] evaluators, int pruneFeatureItr, double[][][][] featureVals)">14</method>
			<method name="protected void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void _init_(java.util.Properties props)">0</method>
			<method name="private void getFeatureBoundaryIndices(int numFeatures, int numLopExpert)">7</method>
			<method name="private int[][][][] createPartialDataForLOP(int lopIter, int[][][][] data)">7</method>
			<method name="public void _init_(edu.stanford.nlp.sequences.SeqClassifierFlags flags)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.process.PTBLexer$UntokenizableOptions</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.9523809523809524</lcom3>
		<loc>89</loc>
		<dam>0.14285714285714285</dam>
		<moa>7</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>19.5</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="public static edu.stanford.nlp.process.PTBLexer$UntokenizableOptions valueOf(String name)">1</method>
			<method name="public static edu.stanford.nlp.process.PTBLexer$UntokenizableOptions[] values()">1</method>
			<method name="private void _init_(String, int)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.TimeExpression$1</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>8</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>40</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.333333333333334</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="public edu.stanford.nlp.time.TimeExpression apply(edu.stanford.nlp.ling.tokensregex.MatchedExpression in)">4</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.international.arabic.ArabicMorphoFeatureSpecification</name>
		<wmc>7</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>44</rfc>
		<lcom>7</lcom>
		<ca>4</ca>
		<ce>4</ce>
		<npm>4</npm>
		<lcom3>0.7083333333333334</lcom3>
		<loc>774</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>107.28571428571429</amc>
		<cc>
			<method name="public static void main(String[] args)">4</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="private void processInflectionalFeatures(edu.stanford.nlp.international.morph.MorphoFeatures feats, String spec)">2</method>
			<method name="public edu.stanford.nlp.international.morph.MorphoFeatures strToFeatures(String spec)">37</method>
			<method name="public java.util.List getValues(edu.stanford.nlp.international.morph.MorphoFeatureSpecification$MorphoFeatureType feat)">10</method>
			<method name="private void processInflectionalFeaturesHelper(edu.stanford.nlp.international.morph.MorphoFeatures feats, String spec)">12</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.wordseg.TagAffixDetector</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>16</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>206</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>66.66666666666667</amc>
		<cc>
			<method name="String checkDic(String t2, String c2)">2</method>
			<method name="String checkInDic(String c2)">2</method>
			<method name="public void _init_(edu.stanford.nlp.sequences.SeqClassifierFlags flags)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.TimeExpression$2</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>6</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>29</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.333333333333334</amc>
		<cc>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.util.CoreMap in)">1</method>
			<method name="public volatile Object apply(Object x0)">1</method>
			<method name="void _init_(edu.stanford.nlp.util.Function)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.Extractor</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>4</rfc>
		<lcom>6</lcom>
		<ca>5</ca>
		<ce>1</ce>
		<npm>4</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract void train(edu.stanford.nlp.pipeline.Annotation)">1</method>
			<method name="public abstract void setLoggerLevel(java.util.logging.Level)">1</method>
			<method name="public abstract void annotate(edu.stanford.nlp.pipeline.Annotation)">1</method>
			<method name="public abstract void save(String)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.classify.RVFDataset</name>
		<wmc>52</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>21</cbo>
		<rfc>164</rfc>
		<lcom>460</lcom>
		<ca>8</ca>
		<ce>16</ce>
		<npm>46</npm>
		<lcom3>0.8823529411764706</lcom3>
		<loc>2930</loc>
		<dam>0.625</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.10348583877995643</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>55.19230769230769</amc>
		<cc>
			<method name="public void clear()">1</method>
			<method name="public void selectFeaturesFromSet(java.util.Set featureSet)">6</method>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="public void add(edu.stanford.nlp.ling.Datum d, String src, String id)">2</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void writeSVMLightFormat(java.io.PrintWriter writer)">3</method>
			<method name="public static edu.stanford.nlp.classify.RVFDataset readSVMLightFormat(String filename, java.util.List lines)">1</method>
			<method name="public void printSparseFeatureValues(int datumNo, java.io.PrintWriter pw)">4</method>
			<method name="public void summaryStatistics()">3</method>
			<method name="public String getRVFDatumId(int index)">1</method>
			<method name="public edu.stanford.nlp.ling.RVFDatum getRVFDatum(int index)">2</method>
			<method name="private void addFeatures(edu.stanford.nlp.stats.Counter features)">6</method>
			<method name="public volatile edu.stanford.nlp.ling.Datum getDatum(int x0)">1</method>
			<method name="public void _init_(edu.stanford.nlp.util.Index labelIndex, int[] labels, edu.stanford.nlp.util.Index featureIndex, int[][] data, double[][] values)">0</method>
			<method name="public String toSummaryString()">3</method>
			<method name="public void clear(int numDatums)">1</method>
			<method name="public double[][] getValuesArray()">2</method>
			<method name="public void printFullFeatureMatrixWithValues(java.io.PrintWriter pw)">6</method>
			<method name="public void _init_(int numDatums, edu.stanford.nlp.util.Index featureIndex, edu.stanford.nlp.util.Index labelIndex)">0</method>
			<method name="public void add(edu.stanford.nlp.ling.Datum d)">2</method>
			<method name="public void ensureRealValues()">5</method>
			<method name="private void addLabel(Object label)">2</method>
			<method name="public void applyFeatureCountThreshold(int k)">7</method>
			<method name="public String toString()">1</method>
			<method name="public edu.stanford.nlp.classify.RVFDataset scaleDatasetGaussian(edu.stanford.nlp.classify.RVFDataset dataset)">2</method>
			<method name="public edu.stanford.nlp.util.Pair split(int start, int end)">1</method>
			<method name="public edu.stanford.nlp.ling.RVFDatum scaleDatum(edu.stanford.nlp.ling.RVFDatum datum)">5</method>
			<method name="public edu.stanford.nlp.classify.RVFDataset scaleDataset(edu.stanford.nlp.classify.RVFDataset dataset)">2</method>
			<method name="public void printSparseFeatureMatrix()">1</method>
			<method name="public void _init_(edu.stanford.nlp.util.Index featureIndex, edu.stanford.nlp.util.Index labelIndex)">0</method>
			<method name="public void writeSVMLightFormat(java.io.File file)">1</method>
			<method name="public void readSVMLightFormat(java.io.File file)">3</method>
			<method name="public void _init_()">0</method>
			<method name="public void scaleFeatures()">11</method>
			<method name="public void printSparseFeatureMatrix(java.io.PrintWriter pw)">3</method>
			<method name="public edu.stanford.nlp.util.Pair split(double percentDev)">1</method>
			<method name="public void _init_(int numDatums)">0</method>
			<method name="public void randomize(int randomSeed)">2</method>
			<method name="public static edu.stanford.nlp.classify.RVFDataset readSVMLightFormat(String filename, edu.stanford.nlp.util.Index featureIndex, edu.stanford.nlp.util.Index labelIndex)">1</method>
			<method name="public void scaleFeaturesGaussian()">11</method>
			<method name="public void applyFeatureMaxCountThreshold(int k)">7</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="public void printFullFeatureMatrix(java.io.PrintWriter pw)">6</method>
			<method name="private void addSourceAndId(String src, String id)">1</method>
			<method name="public String getRVFDatumSource(int index)">1</method>
			<method name="protected void initialize(int numDatums)">1</method>
			<method name="public static edu.stanford.nlp.ling.RVFDatum svmLightLineToRVFDatum(String l)">3</method>
			<method name="public static edu.stanford.nlp.classify.RVFDataset readSVMLightFormat(String filename)">1</method>
			<method name="public edu.stanford.nlp.ling.RVFDatum scaleDatumGaussian(edu.stanford.nlp.ling.RVFDatum datum)">5</method>
			<method name="public edu.stanford.nlp.ling.RVFDatum getDatum(int index)">1</method>
			<method name="public void printSparseFeatureValues(java.io.PrintWriter pw)">2</method>
			<method name="private static edu.stanford.nlp.classify.RVFDataset readSVMLightFormat(String filename, edu.stanford.nlp.util.Index featureIndex, edu.stanford.nlp.util.Index labelIndex, java.util.List lines)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.FrenchTreebankParserParams$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.GrammaticalStructure$LazyLoadTreesByParsing$1</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>18</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>4</npm>
		<lcom3>0.41666666666666663</lcom3>
		<loc>110</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4666666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>20.4</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.trees.GrammaticalStructure$LazyLoadTreesByParsing, java.io.BufferedReader)">0</method>
			<method name="public edu.stanford.nlp.trees.Tree next()">4</method>
			<method name="public boolean hasNext()">3</method>
			<method name="public void remove()">1</method>
			<method name="public volatile Object next()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.MapFactory$ArrayMapFactory</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>9</rfc>
		<lcom>15</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>4</npm>
		<lcom3>1.2</lcom3>
		<loc>33</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4583333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.333333333333333</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public java.util.Map setMap(java.util.Map map)">1</method>
			<method name="public java.util.Map newMap()">1</method>
			<method name="void _init_(edu.stanford.nlp.util.MapFactory$1 x0)">0</method>
			<method name="public java.util.Map newMap(int initCapacity)">1</method>
			<method name="public java.util.Map setMap(java.util.Map map, int initCapacity)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.TreeGraphNodeFactory</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>11</rfc>
		<lcom>9</lcom>
		<ca>2</ca>
		<ce>6</ce>
		<npm>6</npm>
		<lcom3>0.4</lcom3>
		<loc>43</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.43333333333333335</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="public edu.stanford.nlp.trees.Tree newTreeNode(edu.stanford.nlp.ling.Label parentLabel, java.util.List children)">1</method>
			<method name="public void _init_(edu.stanford.nlp.ling.LabelFactory mlf)">0</method>
			<method name="public void _init_()">0</method>
			<method name="public edu.stanford.nlp.trees.Tree newLeaf(edu.stanford.nlp.ling.Label label)">1</method>
			<method name="public edu.stanford.nlp.trees.Tree newTreeNode(String parent, java.util.List children)">1</method>
			<method name="public edu.stanford.nlp.trees.Tree newLeaf(String word)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.PairsHolder</name>
		<wmc>11</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>42</cbo>
		<rfc>22</rfc>
		<lcom>0</lcom>
		<ca>41</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>132</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.41818181818181815</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.909090909090908</amc>
		<cc>
			<method name="public void setSize(int s)">2</method>
			<method name="String getWord(edu.stanford.nlp.tagger.maxent.History h, int position)">3</method>
			<method name="void setTag(int pos, String tag)">1</method>
			<method name="void setWord(int pos, String word)">1</method>
			<method name="void clear()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public int getSize()">1</method>
			<method name="String getWord(int position)">1</method>
			<method name="String getTag(edu.stanford.nlp.tagger.maxent.History h, int position)">3</method>
			<method name="String getTag(int position)">1</method>
			<method name="void add(edu.stanford.nlp.ling.WordTag wordtag)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.CorefMentionFinder</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>6</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract java.util.List extractPredictedMentions(edu.stanford.nlp.pipeline.Annotation, int, edu.stanford.nlp.dcoref.Dictionaries)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequencePattern$BackRefPatternExpr</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>16</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>2</npm>
		<lcom3>0.4</lcom3>
		<loc>89</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4166666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.5</amc>
		<cc>
			<method name="protected void updateBindings(edu.stanford.nlp.ling.tokensregex.SequencePattern$VarGroupBindings bindings)">1</method>
			<method name="protected int assignGroupIds(int start)">1</method>
			<method name="protected edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr copy()">1</method>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.SequencePattern$NodesMatchChecker matcher, int captureGroupId)">0</method>
			<method name="protected edu.stanford.nlp.ling.tokensregex.SequencePattern$Frag build()">1</method>
			<method name="public String toString()">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.CoreMapNodePattern</name>
		<wmc>19</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>17</cbo>
		<rfc>67</rfc>
		<lcom>127</lcom>
		<ca>4</ca>
		<ce>13</ce>
		<npm>17</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>658</loc>
		<dam>0.6666666666666666</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.1574074074074074</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>33.473684210526315</amc>
		<cc>
			<method name="public transient void _init_(edu.stanford.nlp.util.Pair[] annotationPatterns)">0</method>
			<method name="public static edu.stanford.nlp.ling.tokensregex.CoreMapNodePattern valueOf(String textAnnotationPattern)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static edu.stanford.nlp.ling.tokensregex.NodePattern newStringRegexPattern(String regex, int flags)">6</method>
			<method name="public Object matchWithResult(edu.stanford.nlp.util.CoreMap token)">2</method>
			<method name="public static edu.stanford.nlp.ling.tokensregex.CoreMapNodePattern valueOf(edu.stanford.nlp.ling.tokensregex.Env env, String textAnnotationPattern)">2</method>
			<method name="public volatile Object matchWithResult(Object x0)">1</method>
			<method name="protected boolean match(edu.stanford.nlp.util.CoreMap token, java.util.Map matchResults)">3</method>
			<method name="public static edu.stanford.nlp.ling.tokensregex.CoreMapNodePattern valueOf(String textAnnotationPattern, int flags)">1</method>
			<method name="public void _init_(java.util.List annotationPatterns)">0</method>
			<method name="public void add(Class c, edu.stanford.nlp.ling.tokensregex.NodePattern pattern)">1</method>
			<method name="public static edu.stanford.nlp.ling.tokensregex.CoreMapNodePattern valueOf(java.util.regex.Pattern textAnnotationPattern)">1</method>
			<method name="public static edu.stanford.nlp.ling.tokensregex.CoreMapNodePattern valueOf(edu.stanford.nlp.ling.tokensregex.Env env, java.util.Map attributes)">24</method>
			<method name="public volatile boolean match(Object x0)">1</method>
			<method name="public boolean match(edu.stanford.nlp.util.CoreMap token)">2</method>
			<method name="public void _init_(Class key, edu.stanford.nlp.ling.tokensregex.NodePattern pattern)">0</method>
			<method name="public String toString()">3</method>
			<method name="public static edu.stanford.nlp.ling.tokensregex.CoreMapNodePattern valueOf(java.util.Map attributes)">1</method>
			<method name="public java.util.List getAnnotationPatterns()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.TwoDimensionalMap$Entry</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>10</rfc>
		<lcom>0</lcom>
		<ca>9</ca>
		<ce>0</ce>
		<npm>4</npm>
		<lcom3>0.5</lcom3>
		<loc>51</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.6</amc>
		<cc>
			<method name="public Object getSecondKey()">1</method>
			<method name="void _init_(Object k1, Object k2, Object v)">0</method>
			<method name="public String toString()">1</method>
			<method name="public Object getValue()">1</method>
			<method name="public Object getFirstKey()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.ParserAnnotator</name>
		<wmc>16</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>29</cbo>
		<rfc>81</rfc>
		<lcom>84</lcom>
		<ca>3</ca>
		<ce>27</ce>
		<npm>10</npm>
		<lcom3>0.6799999999999999</lcom3>
		<loc>899</loc>
		<dam>0.9</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.2111111111111111</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>54.5625</amc>
		<cc>
			<method name="private void doOneSentence(edu.stanford.nlp.util.CoreMap sentence)">8</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void _init_(boolean verbose, int maxSent)">0</method>
			<method name="private static edu.stanford.nlp.parser.lexparser.LexicalizedParser loadModel(String parserLoc, boolean verbose, String[] flags)">2</method>
			<method name="public java.util.Set requires()">1</method>
			<method name="public java.util.Set requirementsSatisfied()">2</method>
			<method name="public void _init_(String parserLoc, boolean verbose, int maxSent, String[] flags)">0</method>
			<method name="public static String signature(String annotatorName, java.util.Properties props)">1</method>
			<method name="private edu.stanford.nlp.trees.Tree doOneSentence(java.util.List words)">4</method>
			<method name="private edu.stanford.nlp.trees.Tree doOneSentence(java.util.List constraints, java.util.List words)">1</method>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.LexicalizedParser parser, boolean verbose, int maxSent)">0</method>
			<method name="public void annotate(edu.stanford.nlp.pipeline.Annotation annotation)">6</method>
			<method name="static void access$000(edu.stanford.nlp.pipeline.ParserAnnotator x0, edu.stanford.nlp.util.CoreMap x1)">1</method>
			<method name="public void _init_(String annotatorName, java.util.Properties props)">0</method>
			<method name="public static String[] convertFlagsToArray(String parserFlags)">3</method>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.LexicalizedParser parser, boolean verbose, int maxSent, edu.stanford.nlp.util.Function treeMap)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.fsm.FastExactAutomatonMinimizer$Block</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>12</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.5</amc>
		<cc>
			<method name="public void _init_(java.util.Set members)">0</method>
			<method name="public java.util.Set getMembers()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.process.CoreTokenFactory</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>3</rfc>
		<lcom>3</lcom>
		<ca>5</ca>
		<ce>1</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>3</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract edu.stanford.nlp.util.CoreMap makeToken(edu.stanford.nlp.util.CoreMap)">1</method>
			<method name="public abstract edu.stanford.nlp.util.CoreMap makeToken(String[], String[])">1</method>
			<method name="public abstract edu.stanford.nlp.util.CoreMap makeToken()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.BasicEntityExtractor</name>
		<wmc>22</wmc>
		<dit>1</dit>
		<noc>1</noc>
		<cbo>14</cbo>
		<rfc>96</rfc>
		<lcom>139</lcom>
		<ca>2</ca>
		<ce>13</ce>
		<npm>18</npm>
		<lcom3>0.8373015873015872</lcom3>
		<loc>1425</loc>
		<dam>0.8333333333333334</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.21428571428571427</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>63.22727272727273</amc>
		<cc>
			<method name="public static edu.stanford.nlp.ie.machinereading.BasicEntityExtractor load(String path, Class entityClassifier, boolean preferDefaultGazetteer)">1</method>
			<method name="public void setLoggerLevel(java.util.logging.Level level)">1</method>
			<method name="public void save(String path)">1</method>
			<method name="public void _init_(String gazetteerLocation, boolean useSubTypes, java.util.Set annotationsToSkip, boolean useBIO, edu.stanford.nlp.ie.machinereading.structure.EntityMentionFactory factory, boolean useNERTags)">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void setAnnotationsToSkip(java.util.Set annotationsToSkip)">1</method>
			<method name="public String getEntityTypeForTag(String tag)">1</method>
			<method name="public static String makeEntityMentionIdentifier(edu.stanford.nlp.util.CoreMap sentence, int sentCount, int entId)">2</method>
			<method name="private edu.stanford.nlp.ie.crf.CRFClassifier createClassifier()">2</method>
			<method name="public static void saveCoNLLFiles(String dir, edu.stanford.nlp.pipeline.Annotation dataset, boolean useSubTypes, boolean alreadyBIO)">1</method>
			<method name="public void runTestSet(java.util.List testSet)">7</method>
			<method name="public void makeAnnotationFromAllNERTags(edu.stanford.nlp.util.CoreMap sentence)">10</method>
			<method name="public static String labeledSentenceToString(java.util.List labeledSentence, boolean printNer)">4</method>
			<method name="public void makeAnnotationFromGivenNERTag(edu.stanford.nlp.util.CoreMap sentence, String nerTag, String entityType)">9</method>
			<method name="public void postprocessSentence(edu.stanford.nlp.util.CoreMap sentence, int sentCount)">1</method>
			<method name="private edu.stanford.nlp.util.CoreMap extractEntities(edu.stanford.nlp.util.CoreMap sentence, int sentCount)">17</method>
			<method name="public void annotate(edu.stanford.nlp.pipeline.Annotation doc)">3</method>
			<method name="public void makeEntityMention(edu.stanford.nlp.util.CoreMap sentence, int start, int end, String label, java.util.List entities, int sentCount)">3</method>
			<method name="public static void saveCoNLL(java.io.PrintStream os, java.util.List sentences, boolean alreadyBIO)">8</method>
			<method name="public void train(edu.stanford.nlp.pipeline.Annotation doc)">2</method>
			<method name="private static boolean notBIO(String label)">3</method>
			<method name="public edu.stanford.nlp.ie.machinereading.structure.EntityMention makeEntityMention(edu.stanford.nlp.util.CoreMap sentence, int start, int end, String label, String identifier)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$CoarseTagAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.tsurgeon.AdjoinToFootNode</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>10</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>69</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>33.5</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.trees.tregex.tsurgeon.AuxiliaryTree t, edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern p)">0</method>
			<method name="public edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.tregex.TregexMatcher m)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.StringParsingTask</name>
		<wmc>17</wmc>
		<dit>1</dit>
		<noc>1</noc>
		<cbo>2</cbo>
		<rfc>27</rfc>
		<lcom>112</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.45833333333333337</lcom3>
		<loc>263</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.45098039215686275</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>14.294117647058824</amc>
		<cc>
			<method name="protected boolean isRightParen(char ch)">2</method>
			<method name="protected char read()">3</method>
			<method name="protected char peek()">1</method>
			<method name="public void _init_(String s)">0</method>
			<method name="protected void readDot()">2</method>
			<method name="protected void readWhiteSpace()">3</method>
			<method name="protected boolean isPunct(char ch)">3</method>
			<method name="public abstract Object parse()">1</method>
			<method name="protected boolean isWhiteSpace(char ch)">6</method>
			<method name="protected String readName()">4</method>
			<method name="protected void unread()">1</method>
			<method name="protected boolean isDot(char ch)">2</method>
			<method name="protected String readJavaIdentifier()">5</method>
			<method name="protected void readLeftParen()">2</method>
			<method name="protected boolean isEOF()">1</method>
			<method name="protected boolean isLeftParen(char ch)">2</method>
			<method name="protected void readRightParen()">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.CorefScorer$SubScoreType</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>3</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.9166666666666666</lcom3>
		<loc>56</loc>
		<dam>0.25</dam>
		<moa>4</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>12.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static edu.stanford.nlp.dcoref.CorefScorer$SubScoreType valueOf(String name)">1</method>
			<method name="public static edu.stanford.nlp.dcoref.CorefScorer$SubScoreType[] values()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.TimeFormatter$JavaDateFormatExtractor</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>12</rfc>
		<lcom>2</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>3</npm>
		<lcom3>0.3333333333333333</lcom3>
		<loc>51</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.25</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="public void _init_(String pattern)">0</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.util.CoreMap m)">1</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.ACEMentionExtractor$EntityComparator</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>7</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>47</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.75</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="public int compare(edu.stanford.nlp.ie.machinereading.structure.EntityMention m1, edu.stanford.nlp.ie.machinereading.structure.EntityMention m2)">5</method>
			<method name="private void _init_()">0</method>
			<method name="void _init_(edu.stanford.nlp.dcoref.ACEMentionExtractor$1 x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.HasIndex</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>6</rfc>
		<lcom>15</lcom>
		<ca>8</ca>
		<ce>0</ce>
		<npm>6</npm>
		<lcom3>2.0</lcom3>
		<loc>6</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract void setIndex(int)">1</method>
			<method name="public abstract void setDocID(String)">1</method>
			<method name="public abstract int index()">1</method>
			<method name="public abstract String docID()">1</method>
			<method name="public abstract void setSentIndex(int)">1</method>
			<method name="public abstract int sentIndex()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.GeneralizedCounter$Entry</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>16</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>6</npm>
		<lcom3>0.3333333333333333</lcom3>
		<loc>101</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.7142857142857143</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>13.142857142857142</amc>
		<cc>
			<method name="public Object setValue(Object value)">1</method>
			<method name="public boolean equals(Object o)">7</method>
			<method name="public int hashCode()">3</method>
			<method name="public Object getKey()">1</method>
			<method name="public String toString()">1</method>
			<method name="public Object getValue()">1</method>
			<method name="void _init_(Object key, Object value)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.DeltaCollectionValuedMap$1$2</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>1.25</lcom3>
		<loc>24</loc>
		<dam>0.5</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.333333333333333</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.util.DeltaCollectionValuedMap$1)">0</method>
			<method name="public boolean accept(java.util.Map$Entry e)">2</method>
			<method name="public volatile boolean accept(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalRelations$MultiWordExpressionGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.CGMinimizer</name>
		<wmc>16</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>37</rfc>
		<lcom>110</lcom>
		<ca>3</ca>
		<ce>5</ce>
		<npm>7</npm>
		<lcom3>0.9743589743589743</lcom3>
		<loc>1215</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.26666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>74.125</amc>
		<cc>
			<method name="private static edu.stanford.nlp.optimization.CGMinimizer$Triple mnbrak(edu.stanford.nlp.optimization.CGMinimizer$Triple abc, edu.stanford.nlp.optimization.CGMinimizer$OneDimDiffFunction function)">9</method>
			<method name="static double[] copyArray(double[] a)">2</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="private static double fabs(double x)">2</method>
			<method name="double[] lineMinimize(edu.stanford.nlp.optimization.DiffFunction function, double[] initial, double[] direction)">9</method>
			<method name="public void _init_(boolean silent)">0</method>
			<method name="public volatile double[] minimize(edu.stanford.nlp.optimization.Function x0, double x1, double[] x2)">1</method>
			<method name="private static double fmax(double x, double y)">2</method>
			<method name="public void _init_(edu.stanford.nlp.optimization.Function monitor)">0</method>
			<method name="private static String arrayToString(double[] x, int num)">5</method>
			<method name="private static double dbrent(edu.stanford.nlp.optimization.CGMinimizer$OneDimDiffFunction function, double ax, double bx, double cx)">35</method>
			<method name="public double[] minimize(edu.stanford.nlp.optimization.DiffFunction function, double functionTolerance, double[] initial)">1</method>
			<method name="public volatile double[] minimize(edu.stanford.nlp.optimization.Function x0, double x1, double[] x2, int x3)">1</method>
			<method name="private static double sign(double x, double y)">2</method>
			<method name="public double[] minimize(edu.stanford.nlp.optimization.DiffFunction dfunction, double functionTolerance, double[] initial, int maxIterations)">17</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.DeltaCollectionValuedMap$1$1</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>7</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>0.75</lcom3>
		<loc>30</loc>
		<dam>0.5</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.333333333333334</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.util.DeltaCollectionValuedMap$1)">0</method>
			<method name="public boolean accept(java.util.Map$Entry e)">2</method>
			<method name="public volatile boolean accept(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.net.ClasspathURLStreamHandler</name>
		<wmc>2</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>11</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.9230769230769231</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public java.net.URLConnection openConnection(java.net.URL u)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.sentiment.SentimentPipeline</name>
		<wmc>10</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>15</cbo>
		<rfc>74</rfc>
		<lcom>39</lcom>
		<ca>0</ca>
		<ce>15</ce>
		<npm>4</npm>
		<lcom3>0.5555555555555556</lcom3>
		<loc>864</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.18888888888888888</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>85.3</amc>
		<cc>
			<method name="static int outputTreeScores(java.io.PrintStream out, edu.stanford.nlp.trees.Tree tree, int index)">4</method>
			<method name="static int outputTreeVectors(java.io.PrintStream out, edu.stanford.nlp.trees.Tree tree, int index)">4</method>
			<method name="static void setSentimentLabels(edu.stanford.nlp.trees.Tree tree)">4</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="static int setIndexLabels(edu.stanford.nlp.trees.Tree tree, int index)">3</method>
			<method name="static void outputTree(java.io.PrintStream out, edu.stanford.nlp.util.CoreMap sentence, java.util.List outputFormats)">3</method>
			<method name="public static edu.stanford.nlp.pipeline.Annotation getAnnotation(edu.stanford.nlp.sentiment.SentimentPipeline$Input inputFormat, String filename, boolean filterUnknown)">6</method>
			<method name="public static void help()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$WebAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.MachineReadingProperties</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>1.2888888888888888</lcom3>
		<loc>117</loc>
		<dam>0.4</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>35.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.classify.LogisticClassifier</name>
		<wmc>33</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>28</cbo>
		<rfc>95</rfc>
		<lcom>178</lcom>
		<ca>7</ca>
		<ce>22</ce>
		<npm>30</npm>
		<lcom3>0.6354166666666667</lcom3>
		<loc>930</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.1292929292929293</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>27.0</amc>
		<cc>
			<method name="public edu.stanford.nlp.stats.Counter weightsAsCounter()">2</method>
			<method name="public void _init_(edu.stanford.nlp.classify.LogPrior prior, boolean biased)">0</method>
			<method name="public edu.stanford.nlp.stats.Counter scoresOf(edu.stanford.nlp.ling.Datum datum)">2</method>
			<method name="public Object getLabelForInternalNegativeClass()">1</method>
			<method name="public Object classOf(edu.stanford.nlp.stats.Counter features)">2</method>
			<method name="public Object classOf(java.util.Collection features)">2</method>
			<method name="public void train(edu.stanford.nlp.classify.GeneralDataset data, double l1reg, double tol)">7</method>
			<method name="public double probabilityOf(edu.stanford.nlp.ling.Datum example)">2</method>
			<method name="public Object classOf(edu.stanford.nlp.ling.Datum datum)">2</method>
			<method name="private Object classOfRVFDatum(edu.stanford.nlp.ling.RVFDatum example)">1</method>
			<method name="public edu.stanford.nlp.stats.Counter justificationOf(java.util.Collection features)">2</method>
			<method name="public void train(edu.stanford.nlp.classify.GeneralDataset data)">1</method>
			<method name="public double scoreOf(edu.stanford.nlp.stats.Counter features)">2</method>
			<method name="public java.util.Collection labels()">1</method>
			<method name="public String toString()">3</method>
			<method name="public void trainWeightedData(edu.stanford.nlp.classify.GeneralDataset data, float[] dataWeights)">4</method>
			<method name="private edu.stanford.nlp.stats.Counter scoresOfRVFDatum(edu.stanford.nlp.ling.RVFDatum example)">1</method>
			<method name="public double probabilityOf(edu.stanford.nlp.ling.RVFDatum example)">1</method>
			<method name="public void _init_(double[] weights, edu.stanford.nlp.util.Index featureIndex, Object[] classes)">0</method>
			<method name="public Object classOf(edu.stanford.nlp.ling.RVFDatum example)">1</method>
			<method name="public void _init_(boolean biased)">0</method>
			<method name="public edu.stanford.nlp.util.Index getFeatureIndex()">1</method>
			<method name="public Object getLabelForInternalPositiveClass()">1</method>
			<method name="public double probabilityOf(edu.stanford.nlp.stats.Counter features, Object label)">2</method>
			<method name="public edu.stanford.nlp.stats.Counter scoresOf(edu.stanford.nlp.ling.RVFDatum example)">1</method>
			<method name="public double scoreOf(java.util.Collection features)">2</method>
			<method name="public edu.stanford.nlp.stats.Counter weightsAsGenericCounter()">2</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="public edu.stanford.nlp.stats.Counter justificationOf(edu.stanford.nlp.stats.Counter features)">2</method>
			<method name="private double probabilityOfRVFDatum(edu.stanford.nlp.ling.RVFDatum example)">1</method>
			<method name="public void _init_(edu.stanford.nlp.classify.LogPrior prior)">0</method>
			<method name="public double probabilityOf(java.util.Collection features, Object label)">2</method>
			<method name="public double[] getWeights()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$13$1</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>6</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>0.75</lcom3>
		<loc>35</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.0</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.trees.tregex.Relation$13, edu.stanford.nlp.trees.Tree)">0</method>
			<method name="public void advance()">2</method>
			<method name="void initialize()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTimeMain$TimebankTimex</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>3</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>0.0</lcom3>
		<loc>38</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.8333333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.5</amc>
		<cc>
			<method name="void _init_(String x0, String x1, String x2, String x3, edu.stanford.nlp.time.SUTimeMain$1 x4)">0</method>
			<method name="private void _init_(String timexId, String timexVal, String timexOrigVal, String timexStr)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.Tag</name>
		<wmc>7</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>13</rfc>
		<lcom>21</lcom>
		<ca>5</ca>
		<ce>5</ce>
		<npm>7</npm>
		<lcom3>1.1666666666666667</lcom3>
		<loc>30</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.42857142857142855</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.142857142857143</amc>
		<cc>
			<method name="public void _init_(String tag)">0</method>
			<method name="public String tag()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public edu.stanford.nlp.ling.LabelFactory labelFactory()">1</method>
			<method name="public void _init_(edu.stanford.nlp.ling.Label lab)">0</method>
			<method name="public static edu.stanford.nlp.ling.LabelFactory factory()">1</method>
			<method name="public void setTag(String tag)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.Dependencies</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>29</rfc>
		<lcom>10</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>184</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.28</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>35.8</amc>
		<cc>
			<method name="public static java.util.Map govToDepMap(java.util.List deps)">3</method>
			<method name="private void _init_()">0</method>
			<method name="public static java.util.Comparator dependencyIndexComparator()">1</method>
			<method name="private static java.util.Set getGovMaxChains(java.util.Map govToDepMap, edu.stanford.nlp.trees.TreeGraphNode gov, int depth)">6</method>
			<method name="public static edu.stanford.nlp.stats.Counter getTypedDependencyChains(java.util.List deps, int maxLength)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.FilteredIterator$1</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>5</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>1.5</lcom3>
		<loc>20</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.333333333333333</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="public boolean accept(String o)">2</method>
			<method name="public volatile boolean accept(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.TreeTransformer</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>69</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>69</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalRelations$RangeGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.CoreMapAttributeAggregator</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>12</noc>
		<cbo>23</cbo>
		<rfc>23</rfc>
		<lcom>6</lcom>
		<ca>21</ca>
		<ce>13</ce>
		<npm>4</npm>
		<lcom3>0.96875</lcom3>
		<loc>218</loc>
		<dam>0.0625</dam>
		<moa>12</moa>
		<mfa>0.0</mfa>
		<cam>0.3125</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>39.4</amc>
		<cc>
			<method name="public abstract Object aggregate(Class, java.util.List)">1</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static edu.stanford.nlp.pipeline.CoreMapAttributeAggregator getAggregator(String str)">1</method>
			<method name="public static java.util.Map getDefaultAggregators()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.classify.SVMLightClassifier</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>12</rfc>
		<lcom>0</lcom>
		<ca>5</ca>
		<ce>5</ce>
		<npm>5</npm>
		<lcom3>0.625</lcom3>
		<loc>82</loc>
		<dam>0.5</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.44</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.0</amc>
		<cc>
			<method name="public edu.stanford.nlp.stats.Counter logProbabilityOf(edu.stanford.nlp.ling.Datum example)">2</method>
			<method name="public void _init_(edu.stanford.nlp.stats.ClassicCounter weightCounter, edu.stanford.nlp.stats.ClassicCounter thresholds)">0</method>
			<method name="public edu.stanford.nlp.stats.Counter logProbabilityOf(edu.stanford.nlp.ling.RVFDatum example)">2</method>
			<method name="public void _init_(edu.stanford.nlp.stats.ClassicCounter weightCounter, edu.stanford.nlp.stats.ClassicCounter thresholds, edu.stanford.nlp.classify.LinearClassifier platt)">0</method>
			<method name="public void setPlatt(edu.stanford.nlp.classify.LinearClassifier platt)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalRelations$SubjectGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalRelations$AdvClauseModifierGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalRelations$AuxModifierGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.tsurgeon.ReplaceNode</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>11</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>65</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>20.666666666666668</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern oldNode, edu.stanford.nlp.trees.tregex.tsurgeon.AuxiliaryTree t)">0</method>
			<method name="public edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.tregex.TregexMatcher m)">2</method>
			<method name="public void _init_(edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern oldNode, edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern newNode)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.io.RuntimeIOException</name>
		<wmc>4</wmc>
		<dit>4</dit>
		<noc>0</noc>
		<cbo>53</cbo>
		<rfc>8</rfc>
		<lcom>6</lcom>
		<ca>53</ca>
		<ce>0</ce>
		<npm>4</npm>
		<lcom3>1.3333333333333333</lcom3>
		<loc>21</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>1.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(Throwable cause)">0</method>
			<method name="public void _init_(String message, Throwable cause)">0</method>
			<method name="public void _init_(String message)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Iterables$6</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>5</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>19</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.0</amc>
		<cc>
			<method name="void _init_(Iterable)">0</method>
			<method name="public java.util.Iterator iterator()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.Counter</name>
		<wmc>19</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>85</cbo>
		<rfc>19</rfc>
		<lcom>171</lcom>
		<ca>83</ca>
		<ce>2</ce>
		<npm>19</npm>
		<lcom3>2.0</lcom3>
		<loc>19</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4473684210526316</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract int size()">1</method>
			<method name="public abstract edu.stanford.nlp.util.Factory getFactory()">1</method>
			<method name="public abstract double incrementCount(Object, double)">1</method>
			<method name="public abstract double remove(Object)">1</method>
			<method name="public abstract void setCount(Object, double)">1</method>
			<method name="public abstract void addAll(edu.stanford.nlp.stats.Counter)">1</method>
			<method name="public abstract double decrementCount(Object)">1</method>
			<method name="public abstract double getCount(Object)">1</method>
			<method name="public abstract java.util.Collection values()">1</method>
			<method name="public abstract double defaultReturnValue()">1</method>
			<method name="public abstract java.util.Set entrySet()">1</method>
			<method name="public abstract double logIncrementCount(Object, double)">1</method>
			<method name="public abstract java.util.Set keySet()">1</method>
			<method name="public abstract double totalCount()">1</method>
			<method name="public abstract double decrementCount(Object, double)">1</method>
			<method name="public abstract boolean containsKey(Object)">1</method>
			<method name="public abstract void setDefaultReturnValue(double)">1</method>
			<method name="public abstract double incrementCount(Object)">1</method>
			<method name="public abstract void clear()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Iterables$14$1</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>9</rfc>
		<lcom>8</lcom>
		<ca>3</ca>
		<ce>2</ce>
		<npm>4</npm>
		<lcom3>0.9166666666666667</lcom3>
		<loc>43</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.0</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.util.Iterables$14)">0</method>
			<method name="public Iterable next()">1</method>
			<method name="public boolean hasNext()">3</method>
			<method name="public void remove()">1</method>
			<method name="public volatile Object next()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Iterables$7</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>5</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>21</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.5</amc>
		<cc>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="void _init_(Iterable, Iterable)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.Lexicon</name>
		<wmc>20</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>44</cbo>
		<rfc>20</rfc>
		<lcom>190</lcom>
		<ca>41</ca>
		<ce>4</ce>
		<npm>20</npm>
		<lcom3>1.0526315789473684</lcom3>
		<loc>23</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.19583333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract void trainUnannotated(java.util.List, double)">1</method>
			<method name="public abstract void train(java.util.List, double)">1</method>
			<method name="public abstract void readData(java.io.BufferedReader)">1</method>
			<method name="public abstract void train(java.util.Collection, double)">1</method>
			<method name="public abstract edu.stanford.nlp.parser.lexparser.UnknownWordModel getUnknownWordModel()">1</method>
			<method name="public abstract void train(edu.stanford.nlp.trees.Tree, double)">1</method>
			<method name="public abstract void writeData(java.io.Writer)">1</method>
			<method name="public abstract void finishTraining()">1</method>
			<method name="public abstract int numRules()">1</method>
			<method name="public abstract void setUnknownWordModel(edu.stanford.nlp.parser.lexparser.UnknownWordModel)">1</method>
			<method name="public abstract void train(edu.stanford.nlp.ling.TaggedWord, int, double)">1</method>
			<method name="public abstract boolean isKnown(int)">1</method>
			<method name="public abstract java.util.Iterator ruleIteratorByWord(int, int, String)">1</method>
			<method name="public abstract void incrementTreesRead(double)">1</method>
			<method name="public abstract void train(java.util.Collection, java.util.Collection)">1</method>
			<method name="public abstract void train(java.util.Collection)">1</method>
			<method name="public abstract boolean isKnown(String)">1</method>
			<method name="public abstract java.util.Iterator ruleIteratorByWord(String, int, String)">1</method>
			<method name="public abstract float score(edu.stanford.nlp.parser.lexparser.IntTaggedWord, int, String, String)">1</method>
			<method name="public abstract void initializeTraining(double)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Iterables$8</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>9</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>4</npm>
		<lcom3>0.0</lcom3>
		<loc>48</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.2</amc>
		<cc>
			<method name="public boolean hasNext()">3</method>
			<method name="public void remove()">1</method>
			<method name="public edu.stanford.nlp.util.Pair next()">1</method>
			<method name="public volatile Object next()">1</method>
			<method name="void _init_(java.util.Iterator, java.util.Iterator)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Iterables$9</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>2</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>1.0</lcom3>
		<loc>34</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.5</amc>
		<cc>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="void _init_(Iterable, Iterable, edu.stanford.nlp.util.Iterables$IncrementComparator)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Iterables$3</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>1.0</lcom3>
		<loc>18</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.0</amc>
		<cc>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="void _init_(Iterable, Class)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.sentiment.RNNTrainOptions</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>16</rfc>
		<lcom>0</lcom>
		<ca>4</ca>
		<ce>0</ce>
		<npm>4</npm>
		<lcom3>0.3846153846153846</lcom3>
		<loc>530</loc>
		<dam>0.15384615384615385</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>128.25</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public String toString()">3</method>
			<method name="public int setOption(String[] args, int argIndex)">14</method>
			<method name="public double getClassWeight(int i)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Iterables$2</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>2</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>1.0</lcom3>
		<loc>18</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.0</amc>
		<cc>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="void _init_(Iterable, edu.stanford.nlp.util.Function)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Iterables$5</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>1.0</lcom3>
		<loc>24</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.5</amc>
		<cc>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="void _init_(Iterable, int)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequenceMatchResult$GroupToIntervalFunc</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>8</rfc>
		<lcom>1</lcom>
		<ca>3</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>28</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.0</amc>
		<cc>
			<method name="public edu.stanford.nlp.util.Interval apply(java.util.regex.MatchResult in)">1</method>
			<method name="public void _init_(int group)">0</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.CoreMapNodePattern$NilAnnotationPattern</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>14</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.6666666666666665</amc>
		<cc>
			<method name="public boolean match(Object obj)">2</method>
			<method name="public void _init_()">0</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Iterables$4</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>1.0</lcom3>
		<loc>24</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.5</amc>
		<cc>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="void _init_(Iterable, int)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CoreMapToListExtractRule</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>6</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>28</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.0</amc>
		<cc>
			<method name="public volatile boolean extract(Object x0, java.util.List x1)">1</method>
			<method name="public boolean extract(edu.stanford.nlp.util.CoreMap cm, java.util.List out)">1</method>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$ExtractRule extractRule)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Iterables$1</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>2</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>1.0</lcom3>
		<loc>18</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.0</amc>
		<cc>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="void _init_(Iterable, edu.stanford.nlp.util.Function)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$RelativeTime</name>
		<wmc>19</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>20</cbo>
		<rfc>45</rfc>
		<lcom>0</lcom>
		<ca>17</ca>
		<ce>9</ce>
		<npm>19</npm>
		<lcom3>0.5222222222222223</lcom3>
		<loc>521</loc>
		<dam>0.2</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.29605263157894735</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>26.157894736842106</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.time.SUTime$Time base, edu.stanford.nlp.time.SUTime$TemporalOp tempOp, edu.stanford.nlp.time.SUTime$Temporal tempArg)">0</method>
			<method name="public boolean equals(Object o)">12</method>
			<method name="public void _init_(edu.stanford.nlp.time.SUTime$TemporalOp tempOp, edu.stanford.nlp.time.SUTime$Temporal tempArg)">0</method>
			<method name="public void _init_()">0</method>
			<method name="public edu.stanford.nlp.time.SUTime$Time intersect(edu.stanford.nlp.time.SUTime$Time t)">5</method>
			<method name="public edu.stanford.nlp.time.SUTime$Range getRange(int flags, edu.stanford.nlp.time.SUTime$Duration granularity)">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Duration getDuration()">1</method>
			<method name="public java.util.Map getTimexAttributes(edu.stanford.nlp.time.SUTime$TimeIndex timeIndex)">2</method>
			<method name="public boolean isGrounded()">3</method>
			<method name="public void _init_(edu.stanford.nlp.time.SUTime$Time base)">0</method>
			<method name="public void _init_(edu.stanford.nlp.time.SUTime$Time base, edu.stanford.nlp.time.SUTime$Duration offset)">0</method>
			<method name="public String toFormattedString(int flags)">9</method>
			<method name="public void _init_(edu.stanford.nlp.time.SUTime$TemporalOp tempOp, edu.stanford.nlp.time.SUTime$Temporal tempArg, int flags)">0</method>
			<method name="public edu.stanford.nlp.time.SUTime$Time add(edu.stanford.nlp.time.SUTime$Duration offset)">3</method>
			<method name="public edu.stanford.nlp.time.SUTime$Temporal intersect(edu.stanford.nlp.time.SUTime$Temporal t)">1</method>
			<method name="public int hashCode()">4</method>
			<method name="public edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time refTime, int flags)">8</method>
			<method name="public void _init_(edu.stanford.nlp.time.SUTime$Duration offset)">0</method>
			<method name="public void _init_(edu.stanford.nlp.time.SUTime$Time base, edu.stanford.nlp.time.SUTime$TemporalOp tempOp, edu.stanford.nlp.time.SUTime$Temporal tempArg, int flags)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.CoreMapSequenceMatcher$BasicCoreMapSequenceMatcher</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>16</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>14.0</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.SequencePattern pattern, edu.stanford.nlp.util.CoreMap annotation)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.OutputHandler$TrackInfo</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>0.0</lcom3>
		<loc>22</loc>
		<dam>0.3333333333333333</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.875</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.5</amc>
		<cc>
			<method name="void _init_(String x0, long x1, edu.stanford.nlp.util.logging.OutputHandler$1 x2)">0</method>
			<method name="private void _init_(String name, long timestamp)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.FilePathProcessor</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>15</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>74</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4583333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>17.5</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public static void processPath(String pathStr, String suffix, boolean recursively, edu.stanford.nlp.util.FileProcessor processor)">1</method>
			<method name="public static void processPath(java.io.File path, String suffix, boolean recursively, edu.stanford.nlp.util.FileProcessor processor)">1</method>
			<method name="public static void processPath(java.io.File path, java.io.FileFilter filter, edu.stanford.nlp.util.FileProcessor processor)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.dvparser.FilterConfusingRules</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>13</cbo>
		<rfc>24</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>12</ce>
		<npm>3</npm>
		<lcom3>0.5</lcom3>
		<loc>184</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>59.333333333333336</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.LexicalizedParser parser)">0</method>
			<method name="public volatile boolean accept(Object x0)">1</method>
			<method name="public boolean accept(edu.stanford.nlp.trees.Tree tree)">10</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.TregexPatternCompiler</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>19</cbo>
		<rfc>29</rfc>
		<lcom>5</lcom>
		<ca>11</ca>
		<ce>10</ce>
		<npm>6</npm>
		<lcom3>0.4444444444444445</lcom3>
		<loc>143</loc>
		<dam>0.5</dam>
		<moa>5</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.571428571428573</amc>
		<cc>
			<method name="public edu.stanford.nlp.trees.tregex.TregexPattern compile(String tregex)">2</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void _init_(edu.stanford.nlp.util.Function basicCatFunction)">0</method>
			<method name="public void _init_(edu.stanford.nlp.trees.HeadFinder headFinder)">0</method>
			<method name="public void addMacro(String original, String replacement)">1</method>
			<method name="public void _init_(edu.stanford.nlp.trees.HeadFinder headFinder, edu.stanford.nlp.util.Function basicCatFunction)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.sentiment.SentimentCoreAnnotations$ClassName</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CategoryWordTag</name>
		<wmc>17</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>27</cbo>
		<rfc>30</rfc>
		<lcom>112</lcom>
		<ca>20</ca>
		<ce>7</ce>
		<npm>16</npm>
		<lcom3>0.825</lcom3>
		<loc>195</loc>
		<dam>0.6</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.176470588235293</amc>
		<cc>
			<method name="public String tag()">1</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void _init_(String label)">0</method>
			<method name="public void setCategoryWordTag(String category, String word, String tag)">1</method>
			<method name="public void setCategory(String category)">1</method>
			<method name="public void _init_(String category, String word, String tag)">0</method>
			<method name="public void setTag(String tag)">1</method>
			<method name="public String word()">1</method>
			<method name="public edu.stanford.nlp.ling.LabelFactory labelFactory()">1</method>
			<method name="public void setFromString(String labelStr)">1</method>
			<method name="public String category()">1</method>
			<method name="public void setWord(String word)">1</method>
			<method name="public static edu.stanford.nlp.ling.LabelFactory factory()">1</method>
			<method name="public String toString(String mode)">2</method>
			<method name="public void _init_(edu.stanford.nlp.ling.Label oldLabel)">0</method>
			<method name="public String toString()">9</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.international.arabic.process.ArabicTokenizer</name>
		<wmc>8</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>13</cbo>
		<rfc>40</rfc>
		<lcom>24</lcom>
		<ca>3</ca>
		<ce>11</ce>
		<npm>5</npm>
		<lcom3>0.6428571428571429</lcom3>
		<loc>237</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.2571428571428571</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>28.375</amc>
		<cc>
			<method name="public static void main(String[] args)">7</method>
			<method name="public static edu.stanford.nlp.international.arabic.process.ArabicTokenizer newArabicTokenizer(java.io.Reader r, java.util.Properties lexerProperties)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="protected volatile Object getNext()">1</method>
			<method name="protected edu.stanford.nlp.ling.HasWord getNext()">3</method>
			<method name="public static edu.stanford.nlp.process.TokenizerFactory atbFactory()">2</method>
			<method name="public static edu.stanford.nlp.process.TokenizerFactory factory()">1</method>
			<method name="public void _init_(java.io.Reader r, edu.stanford.nlp.process.LexedTokenFactory tf, java.util.Properties lexerProperties)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.ResultStoringMonitor</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>17</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>0.5</lcom3>
		<loc>103</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>32.333333333333336</amc>
		<cc>
			<method name="public int domainDimension()">1</method>
			<method name="public double valueAt(double[] x)">2</method>
			<method name="public void _init_(int outputFreq, String filename)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.sentiment.SentimentCoreAnnotations</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Sets</name>
		<wmc>9</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>24</rfc>
		<lcom>36</lcom>
		<ca>3</ca>
		<ce>2</ce>
		<npm>8</npm>
		<lcom3>2.0</lcom3>
		<loc>214</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>22.77777777777778</amc>
		<cc>
			<method name="public static java.util.Set cross(java.util.Set s1, java.util.Set s2)">2</method>
			<method name="private void _init_()">0</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="public static boolean intersects(java.util.Set s1, java.util.Set s2)">2</method>
			<method name="public static java.util.Set symmetricDiff(java.util.Set s1, java.util.Set s2)">3</method>
			<method name="public static java.util.Set intersection(java.util.Set s1, java.util.Set s2)">1</method>
			<method name="public static java.util.Set powerSet(java.util.Set s)">3</method>
			<method name="public static java.util.Set diff(java.util.Set s1, java.util.Set s2)">2</method>
			<method name="public static java.util.Set union(java.util.Set s1, java.util.Set s2)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.TregexPattern</name>
		<wmc>25</wmc>
		<dit>1</dit>
		<noc>2</noc>
		<cbo>48</cbo>
		<rfc>109</rfc>
		<lcom>266</lcom>
		<ca>20</ca>
		<ce>30</ce>
		<npm>10</npm>
		<lcom3>0.8611111111111112</lcom3>
		<loc>1031</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.12179487179487179</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>40.0</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="abstract boolean getChangesVariables()">1</method>
			<method name="private static void extractSubtrees(java.util.List codeStrings, String treeFile)">4</method>
			<method name="boolean isOptional()">1</method>
			<method name="public String pattern()">1</method>
			<method name="abstract java.util.List getChildren()">1</method>
			<method name="public edu.stanford.nlp.trees.tregex.TregexMatcher matcher(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.HeadFinder headFinder)">1</method>
			<method name="public void prettyPrint()">1</method>
			<method name="private void prettyPrint(java.io.PrintWriter pw, int indent)">5</method>
			<method name="public void prettyPrint(java.io.PrintWriter pw)">1</method>
			<method name="void makeOptional()">2</method>
			<method name="public static edu.stanford.nlp.trees.tregex.TregexPattern compile(String tregex)">1</method>
			<method name="public edu.stanford.nlp.trees.tregex.TregexMatcher matcher(edu.stanford.nlp.trees.Tree t)">1</method>
			<method name="void setPatternString(String patternString)">1</method>
			<method name="public abstract String toString()">1</method>
			<method name="static edu.stanford.nlp.trees.Treebank access$100()">1</method>
			<method name="abstract String localString()">1</method>
			<method name="boolean isNegated()">1</method>
			<method name="public void prettyPrint(java.io.PrintStream ps)">1</method>
			<method name="void negate()">2</method>
			<method name="abstract edu.stanford.nlp.trees.tregex.TregexMatcher matcher(edu.stanford.nlp.trees.Tree, edu.stanford.nlp.trees.Tree, java.util.IdentityHashMap, java.util.Map, edu.stanford.nlp.trees.tregex.VariableStrings, edu.stanford.nlp.trees.HeadFinder)">1</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="private static edu.stanford.nlp.trees.TreeReaderFactory getTreeReaderFactory(String treeReaderFactoryClassName)">2</method>
			<method name="public static edu.stanford.nlp.trees.tregex.TregexPattern safeCompile(String tregex, boolean verbose)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.fsm.TransducerGraph$InputSplittingProcessor</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>7</rfc>
		<lcom>1</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>24</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.0</amc>
		<cc>
			<method name="public edu.stanford.nlp.fsm.TransducerGraph$Arc processArc(edu.stanford.nlp.fsm.TransducerGraph$Arc a)">1</method>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.ExtractorWordPref</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>14</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>65</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.4</amc>
		<cc>
			<method name="String extract(edu.stanford.nlp.tagger.maxent.History h, edu.stanford.nlp.tagger.maxent.PairsHolder pH)">2</method>
			<method name="void _init_(int num, int position)">0</method>
			<method name="public boolean isLocal()">2</method>
			<method name="public boolean isDynamic()">1</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalRelations$AssociativeMarkerGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.arabic.ArabicTreeNormalizer</name>
		<wmc>7</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>17</cbo>
		<rfc>63</rfc>
		<lcom>15</lcom>
		<ca>1</ca>
		<ce>16</ce>
		<npm>7</npm>
		<lcom3>0.2272727272727272</lcom3>
		<loc>569</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>78.71428571428571</amc>
		<cc>
			<method name="public edu.stanford.nlp.trees.Tree normalizeWholeTree(edu.stanford.nlp.trees.Tree tree, edu.stanford.nlp.trees.TreeFactory tf)">28</method>
			<method name="public void _init_(boolean retainNPTmp, boolean markPRDverb, boolean changeNoLabels)">0</method>
			<method name="public void _init_(boolean retainNPTmp, boolean markPRDverb, boolean changeNoLabels, boolean retainNPSbj, boolean retainPPClr)">0</method>
			<method name="public void _init_()">0</method>
			<method name="public String normalizeNonterminal(String category)">14</method>
			<method name="public void _init_(boolean retainNPTmp, boolean markPRDverb)">0</method>
			<method name="public void _init_(boolean retainNPTmp)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.GrammaticalRelation$Language</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>5</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.9166666666666666</lcom3>
		<loc>56</loc>
		<dam>0.25</dam>
		<moa>4</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>12.0</amc>
		<cc>
			<method name="public static edu.stanford.nlp.trees.GrammaticalRelation$Language[] values()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static edu.stanford.nlp.trees.GrammaticalRelation$Language valueOf(String name)">1</method>
			<method name="private void _init_(String, int)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.process.DocumentPreprocessor$PlainTextIterator$1</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>8</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>61</loc>
		<dam>0.3333333333333333</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.4666666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.333333333333332</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.process.DocumentPreprocessor$PlainTextIterator, edu.stanford.nlp.process.DocumentPreprocessor)">0</method>
			<method name="public volatile Object apply(Object x0)">1</method>
			<method name="public String[] apply(String in)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$DurationWithFields</name>
		<wmc>11</wmc>
		<dit>0</dit>
		<noc>13</noc>
		<cbo>29</cbo>
		<rfc>49</rfc>
		<lcom>0</lcom>
		<ca>19</ca>
		<ce>14</ce>
		<npm>11</npm>
		<lcom3>0.55</lcom3>
		<loc>346</loc>
		<dam>0.5</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.38181818181818183</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>30.272727272727273</amc>
		<cc>
			<method name="public volatile edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time x0, int x1)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(edu.stanford.nlp.time.SUTime$Duration d, org.joda.time.ReadablePeriod period)">0</method>
			<method name="public edu.stanford.nlp.time.SUTime$Duration divideBy(int m)">16</method>
			<method name="public edu.stanford.nlp.time.SUTime$Duration resolve(edu.stanford.nlp.time.SUTime$Time refTime, int flags)">5</method>
			<method name="public org.joda.time.Period getJodaTimePeriod()">2</method>
			<method name="public org.joda.time.Duration getJodaTimeDuration()">2</method>
			<method name="public edu.stanford.nlp.time.SUTime$Duration add(edu.stanford.nlp.time.SUTime$Duration d)">3</method>
			<method name="public edu.stanford.nlp.time.SUTime$Duration getGranularity()">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Duration multiplyBy(int m)">4</method>
			<method name="public void _init_(org.joda.time.ReadablePeriod period)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.ArrayMap$1</name>
		<wmc>3</wmc>
		<dit>4</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>9</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.75</lcom3>
		<loc>36</loc>
		<dam>0.5</dam>
		<moa>1</moa>
		<mfa>0.9354838709677419</mfa>
		<cam>0.5</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>10.333333333333334</amc>
		<cc>
			<method name="public void clear()">1</method>
			<method name="void _init_(edu.stanford.nlp.util.ArrayMap, java.util.Collection x0)">0</method>
			<method name="public boolean remove(Object o)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Maps</name>
		<wmc>15</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>45</rfc>
		<lcom>105</lcom>
		<ca>3</ca>
		<ce>5</ce>
		<npm>14</npm>
		<lcom3>2.0</lcom3>
		<loc>407</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.19166666666666668</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>26.133333333333333</amc>
		<cc>
			<method name="public static java.util.Map invert(java.util.Map map)">2</method>
			<method name="public static void putIntoValueArrayList(java.util.Map map, Object key, Object value)">1</method>
			<method name="public static void addAll(java.util.Map to, java.util.Map from, edu.stanford.nlp.util.Function function)">2</method>
			<method name="public static void putIntoValueHashSet(java.util.Map map, Object key, Object value)">1</method>
			<method name="public static java.util.Map compose(java.util.Map map1, java.util.Map map2)">2</method>
			<method name="public static void putIntoValueCollection(java.util.Map map, Object key, Object value, edu.stanford.nlp.util.CollectionFactory cf)">2</method>
			<method name="private void _init_()">0</method>
			<method name="public static java.util.List sortedEntries(java.util.Map map)">1</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="public static void toStringSorted(java.util.Map map, StringBuilder builder)">3</method>
			<method name="public static void removeKeys(java.util.Map map, java.util.Collection removekeys)">2</method>
			<method name="public static java.util.List sortedEntries(java.util.Collection entries)">1</method>
			<method name="public static java.util.Map getAll(java.util.Map map, java.util.Collection indices)">2</method>
			<method name="public static java.util.Map invertSet(java.util.Map map)">2</method>
			<method name="public static String toStringSorted(java.util.Map map)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.matcher.TrieMap</name>
		<wmc>30</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>57</rfc>
		<lcom>255</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>26</npm>
		<lcom3>0.2413793103448276</lcom3>
		<loc>626</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.391304347826087</mfa>
		<cam>0.18666666666666668</cam>
		<ic>1</ic>
		<cbm>7</cbm>
		<amc>19.8</amc>
		<cc>
			<method name="public void clear()">1</method>
			<method name="public Object remove(Object key)">2</method>
			<method name="public java.util.Set entrySet()">1</method>
			<method name="public boolean containsKey(Object key)">2</method>
			<method name="public int size()">4</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.matcher.TrieMap putChildTrie(Iterable key, edu.stanford.nlp.ling.tokensregex.matcher.TrieMap child)">6</method>
			<method name="public Object get(Object[] key)">1</method>
			<method name="public void _init_(int initialCapacity)">0</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.matcher.TrieMap getChildTrie(Iterable key)">3</method>
			<method name="public boolean containsValue(Object value)">1</method>
			<method name="protected void updateValues(java.util.List values)">4</method>
			<method name="public Object put(Object[] key, Object value)">1</method>
			<method name="public Object remove(Iterable key)">4</method>
			<method name="public String toFormattedString()">1</method>
			<method name="public volatile Object put(Object x0, Object x1)">1</method>
			<method name="public Object put(Iterable key, Object value)">4</method>
			<method name="protected void updateKeys(java.util.Set keys, java.util.List prefix)">4</method>
			<method name="public Object get(Iterable key)">2</method>
			<method name="public boolean isEmpty()">3</method>
			<method name="public void _init_()">0</method>
			<method name="public java.util.Set keySet()">1</method>
			<method name="protected void updateEntries(java.util.Set entries, java.util.List prefix)">4</method>
			<method name="public Object get(Object key)">3</method>
			<method name="public Object remove(Object[] key)">1</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.matcher.TrieMap getChildTrie(Object key)">2</method>
			<method name="public boolean isLeaf()">2</method>
			<method name="protected void updateTrieStrings(java.util.List strings, String prefix)">4</method>
			<method name="public java.util.Collection values()">1</method>
			<method name="public Object getValue()">1</method>
			<method name="public void putAll(java.util.Map m)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$ShapeAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.Env</name>
		<wmc>44</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>96</cbo>
		<rfc>86</rfc>
		<lcom>820</lcom>
		<ca>89</ca>
		<ce>10</ce>
		<npm>43</npm>
		<lcom3>0.9493844049247605</lcom3>
		<loc>590</loc>
		<dam>0.058823529411764705</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.14534883720930233</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.022727272727273</amc>
		<cc>
			<method name="public void setDefaultResultAnnotationKey(java.util.List defaultResultAnnotationKey)">1</method>
			<method name="public Class getDefaultTokensAnnotationKey()">1</method>
			<method name="public void setDefaultResultsAnnotationExtractor(edu.stanford.nlp.util.Function defaultResultsAnnotationExtractor)">1</method>
			<method name="public void setDefaultStringMatchFlags(int defaultStringMatchFlags)">1</method>
			<method name="public void unbind(String name)">1</method>
			<method name="public void setVariables(java.util.Map variables)">1</method>
			<method name="public void setDefaultTokensAggregators(java.util.Map defaultTokensAggregators)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void initDefaultBindings()">1</method>
			<method name="public Object peek(String name)">4</method>
			<method name="public void setDefaultTokensAnnotationKey(Class defaultTokensAnnotationKey)">1</method>
			<method name="public java.util.Map getDefaults()">1</method>
			<method name="public String expandStringRegex(String regex)">2</method>
			<method name="public Class getSequenceMatchResultExtractor()">1</method>
			<method name="public java.util.Map getVariables()">1</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr getSequencePatternExpr(String name, boolean copy)">7</method>
			<method name="public edu.stanford.nlp.util.Function getDefaultResultsAnnotationExtractor()">1</method>
			<method name="public void setDefaultTokensResultAnnotationKey(java.util.List defaultTokensResultAnnotationKey)">1</method>
			<method name="public void setDefaultNestedResultsAnnotationKey(Class defaultNestedResultsAnnotationKey)">1</method>
			<method name="public void clearVariables()">1</method>
			<method name="public transient void setDefaultTokensResultAnnotationKey(Class[] defaultTokensResultAnnotationKey)">1</method>
			<method name="public void setDefaultTextAnnotationKey(Class defaultTextAnnotationKey)">1</method>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.SequencePattern$Parser p)">0</method>
			<method name="public Class getDefaultTextAnnotationKey()">1</method>
			<method name="public void bind(String name, edu.stanford.nlp.ling.tokensregex.SequencePattern pattern)">1</method>
			<method name="public Object pop(String name)">4</method>
			<method name="public void setSequenceMatchResultExtractor(Class sequenceMatchResultExtractor)">1</method>
			<method name="public transient void setDefaultResultAnnotationKey(Class[] defaultResultAnnotationKey)">1</method>
			<method name="public void bind(String name, Object obj)">2</method>
			<method name="public void setDefaultStringPatternFlags(int defaultStringPatternFlags)">1</method>
			<method name="public Class getDefaultNestedResultsAnnotationKey()">1</method>
			<method name="public int getDefaultStringMatchFlags()">1</method>
			<method name="public void setDefaults(java.util.Map defaults)">1</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.NodePattern getNodePattern(String name)">7</method>
			<method name="public int getDefaultStringPatternFlags()">1</method>
			<method name="public java.util.List getDefaultResultAnnotationKey()">1</method>
			<method name="public Object get(String name)">1</method>
			<method name="public java.util.regex.Pattern getStringPattern(String regex)">1</method>
			<method name="public void push(String name, Object value)">3</method>
			<method name="public void setStringMatchResultExtractor(Class stringMatchResultExtractor)">1</method>
			<method name="public void bindStringRegex(String var, String regex)">2</method>
			<method name="public Class getStringMatchResultExtractor()">1</method>
			<method name="public java.util.List getDefaultTokensResultAnnotationKey()">1</method>
			<method name="public java.util.Map getDefaultTokensAggregators()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.ValueFunction</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>3</rfc>
		<lcom>3</lcom>
		<ca>6</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>3</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract boolean checkArgs(java.util.List)">1</method>
			<method name="public abstract String getDescription()">1</method>
			<method name="public abstract edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.Env, java.util.List)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$BeAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter$OutputStyle</name>
		<wmc>5</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>15</rfc>
		<lcom>4</lcom>
		<ca>6</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>0.8928571428571428</lcom3>
		<loc>122</loc>
		<dam>0.42857142857142855</dam>
		<moa>5</moa>
		<mfa>0.8125</mfa>
		<cam>0.4166666666666667</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>22.0</amc>
		<cc>
			<method name="public static edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter$OutputStyle fromShortName(String name)">2</method>
			<method name="public static edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter$OutputStyle valueOf(String name)">1</method>
			<method name="private void _init_(String, int, String shortName)">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter$OutputStyle[] values()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.NodePattern$EqualsNodePattern</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>9</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>27</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.8333333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.666666666666667</amc>
		<cc>
			<method name="public boolean match(Object node)">1</method>
			<method name="public void _init_(Object t)">0</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalRelations$PossessionModifierGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$SubcategorizationAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDomReader</name>
		<wmc>7</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>56</rfc>
		<lcom>21</lcom>
		<ca>1</ca>
		<ce>10</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>507</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2571428571428571</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>71.42857142857143</amc>
		<cc>
			<method name="public static edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument parseDocument(java.io.File f)">1</method>
			<method name="private static edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEntityMention parseEntityMention(org.w3c.dom.Node node)">1</method>
			<method name="public void _init_()">0</method>
			<method name="private static edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceRelationMention parseRelationMention(org.w3c.dom.Node node, edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument doc)">4</method>
			<method name="private static edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceCharSeq parseCharSeq(org.w3c.dom.Node node)">1</method>
			<method name="public static void main(String[] argv)">1</method>
			<method name="private static edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEventMention parseEventMention(org.w3c.dom.Node node, edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument doc)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalRelations$IndirectObjectGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$CategoryFunctionalTagAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Filters</name>
		<wmc>13</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>13</cbo>
		<rfc>32</rfc>
		<lcom>78</lcom>
		<ca>8</ca>
		<ce>5</ce>
		<npm>12</npm>
		<lcom3>2.0</lcom3>
		<loc>133</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2153846153846154</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.23076923076923</amc>
		<cc>
			<method name="public static edu.stanford.nlp.util.Filter notFilter(edu.stanford.nlp.util.Filter filter)">1</method>
			<method name="public static edu.stanford.nlp.util.Filter switchedFilter(edu.stanford.nlp.util.Filter filter, boolean negated)">1</method>
			<method name="public static edu.stanford.nlp.util.Filter rejectFilter()">1</method>
			<method name="public static edu.stanford.nlp.util.Filter orFilter(edu.stanford.nlp.util.Filter f1, edu.stanford.nlp.util.Filter f2)">1</method>
			<method name="public static void retainAll(java.util.Collection elems, edu.stanford.nlp.util.Filter filter)">2</method>
			<method name="public static edu.stanford.nlp.util.Filter collectionAcceptFilter(java.util.Collection objs)">1</method>
			<method name="public static Object[] filter(Object[] elems, edu.stanford.nlp.util.Filter filter)">3</method>
			<method name="private void _init_()">0</method>
			<method name="public static edu.stanford.nlp.util.Filter andFilter(edu.stanford.nlp.util.Filter f1, edu.stanford.nlp.util.Filter f2)">1</method>
			<method name="public static edu.stanford.nlp.util.Filter collectionAcceptFilter(Object[] objs)">1</method>
			<method name="public static edu.stanford.nlp.util.Filter acceptFilter()">1</method>
			<method name="public static edu.stanford.nlp.util.Filter collectionRejectFilter(Object[] objs)">1</method>
			<method name="public static edu.stanford.nlp.util.Filter collectionRejectFilter(java.util.Collection objs)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.StochasticMinimizer$PropertySetter</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>7</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract void set(Object)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.international.arabic.process.ArabicSegmenter</name>
		<wmc>26</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>21</cbo>
		<rfc>106</rfc>
		<lcom>259</lcom>
		<ca>0</ca>
		<ce>21</ce>
		<npm>18</npm>
		<lcom3>0.8428571428571427</lcom3>
		<loc>1022</loc>
		<dam>0.9285714285714286</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.13538461538461538</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>37.76923076923077</amc>
		<cc>
			<method name="public void finishTraining()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public long segment(java.io.BufferedReader br, java.io.PrintWriter pwOut)">1</method>
			<method name="public void _init_(java.util.Properties props)">0</method>
			<method name="public void train(java.util.List sentence)">1</method>
			<method name="private static java.util.Map optionArgDefs()">1</method>
			<method name="private static edu.stanford.nlp.international.arabic.process.ArabicSegmenter getSegmenter(java.util.Properties options)">5</method>
			<method name="public void loadSegmenter(String filename)">1</method>
			<method name="private static double decode(edu.stanford.nlp.international.arabic.process.ArabicSegmenter segmenter, java.io.BufferedReader br, java.io.PrintWriter pwOut, int nThreads)">6</method>
			<method name="public String process(String nextInput)">1</method>
			<method name="public void train()">1</method>
			<method name="public void _init_(edu.stanford.nlp.international.arabic.process.ArabicSegmenter other)">0</method>
			<method name="public edu.stanford.nlp.util.concurrent.ThreadsafeProcessor newInstance()">1</method>
			<method name="public void initializeTraining(double numTrees)">1</method>
			<method name="public void train(java.util.Collection trees)">1</method>
			<method name="private edu.stanford.nlp.process.TokenizerFactory getTokenizerFactory()">4</method>
			<method name="public void loadSegmenter(String filename, java.util.Properties p)">1</method>
			<method name="public java.util.List segment(String line)">1</method>
			<method name="private void evaluateRawText(java.io.PrintWriter pwOut)">1</method>
			<method name="private static String usage()">1</method>
			<method name="public String segmentString(String line)">2</method>
			<method name="private void evaluate(java.io.PrintWriter pwOut)">3</method>
			<method name="public static void main(String[] args)">8</method>
			<method name="public void serializeSegmenter(String filename)">1</method>
			<method name="public volatile Object process(Object x0)">1</method>
			<method name="public void train(edu.stanford.nlp.trees.Tree tree)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.pascal.AcronymModel$RunningAverage</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>5</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>4</npm>
		<lcom3>0.3333333333333333</lcom3>
		<loc>47</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.25</amc>
		<cc>
			<method name="public double getAverage()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public double getNumSammples()">1</method>
			<method name="public void addSample(double sample)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.MultiPatternMatcher$BasicSequencePatternTrigger</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>10</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>41</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.333333333333334</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.MultiPatternMatcher$NodePatternTrigger trigger)">0</method>
			<method name="public volatile Object apply(Object x0)">1</method>
			<method name="public java.util.Collection apply(java.util.List elements)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.process.WordShapeClassifier$DistributionalClusters$LcMap</name>
		<wmc>3</wmc>
		<dit>3</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>7</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>1.5</lcom3>
		<loc>16</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.9827586206896551</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.0</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="void _init_(edu.stanford.nlp.process.WordShapeClassifier$1 x0)">0</method>
			<method name="public Object get(Object key)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.DependencyTyper</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>5</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract Object makeDependency(edu.stanford.nlp.trees.Tree, edu.stanford.nlp.trees.Tree, edu.stanford.nlp.trees.Tree)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalRelations$ExpletiveGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.EmpiricalNERPriorBIO</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>17</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>5</ce>
		<npm>2</npm>
		<lcom3>0.5</lcom3>
		<loc>321</loc>
		<dam>0.875</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5714285714285714</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>103.33333333333333</amc>
		<cc>
			<method name="public double scoreOf(int[] sequence)">25</method>
			<method name="public void _init_(String backgroundSymbol, edu.stanford.nlp.util.Index classIndex, edu.stanford.nlp.util.Index tagIndex, java.util.List doc, edu.stanford.nlp.util.Pair matrices, edu.stanford.nlp.sequences.SeqClassifierFlags flags)">0</method>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.HasFeatureGrouping</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract int[][] getFeatureGrouping()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="private void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.DeepTree</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>8</rfc>
		<lcom>5</lcom>
		<ca>4</ca>
		<ce>2</ce>
		<npm>4</npm>
		<lcom3>0.8</lcom3>
		<loc>39</loc>
		<dam>0.75</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.32</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.833333333333333</amc>
		<cc>
			<method name="public java.util.IdentityHashMap getVectors()">1</method>
			<method name="public edu.stanford.nlp.trees.Tree getTree()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void _init_(edu.stanford.nlp.trees.Tree tree, java.util.IdentityHashMap vectors, double score)">0</method>
			<method name="public double getScore()">1</method>
			<method name="static double access$000(edu.stanford.nlp.trees.DeepTree x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.DeltaIndex</name>
		<wmc>23</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>47</rfc>
		<lcom>135</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>21</npm>
		<lcom3>0.6545454545454545</lcom3>
		<loc>286</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.43243243243243246</mfa>
		<cam>0.1422924901185771</cam>
		<ic>1</ic>
		<cbm>5</cbm>
		<amc>11.217391304347826</amc>
		<cc>
			<method name="public void clear()">1</method>
			<method name="public int indexOf(Object o, boolean add)">5</method>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="public boolean contains(Object o)">3</method>
			<method name="public boolean isEmpty()">3</method>
			<method name="public void saveToFilename(String s)">1</method>
			<method name="public Object[] toArray(Object[] a)">1</method>
			<method name="static edu.stanford.nlp.util.Index access$000(edu.stanford.nlp.util.DeltaIndex x0)">1</method>
			<method name="public void _init_(edu.stanford.nlp.util.Index backingIndex)">0</method>
			<method name="public int size()">1</method>
			<method name="public java.util.Collection objects(int[] indices)">2</method>
			<method name="public Object get(int i)">2</method>
			<method name="public boolean add(Object e)">2</method>
			<method name="public boolean addAll(java.util.Collection c)">2</method>
			<method name="static edu.stanford.nlp.util.Index access$100(edu.stanford.nlp.util.DeltaIndex x0)">1</method>
			<method name="public void _init_(edu.stanford.nlp.util.Index backingIndex, edu.stanford.nlp.util.Index spilloverIndex)">0</method>
			<method name="public void lock()">1</method>
			<method name="public java.util.List objectsList()">2</method>
			<method name="public void unlock()">1</method>
			<method name="public int indexOf(Object o)">1</method>
			<method name="public void saveToWriter(java.io.Writer out)">1</method>
			<method name="public String toString()">1</method>
			<method name="public boolean isLocked()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequencePattern$State</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>12</noc>
		<cbo>32</cbo>
		<rfc>19</rfc>
		<lcom>22</lcom>
		<ca>30</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>0.7857142857142857</lcom3>
		<loc>130</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4791666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.0</amc>
		<cc>
			<method name="protected void updateOutStates(java.util.Set out)">3</method>
			<method name="protected void _init_()">0</method>
			<method name="protected boolean match(int bid, edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates matchedStates)">1</method>
			<method name="protected void add(edu.stanford.nlp.ling.tokensregex.SequencePattern$State nextState)">2</method>
			<method name="protected boolean match0(int bid, edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates matchedStates)">1</method>
			<method name="protected boolean match(int bid, edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates matchedStates, boolean consume, edu.stanford.nlp.ling.tokensregex.SequencePattern$State prevState)">3</method>
			<method name="public Object value(int bid, edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates matchedStates)">4</method>
			<method name="protected boolean match(int bid, edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates matchedStates, boolean consume)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.structure.RelationMentionFactory</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>4</ca>
		<ce>4</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>21</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.0</amc>
		<cc>
			<method name="public edu.stanford.nlp.ie.machinereading.structure.RelationMention constructRelationMention(String objectId, edu.stanford.nlp.util.CoreMap sentence, edu.stanford.nlp.ie.machinereading.structure.Span span, String type, String subtype, java.util.List args, edu.stanford.nlp.stats.Counter probs)">1</method>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseUtils</name>
		<wmc>9</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>37</rfc>
		<lcom>34</lcom>
		<ca>5</ca>
		<ce>3</ce>
		<npm>6</npm>
		<lcom3>1.0297619047619047</lcom3>
		<loc>513</loc>
		<dam>0.42857142857142855</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.19642857142857142</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>53.666666666666664</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public static String shapeOf(CharSequence input, boolean augmentedDateChars, boolean useMidDotShape)">12</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="public static String normalize(String in, int ascii, int spaceChar, int midDot)">46</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static boolean isNumber(char c)">3</method>
			<method name="public static String normalize(String in)">1</method>
			<method name="public static String normalize(String in, int ascii, int spaceChar)">1</method>
			<method name="private static boolean isAsciiLowHigh(int cp)">5</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalRelations$SemanticDependentGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.SpeakerInfo</name>
		<wmc>11</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>33</rfc>
		<lcom>9</lcom>
		<ca>4</ca>
		<ce>3</ce>
		<npm>10</npm>
		<lcom3>0.8545454545454545</lcom3>
		<loc>193</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.43333333333333335</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.545454545454545</amc>
		<cc>
			<method name="public String getSpeakerDesc()">1</method>
			<method name="public int getCorefClusterId()">2</method>
			<method name="public boolean hasRealSpeakerName()">4</method>
			<method name="static void _clinit_()">0</method>
			<method name="public String getSpeakerName()">1</method>
			<method name="public java.util.Set getMentions()">1</method>
			<method name="public void _init_(String speakerName)">0</method>
			<method name="public String toString()">1</method>
			<method name="public String[] getSpeakerNameStrings()">1</method>
			<method name="public boolean containsMention(edu.stanford.nlp.dcoref.Mention m)">1</method>
			<method name="public void addMention(edu.stanford.nlp.dcoref.Mention m)">6</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.GeneralizedCounter$OneDimensionalCounterView</name>
		<wmc>16</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>40</rfc>
		<lcom>64</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>14</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>164</loc>
		<dam>0.5</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.3375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.125</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.stats.GeneralizedCounter x0, edu.stanford.nlp.stats.GeneralizedCounter$1 x1)">0</method>
			<method name="public void clear()">1</method>
			<method name="public boolean equals(Object o)">3</method>
			<method name="public java.util.Set keySet()">1</method>
			<method name="public boolean isEmpty()">1</method>
			<method name="public void setCount(Object o, double count)">1</method>
			<method name="public double remove(Object o)">1</method>
			<method name="public boolean containsKey(Object key)">1</method>
			<method name="public java.util.Set entrySet()">1</method>
			<method name="public double totalCount()">1</method>
			<method name="public double getCount(Object o)">1</method>
			<method name="public int size()">1</method>
			<method name="public int hashCode()">2</method>
			<method name="public double incrementCount(Object o, double count)">1</method>
			<method name="public String toString()">2</method>
			<method name="private void _init_(edu.stanford.nlp.stats.GeneralizedCounter)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.MultiClassAccuracyStats</name>
		<wmc>16</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>15</cbo>
		<rfc>49</rfc>
		<lcom>56</lcom>
		<ca>2</ca>
		<ce>13</ce>
		<npm>15</npm>
		<lcom3>0.7030303030303031</lcom3>
		<loc>506</loc>
		<dam>0.09090909090909091</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4266666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>29.9375</amc>
		<cc>
			<method name="public double score(edu.stanford.nlp.classify.ProbabilisticClassifier classifier, edu.stanford.nlp.classify.GeneralDataset data)">1</method>
			<method name="public int numSamples()">1</method>
			<method name="public void initMC(edu.stanford.nlp.classify.ProbabilisticClassifier classifier, edu.stanford.nlp.classify.GeneralDataset data)">5</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void _init_(String file)">0</method>
			<method name="public void _init_(edu.stanford.nlp.classify.ProbabilisticClassifier classifier, edu.stanford.nlp.classify.GeneralDataset data, String file)">0</method>
			<method name="public String getDescription(int numDigits)">2</method>
			<method name="public double score()">3</method>
			<method name="public double confidenceWeightedAccuracy()">2</method>
			<method name="public int[] getAccCoverage()">2</method>
			<method name="public int numCorrect(int recall)">3</method>
			<method name="public String toString()">3</method>
			<method name="public void _init_(String file, int scoreType)">0</method>
			<method name="public void _init_(int scoreType)">0</method>
			<method name="public void _init_(edu.stanford.nlp.classify.ProbabilisticClassifier classifier, edu.stanford.nlp.classify.GeneralDataset data, String file, int scoreType)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.TreeFunctions$LabeledToDescriptiveCoreLabelTreeFunction</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>18</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>8</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>85</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>20.0</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.trees.TreeFunctions$1 x0)">0</method>
			<method name="private void _init_()">0</method>
			<method name="public edu.stanford.nlp.trees.Tree apply(edu.stanford.nlp.trees.Tree t)">5</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.classify.LogisticClassifierFactory</name>
		<wmc>12</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>16</cbo>
		<rfc>31</rfc>
		<lcom>60</lcom>
		<ca>1</ca>
		<ce>16</ce>
		<npm>12</npm>
		<lcom3>0.6590909090909091</lcom3>
		<loc>337</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4166666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>26.75</amc>
		<cc>
			<method name="public volatile edu.stanford.nlp.classify.Classifier trainClassifier(edu.stanford.nlp.classify.GeneralDataset x0)">1</method>
			<method name="public edu.stanford.nlp.classify.LogisticClassifier trainWeightedData(edu.stanford.nlp.classify.GeneralDataset data, float[] dataWeights)">5</method>
			<method name="public edu.stanford.nlp.classify.LogisticClassifier trainClassifier(edu.stanford.nlp.classify.GeneralDataset data, edu.stanford.nlp.classify.LogPrior prior, boolean biased)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public edu.stanford.nlp.classify.LogisticClassifier trainClassifier(edu.stanford.nlp.classify.GeneralDataset data, double l1reg, double tol, edu.stanford.nlp.classify.LogPrior prior, boolean biased)">8</method>
			<method name="public edu.stanford.nlp.classify.LogisticClassifier trainClassifier(java.util.List examples)">1</method>
			<method name="public edu.stanford.nlp.classify.LogisticClassifier trainClassifier(edu.stanford.nlp.classify.GeneralDataset data, double l1reg)">1</method>
			<method name="public edu.stanford.nlp.classify.LogisticClassifier trainClassifier(edu.stanford.nlp.classify.GeneralDataset data, double l1reg, double tol, boolean biased)">1</method>
			<method name="public edu.stanford.nlp.classify.LogisticClassifier trainClassifier(edu.stanford.nlp.classify.GeneralDataset data, double l1reg, double tol)">1</method>
			<method name="public edu.stanford.nlp.classify.LogisticClassifier trainClassifier(edu.stanford.nlp.classify.GeneralDataset data)">1</method>
			<method name="public volatile edu.stanford.nlp.classify.Classifier trainClassifier(java.util.List x0)">1</method>
			<method name="public edu.stanford.nlp.classify.LogisticClassifier trainClassifier(edu.stanford.nlp.classify.GeneralDataset data, double l1reg, double tol, edu.stanford.nlp.classify.LogPrior prior)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.LineSearcher</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>4</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract double minimize(edu.stanford.nlp.util.Function)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Filter</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>97</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>97</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract boolean accept(Object)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.CtbPreDetector</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>15</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>3</npm>
		<lcom3>0.875</lcom3>
		<loc>72</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.36</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.0</amc>
		<cc>
			<method name="String extract(edu.stanford.nlp.tagger.maxent.History h, edu.stanford.nlp.tagger.maxent.PairsHolder pH)">3</method>
			<method name="public boolean isLocal()">1</method>
			<method name="void _init_(String t2, int n2)">0</method>
			<method name="public boolean isDynamic()">1</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.sequences.FeatureFactory</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>4</noc>
		<cbo>14</cbo>
		<rfc>28</rfc>
		<lcom>20</lcom>
		<ca>9</ca>
		<ce>5</ce>
		<npm>5</npm>
		<lcom3>0.9714285714285714</lcom3>
		<loc>365</loc>
		<dam>0.13333333333333333</dam>
		<moa>13</moa>
		<mfa>0.0</mfa>
		<cam>0.25</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>42.75</amc>
		<cc>
			<method name="protected String getWord(edu.stanford.nlp.ling.CoreLabel label)">2</method>
			<method name="protected void addAllInterningAndSuffixing(java.util.Collection accumulator, java.util.Collection addend, String suffix)">6</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void init(edu.stanford.nlp.sequences.SeqClassifierFlags flags)">1</method>
			<method name="public abstract java.util.Collection getCliqueFeatures(edu.stanford.nlp.util.PaddedList, int, edu.stanford.nlp.sequences.Clique)">1</method>
			<method name="public java.util.List getCliques()">1</method>
			<method name="public static java.util.List getCliques(int maxLeft, int maxRight)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.LabeledConstituent$LabelFactoryHolder</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>0</npm>
		<lcom3>1.0</lcom3>
		<loc>12</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.5</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreLabel</name>
		<wmc>43</wmc>
		<dit>0</dit>
		<noc>1</noc>
		<cbo>143</cbo>
		<rfc>91</rfc>
		<lcom>901</lcom>
		<ca>128</ca>
		<ce>17</ce>
		<npm>41</npm>
		<lcom3>1.003968253968254</lcom3>
		<loc>778</loc>
		<dam>0.3333333333333333</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.19047619047619047</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.953488372093023</amc>
		<cc>
			<method name="public String before()">1</method>
			<method name="public void setIndex(int index)">1</method>
			<method name="public String lemma()">1</method>
			<method name="public String tag()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void _init_(int capacity)">0</method>
			<method name="public String after()">1</method>
			<method name="public int beginPosition()">2</method>
			<method name="public String ner()">1</method>
			<method name="public void setAfter(String after)">1</method>
			<method name="public void setCategory(String category)">1</method>
			<method name="public void setOriginalText(String originalText)">1</method>
			<method name="public void setLemma(String lemma)">1</method>
			<method name="public final void setValue(String value)">1</method>
			<method name="public void setTag(String tag)">1</method>
			<method name="public String toPrimes()">3</method>
			<method name="public String toString(String format)">18</method>
			<method name="public void setNER(String ner)">1</method>
			<method name="private void initFromStrings(String[] keys, String[] values)">7</method>
			<method name="public String toString()">1</method>
			<method name="public void setDocID(String docID)">1</method>
			<method name="public void _init_(String[] keys, String[] values)">0</method>
			<method name="public void _init_()">0</method>
			<method name="public int sentIndex()">2</method>
			<method name="public String word()">1</method>
			<method name="public void setBeginPosition(int beginPos)">1</method>
			<method name="public void setBefore(String before)">1</method>
			<method name="public void setSentIndex(int sentIndex)">1</method>
			<method name="public edu.stanford.nlp.ling.LabelFactory labelFactory()">1</method>
			<method name="public void setEndPosition(int endPos)">1</method>
			<method name="public String originalText()">1</method>
			<method name="public void setFromString(String labelStr)">1</method>
			<method name="public void _init_(edu.stanford.nlp.ling.Label label)">0</method>
			<method name="public void setWord(String word)">1</method>
			<method name="public String category()">1</method>
			<method name="public int endPosition()">2</method>
			<method name="public int index()">2</method>
			<method name="public String getString(Class key)">2</method>
			<method name="public void _init_(edu.stanford.nlp.util.CoreMap label)">0</method>
			<method name="public void _init_(edu.stanford.nlp.ling.CoreLabel label)">0</method>
			<method name="public static edu.stanford.nlp.ling.LabelFactory factory()">1</method>
			<method name="public final String value()">1</method>
			<method name="public String docID()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequencePattern$SeqStartState</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>19</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="protected boolean match(int bid, edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates matchedStates, boolean consume, edu.stanford.nlp.ling.tokensregex.SequencePattern$State prevState)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.Constituent</name>
		<wmc>22</wmc>
		<dit>1</dit>
		<noc>1</noc>
		<cbo>16</cbo>
		<rfc>44</rfc>
		<lcom>231</lcom>
		<ca>13</ca>
		<ce>3</ce>
		<npm>22</npm>
		<lcom3>2.0</lcom3>
		<loc>283</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.1717171717171717</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>11.863636363636363</amc>
		<cc>
			<method name="public void setLabel(edu.stanford.nlp.ling.Label label)">1</method>
			<method name="public String value()">2</method>
			<method name="public abstract void setStart(int)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public boolean crosses(edu.stanford.nlp.trees.Constituent c)">7</method>
			<method name="public edu.stanford.nlp.ling.Label label()">1</method>
			<method name="public void setValue(String value)">2</method>
			<method name="public boolean contains(edu.stanford.nlp.trees.Constituent c)">3</method>
			<method name="public void setLabels(java.util.Collection labels)">1</method>
			<method name="public String toSentenceString(java.util.ArrayList s)">3</method>
			<method name="public int size()">1</method>
			<method name="public void setScore(double score)">1</method>
			<method name="public abstract int start()">1</method>
			<method name="public java.util.Collection labels()">1</method>
			<method name="public int hashCode()">3</method>
			<method name="public double score()">1</method>
			<method name="public boolean crosses(java.util.Collection constColl)">2</method>
			<method name="public abstract void setEnd(int)">1</method>
			<method name="public void setFromString(String labelStr)">2</method>
			<method name="public boolean equals(Object obj)">10</method>
			<method name="public abstract int end()">1</method>
			<method name="public String toString()">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.arabic.ArabicTreeReaderFactory$ArabicRawTreeReaderFactory</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>23</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(boolean noNormalization)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.ASBCunkDict</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>20</rfc>
		<lcom>11</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>0.7333333333333333</lcom3>
		<loc>113</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>17.333333333333332</amc>
		<cc>
			<method name="protected static String getTag(String a1, String a2)">3</method>
			<method name="private void _init_()">0</method>
			<method name="private static synchronized edu.stanford.nlp.tagger.maxent.ASBCunkDict getInstance()">2</method>
			<method name="static void _clinit_()">0</method>
			<method name="private static java.util.Set get(String a)">1</method>
			<method name="private static void readASBCunkDict(String filename)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.FileProcessor</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract void processFile(java.io.File)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.TreebankAnnotator</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>17</cbo>
		<rfc>41</rfc>
		<lcom>22</lcom>
		<ca>1</ca>
		<ce>16</ce>
		<npm>7</npm>
		<lcom3>0.75</lcom3>
		<loc>264</loc>
		<dam>0.0</dam>
		<moa>4</moa>
		<mfa>0.0</mfa>
		<cam>0.25</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>31.5</amc>
		<cc>
			<method name="public java.util.List deannotateTrees(java.util.List trees)">2</method>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.Options op, String treebankRoot)">0</method>
			<method name="public edu.stanford.nlp.trees.Tree collinize(edu.stanford.nlp.trees.Tree tree)">1</method>
			<method name="public static java.util.List removeDependencyRoots(java.util.List trees)">2</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="static edu.stanford.nlp.trees.Tree removeDependencyRoot(edu.stanford.nlp.trees.Tree tree)">2</method>
			<method name="public static java.util.List getTrees(String path, int low, int high, int minLength, int maxLength)">2</method>
			<method name="public java.util.List annotateTrees(java.util.List trees)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$DocTypeAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.AnnotationLookup$KeyLookup$1</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>1.0</lcom3>
		<loc>11</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.0</amc>
		<cc>
			<method name="public Class getType()">1</method>
			<method name="void _init_(edu.stanford.nlp.ling.AnnotationLookup$KeyLookup)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.AnnotationLookup</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>13</rfc>
		<lcom>4</lcom>
		<ca>3</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>63</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>14.5</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static Class getValueType(Class key)">2</method>
			<method name="public static edu.stanford.nlp.ling.AnnotationLookup$KeyLookup getCoreKey(String oldKey)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.graph.Graph</name>
		<wmc>25</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>25</rfc>
		<lcom>300</lcom>
		<ca>3</ca>
		<ce>0</ce>
		<npm>25</npm>
		<lcom3>2.0</lcom3>
		<loc>25</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.56</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract java.util.List getConnectedComponents()">1</method>
			<method name="public abstract java.util.Set getNeighbors(Object)">1</method>
			<method name="public abstract void add(Object, Object, Object)">1</method>
			<method name="public abstract java.util.List getOutgoingEdges(Object)">1</method>
			<method name="public abstract int getOutDegree(Object)">1</method>
			<method name="public abstract java.util.Set getAllVertices()">1</method>
			<method name="public abstract int getNumVertices()">1</method>
			<method name="public abstract java.util.Set getParents(Object)">1</method>
			<method name="public abstract boolean isNeighbor(Object, Object)">1</method>
			<method name="public abstract boolean removeEdge(Object, Object, Object)">1</method>
			<method name="public abstract java.util.Set getChildren(Object)">1</method>
			<method name="public abstract int getInDegree(Object)">1</method>
			<method name="public abstract boolean containsVertex(Object)">1</method>
			<method name="public abstract int getNumEdges()">1</method>
			<method name="public abstract java.util.List getEdges(Object, Object)">1</method>
			<method name="public abstract void clear()">1</method>
			<method name="public abstract void removeZeroDegreeNodes()">1</method>
			<method name="public abstract java.util.List getIncomingEdges(Object)">1</method>
			<method name="public abstract boolean isEdge(Object, Object)">1</method>
			<method name="public abstract boolean removeEdges(Object, Object)">1</method>
			<method name="public abstract java.util.List getAllEdges()">1</method>
			<method name="public abstract boolean removeVertices(java.util.Collection)">1</method>
			<method name="public abstract boolean isEmpty()">1</method>
			<method name="public abstract boolean addVertex(Object)">1</method>
			<method name="public abstract boolean removeVertex(Object)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.StochasticMinimizer$setGain</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>0.5</lcom3>
		<loc>28</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.666666666666667</amc>
		<cc>
			<method name="public volatile void set(Object x0)">1</method>
			<method name="public void set(Double in)">1</method>
			<method name="public void _init_(edu.stanford.nlp.optimization.StochasticMinimizer, edu.stanford.nlp.optimization.StochasticMinimizer min)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$ForcedSentenceUntilEndAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.parser.SimpleCharStream</name>
		<wmc>38</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>51</rfc>
		<lcom>405</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>33</npm>
		<lcom3>0.4785373608903021</lcom3>
		<loc>1121</loc>
		<dam>0.7058823529411765</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.30451127819548873</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>28.05263157894737</amc>
		<cc>
			<method name="protected void FillBuff()">1</method>
			<method name="public void _init_(java.io.Reader dstream, int startline, int startcolumn, int buffersize)">0</method>
			<method name="public void _init_(java.io.Reader dstream)">0</method>
			<method name="public void ReInit(java.io.InputStream dstream, String encoding, int startline, int startcolumn, int buffersize)">1</method>
			<method name="protected void UpdateLineColumn(char c)">5</method>
			<method name="public int getLine()">1</method>
			<method name="public void ReInit(java.io.Reader dstream, int startline, int startcolumn)">1</method>
			<method name="public void _init_(java.io.InputStream dstream)">0</method>
			<method name="void setTrackLineColumn(boolean trackLineColumn)">1</method>
			<method name="public void adjustBeginLineColumn(int newLine, int newCol)">7</method>
			<method name="public void backup(int amount)">2</method>
			<method name="public void ReInit(java.io.Reader dstream)">1</method>
			<method name="public int getBeginLine()">1</method>
			<method name="public void ReInit(java.io.InputStream dstream, String encoding, int startline, int startcolumn)">1</method>
			<method name="public void _init_(java.io.InputStream dstream, String encoding)">0</method>
			<method name="public void setTabSize(int i)">1</method>
			<method name="public void _init_(java.io.InputStream dstream, int startline, int startcolumn)">0</method>
			<method name="boolean getTrackLineColumn()">1</method>
			<method name="protected void ExpandBuff(boolean wrapAround)">2</method>
			<method name="public void _init_(java.io.Reader dstream, int startline, int startcolumn)">0</method>
			<method name="public void ReInit(java.io.InputStream dstream, int startline, int startcolumn)">1</method>
			<method name="public void _init_(java.io.InputStream dstream, String encoding, int startline, int startcolumn)">0</method>
			<method name="public void ReInit(java.io.InputStream dstream)">1</method>
			<method name="public void ReInit(java.io.Reader dstream, int startline, int startcolumn, int buffersize)">3</method>
			<method name="public char readChar()">1</method>
			<method name="public void ReInit(java.io.InputStream dstream, String encoding)">1</method>
			<method name="public void _init_(java.io.InputStream dstream, int startline, int startcolumn, int buffersize)">0</method>
			<method name="public int getTabSize()">1</method>
			<method name="public char BeginToken()">1</method>
			<method name="public int getColumn()">1</method>
			<method name="public void Done()">1</method>
			<method name="public int getEndColumn()">1</method>
			<method name="public void _init_(java.io.InputStream dstream, String encoding, int startline, int startcolumn, int buffersize)">0</method>
			<method name="public char[] GetSuffix(int len)">2</method>
			<method name="public void ReInit(java.io.InputStream dstream, int startline, int startcolumn, int buffersize)">1</method>
			<method name="public int getEndLine()">1</method>
			<method name="public String GetImage()">2</method>
			<method name="public int getBeginColumn()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.tsurgeon.TokenMgrError</name>
		<wmc>6</wmc>
		<dit>3</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>22</rfc>
		<lcom>15</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>4</npm>
		<lcom3>1.1333333333333333</lcom3>
		<loc>185</loc>
		<dam>0.16666666666666666</dam>
		<moa>0</moa>
		<mfa>0.875</mfa>
		<cam>0.5</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>28.833333333333332</amc>
		<cc>
			<method name="public void _init_(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar, int reason)">0</method>
			<method name="public void _init_()">0</method>
			<method name="protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar)">2</method>
			<method name="public String getMessage()">1</method>
			<method name="protected static final String addEscapes(String str)">14</method>
			<method name="public void _init_(String message, int reason)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$8$1</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>11</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>0.625</lcom3>
		<loc>98</loc>
		<dam>0.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>30.333333333333332</amc>
		<cc>
			<method name="public void initialize()">3</method>
			<method name="void advance()">3</method>
			<method name="void _init_(edu.stanford.nlp.trees.tregex.Relation$8, edu.stanford.nlp.trees.Tree, edu.stanford.nlp.trees.tregex.TregexMatcher)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.CollocationFinder$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.CoreMapExpressionNodePattern</name>
		<wmc>7</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>12</rfc>
		<lcom>15</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>7</npm>
		<lcom3>0.4166666666666667</lcom3>
		<loc>65</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.34285714285714286</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.0</amc>
		<cc>
			<method name="public static edu.stanford.nlp.ling.tokensregex.CoreMapExpressionNodePattern valueOf(edu.stanford.nlp.ling.tokensregex.types.Expression expression)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public volatile boolean match(Object x0)">1</method>
			<method name="public static edu.stanford.nlp.ling.tokensregex.CoreMapExpressionNodePattern valueOf(edu.stanford.nlp.ling.tokensregex.Env env, edu.stanford.nlp.ling.tokensregex.types.Expression expression)">1</method>
			<method name="public boolean match(edu.stanford.nlp.util.CoreMap token)">2</method>
			<method name="public String toString()">1</method>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.Env env, edu.stanford.nlp.ling.tokensregex.types.Expression expression)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.NERFeatureFactory</name>
		<wmc>30</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>12</cbo>
		<rfc>107</rfc>
		<lcom>177</lcom>
		<ca>0</ca>
		<ce>12</ce>
		<npm>5</npm>
		<lcom3>0.9204244031830239</lcom3>
		<loc>8553</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.24904214559386972</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>283.6666666666667</amc>
		<cc>
			<method name="public java.util.Collection getCliqueFeatures(edu.stanford.nlp.util.PaddedList cInfo, int loc, edu.stanford.nlp.sequences.Clique clique)">14</method>
			<method name="protected java.util.Collection featuresCp3C(edu.stanford.nlp.util.PaddedList cInfo, int loc)">21</method>
			<method name="static void _clinit_()">0</method>
			<method name="protected java.util.Collection featuresCpCp2Cp3C(edu.stanford.nlp.util.PaddedList cInfo, int loc)">14</method>
			<method name="protected java.util.Collection featuresCpCp2C(edu.stanford.nlp.util.PaddedList cInfo, int loc)">27</method>
			<method name="private static String dehyphenate(String str)">4</method>
			<method name="String intern(String s)">2</method>
			<method name="private void initLexicon(edu.stanford.nlp.sequences.SeqClassifierFlags flags)">7</method>
			<method name="private static boolean hasLetter(String str)">4</method>
			<method name="public void init(edu.stanford.nlp.sequences.SeqClassifierFlags flags)">2</method>
			<method name="protected java.util.Collection featuresCp5C(edu.stanford.nlp.util.PaddedList cInfo, int loc)">29</method>
			<method name="protected java.util.Collection featuresCpC(edu.stanford.nlp.util.PaddedList cInfo, int loc)">70</method>
			<method name="protected java.util.Collection featuresCpCnC(edu.stanford.nlp.util.PaddedList cInfo, int loc)">6</method>
			<method name="private void makeGenericKeyCache(edu.stanford.nlp.ling.CoreLabel c)">2</method>
			<method name="private void readGazette(java.io.BufferedReader in)">1</method>
			<method name="public void _init_()">0</method>
			<method name="private static boolean isNameCase(String str)">6</method>
			<method name="private void distSimAnnotate(edu.stanford.nlp.util.PaddedList info)">6</method>
			<method name="private static boolean noUpperCase(String str)">4</method>
			<method name="private boolean isOrdinal(java.util.List wordInfos, int pos)">13</method>
			<method name="int reverse(int i)">2</method>
			<method name="protected java.util.Collection featuresCp4C(edu.stanford.nlp.util.PaddedList cInfo, int loc)">25</method>
			<method name="protected java.util.Collection featuresCnC(edu.stanford.nlp.util.PaddedList cInfo, int loc)">4</method>
			<method name="private static String greekify(String str)">1</method>
			<method name="public void clearMemory()">1</method>
			<method name="protected java.util.Collection featuresC(edu.stanford.nlp.util.PaddedList cInfo, int loc)">232</method>
			<method name="public void initGazette()">2</method>
			<method name="private java.util.Collection occurrencePatterns(edu.stanford.nlp.util.PaddedList cInfo, int loc)">27</method>
			<method name="protected java.util.Collection featuresCp2C(edu.stanford.nlp.util.PaddedList cInfo, int loc)">25</method>
			<method name="protected java.util.Collection featuresCpCp2Cp3Cp4C(edu.stanford.nlp.util.PaddedList cInfo, int loc)">5</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.metrics.TreeSpanScoring</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>29</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>148</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4166666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>48.333333333333336</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public static int countSpanErrors(edu.stanford.nlp.trees.TreebankLanguagePack tlp, edu.stanford.nlp.trees.Tree goldTree, edu.stanford.nlp.trees.Tree guessTree)">5</method>
			<method name="public static java.util.Set simplifyConstituents(edu.stanford.nlp.trees.TreebankLanguagePack tlp, java.util.Set constituents)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.AbstractTreebankParserParams$UnorderedUntypedDependencyTyper</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>7</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>43</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.0</amc>
		<cc>
			<method name="public java.util.List makeDependency(edu.stanford.nlp.trees.Tree head, edu.stanford.nlp.trees.Tree dep, edu.stanford.nlp.trees.Tree root)">1</method>
			<method name="public void _init_(edu.stanford.nlp.trees.HeadFinder hf)">0</method>
			<method name="public volatile Object makeDependency(edu.stanford.nlp.trees.Tree x0, edu.stanford.nlp.trees.Tree x1, edu.stanford.nlp.trees.Tree x2)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.ExtractorMidSentenceCapC</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>13</rfc>
		<lcom>8</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>3</npm>
		<lcom3>1.0</lcom3>
		<loc>59</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.4</amc>
		<cc>
			<method name="String extract(edu.stanford.nlp.tagger.maxent.History h, edu.stanford.nlp.tagger.maxent.PairsHolder pH)">5</method>
			<method name="public boolean isLocal()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public boolean isDynamic()">1</method>
			<method name="protected void setGlobalHolder(edu.stanford.nlp.tagger.maxent.MaxentTagger tagger)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.process.DocumentPreprocessor$PlainTextIterator</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>12</cbo>
		<rfc>44</rfc>
		<lcom>3</lcom>
		<ca>3</ca>
		<ce>11</ce>
		<npm>5</npm>
		<lcom3>0.2</lcom3>
		<loc>302</loc>
		<dam>0.8571428571428571</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.5833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>48.166666666666664</amc>
		<cc>
			<method name="private void primeNext()">15</method>
			<method name="public void _init_(edu.stanford.nlp.process.DocumentPreprocessor)">0</method>
			<method name="public java.util.List next()">3</method>
			<method name="public boolean hasNext()">3</method>
			<method name="public void remove()">1</method>
			<method name="public volatile Object next()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.matcher.TrieMap$1</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>6</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>4</npm>
		<lcom3>0.625</lcom3>
		<loc>30</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.6</amc>
		<cc>
			<method name="public Object setValue(Object value)">1</method>
			<method name="public volatile Object getKey()">1</method>
			<method name="void _init_(edu.stanford.nlp.ling.tokensregex.matcher.TrieMap, java.util.List)">0</method>
			<method name="public Object getValue()">1</method>
			<method name="public Iterable getKey()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.CollectionUtils</name>
		<wmc>54</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>33</cbo>
		<rfc>138</rfc>
		<lcom>1429</lcom>
		<ca>24</ca>
		<ce>12</ce>
		<npm>52</npm>
		<lcom3>0.9811320754716981</lcom3>
		<loc>1604</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.08265947888589398</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>28.685185185185187</amc>
		<cc>
			<method name="public static java.util.Collection sampleWithReplacement(java.util.Collection c, int n)">1</method>
			<method name="public static java.util.List sorted(Iterable items)">1</method>
			<method name="public static boolean removeObject(java.util.List l, Object o)">3</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static java.util.Set modes(java.util.Collection values)">1</method>
			<method name="public static java.util.List filterAsList(java.util.Collection original, edu.stanford.nlp.util.Filter f)">2</method>
			<method name="public static java.util.Set intersection(java.util.Set set1, java.util.Set set2)">2</method>
			<method name="public static java.util.Collection trainTestFoldsForCV(java.util.List values, int numFolds)">4</method>
			<method name="public static java.util.Collection loadCollection(String filename, Class c, edu.stanford.nlp.util.CollectionFactory cf)">1</method>
			<method name="public static int getIndex(java.util.List l, Object o)">3</method>
			<method name="private void _init_()">0</method>
			<method name="public static java.util.List asList(int[] a)">2</method>
			<method name="public static java.util.Collection loadCollection(java.io.File file, Class c, edu.stanford.nlp.util.CollectionFactory cf)">1</method>
			<method name="public static java.util.List partitionIntoFolds(java.util.List values, int numFolds)">3</method>
			<method name="public static java.util.List getAll(java.util.Map map, java.util.Collection indices)">2</method>
			<method name="public static void loadCollection(java.io.File file, Class itemClass, java.util.Collection collection)">1</method>
			<method name="public static java.util.Map getMapFromString(String s, Class keyClass, Class valueClass, edu.stanford.nlp.util.MapFactory mapFactory)">1</method>
			<method name="public static java.util.List mergeListWithSortedMatched(java.util.List list, java.util.List matched, edu.stanford.nlp.util.Function aggregator)">3</method>
			<method name="public static java.util.Collection sampleWithReplacement(java.util.Collection c, int n, java.util.Random r)">3</method>
			<method name="public static int getIndex(java.util.List l, Object o, int fromIndex)">3</method>
			<method name="public static java.util.List asList(double[] a)">2</method>
			<method name="public static java.util.List getPrefixesAndSuffixes(java.util.List items, int minSize, int maxSize, Object paddingSymbol, boolean includePrefixes, boolean includeSuffixes)">14</method>
			<method name="public static Object sample(java.util.List l, java.util.Random r)">1</method>
			<method name="public static void addAll(java.util.Collection collection, Iterable items)">2</method>
			<method name="public static java.util.List toList(Iterable items)">1</method>
			<method name="public static java.util.Collection union(java.util.Collection set1, java.util.Collection set2)">3</method>
			<method name="public static java.util.Set unionAsSet(java.util.Collection set1, java.util.Collection set2)">3</method>
			<method name="public static void loadCollection(String fileName, Class itemClass, java.util.Collection collection)">1</method>
			<method name="public static int[] asIntArray(java.util.Collection coll)">2</method>
			<method name="public static java.util.Set asSet(Object[] o)">1</method>
			<method name="public static java.util.List sorted(Iterable items, java.util.Comparator comparator)">1</method>
			<method name="public static java.util.List getNGrams(java.util.List items, int minSize, int maxSize)">5</method>
			<method name="public static int compareLists(java.util.List list1, java.util.List list2)">9</method>
			<method name="public static java.util.Comparator getListComparator()">1</method>
			<method name="public static boolean isSubList(java.util.List l1, java.util.List l)">6</method>
			<method name="public static java.util.Collection diff(java.util.Collection list1, java.util.Collection list2)">2</method>
			<method name="public static Object mode(java.util.Collection values)">1</method>
			<method name="public static transient java.util.List makeList(Object[] items)">1</method>
			<method name="public static java.util.Collection sampleWithoutReplacement(java.util.Collection c, int n, java.util.Random r)">4</method>
			<method name="public static java.util.List transformAsList(java.util.Collection original, edu.stanford.nlp.util.Function f)">2</method>
			<method name="public static double[] asDoubleArray(java.util.Collection coll)">2</method>
			<method name="public static java.util.Set toSet(Iterable items)">1</method>
			<method name="public static boolean containsAny(java.util.Collection collection, java.util.Collection toCheck)">2</method>
			<method name="public static java.util.Set diffAsSet(java.util.Collection list1, java.util.Collection list2)">2</method>
			<method name="public static java.util.List flatten(java.util.Collection nestedList)">2</method>
			<method name="public static java.util.List mergeList(java.util.List list, java.util.List matched, edu.stanford.nlp.util.Function aggregator)">1</method>
			<method name="public static int maxIndex(java.util.List list)">4</method>
			<method name="public static boolean containsObject(java.util.Collection c, Object o)">2</method>
			<method name="public static java.util.Collection uniqueNonhashableObjects(java.util.Collection objects, edu.stanford.nlp.util.Function customHasher)">2</method>
			<method name="public static java.util.Collection sampleWithoutReplacement(java.util.Collection c, int n)">1</method>
			<method name="public static java.util.List mergeListWithSortedMatchedPreAggregated(java.util.List list, java.util.List matched, edu.stanford.nlp.util.Function toIntervalFunc)">3</method>
			<method name="public static java.util.List mergeList(java.util.List list, java.util.Collection matched, edu.stanford.nlp.util.Function toIntervalFunc, edu.stanford.nlp.util.Function aggregator)">2</method>
			<method name="public static String toVerticalString(java.util.Map m)">2</method>
			<method name="public static java.util.Set transformAsSet(java.util.Collection original, edu.stanford.nlp.util.Function f)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.CoreMapAggregator</name>
		<wmc>11</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>20</rfc>
		<lcom>47</lcom>
		<ca>2</ca>
		<ce>5</ce>
		<npm>10</npm>
		<lcom3>0.5</lcom3>
		<loc>99</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.2857142857142857</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.7272727272727275</amc>
		<cc>
			<method name="public static edu.stanford.nlp.pipeline.CoreMapAggregator getAggregator(java.util.Map aggregators)">1</method>
			<method name="public edu.stanford.nlp.util.CoreMap apply(java.util.List in)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void _init_(java.util.Map aggregators, Class mergedKey)">0</method>
			<method name="public static edu.stanford.nlp.pipeline.CoreMapAggregator getAggregator(java.util.Map aggregators, Class key)">1</method>
			<method name="public java.util.List merge(java.util.List list, java.util.List matched, edu.stanford.nlp.util.Function toIntervalFunc)">1</method>
			<method name="public void _init_(java.util.Map aggregators)">0</method>
			<method name="public java.util.List merge(java.util.List list, java.util.List matched)">1</method>
			<method name="public static edu.stanford.nlp.pipeline.CoreMapAggregator getDefaultAggregator()">1</method>
			<method name="public volatile Object apply(Object x0)">1</method>
			<method name="public edu.stanford.nlp.util.CoreMap merge(java.util.List in, int start, int end)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.hebrew.HebrewTreeNormalizer</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>14</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>2</npm>
		<lcom3>1.0</lcom3>
		<loc>62</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>29.0</amc>
		<cc>
			<method name="public edu.stanford.nlp.trees.Tree normalizeWholeTree(edu.stanford.nlp.trees.Tree tree, edu.stanford.nlp.trees.TreeFactory tf)">7</method>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$SemanticWordAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$AbgeneAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.ExtractorFrenchVerbSuffix</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>9</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="boolean extractFeature(String cword)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.UnnamedDependency</name>
		<wmc>13</wmc>
		<dit>1</dit>
		<noc>2</noc>
		<cbo>12</cbo>
		<rfc>29</rfc>
		<lcom>50</lcom>
		<ca>5</ca>
		<ce>7</ce>
		<npm>12</npm>
		<lcom3>0.7166666666666667</lcom3>
		<loc>225</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.34615384615384615</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>15.923076923076923</amc>
		<cc>
			<method name="public boolean equals(Object o)">1</method>
			<method name="public edu.stanford.nlp.ling.Label governor()">1</method>
			<method name="public static edu.stanford.nlp.trees.DependencyFactory factory()">1</method>
			<method name="public void _init_(edu.stanford.nlp.ling.Label regent, edu.stanford.nlp.ling.Label dependent)">0</method>
			<method name="public String toString(String format)">3</method>
			<method name="public int hashCode()">1</method>
			<method name="public edu.stanford.nlp.trees.DependencyFactory dependencyFactory()">1</method>
			<method name="public Object name()">1</method>
			<method name="public String toString()">1</method>
			<method name="public void _init_(String regent, String dependent)">0</method>
			<method name="public edu.stanford.nlp.ling.Label dependent()">1</method>
			<method name="protected String getText(edu.stanford.nlp.ling.Label label)">2</method>
			<method name="public boolean equalsIgnoreName(Object o)">5</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.arabic.ArabicHeadFinder$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.ParserAnnotations$CandidatePartOfSpeechAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.TreeCoreAnnotations$BinarizedTreeAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$SectionDateAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Pair$BySecondPairComparator</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>20</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.666666666666667</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="public int compare(edu.stanford.nlp.util.Pair pair1, edu.stanford.nlp.util.Pair pair2)">1</method>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.classify.LogisticObjectiveFunction</name>
		<wmc>11</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>17</rfc>
		<lcom>47</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>9</npm>
		<lcom3>0.5166666666666667</lcom3>
		<loc>403</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5568181818181818</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>35.09090909090909</amc>
		<cc>
			<method name="public void _init_(int numFeatures, int[][] data, double[][] values, int[] labels, float[] dataweights)">0</method>
			<method name="public void _init_(int numFeatures, int[][] data, double[][] values, int[] labels)">0</method>
			<method name="public void _init_(int numFeatures, int[][] data, int[] labels, float[] dataweights)">0</method>
			<method name="public void _init_(int numFeatures, int[][] data, double[][] values, int[] labels, edu.stanford.nlp.classify.LogPrior prior)">0</method>
			<method name="public void _init_(int numFeatures, int[][] data, int[] labels)">0</method>
			<method name="public void _init_(int numFeatures, int[][] data, int[] labels, edu.stanford.nlp.classify.LogPrior prior)">0</method>
			<method name="public int domainDimension()">1</method>
			<method name="protected void calculate(double[] x)">7</method>
			<method name="public void _init_(int numFeatures, int[][] data, double[][] values, int[] labels, edu.stanford.nlp.classify.LogPrior prior, float[] dataweights)">0</method>
			<method name="public void _init_(int numFeatures, int[][] data, int[] labels, edu.stanford.nlp.classify.LogPrior prior, float[] dataweights)">0</method>
			<method name="protected void calculateRVF(double[] x)">6</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.LabeledScoredConstituent</name>
		<wmc>8</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>12</rfc>
		<lcom>22</lcom>
		<ca>3</ca>
		<ce>6</ce>
		<npm>8</npm>
		<lcom3>0.7142857142857143</lcom3>
		<loc>39</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.75</amc>
		<cc>
			<method name="public void setScore(double score)">1</method>
			<method name="public double score()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public edu.stanford.nlp.ling.LabelFactory labelFactory()">1</method>
			<method name="public void _init_(int start, int end, edu.stanford.nlp.ling.Label label, double score)">0</method>
			<method name="public void _init_(int start, int end)">0</method>
			<method name="public static edu.stanford.nlp.trees.ConstituentFactory factory()">1</method>
			<method name="public edu.stanford.nlp.trees.ConstituentFactory constituentFactory()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.ByteStreamGobbler</name>
		<wmc>6</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>23</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>6</npm>
		<lcom3>0.2666666666666666</lcom3>
		<loc>135</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.9552238805970149</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>21.0</amc>
		<cc>
			<method name="public java.io.InputStream getInputStream()">1</method>
			<method name="public void _init_(java.io.InputStream is, java.io.OutputStream out)">0</method>
			<method name="public java.io.OutputStream getOutputStream()">1</method>
			<method name="public void _init_(String name, java.io.InputStream is, java.io.OutputStream out, int bufferSize)">0</method>
			<method name="public void run()">3</method>
			<method name="public void _init_(String name, java.io.InputStream is, java.io.OutputStream out)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.PrettyLogger</name>
		<wmc>11</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>15</cbo>
		<rfc>58</rfc>
		<lcom>53</lcom>
		<ca>10</ca>
		<ce>6</ce>
		<npm>5</npm>
		<lcom3>0.8</lcom3>
		<loc>743</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.275</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>66.45454545454545</amc>
		<cc>
			<method name="public static boolean dispatchable(Object obj)">7</method>
			<method name="private void _init_()">0</method>
			<method name="private static void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels channels, String description, Object[] array)">5</method>
			<method name="public static void log(String description, Object obj)">1</method>
			<method name="private static void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels channels, String description, java.util.Dictionary dict)">2</method>
			<method name="static void _clinit_()">0</method>
			<method name="private static void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels channels, String description, Iterable iterable)">7</method>
			<method name="public static void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels channels, String description, Object obj)">16</method>
			<method name="private static void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels channels, String description, java.util.Map mapping)">11</method>
			<method name="public static void log(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels channels, Object obj)">1</method>
			<method name="public static void log(Object obj)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.ParserUtils</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>3</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>34</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.0</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="static void printOutOfMemory(java.io.PrintWriter pw)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$EntityRuleAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.maxent.Features</name>
		<wmc>10</wmc>
		<dit>1</dit>
		<noc>1</noc>
		<cbo>9</cbo>
		<rfc>41</rfc>
		<lcom>13</lcom>
		<ca>5</ca>
		<ce>4</ce>
		<npm>9</npm>
		<lcom3>0.5555555555555556</lcom3>
		<loc>294</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.28888888888888886</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>28.2</amc>
		<cc>
			<method name="public int size()">1</method>
			<method name="public void print()">2</method>
			<method name="public void add(edu.stanford.nlp.maxent.Feature m)">1</method>
			<method name="public edu.stanford.nlp.maxent.Experiments domain()">1</method>
			<method name="public void clean()">1</method>
			<method name="public void removeLast()">1</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public edu.stanford.nlp.maxent.Feature get(int index)">1</method>
			<method name="public void _init_(String filename, edu.stanford.nlp.maxent.Experiments domain)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$4$1</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>10</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>78</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>24.0</amc>
		<cc>
			<method name="public void initialize()">3</method>
			<method name="void advance()">3</method>
			<method name="void _init_(edu.stanford.nlp.trees.tregex.Relation$4, edu.stanford.nlp.trees.Tree)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.international.arabic.pipeline.DefaultLexicalMapper</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>26</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>5</npm>
		<lcom3>0.5384615384615384</lcom3>
		<loc>495</loc>
		<dam>0.8461538461538461</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4642857142857143</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>66.0</amc>
		<cc>
			<method name="public static void main(String[] args)">1</method>
			<method name="public void _init_()">0</method>
			<method name="private String mapUtf8(String element)">8</method>
			<method name="public String map(String parent, String element)">4</method>
			<method name="public boolean canChangeEncoding(String parent, String element)">6</method>
			<method name="private String mapBuckwalter(String element)">8</method>
			<method name="public transient void setup(java.io.File path, String[] options)">6</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalRelations$RelativeClauseModifierGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalRelations$AuxPassiveGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.TimeFormatter$TimeZoneIdComponent</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>21</rfc>
		<lcom>6</lcom>
		<ca>2</ca>
		<ce>6</ce>
		<npm>3</npm>
		<lcom3>0.75</lcom3>
		<loc>74</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.2</amc>
		<cc>
			<method name="protected StringBuilder appendRegex0(StringBuilder sb)">1</method>
			<method name="public org.joda.time.DateTimeZone parseDateTimeZone(String str)">1</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public edu.stanford.nlp.time.SUTime$Temporal updateTemporal(edu.stanford.nlp.time.SUTime$Temporal t, String fieldValueStr)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.NamedDependency$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.math.ArrayMath$InvalidElementException</name>
		<wmc>1</wmc>
		<dit>4</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>4</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>6</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>1.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.0</amc>
		<cc>
			<method name="public void _init_(String s)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalRelations$PrepositionalModifierGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.pascal.Prior</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>22</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>3</npm>
		<lcom3>0.16666666666666674</lcom3>
		<loc>177</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4166666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>57.0</amc>
		<cc>
			<method name="public double get(java.util.Set presentFields)">3</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="public void _init_(java.io.BufferedReader reader)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.common.DomReader</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>2</noc>
		<cbo>2</cbo>
		<rfc>25</rfc>
		<lcom>21</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>209</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.42857142857142855</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>28.857142857142858</amc>
		<cc>
			<method name="public static String getAttributeValue(org.w3c.dom.Node node, String attributeName)">1</method>
			<method name="protected static org.w3c.dom.Node getChildByName(org.w3c.dom.Node node, String name)">4</method>
			<method name="public static org.w3c.dom.Document readDocument(java.io.File f)">1</method>
			<method name="protected static org.w3c.dom.Node getChildByAttribute(org.w3c.dom.Node node, String attributeName, String attributeValue)">6</method>
			<method name="public void _init_()">0</method>
			<method name="protected static java.util.List getChildrenByName(org.w3c.dom.Node node, String name)">3</method>
			<method name="protected static org.w3c.dom.Node getChildByNameAndAttribute(org.w3c.dom.Node node, String name, String attributeName, String attributeValue)">7</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.TreeLeafLabelTransformer</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>11</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>4</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>34</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.5</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.util.Function transform)">0</method>
			<method name="public edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree tree)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalRelations$ConjunctGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.io.TreeTaggedFileReader</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>12</cbo>
		<rfc>22</rfc>
		<lcom>14</lcom>
		<ca>1</ca>
		<ce>12</ce>
		<npm>7</npm>
		<lcom3>0.7321428571428571</lcom3>
		<loc>158</loc>
		<dam>0.0</dam>
		<moa>6</moa>
		<mfa>0.0</mfa>
		<cam>0.5625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>17.75</amc>
		<cc>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="private void findNext()">4</method>
			<method name="public java.util.List next()">4</method>
			<method name="public boolean hasNext()">2</method>
			<method name="public String filename()">1</method>
			<method name="public void remove()">1</method>
			<method name="public volatile Object next()">1</method>
			<method name="public void _init_(edu.stanford.nlp.tagger.io.TaggedFileRecord record)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.MaxentTagger$1</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>35</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>33.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.FrenchTreebankParserParams$AddPOSSequenceFunction</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>23</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>4</npm>
		<lcom3>0.3333333333333333</lcom3>
		<loc>150</loc>
		<dam>0.8</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.35714285714285715</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>35.25</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.FrenchTreebankParserParams, String annotationMark, int cutoff, boolean basicCategory)">0</method>
			<method name="public String toString()">1</method>
			<method name="public volatile Object apply(Object x0)">1</method>
			<method name="public String apply(edu.stanford.nlp.trees.tregex.TregexMatcher m)">6</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.classify.ClassifierCreator</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract edu.stanford.nlp.classify.Classifier createClassifier(double[])">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.MutableDouble</name>
		<wmc>15</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>19</rfc>
		<lcom>0</lcom>
		<ca>6</ca>
		<ce>0</ce>
		<npm>15</npm>
		<lcom3>0.5357142857142857</lcom3>
		<loc>117</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.3333333333333333</mfa>
		<cam>0.28</cam>
		<ic>1</ic>
		<cbm>2</cbm>
		<amc>6.666666666666667</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public byte byteValue()">1</method>
			<method name="public double doubleValue()">1</method>
			<method name="public void _init_(double d)">0</method>
			<method name="public void _init_(Number num)">0</method>
			<method name="public volatile int compareTo(Object x0)">1</method>
			<method name="public long longValue()">1</method>
			<method name="public int hashCode()">1</method>
			<method name="public int compareTo(edu.stanford.nlp.util.MutableDouble anotherMutableDouble)">3</method>
			<method name="public float floatValue()">1</method>
			<method name="public int intValue()">1</method>
			<method name="public short shortValue()">1</method>
			<method name="public boolean equals(Object obj)">3</method>
			<method name="public String toString()">1</method>
			<method name="public void set(double d)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.ResultsPrinter</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>20</rfc>
		<lcom>15</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>6</npm>
		<lcom3>2.0</lcom3>
		<loc>121</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.166666666666668</amc>
		<cc>
			<method name="public abstract void printResultsUsingLabels(java.io.PrintWriter, java.util.List, java.util.List)">1</method>
			<method name="public String printResults(edu.stanford.nlp.util.CoreMap goldStandard, edu.stanford.nlp.util.CoreMap extractorOutput)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public String printResults(java.util.List goldStandard, java.util.List extractorOutput)">1</method>
			<method name="public static void align(java.util.List list1, java.util.List list2)">5</method>
			<method name="public abstract void printResults(java.io.PrintWriter, java.util.List, java.util.List)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.CoreMapAttributeAggregator$4</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>6</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>27</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.5</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="public Object aggregate(Class key, java.util.List in)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.CoreMapAttributeAggregator$3</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>6</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>33</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.5</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="public Object aggregate(Class key, java.util.List in)">4</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalRelations$DiscourseElementGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.CoreMapAttributeAggregator$2</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>7</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>27</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.5</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="public Object aggregate(Class key, java.util.List in)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.Expressions$CaseExpression</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>8</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>42</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>41.0</amc>
		<cc>
			<method name="public void _init_(java.util.List conds, edu.stanford.nlp.ling.tokensregex.types.Expression elseExpr)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.CoreMapAttributeAggregator$1</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>7</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>30</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>14.0</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="public Object aggregate(Class key, java.util.List in)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$CostMagnificationAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.CoreMapAttributeAggregator$8</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>14</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>65</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>31.5</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="public Object aggregate(Class key, java.util.List in)">5</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.StanfordCoreNLP$OutputFormat</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>3</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.9166666666666666</lcom3>
		<loc>56</loc>
		<dam>0.25</dam>
		<moa>4</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>12.0</amc>
		<cc>
			<method name="public static edu.stanford.nlp.pipeline.StanfordCoreNLP$OutputFormat[] values()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static edu.stanford.nlp.pipeline.StanfordCoreNLP$OutputFormat valueOf(String name)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.CoreMapAttributeAggregator$7</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>14</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>65</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>31.5</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="public Object aggregate(Class key, java.util.List in)">5</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.CoreMapAttributeAggregator$6</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>16</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>68</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>33.0</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="public Object aggregate(Class key, java.util.List in)">5</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.CoreMapAttributeAggregator$5</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>9</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.5</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="public Object aggregate(Class key, java.util.List in)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.CorefChain$CorefMentionComparator</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>4</rfc>
		<lcom>3</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>57</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.0</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="protected void _init_()">0</method>
			<method name="public int compare(edu.stanford.nlp.dcoref.CorefChain$CorefMention m1, edu.stanford.nlp.dcoref.CorefChain$CorefMention m2)">7</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.GeneralizedCounter</name>
		<wmc>51</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>109</rfc>
		<lcom>743</lcom>
		<ca>4</ca>
		<ce>8</ce>
		<npm>34</npm>
		<lcom3>0.6566666666666666</lcom3>
		<loc>1693</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.14923076923076922</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>32.07843137254902</amc>
		<cc>
			<method name="public void incrementCount1D(Object o)">1</method>
			<method name="private void wrongDepth()">1</method>
			<method name="public edu.stanford.nlp.stats.GeneralizedCounter reverseKeys()">2</method>
			<method name="static java.util.Set access$600(edu.stanford.nlp.stats.GeneralizedCounter x0, java.util.Set x1, Object[] x2, boolean x3)">1</method>
			<method name="public void incrementCount1D(Object o, double count)">4</method>
			<method name="public edu.stanford.nlp.stats.GeneralizedCounter conditionalizeOnce(Object o)">2</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void incrementCount2D(Object first, Object second, double count)">2</method>
			<method name="private void printKeySet()">2</method>
			<method name="public edu.stanford.nlp.stats.GeneralizedCounter conditionalize(java.util.List l)">3</method>
			<method name="public java.util.Set entrySet()">1</method>
			<method name="public double getCount(Object o1, Object o2)">3</method>
			<method name="public void incrementCount(java.util.List l, double count)">3</method>
			<method name="public String toString(String param)">5</method>
			<method name="private java.util.Set keySet(java.util.Set s, Object[] key, boolean useList)">6</method>
			<method name="public double getCount(Object o)">3</method>
			<method name="public double getCount(Object o1, Object o2, Object o3)">3</method>
			<method name="public edu.stanford.nlp.stats.ClassicCounter oneDimensionalCounterView()">2</method>
			<method name="private void _init_()">0</method>
			<method name="private edu.stanford.nlp.stats.GeneralizedCounter conditionalizeHelper(Object o)">3</method>
			<method name="public void prettyPrint()">1</method>
			<method name="private java.util.Set entrySet(java.util.Set s, Object[] key, boolean useLists)">6</method>
			<method name="public int depth()">1</method>
			<method name="public void _init_(int depth)">0</method>
			<method name="public void incrementCount2D(Object first, Object second)">1</method>
			<method name="public void prettyPrint(java.io.PrintWriter pw)">1</method>
			<method name="public java.util.Set topLevelKeySet()">1</method>
			<method name="public void incrementCount3D(Object first, Object second, Object third)">1</method>
			<method name="public String toString()">1</method>
			<method name="public void incrementCount3D(Object first, Object second, Object third, double count)">2</method>
			<method name="public boolean isEmpty()">1</method>
			<method name="public java.util.Set keySet()">1</method>
			<method name="static Object[] access$400()">1</method>
			<method name="private static void arrayPrintDouble(double[] o)">2</method>
			<method name="private void addToTotal(double d)">1</method>
			<method name="private java.util.Set lowestLevelCounterEntrySet(java.util.Set s, Object[] key, boolean useLists)">6</method>
			<method name="static java.util.Map access$200(edu.stanford.nlp.stats.GeneralizedCounter x0)">1</method>
			<method name="public java.util.Set lowestLevelCounterEntrySet()">1</method>
			<method name="private java.util.Set dumpKeys()">1</method>
			<method name="public double totalCount()">3</method>
			<method name="private void prettyPrint(java.io.PrintWriter pw, String buffer, String bufferIncrement)">3</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="public void incrementCount(java.util.List l)">1</method>
			<method name="static java.util.Set access$500(edu.stanford.nlp.stats.GeneralizedCounter x0, java.util.Set x1, Object[] x2, boolean x3)">1</method>
			<method name="public edu.stanford.nlp.stats.ClassicCounter counterView()">1</method>
			<method name="public double[] getCounts(java.util.List l)">3</method>
			<method name="public void incrementCount(java.util.List l, Object o)">1</method>
			<method name="public boolean containsKey(java.util.List key)">3</method>
			<method name="public void incrementCount(java.util.List l, Object o, double count)">3</method>
			<method name="static int access$100(edu.stanford.nlp.stats.GeneralizedCounter x0)">1</method>
			<method name="public void prettyPrint(java.io.PrintWriter pw, String bufferIncrement)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.RedwoodPrintStream</name>
		<wmc>38</wmc>
		<dit>4</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>63</rfc>
		<lcom>679</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>33</npm>
		<lcom3>0.5675675675675675</lcom3>
		<loc>400</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.5842696629213483</mfa>
		<cam>0.14035087719298245</cam>
		<ic>3</ic>
		<cbm>10</cbm>
		<amc>9.421052631578947</amc>
		<cc>
			<method name="private synchronized void log(Object message)">3</method>
			<method name="public boolean checkError()">1</method>
			<method name="public void print(char[] chars)">1</method>
			<method name="private synchronized void logB(Object message)">4</method>
			<method name="public java.io.PrintStream append(char c)">1</method>
			<method name="public void println(int i)">1</method>
			<method name="public void print(double d)">1</method>
			<method name="public void close()">1</method>
			<method name="public void print(char c)">1</method>
			<method name="protected void setError()">1</method>
			<method name="public void println(float f)">1</method>
			<method name="public transient java.io.PrintStream format(java.util.Locale locale, String s, Object[] objects)">1</method>
			<method name="public void print(Object o)">1</method>
			<method name="public void print(boolean b)">1</method>
			<method name="public void print(int i)">1</method>
			<method name="public void println(double d)">1</method>
			<method name="public void flush()">1</method>
			<method name="public transient java.io.PrintStream printf(String s, Object[] objects)">1</method>
			<method name="public void println(char c)">1</method>
			<method name="public void print(float f)">1</method>
			<method name="public void println()">1</method>
			<method name="public void print(String s)">1</method>
			<method name="public volatile Appendable append(CharSequence x0, int x1, int x2)">1</method>
			<method name="public void println(boolean b)">1</method>
			<method name="public void _init_(edu.stanford.nlp.util.logging.Redwood$Flag tag, java.io.PrintStream realStream)">0</method>
			<method name="public void println(Object o)">2</method>
			<method name="public java.io.PrintStream append(CharSequence charSequence)">1</method>
			<method name="public java.io.PrintStream append(CharSequence charSequence, int i, int i1)">1</method>
			<method name="private synchronized void logf(String format, Object[] args)">2</method>
			<method name="protected void clearError()">1</method>
			<method name="public transient java.io.PrintStream format(String s, Object[] objects)">1</method>
			<method name="public transient java.io.PrintStream printf(java.util.Locale locale, String s, Object[] objects)">1</method>
			<method name="public volatile Appendable append(char x0)">1</method>
			<method name="public void println(long l)">1</method>
			<method name="public void println(String s)">5</method>
			<method name="public void print(long l)">1</method>
			<method name="public volatile Appendable append(CharSequence x0)">1</method>
			<method name="public void println(char[] chars)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMode</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>3</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.9333333333333332</lcom3>
		<loc>67</loc>
		<dam>0.2</dam>
		<moa>5</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>14.5</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMode valueOf(String name)">1</method>
			<method name="public static edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMode[] values()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$GovernorAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.EditDistance</name>
		<wmc>16</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>22</rfc>
		<lcom>104</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>5</npm>
		<lcom3>0.6</lcom3>
		<loc>369</loc>
		<dam>0.5</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.21875</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>21.9375</amc>
		<cc>
			<method name="protected double better(double x, double y)">2</method>
			<method name="public double score(Object[] source, Object[] target)">1</method>
			<method name="public void _init_()">0</method>
			<method name="protected double unit()">1</method>
			<method name="public void _init_(boolean allowTranspose)">0</method>
			<method name="protected double best()">1</method>
			<method name="protected double substituteCost(Object source, Object target)">2</method>
			<method name="double transposeCost(Object s1, Object s2, Object t1, Object t2)">4</method>
			<method name="protected double worst()">1</method>
			<method name="protected void clear(int sourceLength, int targetLength)">5</method>
			<method name="protected double deleteCost(Object o)">1</method>
			<method name="public static void main(String[] args)">2</method>
			<method name="protected double combine(double x, double y)">1</method>
			<method name="double score(Object[] source, int sPos, Object[] target, int tPos)">12</method>
			<method name="protected double insertCost(Object o)">1</method>
			<method name="public double score(String sourceStr, String targetStr)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.MultiPatternMatcher</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>27</rfc>
		<lcom>12</lcom>
		<ca>2</ca>
		<ce>9</ce>
		<npm>8</npm>
		<lcom3>0.2857142857142857</lcom3>
		<loc>168</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.3958333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.75</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.MultiPatternMatcher$SequencePatternTrigger patternTrigger, java.util.Collection patterns)">0</method>
			<method name="public java.util.List findNonOverlapping(java.util.List elements, java.util.Comparator cmp)">3</method>
			<method name="public transient void _init_(edu.stanford.nlp.ling.tokensregex.MultiPatternMatcher$SequencePatternTrigger patternTrigger, edu.stanford.nlp.ling.tokensregex.SequencePattern[] patterns)">0</method>
			<method name="public Iterable findAllNonOverlappingMatchesPerPattern(java.util.List elements)">2</method>
			<method name="public java.util.List findNonOverlapping(java.util.List elements)">1</method>
			<method name="public transient void _init_(edu.stanford.nlp.ling.tokensregex.SequencePattern[] patterns)">0</method>
			<method name="public void _init_(java.util.Collection patterns)">0</method>
			<method name="public java.util.Collection getTriggeredPatterns(java.util.List elements)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$Temporal</name>
		<wmc>37</wmc>
		<dit>1</dit>
		<noc>4</noc>
		<cbo>66</cbo>
		<rfc>58</rfc>
		<lcom>640</lcom>
		<ca>63</ca>
		<ce>10</ce>
		<npm>37</npm>
		<lcom3>0.9398148148148149</lcom3>
		<loc>343</loc>
		<dam>0.16666666666666666</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.17117117117117117</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.108108108108109</amc>
		<cc>
			<method name="public edu.stanford.nlp.time.SUTime$Temporal setTimeZone(org.joda.time.DateTimeZone tz)">1</method>
			<method name="public abstract edu.stanford.nlp.time.SUTime$Duration getDuration()">1</method>
			<method name="public abstract boolean isGrounded()">1</method>
			<method name="public java.util.Map getTimexAttributes(edu.stanford.nlp.time.SUTime$TimeIndex timeIndex)">6</method>
			<method name="public String getTimexValue()">1</method>
			<method name="public int getTid(edu.stanford.nlp.time.SUTime$TimeIndex timeIndex)">1</method>
			<method name="public abstract edu.stanford.nlp.time.SUTime$Range getRange(int, edu.stanford.nlp.time.SUTime$Duration)">1</method>
			<method name="public String getTfidString(edu.stanford.nlp.time.SUTime$TimeIndex timeIndex)">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Range getRange()">1</method>
			<method name="public void _init_(edu.stanford.nlp.time.SUTime$Temporal t)">0</method>
			<method name="public String toISOString()">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Temporal addMod(String mod)">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Range getRange(int flags)">1</method>
			<method name="public boolean isApprox()">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Duration getPeriod()">2</method>
			<method name="public boolean includeTimexAltValue()">1</method>
			<method name="public String toString()">1</method>
			<method name="public boolean isRef()">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Duration getUncertaintyGranularity()">2</method>
			<method name="public String getTidString(edu.stanford.nlp.time.SUTime$TimeIndex timeIndex)">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time refTime)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public int getTfid(edu.stanford.nlp.time.SUTime$TimeIndex timeIndex)">1</method>
			<method name="public static edu.stanford.nlp.time.SUTime$Temporal setTimeZone(edu.stanford.nlp.time.SUTime$Temporal t, org.joda.time.DateTimeZone tz)">2</method>
			<method name="public String getTimeLabel()">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Temporal setTimeZone(int offsetHours)">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Duration getGranularity()">2</method>
			<method name="public edu.stanford.nlp.time.SUTime$Temporal next()">3</method>
			<method name="public String toFormattedString(int flags)">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Temporal intersect(edu.stanford.nlp.time.SUTime$Temporal t)">1</method>
			<method name="public abstract edu.stanford.nlp.time.SUTime$Time getTime()">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$TimexType getTimexType()">2</method>
			<method name="public edu.stanford.nlp.time.SUTime$StandardTemporalType getStandardTemporalType()">1</method>
			<method name="public String getMod()">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Temporal prev()">3</method>
			<method name="public abstract edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time, int)">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Temporal addModApprox(String mod, boolean approx)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$IsoDate</name>
		<wmc>14</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>38</rfc>
		<lcom>0</lcom>
		<ca>4</ca>
		<ce>5</ce>
		<npm>13</npm>
		<lcom3>0.3538461538461538</lcom3>
		<loc>455</loc>
		<dam>0.2</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2976190476190476</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>31.142857142857142</amc>
		<cc>
			<method name="public void setMonth(int m)">1</method>
			<method name="private void initBase()">5</method>
			<method name="public int getMonth()">1</method>
			<method name="public void _init_(Number y, Number m, Number d, Number era, Boolean yearEraAdjustNeeded)">0</method>
			<method name="public int getYear()">1</method>
			<method name="public void _init_(Number y, Number m, Number d)">0</method>
			<method name="public int getDay()">1</method>
			<method name="public void setDay(int d)">1</method>
			<method name="public void _init_(int y, int m, int d)">0</method>
			<method name="public String toString()">6</method>
			<method name="public void setYear(int y)">1</method>
			<method name="public void setDate(int y, int m, int d)">1</method>
			<method name="public void _init_(edu.stanford.nlp.time.SUTime$StandardTemporalType temporalType, int y, int m, int d)">0</method>
			<method name="public void _init_(String y, String m, String d)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.Dictionaries$Animacy</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>6</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.9166666666666666</lcom3>
		<loc>56</loc>
		<dam>0.25</dam>
		<moa>4</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>12.0</amc>
		<cc>
			<method name="public static edu.stanford.nlp.dcoref.Dictionaries$Animacy valueOf(String name)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static edu.stanford.nlp.dcoref.Dictionaries$Animacy[] values()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$BasicSequenceExtractRule</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>11</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>59</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.333333333333332</amc>
		<cc>
			<method name="public volatile boolean extract(Object x0, java.util.List x1)">1</method>
			<method name="public boolean extract(java.util.List seq, java.util.List out)">3</method>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.MatchedExpression$SingleAnnotationExtractor extractor)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.EnglishTreebankParserParams$EnglishTest</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>21</loc>
		<dam>0.2</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.0</amc>
		<cc>
			<method name="void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.objectbank.XMLBeginEndIterator$XMLBeginEndIteratorFactory</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>34</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>14.0</amc>
		<cc>
			<method name="public void _init_(String tag, edu.stanford.nlp.util.Function op, boolean keepInternalTags, boolean keepDelimitingTags)">0</method>
			<method name="public java.util.Iterator getIterator(java.io.Reader r)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.TreeReaderFactory</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>59</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>58</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$IsURLAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.ConstituentFactory</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>20</cbo>
		<rfc>2</rfc>
		<lcom>1</lcom>
		<ca>18</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>2</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract edu.stanford.nlp.trees.Constituent newConstituent(int, int, edu.stanford.nlp.ling.Label, double)">1</method>
			<method name="public abstract edu.stanford.nlp.trees.Constituent newConstituent(int, int)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.EnvLookup</name>
		<wmc>9</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>19</cbo>
		<rfc>21</rfc>
		<lcom>36</lcom>
		<ca>13</ca>
		<ce>6</ce>
		<npm>9</npm>
		<lcom3>2.0</lcom3>
		<loc>132</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.37037037037037035</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.666666666666666</amc>
		<cc>
			<method name="public static Class lookupAnnotationKey(edu.stanford.nlp.ling.tokensregex.Env env, String name)">7</method>
			<method name="public void _init_()">0</method>
			<method name="public static Class getDefaultTextAnnotationKey(edu.stanford.nlp.ling.tokensregex.Env env)">3</method>
			<method name="public static java.util.Map getDefaultTokensAggregators(edu.stanford.nlp.ling.tokensregex.Env env)">3</method>
			<method name="public static java.util.List getDefaultTokensResultAnnotationKey(edu.stanford.nlp.ling.tokensregex.Env env)">3</method>
			<method name="public static java.util.List getDefaultResultAnnotationKey(edu.stanford.nlp.ling.tokensregex.Env env)">3</method>
			<method name="public static Class getDefaultTokensAnnotationKey(edu.stanford.nlp.ling.tokensregex.Env env)">3</method>
			<method name="public static Class getDefaultNestedResultsAnnotationKey(edu.stanford.nlp.ling.tokensregex.Env env)">3</method>
			<method name="public static edu.stanford.nlp.util.Function getDefaultResultAnnotationExtractor(edu.stanford.nlp.ling.tokensregex.Env env)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$CollapsedDependenciesAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.EnglishTreebankParserParams$EnglishSubcategoryStripper</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>32</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>11</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>341</loc>
		<dam>0.5</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>168.5</amc>
		<cc>
			<method name="protected void _init_(edu.stanford.nlp.parser.lexparser.EnglishTreebankParserParams)">0</method>
			<method name="public edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree tree)">26</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.fsm.TransducerGraph$OutputCombiningProcessor</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>9</rfc>
		<lcom>1</lcom>
		<ca>2</ca>
		<ce>4</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>22</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.0</amc>
		<cc>
			<method name="public edu.stanford.nlp.fsm.TransducerGraph$Arc processArc(edu.stanford.nlp.fsm.TransducerGraph$Arc a)">1</method>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.SGDWithAdaGradAndFOBOS$Prior</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.9583333333333334</lcom3>
		<loc>100</loc>
		<dam>0.125</dam>
		<moa>8</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>22.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="public static edu.stanford.nlp.optimization.SGDWithAdaGradAndFOBOS$Prior[] values()">1</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static edu.stanford.nlp.optimization.SGDWithAdaGradAndFOBOS$Prior valueOf(String name)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.Treebanks</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>28</cbo>
		<rfc>85</rfc>
		<lcom>21</lcom>
		<ca>0</ca>
		<ce>28</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1205</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2619047619047619</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>171.14285714285714</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="private static void sentenceLengths(edu.stanford.nlp.trees.Treebank treebank, String name, String range, java.io.PrintWriter pw)">12</method>
			<method name="private static void countTaggings(edu.stanford.nlp.trees.Treebank tb, java.io.PrintWriter pw)">3</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="private static void printPunct(edu.stanford.nlp.trees.Treebank treebank, edu.stanford.nlp.trees.TreebankLanguagePack tlp, java.io.PrintWriter pw)">3</method>
			<method name="private static void printUsage()">1</method>
			<method name="private static void runTiming(edu.stanford.nlp.trees.Treebank treebank)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.graph.DirectedMultiGraph$EdgeIterator</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>15</rfc>
		<lcom>5</lcom>
		<ca>4</ca>
		<ce>1</ce>
		<npm>5</npm>
		<lcom3>0.35</lcom3>
		<loc>114</loc>
		<dam>0.75</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>17.333333333333332</amc>
		<cc>
			<method name="private void primeNext()">7</method>
			<method name="public void _init_(edu.stanford.nlp.graph.DirectedMultiGraph graph)">0</method>
			<method name="public boolean hasNext()">2</method>
			<method name="public void remove()">1</method>
			<method name="public void _init_(java.util.Map source, Object startVertex)">0</method>
			<method name="public Object next()">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$AntecedentAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.ScorerBCubed$BCubedType</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>3</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.9444444444444443</lcom3>
		<loc>78</loc>
		<dam>0.16666666666666666</dam>
		<moa>6</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>17.0</amc>
		<cc>
			<method name="public static edu.stanford.nlp.dcoref.ScorerBCubed$BCubedType[] values()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static edu.stanford.nlp.dcoref.ScorerBCubed$BCubedType valueOf(String name)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.CorefCoreAnnotations$CorefGraphAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>9</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.negra.NegraHeadFinder</name>
		<wmc>8</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>23</rfc>
		<lcom>22</lcom>
		<ca>2</ca>
		<ce>8</ce>
		<npm>5</npm>
		<lcom3>0.9428571428571428</lcom3>
		<loc>1491</loc>
		<dam>0.6</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2708333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>184.75</amc>
		<cc>
			<method name="public static edu.stanford.nlp.trees.HeadFinder negraSemanticHeadFinder()">1</method>
			<method name="protected edu.stanford.nlp.trees.Tree determineNonTrivialHead(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.Tree parent)">6</method>
			<method name="public String basicCategory(String category)">2</method>
			<method name="public void _init_()">0</method>
			<method name="protected edu.stanford.nlp.trees.Tree findMarkedHead(edu.stanford.nlp.trees.Tree[] kids)">5</method>
			<method name="private int postBasicCategoryIndex(String category)">6</method>
			<method name="public void _init_(edu.stanford.nlp.trees.TreebankLanguagePack tlp)">0</method>
			<method name="public boolean isLabelAnnotationIntroducingCharacter(char ch)">4</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEvent</name>
		<wmc>16</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>22</rfc>
		<lcom>72</lcom>
		<ca>4</ca>
		<ce>2</ce>
		<npm>16</npm>
		<lcom3>0.8833333333333333</lcom3>
		<loc>112</loc>
		<dam>0.875</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.390625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.5</amc>
		<cc>
			<method name="public void setModality(String modality)">1</method>
			<method name="public String getModality()">1</method>
			<method name="public String getType()">1</method>
			<method name="public void setTense(String tense)">1</method>
			<method name="public String getmPolarity()">1</method>
			<method name="public String getGenericity()">1</method>
			<method name="public String getSubtype()">1</method>
			<method name="public int getMentionCount()">1</method>
			<method name="public void setmPolarity(String mPolarity)">1</method>
			<method name="public void addMention(edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEventMention m)">1</method>
			<method name="public void setGenericity(String genericity)">1</method>
			<method name="public void setSubtype(String s)">1</method>
			<method name="public void _init_(String id, String type, String subtype, String modality, String polarity, String genericity, String tense)">0</method>
			<method name="public void setType(String s)">1</method>
			<method name="public String getTense()">1</method>
			<method name="public edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEventMention getMention(int which)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.net.ClasspathURLStreamHandler$ClasspathURLConnection</name>
		<wmc>3</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>7</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>3</npm>
		<lcom3>0.75</lcom3>
		<loc>29</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.967741935483871</mfa>
		<cam>0.5555555555555556</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>8.0</amc>
		<cc>
			<method name="public void connect()">1</method>
			<method name="public java.io.InputStream getInputStream()">2</method>
			<method name="public void _init_(edu.stanford.nlp.net.ClasspathURLStreamHandler, java.net.URL url)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.MultiPatternMatcher$SequencePatternTrigger</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.IntQuadruple</name>
		<wmc>7</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>9</rfc>
		<lcom>19</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>7</npm>
		<lcom3>1.1666666666666667</lcom3>
		<loc>74</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5714285714285714</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.428571428571429</amc>
		<cc>
			<method name="public int getTarget2()">1</method>
			<method name="public edu.stanford.nlp.util.IntTuple getCopy()">1</method>
			<method name="public int getTarget()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public int getSource()">1</method>
			<method name="public void _init_(int src, int mid, int trgt, int trgt2)">0</method>
			<method name="public int getMiddle()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.tsurgeon.ParseException</name>
		<wmc>5</wmc>
		<dit>3</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>20</rfc>
		<lcom>4</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>3</npm>
		<lcom3>0.95</lcom3>
		<loc>381</loc>
		<dam>0.4</dam>
		<moa>1</moa>
		<mfa>0.9130434782608695</mfa>
		<cam>0.44</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>74.2</amc>
		<cc>
			<method name="private static String initialise(edu.stanford.nlp.trees.tregex.tsurgeon.Token currentToken, int[][] expectedTokenSequences, String[] tokenImage)">9</method>
			<method name="static String add_escapes(String str)">14</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(edu.stanford.nlp.trees.tregex.tsurgeon.Token currentTokenVal, int[][] expectedTokenSequencesVal, String[] tokenImageVal)">0</method>
			<method name="public void _init_(String message)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.BoundaryRemover</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>12</rfc>
		<lcom>1</lcom>
		<ca>3</ca>
		<ce>4</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>40</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree tree)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.MapFactory$TreeMapFactory</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>8</rfc>
		<lcom>15</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>4</npm>
		<lcom3>1.2</lcom3>
		<loc>32</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4583333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.166666666666667</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public java.util.Map setMap(java.util.Map map)">1</method>
			<method name="public java.util.Map newMap()">1</method>
			<method name="void _init_(edu.stanford.nlp.util.MapFactory$1 x0)">0</method>
			<method name="public java.util.Map newMap(int initCapacity)">1</method>
			<method name="public java.util.Map setMap(java.util.Map map, int initCapacity)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.PrettyLoggable</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>6</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract void prettyLog(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels, String)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.dvparser.CacheParseHypotheses$DecompressionProcessor</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>6</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>17</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.25</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="public edu.stanford.nlp.util.concurrent.ThreadsafeProcessor newInstance()">1</method>
			<method name="public volatile Object process(Object x0)">1</method>
			<method name="public java.util.List process(byte[] input)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Pair$ByFirstPairComparator</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>20</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.666666666666667</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="public int compare(edu.stanford.nlp.util.Pair pair1, edu.stanford.nlp.util.Pair pair2)">1</method>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.maxent.DataGeneric</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>1</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>5</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>1.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public abstract String getY()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.fsm.TransducerGraph$ArcProcessor</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>6</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract edu.stanford.nlp.fsm.TransducerGraph$Arc processArc(edu.stanford.nlp.fsm.TransducerGraph$Arc)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.metrics.EvalbByCat</name>
		<wmc>7</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>57</rfc>
		<lcom>3</lcom>
		<ca>2</ca>
		<ce>8</ce>
		<npm>4</npm>
		<lcom3>0.48148148148148157</lcom3>
		<loc>869</loc>
		<dam>1.0</dam>
		<moa>8</moa>
		<mfa>0.0</mfa>
		<cam>0.42857142857142855</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>121.85714285714286</amc>
		<cc>
			<method name="public void _init_(String str, boolean runningAverages, String labelRegex)">0</method>
			<method name="public void _init_(String str, boolean runningAverages)">0</method>
			<method name="public void display(boolean verbose, java.io.PrintWriter pw)">10</method>
			<method name="private java.util.Map makeObjectsByCat(edu.stanford.nlp.trees.Tree t)">3</method>
			<method name="protected java.util.Set makeObjects(edu.stanford.nlp.trees.Tree tree)">1</method>
			<method name="public void evaluate(edu.stanford.nlp.trees.Tree guess, edu.stanford.nlp.trees.Tree gold, java.io.PrintWriter pw)">12</method>
			<method name="private java.util.Set getEvalLabelSet(java.util.Set labelSet)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.TimeExpression$TimeIndexAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.MultiClassPrecisionRecallStats</name>
		<wmc>22</wmc>
		<dit>1</dit>
		<noc>1</noc>
		<cbo>10</cbo>
		<rfc>64</rfc>
		<lcom>175</lcom>
		<ca>1</ca>
		<ce>9</ce>
		<npm>22</npm>
		<lcom3>0.35714285714285715</lcom3>
		<loc>782</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.3409090909090909</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>34.27272727272727</amc>
		<cc>
			<method name="public double getPrecision()">1</method>
			<method name="public edu.stanford.nlp.util.Triple getPrecisionInfo(Object label)">3</method>
			<method name="public double score(edu.stanford.nlp.classify.ProbabilisticClassifier classifier, edu.stanford.nlp.classify.GeneralDataset data)">1</method>
			<method name="public Object getNegLabel()">1</method>
			<method name="public double getFMeasure()">1</method>
			<method name="public void _init_(edu.stanford.nlp.classify.Classifier classifier, edu.stanford.nlp.classify.GeneralDataset data, Object negLabel)">0</method>
			<method name="public double getRecall(Object label)">1</method>
			<method name="public double score(edu.stanford.nlp.classify.Classifier classifier, edu.stanford.nlp.classify.GeneralDataset data)">8</method>
			<method name="public edu.stanford.nlp.util.Triple getRecallInfo(Object label)">3</method>
			<method name="public void _init_(Object negLabel)">0</method>
			<method name="public double getFMeasure(Object label)">1</method>
			<method name="public String getF1Description(int numDigits, Object label)">1</method>
			<method name="public double getRecall()">1</method>
			<method name="public String getDescription(int numDigits)">4</method>
			<method name="public String getRecallDescription(int numDigits, Object label)">1</method>
			<method name="public String getF1Description(int numDigits)">1</method>
			<method name="public double getPrecision(Object label)">1</method>
			<method name="public edu.stanford.nlp.util.Triple getRecallInfo()">3</method>
			<method name="public String getPrecisionDescription(int numDigits, Object label)">1</method>
			<method name="public edu.stanford.nlp.util.Triple getPrecisionInfo()">3</method>
			<method name="public String getRecallDescription(int numDigits)">1</method>
			<method name="public String getPrecisionDescription(int numDigits)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequencePattern$AndPatternExpr</name>
		<wmc>8</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>29</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>171</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>20.25</amc>
		<cc>
			<method name="public transient void _init_(edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr[] patterns)">0</method>
			<method name="protected void updateBindings(edu.stanford.nlp.ling.tokensregex.SequencePattern$VarGroupBindings bindings)">2</method>
			<method name="protected int assignGroupIds(int start)">2</method>
			<method name="public void _init_(java.util.List patterns)">0</method>
			<method name="protected edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr copy()">2</method>
			<method name="protected edu.stanford.nlp.ling.tokensregex.SequencePattern$Frag build()">2</method>
			<method name="public String toString()">1</method>
			<method name="protected edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr optimize()">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Scored</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>10</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract double score()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.XMLUtils$XMLTag</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>19</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>0.8</lcom3>
		<loc>244</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>118.5</amc>
		<cc>
			<method name="public void _init_(String tag)">0</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.tools.PunctEquivalenceClasser</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>12</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.7352941176470589</lcom3>
		<loc>262</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>80.66666666666667</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static String getPunctClass(String punc)">13</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.process.LexedTokenFactory</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>18</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>18</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract Object makeToken(String, int, int)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishPTBTreebankCorrector</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>16</cbo>
		<rfc>31</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>15</ce>
		<npm>2</npm>
		<lcom3>1.277777777777778</lcom3>
		<loc>138</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4166666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>30.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="private static java.io.BufferedReader getBufferedReader(String source)">1</method>
			<method name="public edu.stanford.nlp.trees.MemoryTreebank transformTrees(edu.stanford.nlp.trees.Treebank tb)">2</method>
			<method name="private static boolean continuing(String str)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.BobChrisTreeNormalizer</name>
		<wmc>7</wmc>
		<dit>0</dit>
		<noc>5</noc>
		<cbo>23</cbo>
		<rfc>17</rfc>
		<lcom>17</lcom>
		<ca>14</ca>
		<ce>9</ce>
		<npm>6</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>69</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.285714285714286</amc>
		<cc>
			<method name="public edu.stanford.nlp.trees.Tree normalizeWholeTree(edu.stanford.nlp.trees.Tree tree, edu.stanford.nlp.trees.TreeFactory tf)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public String normalizeNonterminal(String category)">1</method>
			<method name="protected String cleanUpLabel(String label)">3</method>
			<method name="public String normalizeTerminal(String leaf)">1</method>
			<method name="public void _init_(edu.stanford.nlp.trees.TreebankLanguagePack tlp)">0</method>
			<method name="public edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree tree)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.neural.SimpleTensor</name>
		<wmc>16</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>39</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>3</ce>
		<npm>16</npm>
		<lcom3>0.5066666666666666</lcom3>
		<loc>604</loc>
		<dam>0.4</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2109375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>36.4375</amc>
		<cc>
			<method name="public int numCols()">1</method>
			<method name="public double elementSum()">2</method>
			<method name="public edu.stanford.nlp.neural.SimpleTensor elementMult(edu.stanford.nlp.neural.SimpleTensor other)">5</method>
			<method name="public void _init_(org.ejml.simple.SimpleMatrix[] slices)">0</method>
			<method name="public edu.stanford.nlp.neural.SimpleTensor scale(double scaling)">2</method>
			<method name="public int numSlices()">1</method>
			<method name="public void _init_(int numRows, int numCols, int numSlices)">0</method>
			<method name="public static java.util.Iterator iteratorSimpleMatrix(java.util.Iterator tensors)">1</method>
			<method name="public org.ejml.simple.SimpleMatrix getSlice(int slice)">3</method>
			<method name="public static edu.stanford.nlp.neural.SimpleTensor random(int numRows, int numCols, int numSlices, double minValue, double maxValue, java.util.Random rand)">2</method>
			<method name="public edu.stanford.nlp.neural.SimpleTensor plus(edu.stanford.nlp.neural.SimpleTensor other)">5</method>
			<method name="public org.ejml.simple.SimpleMatrix bilinearProducts(org.ejml.simple.SimpleMatrix in)">5</method>
			<method name="public void setSlice(int slice, org.ejml.simple.SimpleMatrix matrix)">5</method>
			<method name="public int numRows()">1</method>
			<method name="public int getNumElements()">1</method>
			<method name="public java.util.Iterator iteratorSimpleMatrix()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalRelations$AspectMarkerGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.maxent.CGRunner$MonitorFunction</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>16</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>4</npm>
		<lcom3>0.5833333333333334</lcom3>
		<loc>79</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>17.75</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.maxent.iis.LambdaSolve m, edu.stanford.nlp.maxent.CGRunner$LikelihoodFunction lf, String filename)">0</method>
			<method name="public String reportMonitoring(double likelihood)">1</method>
			<method name="public int domainDimension()">1</method>
			<method name="public double valueAt(double[] lambda)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.classify.PRCurve</name>
		<wmc>23</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>62</rfc>
		<lcom>207</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>21</npm>
		<lcom3>0.5545454545454546</lcom3>
		<loc>1009</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.19021739130434784</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>42.65217391304348</amc>
		<cc>
			<method name="int numSamples()">1</method>
			<method name="public double accuracy()">1</method>
			<method name="public static boolean correct(double score, int cls)">5</method>
			<method name="public int[] optimalCwaArray()">2</method>
			<method name="public int[] cwaArray()">2</method>
			<method name="public double logLikelihood()">3</method>
			<method name="public void _init_(String filename)">0</method>
			<method name="public int logPrecision(int recall)">7</method>
			<method name="public double optimalCwa()">2</method>
			<method name="public double cwa()">2</method>
			<method name="public void _init_(java.util.List dataScores)">0</method>
			<method name="public void init(java.util.List dataScores)">3</method>
			<method name="public double fmeasure(int recall)">7</method>
			<method name="public void initMC(java.util.ArrayList dataScores)">3</method>
			<method name="public double fmeasure(int numleft, int numright)">1</method>
			<method name="public double optFmeasure(int recall)">3</method>
			<method name="public double optimalAccuracy()">1</method>
			<method name="public static void main(String[] args)">2</method>
			<method name="public static double f1(int tp, int fp, int fn)">3</method>
			<method name="public int precision(int recall)">3</method>
			<method name="public double opFmeasure()">1</method>
			<method name="void init()">6</method>
			<method name="public void _init_(String filename, boolean svm)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFloatFunction</name>
		<wmc>15</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>52</rfc>
		<lcom>57</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>9</npm>
		<lcom3>0.7781954887218046</lcom3>
		<loc>1792</loc>
		<dam>0.15789473684210525</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.3131868131868132</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>117.2</amc>
		<cc>
			<method name="void _init_(int[][][][] data, int[][] labels, edu.stanford.nlp.util.Index featureIndex, int window, edu.stanford.nlp.util.Index classIndex, java.util.List labelIndices, int[] map, int prior, String backgroundSymbol)">0</method>
			<method name="private void empiricalCounts(int[][][][] data, int[][] labels)">5</method>
			<method name="static void _clinit_()">0</method>
			<method name="public float[][] empty2D()">2</method>
			<method name="void _init_(int[][][][] data, int[][] labels, edu.stanford.nlp.util.Index featureIndex, int window, edu.stanford.nlp.util.Index classIndex, java.util.List labelIndices, int[] map, int prior, String backgroundSymbol, double sigma)">0</method>
			<method name="public static edu.stanford.nlp.ie.crf.FloatFactorTable[] getCalibratedCliqueTree(float[][] weights, int[][][] data, java.util.List labelIndices, int numClasses)">11</method>
			<method name="public void calculate(float[] x)">18</method>
			<method name="public float[] to1D(float[][] weights)">2</method>
			<method name="void _init_(int[][][][] data, int[][] labels, edu.stanford.nlp.util.Index featureIndex, int window, edu.stanford.nlp.util.Index classIndex, java.util.List labelIndices, int[] map, String backgroundSymbol)">0</method>
			<method name="public edu.stanford.nlp.ie.crf.CliquePotentialFunction getCliquePotentialFunction(double[] x)">1</method>
			<method name="public int domainDimension()">3</method>
			<method name="void _init_(int[][][][] data, int[][] labels, edu.stanford.nlp.util.Index featureIndex, int window, edu.stanford.nlp.util.Index classIndex, java.util.List labelIndices, int[] map, String backgroundSymbol, double sigma)">0</method>
			<method name="public static edu.stanford.nlp.ie.crf.FloatFactorTable getFloatFactorTable(float[][] weights, int[][] data, java.util.List labelIndices, int numClasses)">5</method>
			<method name="public void calculateWeird1(float[] x)">22</method>
			<method name="public float[][] to2D(float[] weights)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.ArrayStringFilter</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>16</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>4</npm>
		<lcom3>0.4166666666666667</lcom3>
		<loc>139</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>32.75</amc>
		<cc>
			<method name="public String toString()">1</method>
			<method name="public transient void _init_(edu.stanford.nlp.util.ArrayStringFilter$Mode mode, String[] words)">0</method>
			<method name="public volatile boolean accept(Object x0)">1</method>
			<method name="public boolean accept(String input)">9</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.MentionExtractor</name>
		<wmc>24</wmc>
		<dit>1</dit>
		<noc>3</noc>
		<cbo>24</cbo>
		<rfc>96</rfc>
		<lcom>246</lcom>
		<ca>6</ca>
		<ce>20</ce>
		<npm>10</npm>
		<lcom3>0.9156010230179028</lcom3>
		<loc>960</loc>
		<dam>0.8235294117647058</dam>
		<moa>13</moa>
		<mfa>0.0</mfa>
		<cam>0.17701863354037267</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>38.291666666666664</amc>
		<cc>
			<method name="protected int getHeadIndex(edu.stanford.nlp.trees.Tree t)">2</method>
			<method name="private void findRelativePronouns(edu.stanford.nlp.trees.Tree tree, java.util.Set relativePronounPairs)">1</method>
			<method name="private void findPredicateNominatives(edu.stanford.nlp.trees.Tree tree, java.util.Set preNomi)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private static boolean inside(int i, edu.stanford.nlp.dcoref.Mention m)">3</method>
			<method name="protected static edu.stanford.nlp.pipeline.StanfordCoreNLP loadStanfordProcessor(java.util.Properties props)">4</method>
			<method name="public edu.stanford.nlp.dcoref.Document arrange(edu.stanford.nlp.pipeline.Annotation anno, java.util.List words, java.util.List trees, java.util.List unorderedMentions)">1</method>
			<method name="public static void initializeUtterance(java.util.List tokens)">2</method>
			<method name="public void setMentionFinder(edu.stanford.nlp.dcoref.CorefMentionFinder mentionFinder)">1</method>
			<method name="private String treeToKey(edu.stanford.nlp.trees.Tree t)">1</method>
			<method name="private static void markListMemberRelation(java.util.List orderedMentions)">3</method>
			<method name="private void addFoundPair(edu.stanford.nlp.trees.Tree np1, edu.stanford.nlp.trees.Tree np2, edu.stanford.nlp.trees.Tree t, java.util.Set foundPairs)">1</method>
			<method name="private void findAppositions(edu.stanford.nlp.trees.Tree tree, java.util.Set appos)">1</method>
			<method name="public static edu.stanford.nlp.trees.Tree findExactMatch(edu.stanford.nlp.trees.Tree tree, int first, int last)">5</method>
			<method name="private static void markMentionRelation(java.util.List orderedMentions, java.util.Set foundPairs, String flag)">8</method>
			<method name="private void findSyntacticRelations(edu.stanford.nlp.trees.Tree tree, java.util.List orderedMentions)">1</method>
			<method name="private void findTreePattern(edu.stanford.nlp.trees.Tree tree, edu.stanford.nlp.trees.tregex.TregexPattern tgrepPattern, java.util.Set foundPairs)">2</method>
			<method name="public void resetDocs()">1</method>
			<method name="public static void mergeLabels(edu.stanford.nlp.trees.Tree tree, java.util.List sentence)">2</method>
			<method name="public void _init_(edu.stanford.nlp.dcoref.Dictionaries dict, edu.stanford.nlp.dcoref.Semantics semantics)">0</method>
			<method name="public java.util.List arrange(edu.stanford.nlp.pipeline.Annotation anno, java.util.List words, java.util.List trees, java.util.List unorderedMentions, boolean doMergeLabels)">1</method>
			<method name="private void findTreePattern(edu.stanford.nlp.trees.Tree tree, String tregex, java.util.Set foundPairs)">1</method>
			<method name="public edu.stanford.nlp.dcoref.Document nextDoc()">1</method>
			<method name="public edu.stanford.nlp.dcoref.Document arrange(edu.stanford.nlp.pipeline.Annotation anno, java.util.List words, java.util.List trees, java.util.List unorderedMentions, java.util.List unorderedGoldMentions, boolean doMergeLabels)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.fsm.DFSAState</name>
		<wmc>20</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>45</rfc>
		<lcom>100</lcom>
		<ca>5</ca>
		<ce>4</ce>
		<npm>19</npm>
		<lcom3>0.7894736842105263</lcom3>
		<loc>227</loc>
		<dam>0.6666666666666666</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.20625</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>10.05</amc>
		<cc>
			<method name="private void exploreStates(java.util.List toVisit, java.util.Set visited)">2</method>
			<method name="public boolean equals(Object o)">5</method>
			<method name="public void _init_(Object id, edu.stanford.nlp.fsm.DFSA dfsa, double score)">0</method>
			<method name="public java.util.Set statesReachable()">1</method>
			<method name="public edu.stanford.nlp.fsm.DFSATransition transition(Object input)">1</method>
			<method name="public void addTransition(edu.stanford.nlp.fsm.DFSATransition transition)">1</method>
			<method name="public void _init_(Object id, edu.stanford.nlp.fsm.DFSA dfsa)">0</method>
			<method name="public edu.stanford.nlp.fsm.DFSA dfsa()">1</method>
			<method name="public void setScore(double score)">1</method>
			<method name="public int hashCode()">2</method>
			<method name="public double score()">1</method>
			<method name="public void setStateID(Object stateID)">1</method>
			<method name="public java.util.Set successorStates()">2</method>
			<method name="public java.util.Collection transitions()">1</method>
			<method name="public boolean isAccepting()">1</method>
			<method name="public boolean isContinuable()">2</method>
			<method name="public Object stateID()">1</method>
			<method name="public java.util.Set continuingInputs()">1</method>
			<method name="public String toString()">1</method>
			<method name="public void setAccepting(boolean accepting)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.AbstractIterator</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>12</noc>
		<cbo>12</cbo>
		<rfc>6</rfc>
		<lcom>6</lcom>
		<ca>12</ca>
		<ce>0</ce>
		<npm>4</npm>
		<lcom3>2.0</lcom3>
		<loc>11</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>1.75</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public abstract boolean hasNext()">1</method>
			<method name="public void remove()">1</method>
			<method name="public abstract Object next()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.TreeBinarizer</name>
		<wmc>16</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>26</cbo>
		<rfc>86</rfc>
		<lcom>80</lcom>
		<ca>3</ca>
		<ce>23</ce>
		<npm>4</npm>
		<lcom3>0.76</lcom3>
		<loc>1972</loc>
		<dam>1.0</dam>
		<moa>4</moa>
		<mfa>0.0</mfa>
		<cam>0.23557692307692307</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>121.3125</amc>
		<cc>
			<method name="private edu.stanford.nlp.ling.Label makeSyntheticLabel2(edu.stanford.nlp.trees.Tree t, int left, int right, int headLoc, int markovOrder)">12</method>
			<method name="private edu.stanford.nlp.trees.Tree outsideBinarizeLocalTree(edu.stanford.nlp.trees.Tree t, String labelStr, String finalCat, int headNum, edu.stanford.nlp.ling.TaggedWord head, int leftProcessed, String leftStr, int rightProcessed, String rightStr)">4</method>
			<method name="private static edu.stanford.nlp.ling.Label makeSimpleSyntheticLabel(edu.stanford.nlp.trees.Tree t)">1</method>
			<method name="private static void localTreeString(edu.stanford.nlp.trees.Tree t, StringBuilder sb, int level)">5</method>
			<method name="private edu.stanford.nlp.trees.Tree markovInsideBinarizeLocalTreeNew(edu.stanford.nlp.trees.Tree t, int headLoc, int left, int right, boolean starting)">15</method>
			<method name="public edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree t)">9</method>
			<method name="private static String join(java.util.List treeList)">2</method>
			<method name="private edu.stanford.nlp.trees.Tree markovOutsideBinarizeLocalTree(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.ling.TaggedWord head, int headLoc, String topCat, java.util.LinkedList ll, boolean doneLeft)">10</method>
			<method name="private edu.stanford.nlp.trees.Tree insideBinarizeLocalTree(edu.stanford.nlp.trees.Tree t, int headNum, edu.stanford.nlp.ling.TaggedWord head, int leftProcessed, int rightProcessed)">10</method>
			<method name="private static edu.stanford.nlp.ling.Label makeSyntheticLabel1(edu.stanford.nlp.trees.Tree t, int left, int right, int headLoc, int markovOrder)">8</method>
			<method name="edu.stanford.nlp.trees.Tree binarizeLocalTree(edu.stanford.nlp.trees.Tree t, int headNum, edu.stanford.nlp.ling.TaggedWord head)">4</method>
			<method name="public void setDoSelectiveSplit(boolean doSelectiveSplit)">2</method>
			<method name="private edu.stanford.nlp.ling.Label makeSyntheticLabel(edu.stanford.nlp.trees.Tree t, int left, int right, int headLoc, int markovOrder)">3</method>
			<method name="public static void main(String[] args)">15</method>
			<method name="public void _init_(edu.stanford.nlp.trees.HeadFinder hf, edu.stanford.nlp.trees.TreebankLanguagePack tlp, boolean insideFactor, boolean markovFactor, int markovOrder, boolean useWrappingLabels, boolean unaryAtTop, double selectiveSplitThreshold, boolean markFinalStates, boolean simpleLabels, boolean noRebinarization)">0</method>
			<method name="protected static boolean isSynthetic(String label)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalRelations$NominalPassiveSubjectGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalRelations$QuantifierModifierGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.international.morph.MorphoFeatureSpecification$MorphoFeatureType</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>9</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.9777777777777779</lcom3>
		<loc>177</loc>
		<dam>0.06666666666666667</dam>
		<moa>15</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>39.5</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static edu.stanford.nlp.international.morph.MorphoFeatureSpecification$MorphoFeatureType valueOf(String name)">1</method>
			<method name="public static edu.stanford.nlp.international.morph.MorphoFeatureSpecification$MorphoFeatureType[] values()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.process.TransformXML</name>
		<wmc>10</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>34</rfc>
		<lcom>43</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>10</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>233</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.42</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>22.2</amc>
		<cc>
			<method name="public void transformXML(String[] tags, edu.stanford.nlp.util.Function fn, java.io.File in)">1</method>
			<method name="public void transformXML(String[] tags, edu.stanford.nlp.util.Function fn, java.io.InputStream in, java.io.Writer w, edu.stanford.nlp.process.TransformXML$SAXInterface handler)">1</method>
			<method name="public void transformXML(String[] tags, edu.stanford.nlp.util.Function fn, java.io.InputStream in)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public edu.stanford.nlp.process.TransformXML$SAXInterface buildSaxInterface()">1</method>
			<method name="public void transformXML(String[] tags, edu.stanford.nlp.util.Function fn, java.io.InputStream in, java.io.Writer w)">1</method>
			<method name="public void transformXML(String[] tags, edu.stanford.nlp.util.Function fn, java.io.InputStream in, java.io.OutputStream out)">1</method>
			<method name="public void transformXML(String[] tags, edu.stanford.nlp.util.Function fn, java.io.Reader in, java.io.Writer w, edu.stanford.nlp.process.TransformXML$SAXInterface handler)">1</method>
			<method name="public void transformXML(String[] tags, edu.stanford.nlp.util.Function fn, java.io.File in, java.io.File out)">1</method>
			<method name="public void transformXML(String[] tags, edu.stanford.nlp.util.Function fn, org.xml.sax.InputSource in, java.io.Writer w, edu.stanford.nlp.process.TransformXML$SAXInterface saxInterface)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.Tag$LabelFactoryHolder</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>0.5</lcom3>
		<loc>14</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.3333333333333335</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="static edu.stanford.nlp.ling.LabelFactory access$000()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.CoordinationPattern$CoordinationMatcher</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>19</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>3</npm>
		<lcom3>0.55</lcom3>
		<loc>318</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.30952380952380953</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>51.333333333333336</amc>
		<cc>
			<method name="public boolean matches()">16</method>
			<method name="public void _init_(edu.stanford.nlp.trees.tregex.CoordinationPattern n, edu.stanford.nlp.trees.Tree root, edu.stanford.nlp.trees.Tree tree, java.util.IdentityHashMap nodesToParents, java.util.Map namesToNodes, edu.stanford.nlp.trees.tregex.VariableStrings variableStrings, edu.stanford.nlp.trees.HeadFinder headFinder)">0</method>
			<method name="void resetChildIter(edu.stanford.nlp.trees.Tree tree)">3</method>
			<method name="void resetChildIter()">3</method>
			<method name="boolean getChangesVariables()">1</method>
			<method name="public edu.stanford.nlp.trees.Tree getMatch()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.ArabicUnknownWordModel</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>32</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>8</ce>
		<npm>6</npm>
		<lcom3>0.8666666666666666</lcom3>
		<loc>503</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3888888888888889</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>81.83333333333333</amc>
		<cc>
			<method name="public int getUnknownLevel()">1</method>
			<method name="public float score(edu.stanford.nlp.parser.lexparser.IntTaggedWord iTW, int loc, double c_Tseen, double total, double smooth, String word)">2</method>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.Options op, edu.stanford.nlp.parser.lexparser.Lexicon lex, edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex)">0</method>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.Options op, edu.stanford.nlp.parser.lexparser.Lexicon lex, edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex, edu.stanford.nlp.stats.ClassicCounter unSeenCounter)">0</method>
			<method name="public String getSignature(String word, int loc)">26</method>
			<method name="public int getSignatureIndex(int index, int sentencePosition, String word)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.Expressions$SimpleValue</name>
		<wmc>7</wmc>
		<dit>0</dit>
		<noc>2</noc>
		<cbo>5</cbo>
		<rfc>17</rfc>
		<lcom>1</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>6</npm>
		<lcom3>0.3333333333333333</lcom3>
		<loc>92</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.30952380952380953</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.0</amc>
		<cc>
			<method name="public boolean hasValue()">1</method>
			<method name="public boolean equals(Object o)">7</method>
			<method name="public int hashCode()">2</method>
			<method name="protected transient void _init_(String typename, Object value, String[] tags)">0</method>
			<method name="public String toString()">1</method>
			<method name="public transient edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env env, Object[] args)">1</method>
			<method name="public Object get()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$TemporalOp$8</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>10</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>38</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.0</amc>
		<cc>
			<method name="void _init_(String, int)">0</method>
			<method name="public edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal arg1, edu.stanford.nlp.time.SUTime$Temporal arg2, int flags)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$XmlElementAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalRelations$RelativeGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$TemporalOp$9</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>12</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>64</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>31.0</amc>
		<cc>
			<method name="void _init_(String, int)">0</method>
			<method name="public edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal arg1, edu.stanford.nlp.time.SUTime$Temporal arg2, int flags)">6</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.sequences.SequenceGibbsSampler$1</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>16</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>0.3333333333333333</lcom3>
		<loc>73</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.35714285714285715</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.25</amc>
		<cc>
			<method name="public java.util.List process(java.util.List posList)">2</method>
			<method name="public edu.stanford.nlp.util.concurrent.ThreadsafeProcessor newInstance()">1</method>
			<method name="public volatile Object process(Object x0)">1</method>
			<method name="void _init_(edu.stanford.nlp.sequences.SequenceGibbsSampler, edu.stanford.nlp.sequences.SequenceModel, int[], double)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$TemporalOp$4</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>11</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>50</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>24.0</amc>
		<cc>
			<method name="void _init_(String, int)">0</method>
			<method name="public edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal arg1, edu.stanford.nlp.time.SUTime$Temporal arg2, int flags)">5</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.sequences.ObjectBankWrapper$WrappedIterator</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>11</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>4</npm>
		<lcom3>0.11111111111111116</lcom3>
		<loc>104</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>24.25</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.sequences.ObjectBankWrapper, java.util.Iterator wrappedIter)">0</method>
			<method name="public java.util.List next()">3</method>
			<method name="public boolean hasNext()">7</method>
			<method name="public volatile Object next()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$TemporalOp$5</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>14</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>77</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>37.5</amc>
		<cc>
			<method name="void _init_(String, int)">0</method>
			<method name="public edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal arg1, edu.stanford.nlp.time.SUTime$Temporal arg2, int flags)">8</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.Counters$7$4</name>
		<wmc>3</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>6</rfc>
		<lcom>1</lcom>
		<ca>2</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>0.5</lcom3>
		<loc>20</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.8888888888888888</mfa>
		<cam>0.6666666666666666</cam>
		<ic>1</ic>
		<cbm>4</cbm>
		<amc>5.333333333333333</amc>
		<cc>
			<method name="public int size()">1</method>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="void _init_(edu.stanford.nlp.stats.Counters$7)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$TemporalOp$6</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>9</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>34</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.0</amc>
		<cc>
			<method name="void _init_(String, int)">0</method>
			<method name="public edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal arg1, edu.stanford.nlp.time.SUTime$Temporal arg2, int flags)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.Counters$7$3</name>
		<wmc>3</wmc>
		<dit>3</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>6</rfc>
		<lcom>1</lcom>
		<ca>2</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>0.5</lcom3>
		<loc>20</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.9047619047619048</mfa>
		<cam>0.6666666666666666</cam>
		<ic>2</ic>
		<cbm>7</cbm>
		<amc>5.333333333333333</amc>
		<cc>
			<method name="public int size()">1</method>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="void _init_(edu.stanford.nlp.stats.Counters$7)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.IdentityHashSet</name>
		<wmc>15</wmc>
		<dit>3</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>45</rfc>
		<lcom>0</lcom>
		<ca>6</ca>
		<ce>2</ce>
		<npm>12</npm>
		<lcom3>0.5357142857142857</lcom3>
		<loc>418</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.6129032258064516</mfa>
		<cam>0.21904761904761905</cam>
		<ic>2</ic>
		<cbm>10</cbm>
		<amc>26.733333333333334</amc>
		<cc>
			<method name="public void clear()">1</method>
			<method name="public Object clone()">2</method>
			<method name="private void writeObject(java.io.ObjectOutputStream s)">1</method>
			<method name="public boolean contains(Object o)">1</method>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public boolean isEmpty()">1</method>
			<method name="public void _init_(java.util.Collection c)">0</method>
			<method name="public boolean add(Object o)">2</method>
			<method name="private void internalAdd(Object o)">1</method>
			<method name="public int size()">1</method>
			<method name="private void readObject(java.io.ObjectInputStream s)">1</method>
			<method name="public void _init_(int expectedMaxSize)">0</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="public boolean remove(Object o)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates$1</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>6</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>27</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.666666666666667</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="void _init_(edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates)">0</method>
			<method name="public int compare(Integer o1, Integer o2)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.TimeAnnotator</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>27</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>9</ce>
		<npm>6</npm>
		<lcom3>0.4</lcom3>
		<loc>186</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.3333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>29.833333333333332</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public void annotate(edu.stanford.nlp.pipeline.Annotation annotation)">7</method>
			<method name="public java.util.Set requires()">1</method>
			<method name="public java.util.Set requirementsSatisfied()">1</method>
			<method name="public void _init_(String name, java.util.Properties props)">0</method>
			<method name="public java.util.List annotateSingleSentence(edu.stanford.nlp.util.CoreMap sentence, String docDate, edu.stanford.nlp.time.SUTime$TimeIndex timeIndex)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$TemporalOp$7</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>28</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.0</amc>
		<cc>
			<method name="void _init_(String, int)">0</method>
			<method name="public edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal arg1, edu.stanford.nlp.time.SUTime$Temporal arg2, int flags)">4</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.Counters$7$2</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>2</npm>
		<lcom3>0.75</lcom3>
		<loc>20</loc>
		<dam>0.5</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.0</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.stats.Counters$7)">0</method>
			<method name="public edu.stanford.nlp.stats.Counter create()">1</method>
			<method name="public volatile Object create()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$24$1</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>11</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>0.5</lcom3>
		<loc>88</loc>
		<dam>0.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>27.0</amc>
		<cc>
			<method name="public void initialize()">5</method>
			<method name="void advance()">5</method>
			<method name="void _init_(edu.stanford.nlp.trees.tregex.Relation$24, edu.stanford.nlp.trees.tregex.TregexMatcher, edu.stanford.nlp.trees.Tree)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.ChunkAnnotationUtils</name>
		<wmc>36</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>26</cbo>
		<rfc>110</rfc>
		<lcom>600</lcom>
		<ca>15</ca>
		<ce>11</ce>
		<npm>35</npm>
		<lcom3>0.8761904761904762</lcom3>
		<loc>2296</loc>
		<dam>0.6666666666666666</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.21038961038961038</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>62.69444444444444</amc>
		<cc>
			<method name="public static void appendCoreMap(java.util.List res, edu.stanford.nlp.util.CoreMap cm, String text, int start, int end, edu.stanford.nlp.process.CoreTokenFactory factory)">2</method>
			<method name="public static java.util.List getAnnotatedChunksUsingSortedCharOffsets(edu.stanford.nlp.util.CoreMap annotation, java.util.List charOffsets, boolean charOffsetIsRelative, Class tokenChunkKey, Class tokenLabelKey, boolean allowPartialTokens)">22</method>
			<method name="public static String getTokenText(java.util.List tokens, Class tokenTextKey, String delimiter)">3</method>
			<method name="public static void copyUnsetAnnotations(edu.stanford.nlp.util.CoreMap src, edu.stanford.nlp.util.CoreMap dest)">2</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static boolean fixChunkSentenceBoundaries(edu.stanford.nlp.util.CoreMap docAnnotation, java.util.List chunkCharOffsets)">1</method>
			<method name="public static java.util.List splitCoreMap(java.util.regex.Pattern p, boolean includeMatched, edu.stanford.nlp.util.CoreMap cm, edu.stanford.nlp.process.CoreTokenFactory factory)">3</method>
			<method name="public static edu.stanford.nlp.util.Interval getChunkOffsetsUsingCharOffsets(java.util.List chunkList, int charStart, int charEnd)">5</method>
			<method name="public static void annotateChunks(java.util.List chunks, java.util.Map attributes)">2</method>
			<method name="public static boolean fixChunkTokenBoundaries(edu.stanford.nlp.util.CoreMap docAnnotation, java.util.List chunkCharOffsets)">14</method>
			<method name="public static String getTokenText(java.util.List tokens, Class tokenTextKey)">1</method>
			<method name="public static Character getFirstNonWsChar(edu.stanford.nlp.util.CoreMap sent)">3</method>
			<method name="public static edu.stanford.nlp.util.CoreMap getMergedChunk(java.util.List chunkList, int chunkIndexStart, int chunkIndexEnd, java.util.Map aggregators)">4</method>
			<method name="public static edu.stanford.nlp.pipeline.Annotation getAnnotatedChunk(edu.stanford.nlp.util.CoreMap annotation, int tokenStartIndex, int tokenEndIndex, Class tokenChunkKey, Class tokenLabelKey)">1</method>
			<method name="public static boolean annotateChunkText(edu.stanford.nlp.util.CoreMap chunk, edu.stanford.nlp.util.CoreMap origAnnotation)">9</method>
			<method name="public static edu.stanford.nlp.util.CoreMap getMergedChunk(java.util.List chunkList, String origText, int chunkIndexStart, int chunkIndexEnd)">2</method>
			<method name="public static edu.stanford.nlp.pipeline.Annotation getAnnotatedChunk(java.util.List tokens, int tokenStartIndex, int tokenEndIndex, int totalTokenOffset, Class tokenChunkKey, Class tokenTextKey, Class tokenLabelKey)">1</method>
			<method name="public static void annotateChunk(edu.stanford.nlp.util.CoreMap annotation, Class newAnnotationKey, Class aggrKey, edu.stanford.nlp.pipeline.CoreMapAttributeAggregator aggregator)">1</method>
			<method name="public static edu.stanford.nlp.pipeline.Annotation getAnnotatedChunk(edu.stanford.nlp.util.CoreMap annotation, int tokenStartIndex, int tokenEndIndex)">3</method>
			<method name="public static void annotateChunks(java.util.List chunks, int start, int end, java.util.Map attributes)">2</method>
			<method name="public static boolean checkOffsets(edu.stanford.nlp.util.CoreMap docAnnotation)">3</method>
			<method name="public static boolean fixChunkSentenceBoundaries(edu.stanford.nlp.util.CoreMap docAnnotation, java.util.List chunkCharOffsets, boolean offsetsAreNotSorted, boolean extendedFixSentence, boolean moreExtendedFixSentence)">32</method>
			<method name="public static Integer getFirstNonWsCharOffset(edu.stanford.nlp.util.CoreMap sent, boolean relative)">4</method>
			<method name="public void _init_()">0</method>
			<method name="public static void mergeChunks(java.util.List chunkList, String origText, int chunkIndexStart, int chunkIndexEnd)">2</method>
			<method name="public static java.util.List getAnnotatedChunksUsingSortedCharOffsets(edu.stanford.nlp.util.CoreMap annotation, java.util.List charOffsets)">1</method>
			<method name="public static boolean fixTokenOffsets(edu.stanford.nlp.util.CoreMap docAnnotation)">6</method>
			<method name="public static void annotateChunk(edu.stanford.nlp.util.CoreMap chunk, java.util.List tokens, int tokenStartIndex, int tokenEndIndex, int totalTokenOffset)">1</method>
			<method name="public static void annotateChunk(edu.stanford.nlp.util.CoreMap chunk, java.util.Map attributes)">5</method>
			<method name="public static boolean hasCharacterOffsets(edu.stanford.nlp.util.CoreMap chunk)">3</method>
			<method name="public static void annotateChunkTokens(edu.stanford.nlp.util.CoreMap chunk, Class tokenChunkKey, Class tokenLabelKey)">5</method>
			<method name="public static edu.stanford.nlp.pipeline.Annotation getAnnotatedChunk(java.util.List tokens, int tokenStartIndex, int tokenEndIndex, int totalTokenOffset)">1</method>
			<method name="public static edu.stanford.nlp.util.CoreMap getAnnotatedChunkUsingCharOffsets(edu.stanford.nlp.util.CoreMap annotation, int charOffsetStart, int charOffsetEnd)">3</method>
			<method name="public static void annotateChunkText(edu.stanford.nlp.util.CoreMap chunk, Class tokenTextKey)">1</method>
			<method name="public static edu.stanford.nlp.util.CoreMap createCoreMap(edu.stanford.nlp.util.CoreMap cm, String text, int start, int end, edu.stanford.nlp.process.CoreTokenFactory factory)">3</method>
			<method name="public static String getTrimmedText(edu.stanford.nlp.util.CoreMap sent)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEventMentionArgument</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="public void _init_(String role, edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEntityMention content)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalRelations$ModifierGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$InterpretationAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Generics</name>
		<wmc>37</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>270</cbo>
		<rfc>75</rfc>
		<lcom>630</lcom>
		<ca>265</ca>
		<ce>8</ce>
		<npm>29</npm>
		<lcom3>0.9666666666666666</lcom3>
		<loc>403</loc>
		<dam>0.6</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.05864197530864197</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.621621621621621</amc>
		<cc>
			<method name="private static Class getHashMapClass()">2</method>
			<method name="public static java.util.LinkedList newLinkedList(java.util.Collection c)">1</method>
			<method name="public static java.util.ArrayList newArrayList()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static edu.stanford.nlp.util.Pair newPair(Object first, Object second)">1</method>
			<method name="public static java.util.ArrayList newArrayList(java.util.Collection c)">1</method>
			<method name="public static edu.stanford.nlp.util.concurrent.SynchronizedInterner newSynchronizedInterner(edu.stanford.nlp.util.Interner interner)">1</method>
			<method name="public static java.lang.ref.WeakReference newWeakReference(Object referent)">1</method>
			<method name="public static java.util.Map newHashMap(int initialCapacity)">2</method>
			<method name="public static java.util.TreeSet newTreeSet(java.util.Comparator comparator)">1</method>
			<method name="private static java.lang.reflect.Constructor getHashSetSizeConstructor()">1</method>
			<method name="private void _init_()">0</method>
			<method name="public static edu.stanford.nlp.util.Interner newInterner()">1</method>
			<method name="public static edu.stanford.nlp.util.Index newIndex()">1</method>
			<method name="public static java.util.Stack newStack()">1</method>
			<method name="public static java.util.concurrent.ConcurrentHashMap newConcurrentHashMap(int initialCapacity, float loadFactor, int concurrencyLevel)">1</method>
			<method name="public static java.util.TreeSet newTreeSet()">1</method>
			<method name="private static Class getHashSetClass()">2</method>
			<method name="public static java.util.Set newHashSet(int initialCapacity)">2</method>
			<method name="public static edu.stanford.nlp.util.BinaryHeapPriorityQueue newBinaryHeapPriorityQueue()">1</method>
			<method name="public static java.util.Set newHashSet(java.util.Collection c)">1</method>
			<method name="public static java.util.WeakHashMap newWeakHashMap()">1</method>
			<method name="public static java.util.LinkedList newLinkedList()">1</method>
			<method name="public static java.util.IdentityHashMap newIdentityHashMap()">1</method>
			<method name="public static java.util.ArrayList newArrayList(int size)">1</method>
			<method name="public static edu.stanford.nlp.util.concurrent.SynchronizedInterner newSynchronizedInterner(edu.stanford.nlp.util.Interner interner, Object mutex)">1</method>
			<method name="public static java.util.concurrent.ConcurrentHashMap newConcurrentHashMap()">1</method>
			<method name="private static java.lang.reflect.Constructor getHashMapSizeConstructor()">1</method>
			<method name="public static java.util.TreeSet newTreeSet(java.util.SortedSet s)">1</method>
			<method name="public static java.util.Map newHashMap()">1</method>
			<method name="public static java.util.concurrent.ConcurrentHashMap newConcurrentHashMap(int initialCapacity)">1</method>
			<method name="private static java.lang.reflect.Constructor getHashSetCollectionConstructor()">1</method>
			<method name="public static java.util.Set newHashSet()">1</method>
			<method name="private static java.lang.reflect.Constructor getHashMapFromMapConstructor()">1</method>
			<method name="public static java.util.Map newHashMap(java.util.Map m)">1</method>
			<method name="public static edu.stanford.nlp.util.Triple newTriple(Object first, Object second, Object third)">1</method>
			<method name="public static java.util.TreeMap newTreeMap()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.process.ChineseDocumentToSentenceProcessor</name>
		<wmc>10</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>13</cbo>
		<rfc>70</rfc>
		<lcom>39</lcom>
		<ca>3</ca>
		<ce>10</ce>
		<npm>7</npm>
		<lcom3>0.7555555555555555</lcom3>
		<loc>850</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3888888888888889</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>83.5</amc>
		<cc>
			<method name="public static java.util.List fromHTML(String inputString)">1</method>
			<method name="public String normalization(String in)">1</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static java.util.List fromPlainText(String contentString)">1</method>
			<method name="private String normalize(String inputString)">4</method>
			<method name="public void _init_(String normalizationTableFile)">0</method>
			<method name="private static String removeWhitespace(String str, boolean segmented)">3</method>
			<method name="public static java.util.List fromPlainText(String contentString, boolean segmented)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.ScorerBCubed$1</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>28</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>26.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.KBestViterbiParser</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>6</rfc>
		<lcom>15</lcom>
		<ca>10</ca>
		<ce>1</ce>
		<npm>6</npm>
		<lcom3>2.0</lcom3>
		<loc>6</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract java.util.List getKGoodParses(int)">1</method>
			<method name="public abstract java.util.List getKSampledParses(int)">1</method>
			<method name="public abstract java.util.List getBestParses()">1</method>
			<method name="public abstract java.util.List getKBestParses(int)">1</method>
			<method name="public abstract double getBestScore()">1</method>
			<method name="public abstract boolean hasParse()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$IthChildOf</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>16</rfc>
		<lcom>0</lcom>
		<ca>4</ca>
		<ce>5</ce>
		<npm>2</npm>
		<lcom3>0.7</lcom3>
		<loc>106</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.333333333333332</amc>
		<cc>
			<method name="public boolean equals(Object o)">4</method>
			<method name="public int hashCode()">1</method>
			<method name="static int access$1000(edu.stanford.nlp.trees.tregex.Relation$IthChildOf x0)">1</method>
			<method name="void _init_(int i)">0</method>
			<method name="java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">1</method>
			<method name="boolean satisfies(edu.stanford.nlp.trees.Tree t1, edu.stanford.nlp.trees.Tree t2, edu.stanford.nlp.trees.Tree root, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">6</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.semgraph.SemanticGraphFormatter</name>
		<wmc>10</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>46</rfc>
		<lcom>25</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>4</npm>
		<lcom3>0.8111111111111111</lcom3>
		<loc>500</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>47.0</amc>
		<cc>
			<method name="private void test(String s)">1</method>
			<method name="private void formatSGNodeMultiline(edu.stanford.nlp.semgraph.SemanticGraph sg, edu.stanford.nlp.ling.IndexedWord node, int spaces)">5</method>
			<method name="public void _init_(int width, int indent, boolean smartIndent, boolean showRelns, boolean showTags, boolean showAnnos, boolean showIndices)">0</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="public void _init_()">0</method>
			<method name="private void formatSGNode(edu.stanford.nlp.semgraph.SemanticGraph sg, edu.stanford.nlp.ling.IndexedWord node, int spaces)">4</method>
			<method name="private String formatLabel(edu.stanford.nlp.ling.IndexedWord node)">6</method>
			<method name="public String formatSemanticGraph(edu.stanford.nlp.semgraph.SemanticGraph sg)">5</method>
			<method name="private void formatSGNodeOnelineHelper(edu.stanford.nlp.semgraph.SemanticGraph sg, edu.stanford.nlp.ling.IndexedWord node, StringBuilder sb, java.util.Set usedOneline)">8</method>
			<method name="private String formatSGNodeOneline(edu.stanford.nlp.semgraph.SemanticGraph sg, edu.stanford.nlp.ling.IndexedWord node)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$FirstChildAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$TemporalOp$1</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>11</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>50</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>24.0</amc>
		<cc>
			<method name="void _init_(String, int)">0</method>
			<method name="public edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal arg1, edu.stanford.nlp.time.SUTime$Temporal arg2, int flags)">5</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.Counters$7$1</name>
		<wmc>3</wmc>
		<dit>3</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>7</rfc>
		<lcom>1</lcom>
		<ca>3</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>0.75</lcom3>
		<loc>27</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.9047619047619048</mfa>
		<cam>0.6666666666666666</cam>
		<ic>2</ic>
		<cbm>7</cbm>
		<amc>7.333333333333333</amc>
		<cc>
			<method name="public int size()">1</method>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="void _init_(edu.stanford.nlp.stats.Counters$7)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Token</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>8</rfc>
		<lcom>19</lcom>
		<ca>3</ca>
		<ce>0</ce>
		<npm>7</npm>
		<lcom3>1.0</lcom3>
		<loc>50</loc>
		<dam>0.1111111111111111</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.5238095238095238</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.857142857142857</amc>
		<cc>
			<method name="public static edu.stanford.nlp.trees.tregex.Token newToken(int ofKind, String image)">2</method>
			<method name="public void _init_()">0</method>
			<method name="public static edu.stanford.nlp.trees.tregex.Token newToken(int ofKind)">1</method>
			<method name="public void _init_(int kind, String image)">0</method>
			<method name="public String toString()">1</method>
			<method name="public void _init_(int kind)">0</method>
			<method name="public Object getValue()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$TemporalOp$3</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>12</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>56</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>27.0</amc>
		<cc>
			<method name="void _init_(String, int)">0</method>
			<method name="public edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal arg1, edu.stanford.nlp.time.SUTime$Temporal arg2, int flags)">4</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$TrueCaseTextAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.LabeledChunkIdentifier</name>
		<wmc>17</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>32</rfc>
		<lcom>92</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>16</npm>
		<lcom3>0.775</lcom3>
		<loc>473</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.24107142857142858</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>26.529411764705884</amc>
		<cc>
			<method name="public void setIgnoreProvidedTag(boolean ignoreProvidedTag)">1</method>
			<method name="public java.util.List getAnnotatedChunks(java.util.List tokens, int totalTokensOffset, Class textKey, Class labelKey)">1</method>
			<method name="public String getDefaultNegTag()">1</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public java.util.List getAnnotatedChunks(java.util.List tokens, int totalTokensOffset, Class textKey, Class labelKey, Class tokenChunkKey, Class tokenLabelKey)">6</method>
			<method name="public void setNegLabel(String negLabel)">1</method>
			<method name="public void setDefaultPosTag(String defaultPosTag)">1</method>
			<method name="public static boolean isEndOfChunk(String prevTag, String prevType, String curTag, String curType)">18</method>
			<method name="public boolean isIgnoreProvidedTag()">1</method>
			<method name="public String getNegLabel()">1</method>
			<method name="public static boolean isStartOfChunk(String prevTag, String prevType, String curTag, String curType)">25</method>
			<method name="public static boolean isStartOfChunk(edu.stanford.nlp.pipeline.LabeledChunkIdentifier$LabelTagType prev, edu.stanford.nlp.pipeline.LabeledChunkIdentifier$LabelTagType cur)">2</method>
			<method name="public edu.stanford.nlp.pipeline.LabeledChunkIdentifier$LabelTagType getTagType(String label)">6</method>
			<method name="public String getDefaultPosTag()">1</method>
			<method name="public static boolean isEndOfChunk(edu.stanford.nlp.pipeline.LabeledChunkIdentifier$LabelTagType prev, edu.stanford.nlp.pipeline.LabeledChunkIdentifier$LabelTagType cur)">2</method>
			<method name="public void setDefaultNegTag(String defaultNegTag)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalRelations$DirectObjectGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$TemporalOp$2</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>14</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>77</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>37.5</amc>
		<cc>
			<method name="void _init_(String, int)">0</method>
			<method name="public edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal arg1, edu.stanford.nlp.time.SUTime$Temporal arg2, int flags)">8</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser$JJCalls</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>8</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$OrdinalTime</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>25</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>7</ce>
		<npm>6</npm>
		<lcom3>0.5333333333333333</lcom3>
		<loc>162</loc>
		<dam>0.3333333333333333</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4166666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>25.5</amc>
		<cc>
			<method name="public edu.stanford.nlp.time.SUTime$Time add(edu.stanford.nlp.time.SUTime$Duration offset)">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Time intersect(edu.stanford.nlp.time.SUTime$Time t)">3</method>
			<method name="public edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time t, int flags)">4</method>
			<method name="public void _init_(edu.stanford.nlp.time.SUTime$Temporal base, int n)">0</method>
			<method name="public void _init_(edu.stanford.nlp.time.SUTime$Temporal base, long n)">0</method>
			<method name="public String toFormattedString(int flags)">6</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.Extractor</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>2</rfc>
		<lcom>1</lcom>
		<ca>5</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>2</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract Object extract(java.util.Iterator, edu.stanford.nlp.util.Function)">1</method>
			<method name="public abstract Object extract(java.util.Collection)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$UnbrokenCategoryFollows</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>21</rfc>
		<lcom>8</lcom>
		<ca>2</ca>
		<ce>6</ce>
		<npm>0</npm>
		<lcom3>0.65</lcom3>
		<loc>138</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.43333333333333335</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>25.6</amc>
		<cc>
			<method name="static boolean access$1500(edu.stanford.nlp.trees.tregex.Relation$UnbrokenCategoryFollows x0, edu.stanford.nlp.trees.Tree x1)">1</method>
			<method name="private boolean pathMatchesNode(edu.stanford.nlp.trees.Tree node)">4</method>
			<method name="void _init_(String arg, edu.stanford.nlp.util.Function basicCatFunction)">0</method>
			<method name="java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">1</method>
			<method name="boolean satisfies(edu.stanford.nlp.trees.Tree t1, edu.stanford.nlp.trees.Tree t2, edu.stanford.nlp.trees.Tree root, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.ExtractorAllCap</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>7</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>1.3333333333333333</lcom3>
		<loc>24</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.75</amc>
		<cc>
			<method name="String extract(edu.stanford.nlp.tagger.maxent.History h, edu.stanford.nlp.tagger.maxent.PairsHolder pH)">2</method>
			<method name="public boolean isLocal()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public boolean isDynamic()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.process.DocumentProcessor</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract edu.stanford.nlp.ling.Document processDocument(edu.stanford.nlp.ling.Document)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$TokensAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>9</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.Redwood$RecordHandlerTree</name>
		<wmc>15</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>21</cbo>
		<rfc>36</rfc>
		<lcom>61</lcom>
		<ca>17</ca>
		<ce>6</ce>
		<npm>9</npm>
		<lcom3>0.5</lcom3>
		<loc>343</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.23703703703703705</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>21.666666666666668</amc>
		<cc>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="public void _init_()">0</method>
			<method name="static boolean access$700(edu.stanford.nlp.util.logging.Redwood$RecordHandlerTree x0)">1</method>
			<method name="public java.util.Iterator children()">1</method>
			<method name="public void _init_(edu.stanford.nlp.util.logging.LogRecordHandler head)">0</method>
			<method name="public edu.stanford.nlp.util.logging.LogRecordHandler head()">1</method>
			<method name="public void addChild(edu.stanford.nlp.util.logging.LogRecordHandler handler)">2</method>
			<method name="private StringBuilder toStringHelper(StringBuilder b, int depth)">4</method>
			<method name="private void process(edu.stanford.nlp.util.logging.Redwood$Record toPass, edu.stanford.nlp.util.logging.Redwood$MessageType type, int newDepth, long timestamp)">5</method>
			<method name="protected void addChildTree(edu.stanford.nlp.util.logging.Redwood$RecordHandlerTree tree)">2</method>
			<method name="public edu.stanford.nlp.util.logging.Redwood$RecordHandlerTree find(edu.stanford.nlp.util.logging.LogRecordHandler toFind)">3</method>
			<method name="private java.util.List append(java.util.List lst, edu.stanford.nlp.util.logging.Redwood$Record toAppend)">2</method>
			<method name="public edu.stanford.nlp.util.logging.LogRecordHandler removeChild(edu.stanford.nlp.util.logging.LogRecordHandler handler)">3</method>
			<method name="public String toString()">1</method>
			<method name="static void access$400(edu.stanford.nlp.util.logging.Redwood$RecordHandlerTree x0, edu.stanford.nlp.util.logging.Redwood$Record x1, edu.stanford.nlp.util.logging.Redwood$MessageType x2, int x3, long x4)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.UnnamedDependency$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.process.WhitespaceLexer</name>
		<wmc>24</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>35</rfc>
		<lcom>192</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>10</npm>
		<lcom3>0.9501278772378516</lcom3>
		<loc>736</loc>
		<dam>0.9117647058823529</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.2236024844720497</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>28.25</amc>
		<cc>
			<method name="public final String yytext()">1</method>
			<method name="private static int[] zzUnpackTrans()">1</method>
			<method name="public void _init_(java.io.Reader r, edu.stanford.nlp.process.LexedTokenFactory tf)">0</method>
			<method name="public final void yybegin(int newState)">1</method>
			<method name="public final void yyclose()">1</method>
			<method name="public final void yyreset(java.io.Reader reader)">1</method>
			<method name="public final int yylength()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public final int yystate()">1</method>
			<method name="private static char[] zzUnpackCMap(String packed)">3</method>
			<method name="public final char yycharat(int pos)">1</method>
			<method name="private static int zzUnpackAction(String packed, int offset, int[] result)">3</method>
			<method name="public Object next()">1</method>
			<method name="private static int[] zzUnpackAttribute()">1</method>
			<method name="private static int[] zzUnpackAction()">1</method>
			<method name="private static int zzUnpackTrans(String packed, int offset, int[] result)">3</method>
			<method name="void _init_(java.io.InputStream in)">0</method>
			<method name="private static int zzUnpackAttribute(String packed, int offset, int[] result)">3</method>
			<method name="private static int[] zzUnpackRowMap()">1</method>
			<method name="private boolean zzRefill()">1</method>
			<method name="public void yypushback(int number)">2</method>
			<method name="void _init_(java.io.Reader in)">0</method>
			<method name="private void zzScanError(int errorCode)">1</method>
			<method name="private static int zzUnpackRowMap(String packed, int offset, int[] result)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceElement</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>5</noc>
		<cbo>7</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>7</ca>
		<ce>0</ce>
		<npm>3</npm>
		<lcom3>0.5</lcom3>
		<loc>25</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4166666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.0</amc>
		<cc>
			<method name="public String getId()">1</method>
			<method name="public void _init_(String id)">0</method>
			<method name="public static void appendOffset(StringBuffer buffer, int offset)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalStructure</name>
		<wmc>38</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>22</cbo>
		<rfc>140</rfc>
		<lcom>685</lcom>
		<ca>4</ca>
		<ce>19</ce>
		<npm>8</npm>
		<lcom3>0.9613899613899614</lcom3>
		<loc>4650</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.15233415233415235</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>121.1842105263158</amc>
		<cc>
			<method name="private static void correctSubjPassAndPoss(java.util.Collection list)">5</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static java.util.List readCoNLLXGrammaticalStructureCollection(String fileName)">1</method>
			<method name="public void _init_(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.util.Filter puncFilter, edu.stanford.nlp.trees.HeadFinder hf)">0</method>
			<method name="private static boolean isConjWithNoPrep(edu.stanford.nlp.trees.TreeGraphNode node, java.util.Collection list)">2</method>
			<method name="private static void collapseMultiWordPrep(java.util.Collection list, java.util.Collection newTypedDeps, String str_mwp0, String str_mwp1, String w_mwp0, String w_mwp1)">20</method>
			<method name="private static boolean inConjDeps(edu.stanford.nlp.trees.TypedDependency td, java.util.List conjs)">2</method>
			<method name="protected void postProcessDependencies(java.util.List list)">1</method>
			<method name="private static boolean isDefinitelyActive(String tag)">5</method>
			<method name="private static void filterKill(java.util.List deps)">2</method>
			<method name="public void _init_(edu.stanford.nlp.trees.Tree t)">0</method>
			<method name="protected static edu.stanford.nlp.trees.GrammaticalRelation conjValue(String conj)">9</method>
			<method name="private static void addXSubj(java.util.Collection list)">16</method>
			<method name="protected void correctDependencies(java.util.Collection list)">1</method>
			<method name="private static void removeDep(java.util.Collection list)">3</method>
			<method name="public void _init_(java.util.List projectiveDependencies, edu.stanford.nlp.trees.TreeGraphNode root)">0</method>
			<method name="public void _init_(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.util.Filter puncFilter)">0</method>
			<method name="private static void treatCC(java.util.Collection list)">23</method>
			<method name="private static void collapseFlatMWP(java.util.Collection list)">12</method>
			<method name="protected void collapseDependenciesTree(java.util.List list)">1</method>
			<method name="private static void removeExactDuplicates(java.util.Collection list)">1</method>
			<method name="private static void collapse3WP(java.util.Collection list)">35</method>
			<method name="private static edu.stanford.nlp.trees.GrammaticalRelation determinePrepRelation(java.util.Map map, java.util.List vmod, edu.stanford.nlp.trees.TypedDependency pc, edu.stanford.nlp.trees.TypedDependency topPrep, boolean pobj)">8</method>
			<method name="public static edu.stanford.nlp.trees.EnglishGrammaticalStructure buildCoNLLXGrammaticalStructure(java.util.List tokenFields)">1</method>
			<method name="protected void getExtras(java.util.List list)">1</method>
			<method name="private static void eraseMultiConj(java.util.Collection list)">8</method>
			<method name="private static void convertRel(java.util.List list)">11</method>
			<method name="private static void printListSorted(String title, java.util.Collection list)">2</method>
			<method name="protected edu.stanford.nlp.util.Filter extraTreeDepFilter()">1</method>
			<method name="private static void collapseReferent(java.util.Collection list)">3</method>
			<method name="public void _init_(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.util.Filter puncFilter, edu.stanford.nlp.trees.HeadFinder hf, boolean threadSafe)">0</method>
			<method name="private static void addRef(java.util.Collection list)">13</method>
			<method name="private static void collapsePrepAndPoss(java.util.Collection list)">61</method>
			<method name="private static void collapse2WP(java.util.Collection list)">2</method>
			<method name="public static edu.stanford.nlp.trees.TreeGraphNode getSubject(edu.stanford.nlp.trees.TreeGraphNode t)">3</method>
			<method name="private static void collapse2WPbis(java.util.Collection list)">17</method>
			<method name="private static void collapseConj(java.util.Collection list)">5</method>
			<method name="protected void collapseDependencies(java.util.List list, boolean CCprocess, boolean includeExtras)">4</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.french.FrenchTreebankLanguagePack</name>
		<wmc>14</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>18</rfc>
		<lcom>79</lcom>
		<ca>5</ca>
		<ce>7</ce>
		<npm>13</npm>
		<lcom3>0.9615384615384616</lcom3>
		<loc>224</loc>
		<dam>0.875</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>14.428571428571429</amc>
		<cc>
			<method name="public String treebankFileExtension()">1</method>
			<method name="public char[] labelAnnotationIntroducingCharacters()">1</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public String[] startSymbols()">1</method>
			<method name="public String getEncoding()">1</method>
			<method name="public String[] punctuationWords()">1</method>
			<method name="public edu.stanford.nlp.trees.HeadFinder typedDependencyHeadFinder()">1</method>
			<method name="public String[] sentenceFinalPunctuationTags()">1</method>
			<method name="public String[] punctuationTags()">1</method>
			<method name="public edu.stanford.nlp.process.TokenizerFactory getTokenizerFactory()">1</method>
			<method name="public edu.stanford.nlp.trees.HeadFinder headFinder()">1</method>
			<method name="public String[] sentenceFinalPunctuationWords()">1</method>
			<method name="public edu.stanford.nlp.international.morph.MorphoFeatureSpecification morphFeatureSpec()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.domains.roth.RothCONLL04Reader</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>15</cbo>
		<rfc>63</rfc>
		<lcom>13</lcom>
		<ca>1</ca>
		<ce>14</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>531</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2222222222222222</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>87.5</amc>
		<cc>
			<method name="public edu.stanford.nlp.pipeline.Annotation read(String path)">1</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="public void _init_()">0</method>
			<method name="private static int getIndexByObjectEquality(java.util.List list, Object obj)">3</method>
			<method name="private void setHeadWord(edu.stanford.nlp.ie.machinereading.structure.EntityMention entity, edu.stanford.nlp.trees.Tree tree)">10</method>
			<method name="private static edu.stanford.nlp.pipeline.Annotation readSentence(edu.stanford.nlp.pipeline.Annotation doc, String docId, java.util.Iterator lineIterator)">10</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.CountWrapper</name>
		<wmc>13</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>28</rfc>
		<lcom>12</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>8</npm>
		<lcom3>0.7222222222222223</lcom3>
		<loc>182</loc>
		<dam>0.8333333333333334</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2361111111111111</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>12.538461538461538</amc>
		<cc>
			<method name="public int hashCode()">1</method>
			<method name="public int getCountIn()">1</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="protected void read(java.io.DataInputStream rf)">4</method>
			<method name="protected void save(java.io.DataOutputStream rf)">1</method>
			<method name="public int getCountThat()">1</method>
			<method name="public int getCountPart()">1</method>
			<method name="public boolean equals(Object obj)">3</method>
			<method name="public String getWord()">1</method>
			<method name="protected void incThat()">1</method>
			<method name="public int getCountRB()">1</method>
			<method name="protected void _init_(String word, int countPart, int countThat, int countIn, int countRB)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequenceMatchResult$1</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>5</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>45</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>14.0</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="void _init_()">0</method>
			<method name="public int compare(java.util.regex.MatchResult e1, java.util.regex.MatchResult e2)">5</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequenceMatchResult$2</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>5</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>43</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.333333333333334</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="void _init_()">0</method>
			<method name="public int compare(java.util.regex.MatchResult e1, java.util.regex.MatchResult e2)">5</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.TransformingTreebank$TransformingTreebankIterator</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>9</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>4</npm>
		<lcom3>0.375</lcom3>
		<loc>42</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4666666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.0</amc>
		<cc>
			<method name="void _init_(java.util.Iterator iter, edu.stanford.nlp.trees.TreeTransformer transformer)">0</method>
			<method name="public edu.stanford.nlp.trees.Tree next()">2</method>
			<method name="public boolean hasNext()">1</method>
			<method name="public void remove()">1</method>
			<method name="public volatile Object next()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.UnnamedDependency$UnnamedDependencyFactory</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>6</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>22</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.5</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public edu.stanford.nlp.trees.Dependency newDependency(edu.stanford.nlp.ling.Label regent, edu.stanford.nlp.ling.Label dependent)">1</method>
			<method name="public edu.stanford.nlp.trees.Dependency newDependency(edu.stanford.nlp.ling.Label regent, edu.stanford.nlp.ling.Label dependent, Object name)">1</method>
			<method name="void _init_(edu.stanford.nlp.trees.UnnamedDependency$1 x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalRelations$PrepositionalModifierGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.MultiWordStringMatcher$LongestStringComparator</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>33</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.0</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public int compare(String o1, String o2)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.ArrayHeap$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.pascal.AcronymModel$LettersAligned</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>10</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>48</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.0</amc>
		<cc>
			<method name="public double value(edu.stanford.nlp.ie.pascal.Alignment alignment)">4</method>
			<method name="public void _init_()">0</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue</name>
		<wmc>12</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>14</cbo>
		<rfc>49</rfc>
		<lcom>0</lcom>
		<ca>5</ca>
		<ce>9</ce>
		<npm>9</npm>
		<lcom3>2.0</lcom3>
		<loc>671</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.26851851851851855</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>54.916666666666664</amc>
		<cc>
			<method name="public transient edu.stanford.nlp.ling.tokensregex.types.Value doEvaluation(edu.stanford.nlp.ling.tokensregex.Env env, Object[] args)">4</method>
			<method name="public void set(String attr, Object obj)">2</method>
			<method name="private static transient edu.stanford.nlp.ling.tokensregex.types.Value attemptTypeConversion(edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue cv, edu.stanford.nlp.ling.tokensregex.Env env, Object[] args)">15</method>
			<method name="public transient edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue simplifyNoTypeConversion(edu.stanford.nlp.ling.tokensregex.Env env, Object[] args)">2</method>
			<method name="private transient edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue evaluateNoTypeConversion(edu.stanford.nlp.ling.tokensregex.Env env, Object[] args)">2</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Expression getExpression(String attr)">1</method>
			<method name="public transient void _init_(String[] tags)">0</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Value getValue(String attr)">3</method>
			<method name="public transient void _init_(java.util.Map m, boolean isEvaluated, String[] tags)">0</method>
			<method name="private boolean checkValue()">2</method>
			<method name="public java.util.Set getAttributes()">1</method>
			<method name="public Object get(String attr)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.DependencyTreeTransformer</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>30</rfc>
		<lcom>15</lcom>
		<ca>1</ca>
		<ce>9</ce>
		<npm>2</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>138</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.0</amc>
		<cc>
			<method name="protected void stripTag(edu.stanford.nlp.trees.Tree t)">3</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="protected static edu.stanford.nlp.trees.Tree stripEmptyNode(edu.stanford.nlp.trees.Tree t)">1</method>
			<method name="public edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree t)">1</method>
			<method name="protected String cleanUpLabel(String label)">4</method>
			<method name="protected static String cleanUpRoot(String label)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.CoordinationTransformer</name>
		<wmc>14</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>23</cbo>
		<rfc>77</rfc>
		<lcom>65</lcom>
		<ca>2</ca>
		<ce>21</ce>
		<npm>9</npm>
		<lcom3>0.7743589743589744</lcom3>
		<loc>1439</loc>
		<dam>1.0</dam>
		<moa>14</moa>
		<mfa>0.0</mfa>
		<cam>0.2564102564102564</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>100.71428571428571</amc>
		<cc>
			<method name="public edu.stanford.nlp.trees.Tree SQflatten(edu.stanford.nlp.trees.Tree t)">5</method>
			<method name="public edu.stanford.nlp.trees.Tree moveRB(edu.stanford.nlp.trees.Tree t)">2</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static edu.stanford.nlp.trees.Tree CCtransform(edu.stanford.nlp.trees.Tree t)">3</method>
			<method name="public edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree t)">12</method>
			<method name="public void _init_(edu.stanford.nlp.trees.HeadFinder hf)">0</method>
			<method name="public static edu.stanford.nlp.trees.Tree removeXOverX(edu.stanford.nlp.trees.Tree t)">1</method>
			<method name="public edu.stanford.nlp.trees.Tree combineConjp(edu.stanford.nlp.trees.Tree t)">2</method>
			<method name="public static edu.stanford.nlp.trees.Tree UCPtransform(edu.stanford.nlp.trees.Tree t)">5</method>
			<method name="public static void main(String[] args)">3</method>
			<method name="private static edu.stanford.nlp.trees.Tree findCCparent(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.Tree root)">6</method>
			<method name="private static String getHeadTag(edu.stanford.nlp.trees.Tree t)">3</method>
			<method name="private static edu.stanford.nlp.trees.Tree transformCC(edu.stanford.nlp.trees.Tree t, int ccIndex)">72</method>
			<method name="private static boolean notNP(java.util.List children, int ccIndex)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.DiffFloatFunction</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract float[] derivativeAt(float[])">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$ImmediatelyHeadedBy$1</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>8</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>0</npm>
		<lcom3>0.0</lcom3>
		<loc>44</loc>
		<dam>0.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.5</amc>
		<cc>
			<method name="void initialize()">3</method>
			<method name="void _init_(edu.stanford.nlp.trees.tregex.Relation$ImmediatelyHeadedBy, edu.stanford.nlp.trees.Tree, edu.stanford.nlp.trees.tregex.TregexMatcher)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.ResultStoringFloatMonitor</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>17</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>0.5</lcom3>
		<loc>103</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>32.333333333333336</amc>
		<cc>
			<method name="public int domainDimension()">1</method>
			<method name="public float valueAt(float[] x)">2</method>
			<method name="public void _init_(int outputFreq, String filename)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.tsurgeon.CreateSubtreeNode</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>21</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>9</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>176</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>57.333333333333336</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern start, edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern end, String newLabel)">0</method>
			<method name="public edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.tregex.TregexMatcher tm)">11</method>
			<method name="public void _init_(edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern start, String newLabel)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.TransformingTreebank$MyTreeTransformer</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>15</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>47</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>14.666666666666666</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="void _init_(edu.stanford.nlp.trees.TransformingTreebank$1 x0)">0</method>
			<method name="public edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree tree)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.StanfordCoreNLP$2</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>21</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>1.3333333333333333</lcom3>
		<loc>249</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>61.0</amc>
		<cc>
			<method name="void _init_(java.util.Properties x0)">0</method>
			<method name="public String signature()">1</method>
			<method name="public edu.stanford.nlp.pipeline.Annotator create()">2</method>
			<method name="public volatile Object create()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.Datum</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>29</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>27</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.StanfordCoreNLP$1</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>14</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>1.3333333333333333</lcom3>
		<loc>158</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>38.25</amc>
		<cc>
			<method name="void _init_(java.util.Properties x0)">0</method>
			<method name="public String signature()">2</method>
			<method name="public edu.stanford.nlp.pipeline.Annotator create()">4</method>
			<method name="public volatile Object create()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.StanfordCoreNLP$4</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>10</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>1.3333333333333333</lcom3>
		<loc>58</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.25</amc>
		<cc>
			<method name="void _init_(java.util.Properties x0)">0</method>
			<method name="public String signature()">1</method>
			<method name="public edu.stanford.nlp.pipeline.Annotator create()">1</method>
			<method name="public volatile Object create()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$LineNumberAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.Dictionaries$MentionType</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>9</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.888888888888889</lcom3>
		<loc>75</loc>
		<dam>0.16666666666666666</dam>
		<moa>5</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>16.25</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="public static edu.stanford.nlp.dcoref.Dictionaries$MentionType valueOf(String name)">1</method>
			<method name="private void _init_(String, int, int representativeness)">0</method>
			<method name="public static edu.stanford.nlp.dcoref.Dictionaries$MentionType[] values()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.StanfordCoreNLP$3</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>21</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>3</npm>
		<lcom3>1.3333333333333333</lcom3>
		<loc>287</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>70.5</amc>
		<cc>
			<method name="void _init_(java.util.Properties x0)">0</method>
			<method name="public String signature()">3</method>
			<method name="public edu.stanford.nlp.pipeline.Annotator create()">8</method>
			<method name="public volatile Object create()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.StanfordCoreNLP$6</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>23</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>3</npm>
		<lcom3>1.3333333333333333</lcom3>
		<loc>139</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>33.5</amc>
		<cc>
			<method name="void _init_(java.util.Properties x0)">0</method>
			<method name="public String signature()">1</method>
			<method name="public edu.stanford.nlp.pipeline.Annotator create()">4</method>
			<method name="public volatile Object create()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.SemanticHeadFinder</name>
		<wmc>17</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>19</cbo>
		<rfc>63</rfc>
		<lcom>46</lcom>
		<ca>9</ca>
		<ce>11</ce>
		<npm>5</npm>
		<lcom3>0.7767857142857143</lcom3>
		<loc>2629</loc>
		<dam>0.9285714285714286</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.32142857142857145</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>152.8235294117647</amc>
		<cc>
			<method name="private boolean shouldSkip(edu.stanford.nlp.trees.Tree t, boolean origWasInterjection)">7</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="private boolean isVerbalAuxiliary(edu.stanford.nlp.trees.Tree preterminal, java.util.Set verbalSet, boolean allowJustTagMatch)">12</method>
			<method name="protected edu.stanford.nlp.trees.Tree determineNonTrivialHead(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.Tree parent)">34</method>
			<method name="public boolean makesCopulaHead()">1</method>
			<method name="private static boolean vpContainsParticiple(edu.stanford.nlp.trees.Tree t)">10</method>
			<method name="private void ruleChanges()">1</method>
			<method name="private static boolean isWHQ(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.Tree parent)">8</method>
			<method name="private boolean hasPassiveProgressiveAuxiliary(edu.stanford.nlp.trees.Tree[] kids)">36</method>
			<method name="public boolean isVerbalAuxiliary(edu.stanford.nlp.trees.Tree t)">1</method>
			<method name="private boolean hasVerbalAuxiliary(edu.stanford.nlp.trees.Tree[] kids, java.util.Set verbalSet, boolean allowTagOnlyMatch)">6</method>
			<method name="protected int postOperationFix(int headIdx, edu.stanford.nlp.trees.Tree[] daughterTrees)">9</method>
			<method name="public void _init_(edu.stanford.nlp.trees.TreebankLanguagePack tlp, boolean noCopulaHead)">0</method>
			<method name="public void _init_(boolean noCopulaHead)">0</method>
			<method name="private boolean isExistential(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.Tree parent)">11</method>
			<method name="private int findPreviousHead(int headIdx, edu.stanford.nlp.trees.Tree[] daughterTrees, boolean origWasInterjection)">10</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.fsm.TransducerGraph$GraphProcessor</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>4</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract edu.stanford.nlp.fsm.TransducerGraph processGraph(edu.stanford.nlp.fsm.TransducerGraph)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$NamedValueFunction</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>32</noc>
		<cbo>34</cbo>
		<rfc>14</rfc>
		<lcom>13</lcom>
		<ca>32</ca>
		<ce>2</ce>
		<npm>4</npm>
		<lcom3>0.9</lcom3>
		<loc>90</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.666666666666666</amc>
		<cc>
			<method name="protected static String getParamDesc(String type, int nargs)">3</method>
			<method name="public String getParamDesc()">1</method>
			<method name="public String getDescription()">1</method>
			<method name="public void _init_(String name)">0</method>
			<method name="public String toString()">2</method>
			<method name="protected static String getTypeName(Class c)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.StanfordCoreNLP$5</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>5</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>1.3333333333333333</lcom3>
		<loc>19</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.5</amc>
		<cc>
			<method name="void _init_(java.util.Properties x0)">0</method>
			<method name="public String signature()">1</method>
			<method name="public edu.stanford.nlp.pipeline.Annotator create()">1</method>
			<method name="public volatile Object create()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.StanfordCoreNLP$8</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>9</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>1.3333333333333333</lcom3>
		<loc>35</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.5</amc>
		<cc>
			<method name="void _init_(java.util.Properties x0)">0</method>
			<method name="public String signature()">1</method>
			<method name="public edu.stanford.nlp.pipeline.Annotator create()">1</method>
			<method name="public volatile Object create()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.StanfordCoreNLP$7</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>6</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>3</npm>
		<lcom3>1.3333333333333333</lcom3>
		<loc>25</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.0</amc>
		<cc>
			<method name="void _init_(java.util.Properties x0)">0</method>
			<method name="public String signature()">1</method>
			<method name="public edu.stanford.nlp.pipeline.Annotator create()">1</method>
			<method name="public volatile Object create()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.StanfordCoreNLP$9</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>9</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>1.3333333333333333</lcom3>
		<loc>67</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.5</amc>
		<cc>
			<method name="void _init_(java.util.Properties x0)">0</method>
			<method name="public String signature()">1</method>
			<method name="public edu.stanford.nlp.pipeline.Annotator create()">1</method>
			<method name="public volatile Object create()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$TimexMod</name>
		<wmc>6</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>9</rfc>
		<lcom>11</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>3</npm>
		<lcom3>0.9625</lcom3>
		<loc>200</loc>
		<dam>0.0625</dam>
		<moa>15</moa>
		<mfa>0.8125</mfa>
		<cam>0.5333333333333333</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>29.666666666666668</amc>
		<cc>
			<method name="public static edu.stanford.nlp.time.SUTime$TimexMod valueOf(String name)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int, String symbol)">0</method>
			<method name="public static edu.stanford.nlp.time.SUTime$TimexMod[] values()">1</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public String getSymbol()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$TokenBeginAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.io.IOUtils$LineReaderIterable</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>6</rfc>
		<lcom>4</lcom>
		<ca>2</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>0.3333333333333333</lcom3>
		<loc>23</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.5</amc>
		<cc>
			<method name="private void _init_(java.io.BufferedReader reader)">0</method>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="void _init_(java.io.BufferedReader x0, edu.stanford.nlp.io.IOUtils$1 x1)">0</method>
			<method name="static java.io.BufferedReader access$400(edu.stanford.nlp.io.IOUtils$LineReaderIterable x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Comparators</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>12</rfc>
		<lcom>15</lcom>
		<ca>4</ca>
		<ce>3</ce>
		<npm>6</npm>
		<lcom3>2.0</lcom3>
		<loc>57</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.5</amc>
		<cc>
			<method name="public static java.util.Comparator chain(java.util.Comparator c1, java.util.Comparator c2)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public static java.util.Comparator reverse(java.util.Comparator c)">1</method>
			<method name="public static java.util.Comparator chain(java.util.List c)">1</method>
			<method name="public static int nullSafeComparator(Comparable one, Comparable two)">7</method>
			<method name="public static transient java.util.Comparator chain(java.util.Comparator[] c)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.sequences.Clique$CliqueEqualityWrapper</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>5</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>84</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>26.666666666666668</amc>
		<cc>
			<method name="public boolean equals(Object o)">5</method>
			<method name="public int hashCode()">2</method>
			<method name="public void _init_(edu.stanford.nlp.sequences.Clique c)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.Expressions</name>
		<wmc>11</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>32</cbo>
		<rfc>25</rfc>
		<lcom>51</lcom>
		<ca>29</ca>
		<ce>4</ce>
		<npm>7</npm>
		<lcom3>1.0666666666666667</lcom3>
		<loc>264</loc>
		<dam>0.09523809523809523</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.2</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>21.09090909090909</amc>
		<cc>
			<method name="public static edu.stanford.nlp.ling.tokensregex.types.Value asValue(edu.stanford.nlp.ling.tokensregex.Env env, Object v)">2</method>
			<method name="public static edu.stanford.nlp.ling.tokensregex.types.Expression asExpression(edu.stanford.nlp.ling.tokensregex.Env env, Object v)">2</method>
			<method name="public static edu.stanford.nlp.ling.tokensregex.types.Value convertValueToBooleanValue(edu.stanford.nlp.ling.tokensregex.types.Value v, boolean keepNull)">4</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="private static final boolean isArgTypesCompatible(Class[] paramTypes, Class[] targetParamTypes)">7</method>
			<method name="public static Boolean convertValueToBoolean(edu.stanford.nlp.ling.tokensregex.types.Value v, boolean keepNull)">7</method>
			<method name="public static Object asObject(edu.stanford.nlp.ling.tokensregex.Env env, Object v)">2</method>
			<method name="static java.util.regex.Pattern access$000()">1</method>
			<method name="static boolean access$100(Class[] x0, Class[] x1)">1</method>
			<method name="public static transient edu.stanford.nlp.ling.tokensregex.types.Value createValue(String typename, Object value, String[] tags)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.SimpleConstituent$ConstituentFactoryHolder$SimpleConstituentFactory</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>6</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>22</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.45</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.5</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public edu.stanford.nlp.trees.Constituent newConstituent(int start, int end, edu.stanford.nlp.ling.Label label, double score)">1</method>
			<method name="public edu.stanford.nlp.trees.Constituent newConstituent(int start, int end)">1</method>
			<method name="void _init_(edu.stanford.nlp.trees.SimpleConstituent$1 x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.pascal.ISODateInstance$1</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>28</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>26.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.LogRecordHandler</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>4</noc>
		<cbo>18</cbo>
		<rfc>8</rfc>
		<lcom>3</lcom>
		<ca>17</ca>
		<ce>1</ce>
		<npm>5</npm>
		<lcom3>0.4</lcom3>
		<loc>19</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.45</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public java.util.List signalShutdown()">1</method>
			<method name="public java.util.List signalStartTrack(edu.stanford.nlp.util.logging.Redwood$Record signal)">1</method>
			<method name="public abstract java.util.List handle(edu.stanford.nlp.util.logging.Redwood$Record)">1</method>
			<method name="public java.util.List signalEndTrack(int newDepth, long timeEnded)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.Options</name>
		<wmc>14</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>72</cbo>
		<rfc>64</rfc>
		<lcom>45</lcom>
		<ca>61</ca>
		<ce>13</ce>
		<npm>12</npm>
		<lcom3>0.5692307692307692</lcom3>
		<loc>3710</loc>
		<dam>0.05</dam>
		<moa>5</moa>
		<mfa>0.0</mfa>
		<cam>0.30612244897959184</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>262.57142857142856</amc>
		<cc>
			<method name="public void setOptions(String[] flags, int startIndex, int endIndexPlusOne)">2</method>
			<method name="private int setOptionFlag(String[] args, int i)">201</method>
			<method name="public int setOption(String[] flags, int i)">3</method>
			<method name="public void writeData(java.io.Writer w)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.TreebankLangParserParams tlpParams)">0</method>
			<method name="public void setOptionsOrWarn(String[] flags, int startIndex, int endIndexPlusOne)">2</method>
			<method name="public edu.stanford.nlp.trees.TreebankLanguagePack langpack()">1</method>
			<method name="public int setOptionOrWarn(String[] flags, int i)">3</method>
			<method name="public transient void setOptionsOrWarn(String[] flags)">1</method>
			<method name="private void readObject(java.io.ObjectInputStream in)">1</method>
			<method name="public transient void setOptions(String[] flags)">1</method>
			<method name="public void readData(java.io.BufferedReader in)">1</method>
			<method name="public void display()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.LexicalizedParser</name>
		<wmc>45</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>77</cbo>
		<rfc>270</rfc>
		<lcom>884</lcom>
		<ca>14</ca>
		<ce>67</ce>
		<npm>38</npm>
		<lcom3>0.8825757575757577</lcom3>
		<loc>3256</loc>
		<dam>0.25</dam>
		<moa>9</moa>
		<mfa>0.0</mfa>
		<cam>0.09090909090909091</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>71.08888888888889</amc>
		<cc>
			<method name="public static edu.stanford.nlp.trees.CompositeTreeTransformer buildTrainTransformer(edu.stanford.nlp.parser.lexparser.Options op)">1</method>
			<method name="public static edu.stanford.nlp.parser.lexparser.LexicalizedParser loadModel(java.io.ObjectInputStream ois)">2</method>
			<method name="public static edu.stanford.nlp.util.Triple getAnnotatedBinaryTreebankFromTreebank(edu.stanford.nlp.trees.Treebank trainTreebank, edu.stanford.nlp.trees.Treebank secondaryTreebank, edu.stanford.nlp.trees.Treebank tuneTreebank, edu.stanford.nlp.parser.lexparser.Options op)">15</method>
			<method name="public void saveParserToSerialized(String filename)">1</method>
			<method name="public static transient edu.stanford.nlp.parser.lexparser.LexicalizedParser loadModel(edu.stanford.nlp.parser.lexparser.Options op, String[] extraFlags)">2</method>
			<method name="public void saveParserToTextFile(String filename)">5</method>
			<method name="private static void printOptions(boolean train, edu.stanford.nlp.parser.lexparser.Options op)">2</method>
			<method name="public edu.stanford.nlp.trees.Tree parseStrings(java.util.List lst)">2</method>
			<method name="static void _clinit_()">0</method>
			<method name="public edu.stanford.nlp.trees.Tree apply(java.util.List words)">1</method>
			<method name="public static edu.stanford.nlp.parser.lexparser.LexicalizedParser trainFromTreebank(String treebankPath, java.io.FileFilter filt, edu.stanford.nlp.parser.lexparser.Options op)">1</method>
			<method name="public edu.stanford.nlp.parser.lexparser.Lexicon getLexicon()">1</method>
			<method name="public static edu.stanford.nlp.parser.lexparser.LexicalizedParser loadModelFromZip(String zipFilename, String modelName)">4</method>
			<method name="public edu.stanford.nlp.parser.lexparser.ParserQuery parserQuery()">2</method>
			<method name="public static edu.stanford.nlp.parser.lexparser.LexicalizedParser getParserFromTreebank(edu.stanford.nlp.trees.Treebank trainTreebank, edu.stanford.nlp.trees.Treebank secondaryTrainTreebank, double weight, edu.stanford.nlp.parser.lexparser.GrammarCompactor compactor, edu.stanford.nlp.parser.lexparser.Options op, edu.stanford.nlp.trees.Treebank tuneTreebank, java.util.List extraTaggedWords)">17</method>
			<method name="public static edu.stanford.nlp.parser.lexparser.LexicalizedParser getParserFromFile(String parserFileOrUrl, edu.stanford.nlp.parser.lexparser.Options op)">2</method>
			<method name="public static transient edu.stanford.nlp.parser.lexparser.LexicalizedParser loadModel(String parserFileOrUrl, edu.stanford.nlp.parser.lexparser.Options op, String[] extraFlags)">2</method>
			<method name="public static edu.stanford.nlp.parser.lexparser.LexicalizedParser copyLexicalizedParser(edu.stanford.nlp.parser.lexparser.LexicalizedParser parser)">1</method>
			<method name="public java.util.List parseMultiple(java.util.List sentences)">2</method>
			<method name="public static edu.stanford.nlp.parser.lexparser.LexicalizedParser trainFromTreebank(edu.stanford.nlp.trees.Treebank trainTreebank, edu.stanford.nlp.parser.lexparser.Options op)">1</method>
			<method name="private static edu.stanford.nlp.trees.Treebank makeTreebank(String treebankPath, edu.stanford.nlp.parser.lexparser.Options op, java.io.FileFilter filt)">2</method>
			<method name="public edu.stanford.nlp.trees.Tree parseTree(java.util.List sentence)">2</method>
			<method name="public volatile Object apply(Object x0)">1</method>
			<method name="public transient void setOptionFlags(String[] flags)">1</method>
			<method name="public static edu.stanford.nlp.parser.lexparser.LexicalizedParser trainFromTreebank(edu.stanford.nlp.trees.Treebank trainTreebank, edu.stanford.nlp.parser.lexparser.GrammarCompactor compactor, edu.stanford.nlp.parser.lexparser.Options op)">1</method>
			<method name="public static edu.stanford.nlp.trees.CompositeTreeTransformer buildTrainTransformer(edu.stanford.nlp.parser.lexparser.Options op, edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer binarizer)">4</method>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.Lexicon lex, edu.stanford.nlp.parser.lexparser.BinaryGrammar bg, edu.stanford.nlp.parser.lexparser.UnaryGrammar ug, edu.stanford.nlp.parser.lexparser.DependencyGrammar dg, edu.stanford.nlp.util.Index stateIndex, edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex, edu.stanford.nlp.parser.lexparser.Options op)">0</method>
			<method name="public edu.stanford.nlp.parser.lexparser.Options getOp()">1</method>
			<method name="public java.util.List parseMultiple(java.util.List sentences, int nthreads)">3</method>
			<method name="protected static edu.stanford.nlp.parser.lexparser.LexicalizedParser getParserFromTextFile(String textFileOrUrl, edu.stanford.nlp.parser.lexparser.Options op)">2</method>
			<method name="private static edu.stanford.nlp.trees.DiskTreebank makeSecondaryTreebank(String treebankPath, edu.stanford.nlp.parser.lexparser.Options op, java.io.FileFilter filt)">2</method>
			<method name="private static void confirmBeginBlock(String file, String line)">3</method>
			<method name="public edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery lexicalizedParserQuery()">1</method>
			<method name="public edu.stanford.nlp.parser.lexparser.TreebankLangParserParams getTLPParams()">1</method>
			<method name="public edu.stanford.nlp.trees.TreebankLanguagePack treebankLanguagePack()">1</method>
			<method name="public static edu.stanford.nlp.parser.lexparser.LexicalizedParser getParserFromSerializedFile(String serializedFileOrUrl)">1</method>
			<method name="public edu.stanford.nlp.trees.TreePrint getTreePrint()">1</method>
			<method name="public static void main(String[] args)">73</method>
			<method name="public java.util.List getExtraEvals()">2</method>
			<method name="public static transient edu.stanford.nlp.parser.lexparser.LexicalizedParser loadModel(String parserFileOrUrl, String[] extraFlags)">1</method>
			<method name="public edu.stanford.nlp.trees.Tree parse(java.util.List lst)">2</method>
			<method name="private static void removeDeleteSplittersFromSplitters(edu.stanford.nlp.trees.TreebankLanguagePack tlp, edu.stanford.nlp.parser.lexparser.Options op)">7</method>
			<method name="public static edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer buildTrainBinarizer(edu.stanford.nlp.parser.lexparser.Options op)">6</method>
			<method name="public static edu.stanford.nlp.parser.lexparser.LexicalizedParser loadModel()">1</method>
			<method name="public edu.stanford.nlp.trees.Tree parse(String sentence)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$UnbrokenCategoryDominates</name>
		<wmc>7</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>26</rfc>
		<lcom>9</lcom>
		<ca>4</ca>
		<ce>6</ce>
		<npm>2</npm>
		<lcom3>0.5</lcom3>
		<loc>221</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.32653061224489793</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>29.857142857142858</amc>
		<cc>
			<method name="static boolean access$1200(edu.stanford.nlp.trees.tregex.Relation$UnbrokenCategoryDominates x0, edu.stanford.nlp.trees.Tree x1)">1</method>
			<method name="public boolean equals(Object o)">5</method>
			<method name="public int hashCode()">2</method>
			<method name="private boolean pathMatchesNode(edu.stanford.nlp.trees.Tree node)">4</method>
			<method name="void _init_(String arg, edu.stanford.nlp.util.Function basicCatFunction)">0</method>
			<method name="java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">1</method>
			<method name="boolean satisfies(edu.stanford.nlp.trees.Tree t1, edu.stanford.nlp.trees.Tree t2, edu.stanford.nlp.trees.Tree root, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">5</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.RedwoodConfiguration$Handlers$12</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>31</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>14.0</amc>
		<cc>
			<method name="public void apply(edu.stanford.nlp.util.logging.RedwoodConfiguration config, edu.stanford.nlp.util.logging.Redwood$RecordHandlerTree root)">2</method>
			<method name="void _init_(edu.stanford.nlp.util.logging.RedwoodConfiguration$Thunk[])">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.classify.RVFDataset$1</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>8</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>4</npm>
		<lcom3>0.375</lcom3>
		<loc>54</loc>
		<dam>0.5</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.4</amc>
		<cc>
			<method name="public edu.stanford.nlp.ling.RVFDatum next()">2</method>
			<method name="public boolean hasNext()">2</method>
			<method name="void _init_(edu.stanford.nlp.classify.RVFDataset)">0</method>
			<method name="public void remove()">1</method>
			<method name="public volatile Object next()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.sievepasses.DeterministicCorefSieve</name>
		<wmc>9</wmc>
		<dit>1</dit>
		<noc>15</noc>
		<cbo>32</cbo>
		<rfc>92</rfc>
		<lcom>6</lcom>
		<ca>16</ca>
		<ce>17</ce>
		<npm>8</npm>
		<lcom3>0.375</lcom3>
		<loc>2053</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.28703703703703703</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>227.0</amc>
		<cc>
			<method name="public String flagsToString()">1</method>
			<method name="public boolean skipThisMention(edu.stanford.nlp.dcoref.Document document, edu.stanford.nlp.dcoref.Mention m1, edu.stanford.nlp.dcoref.CorefCluster c, edu.stanford.nlp.dcoref.Dictionaries dict)">16</method>
			<method name="public void init(java.util.Properties props)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public java.util.List getOrderedAntecedents(int antecedentSentence, int mySentence, java.util.List orderedMentions, java.util.List orderedMentionsBySentence, edu.stanford.nlp.dcoref.Mention m1, int m1Position, java.util.Map corefClusters, edu.stanford.nlp.dcoref.Dictionaries dict)">5</method>
			<method name="public boolean coreferent(edu.stanford.nlp.dcoref.Document document, edu.stanford.nlp.dcoref.CorefCluster mentionCluster, edu.stanford.nlp.dcoref.CorefCluster potentialAntecedent, edu.stanford.nlp.dcoref.Mention mention2, edu.stanford.nlp.dcoref.Mention ant, edu.stanford.nlp.dcoref.Dictionaries dict, java.util.Set roleSet, edu.stanford.nlp.dcoref.Semantics semantics)">1</method>
			<method name="public boolean checkEntityMatch(edu.stanford.nlp.dcoref.Document document, edu.stanford.nlp.dcoref.CorefCluster mentionCluster, edu.stanford.nlp.dcoref.CorefCluster potentialAntecedent, edu.stanford.nlp.dcoref.Dictionaries dict, java.util.Set roleSet)">1</method>
			<method name="private static java.util.List sortMentionsForPronoun(java.util.List l, edu.stanford.nlp.dcoref.Mention m1, boolean sameSentence)">8</method>
			<method name="public boolean useRoleSkip()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.RedwoodConfiguration$Handlers$13</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>7</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>0.25</lcom3>
		<loc>63</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.333333333333332</amc>
		<cc>
			<method name="private edu.stanford.nlp.util.logging.Redwood$RecordHandlerTree buildChain(edu.stanford.nlp.util.logging.RedwoodConfiguration config, edu.stanford.nlp.util.logging.LogRecordHandler[] handlers, int i)">2</method>
			<method name="void _init_(edu.stanford.nlp.util.logging.RedwoodConfiguration$Thunk, edu.stanford.nlp.util.logging.LogRecordHandler[])">0</method>
			<method name="public void apply(edu.stanford.nlp.util.logging.RedwoodConfiguration config, edu.stanford.nlp.util.logging.Redwood$RecordHandlerTree root)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$SRLInstancesAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>9</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.RedwoodConfiguration$Handlers$10</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>29</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>27.0</amc>
		<cc>
			<method name="void _init_(Object[])">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.Word</name>
		<wmc>9</wmc>
		<dit>0</dit>
		<noc>2</noc>
		<cbo>29</cbo>
		<rfc>16</rfc>
		<lcom>36</lcom>
		<ca>24</ca>
		<ce>5</ce>
		<npm>8</npm>
		<lcom3>1.0833333333333333</lcom3>
		<loc>46</loc>
		<dam>0.3333333333333333</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.7777777777777777</amc>
		<cc>
			<method name="public void _init_(String word, int beginPosition, int endPosition)">0</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public edu.stanford.nlp.ling.LabelFactory labelFactory()">1</method>
			<method name="public void setWord(String word)">1</method>
			<method name="public void _init_(edu.stanford.nlp.ling.Label lab)">0</method>
			<method name="public void _init_(String word)">0</method>
			<method name="public static edu.stanford.nlp.ling.LabelFactory factory()">1</method>
			<method name="public String word()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.RedwoodConfiguration$Handlers$11</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>31</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>29.0</amc>
		<cc>
			<method name="void _init_(Object[])">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.TregexParserConstants</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>115</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>104.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.AnnotationLookup$KeyLookup</name>
		<wmc>5</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>12</rfc>
		<lcom>6</lcom>
		<ca>5</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>0.9818840579710144</lcom3>
		<loc>916</loc>
		<dam>0.014492753623188406</dam>
		<moa>67</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.5</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>168.4</amc>
		<cc>
			<method name="private void _init_(String, int, String className, String oldKey)">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static edu.stanford.nlp.ling.AnnotationLookup$KeyLookup valueOf(String name)">1</method>
			<method name="public static edu.stanford.nlp.ling.AnnotationLookup$KeyLookup[] values()">1</method>
			<method name="private void _init_(String, int, Class coreKey, String oldKey)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.RedwoodConfiguration$Handlers$14</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>6</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.0</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="public void apply(edu.stanford.nlp.util.logging.RedwoodConfiguration config, edu.stanford.nlp.util.logging.Redwood$RecordHandlerTree root)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.Expressions$MethodCallExpression</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>40</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>6</npm>
		<lcom3>0.0</lcom3>
		<loc>455</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.2916666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>74.33333333333333</amc>
		<cc>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Expression simplify(edu.stanford.nlp.ling.tokensregex.Env env)">4</method>
			<method name="public boolean equals(Object o)">13</method>
			<method name="public int hashCode()">4</method>
			<method name="public transient void _init_(String function, edu.stanford.nlp.ling.tokensregex.types.Expression object, java.util.List params, String[] tags)">0</method>
			<method name="public String toString()">1</method>
			<method name="public transient edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env env, Object[] args)">12</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParserTokenManager</name>
		<wmc>29</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>45</rfc>
		<lcom>134</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>7</npm>
		<lcom3>0.7182539682539683</lcom3>
		<loc>2832</loc>
		<dam>0.2222222222222222</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>96.03448275862068</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.parser.SimpleCharStream stream)">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="private int jjMoveStringLiteralDfa0_0()">20</method>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.parser.SimpleCharStream stream, int lexState)">0</method>
			<method name="private void jjCheckNAddStates(int start, int end)">2</method>
			<method name="private int jjMoveStringLiteralDfa3_0(long old0, long active0)">9</method>
			<method name="private int jjMoveStringLiteralDfa5_0(long old0, long active0)">5</method>
			<method name="private final int jjStopStringLiteralDfa_0(int pos, long active0)">14</method>
			<method name="private int jjMoveStringLiteralDfa2_0(long old0, long active0)">11</method>
			<method name="protected edu.stanford.nlp.ling.tokensregex.parser.Token jjFillToken()">2</method>
			<method name="public void ReInit(edu.stanford.nlp.ling.tokensregex.parser.SimpleCharStream stream, int lexState)">1</method>
			<method name="private final int jjStartNfa_0(int pos, long active0)">1</method>
			<method name="private void ReInitRounds()">2</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.parser.Token getNextToken()">9</method>
			<method name="private int jjMoveNfa_0(int startState, int curPos)">135</method>
			<method name="public void SwitchTo(int lexState)">3</method>
			<method name="private int jjMoveStringLiteralDfa7_0(long old0, long active0)">4</method>
			<method name="public void ReInit(edu.stanford.nlp.ling.tokensregex.parser.SimpleCharStream stream)">1</method>
			<method name="private void jjCheckNAdd(int state)">2</method>
			<method name="private void jjCheckNAddTwoStates(int state1, int state2)">1</method>
			<method name="private int jjMoveStringLiteralDfa6_0(long old0, long active0)">6</method>
			<method name="public void setDebugStream(java.io.PrintStream ds)">1</method>
			<method name="private void jjAddStates(int start, int end)">2</method>
			<method name="private int jjStartNfaWithStates_0(int pos, int kind, int state)">1</method>
			<method name="private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)">5</method>
			<method name="private int jjMoveStringLiteralDfa4_0(long old0, long active0)">10</method>
			<method name="private int jjMoveStringLiteralDfa1_0(long active0)">21</method>
			<method name="private int jjMoveStringLiteralDfa8_0(long old0, long active0)">5</method>
			<method name="private int jjStopAtPos(int pos, int kind)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.sequences.SeqClassifierFlags</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>45</cbo>
		<rfc>57</rfc>
		<lcom>9</lcom>
		<ca>40</ca>
		<ce>5</ce>
		<npm>6</npm>
		<lcom3>0.5236576289207868</lcom3>
		<loc>10618</loc>
		<dam>0.003189792663476874</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.42857142857142855</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>1426.2857142857142</amc>
		<cc>
			<method name="public void setProperties(java.util.Properties props, boolean printProps)">639</method>
			<method name="private String getFeatureFactory(String val)">7</method>
			<method name="public void _init_()">0</method>
			<method name="public String getNotNullTrueStringRep()">16</method>
			<method name="public void _init_(java.util.Properties props)">0</method>
			<method name="public String toString()">1</method>
			<method name="public final void setProperties(java.util.Properties props)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.NumberNormalizer</name>
		<wmc>13</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>18</cbo>
		<rfc>88</rfc>
		<lcom>62</lcom>
		<ca>1</ca>
		<ce>17</ce>
		<npm>9</npm>
		<lcom3>0.65625</lcom3>
		<loc>2076</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.14285714285714285</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>157.46153846153845</amc>
		<cc>
			<method name="private static Number wordToNumberRecurse(Number[] numFields, int start, int end)">9</method>
			<method name="private static Number wordToNumberRecurse(Number[] numFields)">1</method>
			<method name="public static java.util.List findAndAnnotateNumericExpressions(edu.stanford.nlp.util.CoreMap annotation)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static java.util.List findAndAnnotateNumericExpressionsWithRanges(edu.stanford.nlp.util.CoreMap annotation)">2</method>
			<method name="public static edu.stanford.nlp.ling.tokensregex.Env getNewEnv()">1</method>
			<method name="public static java.util.List findNumbers(edu.stanford.nlp.util.CoreMap annotation)">50</method>
			<method name="private void _init_()">0</method>
			<method name="public static Number wordToNumber(String str)">24</method>
			<method name="public static java.util.List findNumberRanges(edu.stanford.nlp.util.CoreMap annotation)">4</method>
			<method name="public static void setVerbose(boolean verbose)">2</method>
			<method name="public static void initEnv(edu.stanford.nlp.ling.tokensregex.Env env)">1</method>
			<method name="public static java.util.List findAndMergeNumbers(edu.stanford.nlp.util.CoreMap annotationRaw)">14</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.AnnotatorPool</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>17</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>117</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>37.333333333333336</amc>
		<cc>
			<method name="public synchronized edu.stanford.nlp.pipeline.Annotator get(String name)">3</method>
			<method name="public boolean register(String name, edu.stanford.nlp.pipeline.AnnotatorFactory factory)">2</method>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$17$1</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>7</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>0.5</lcom3>
		<loc>61</loc>
		<dam>0.0</dam>
		<moa>4</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>17.666666666666668</amc>
		<cc>
			<method name="public void advance()">2</method>
			<method name="void initialize()">2</method>
			<method name="void _init_(edu.stanford.nlp.trees.tregex.Relation$17, edu.stanford.nlp.trees.tregex.TregexMatcher, edu.stanford.nlp.trees.Tree)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.TokenMgrError</name>
		<wmc>6</wmc>
		<dit>3</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>22</rfc>
		<lcom>15</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>4</npm>
		<lcom3>1.1333333333333333</lcom3>
		<loc>185</loc>
		<dam>0.16666666666666666</dam>
		<moa>0</moa>
		<mfa>0.875</mfa>
		<cam>0.5</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>28.833333333333332</amc>
		<cc>
			<method name="public void _init_(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar, int reason)">0</method>
			<method name="public void _init_()">0</method>
			<method name="protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar)">2</method>
			<method name="public String getMessage()">1</method>
			<method name="protected static final String addEscapes(String str)">14</method>
			<method name="public void _init_(String message, int reason)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$EntityClassAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$DocDateAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.EquivalenceClasser</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract Object equivalenceClass(Object)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.CTBErrorCorrectingTreeNormalizer</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>12</cbo>
		<rfc>46</rfc>
		<lcom>4</lcom>
		<ca>2</ca>
		<ce>10</ce>
		<npm>3</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>459</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>89.0</amc>
		<cc>
			<method name="public edu.stanford.nlp.trees.Tree normalizeWholeTree(edu.stanford.nlp.trees.Tree tree, edu.stanford.nlp.trees.TreeFactory tf)">17</method>
			<method name="public void _init_(boolean splitNPTMP, boolean splitPPTMP, boolean splitXPTMP, boolean charTags)">0</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="protected String cleanUpLabel(String label)">8</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequenceMatcher$BranchState</name>
		<wmc>10</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>25</rfc>
		<lcom>37</lcom>
		<ca>2</ca>
		<ce>4</ce>
		<npm>2</npm>
		<lcom3>0.7301587301587301</lcom3>
		<loc>233</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.35</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>21.6</amc>
		<cc>
			<method name="public void _init_(int bid)">0</method>
			<method name="public void _init_(int bid, edu.stanford.nlp.ling.tokensregex.SequenceMatcher$BranchState parent)">0</method>
			<method name="static void access$900(edu.stanford.nlp.ling.tokensregex.SequenceMatcher$BranchState x0, int[] x1)">1</method>
			<method name="static void access$1100(edu.stanford.nlp.ling.tokensregex.SequenceMatcher$BranchState x0, java.util.Map x1)">1</method>
			<method name="private void addMatchedGroups(java.util.Map g)">2</method>
			<method name="static void access$1000(edu.stanford.nlp.ling.tokensregex.SequenceMatcher$BranchState x0, java.util.Map x1)">1</method>
			<method name="static void access$800(edu.stanford.nlp.ling.tokensregex.SequenceMatcher$BranchState x0, java.util.Set x1)">1</method>
			<method name="private void addBidsToCollapse(int[] bids)">4</method>
			<method name="private void addMatchedResults(java.util.Map res)">3</method>
			<method name="private void updateKeepBids(java.util.Set bids)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.domains.ace.reader.RobustTokenizer</name>
		<wmc>37</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>79</rfc>
		<lcom>642</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>30</npm>
		<lcom3>0.9872495446265938</lcom3>
		<loc>1706</loc>
		<dam>0.13114754098360656</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.2037037037037037</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>43.45945945945946</amc>
		<cc>
			<method name="public String tokenizeText()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static boolean isDigitSeq(String s)">1</method>
			<method name="public static String zeroOrOne(String s)">1</method>
			<method name="public static boolean isSgml(String s)">1</method>
			<method name="public static String or(String s1, String s2, String s3, String s4, String s5, String s6, String s7, String s8, String s9, String s10)">1</method>
			<method name="public static String or(String s1, String s2, String s3, String s4, String s5)">1</method>
			<method name="public void _init_(boolean caseInsensitive, String buffer)">0</method>
			<method name="public static String zeroOrMore(String s)">1</method>
			<method name="protected edu.stanford.nlp.ling.Word getNext()">3</method>
			<method name="protected java.util.List postprocess(java.util.List tokens)">1</method>
			<method name="public static String or(String s1, String s2)">1</method>
			<method name="public int countNewLines(String s, int start, int end)">3</method>
			<method name="public static boolean isSlashDate(String s)">1</method>
			<method name="public static String or(String s1, String s2, String s3, String s4, String s5, String s6, String s7, String s8)">1</method>
			<method name="public static String or(String s1, String s2, String s3, String s4, String s5, String s6, String s7, String s8, String s9)">1</method>
			<method name="public static String or(String s1, String s2, String s3, String s4, String s5, String s6, String s7, String s8, String s9, String s10, String s11)">1</method>
			<method name="private static String concatenate(java.util.List tokens, int start, int end)">2</method>
			<method name="public static String or(String s1, String s2, String s3, String s4)">1</method>
			<method name="public static String or(String s1, String s2, String s3)">1</method>
			<method name="public static boolean isAcronym(String s)">1</method>
			<method name="public static String block(String s)">1</method>
			<method name="protected volatile Object getNext()">1</method>
			<method name="public static void main(String[] argv)">1</method>
			<method name="public void _init_(String buffer)">0</method>
			<method name="public static String range(String s)">1</method>
			<method name="private static int countNewLines(java.util.List tokens, int start, int end)">2</method>
			<method name="public static boolean isEmail(String s)">1</method>
			<method name="public static String oneOrMore(String s)">1</method>
			<method name="public static String or(String s1, String s2, String s3, String s4, String s5, String s6, String s7, String s8, String s9, String s10, String s11, String s12)">1</method>
			<method name="public static String or(String s1, String s2, String s3, String s4, String s5, String s6, String s7)">1</method>
			<method name="private static int hasApostropheBlock(String s)">5</method>
			<method name="public static String rangeNot(String s)">1</method>
			<method name="public static boolean isUrl(String s)">1</method>
			<method name="public java.util.List tokenizeToWordTokens()">11</method>
			<method name="public edu.stanford.nlp.ling.Word[] tokenizeToWords()">2</method>
			<method name="public static String or(String s1, String s2, String s3, String s4, String s5, String s6)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.math.ArrayMath</name>
		<wmc>164</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>50</cbo>
		<rfc>225</rfc>
		<lcom>13352</lcom>
		<ca>47</ca>
		<ce>3</ce>
		<npm>161</npm>
		<lcom3>0.9877300613496932</lcom3>
		<loc>5391</loc>
		<dam>0.5</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.06485539000876424</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>31.859756097560975</amc>
		<cc>
			<method name="public static void powInPlace(float[] a, float c)">2</method>
			<method name="public static double[] filterNaNAndInfinite(double[] v)">1</method>
			<method name="public static double innerProduct(float[] a, float[] b)">2</method>
			<method name="public static String toString(double[] a)">1</method>
			<method name="public static double safeMin(double[] v)">2</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static boolean containsInSubarray(int[] a, int begin, int end, int i)">3</method>
			<method name="public static int argmax(float[] a)">3</method>
			<method name="public static double[] softmax(double[] scales)">3</method>
			<method name="public static void normalize(float[] a)">3</method>
			<method name="public static double safeStdev(double[] v)">2</method>
			<method name="public static double klDivergence(double[] from, double[] to)">3</method>
			<method name="public static void logNormalize(double[] a)">3</method>
			<method name="public static float max(float[] a)">1</method>
			<method name="public static String toString(float[][] counts)">1</method>
			<method name="public static boolean hasNaN(double[] a)">3</method>
			<method name="public static String toString(float[] a)">1</method>
			<method name="public static double norm_1(double[] a)">3</method>
			<method name="private void _init_()">0</method>
			<method name="public static transient double logSum(double[] logInputs)">1</method>
			<method name="public static double norm(float[] a)">2</method>
			<method name="public static String toString(int[][] counts, Object[] rowLabels, Object[] colLabels, int labelSize, int cellSize, java.text.NumberFormat nf, boolean printTotals)">17</method>
			<method name="public static void sampleWithoutReplacement(int[] array, int numArgClasses, java.util.Random rand)">2</method>
			<method name="public static void addInPlace(float[] a, double b)">2</method>
			<method name="public static int countCloseToZero(double[] v, double epsilon)">3</method>
			<method name="public static int sum(int[] a)">2</method>
			<method name="public static void multiplyInPlace(float[] a, double b)">2</method>
			<method name="public static float[][] doubleArrayToFloatArray(double[][] a)">3</method>
			<method name="public static double[] pairwiseAdd(double[] a, double[] b)">3</method>
			<method name="public static void assertFinite(double[] vector, String vectorName)">1</method>
			<method name="public static double sumSquaredError(double[] a)">2</method>
			<method name="public static String toString(double[] a, java.text.NumberFormat nf)">6</method>
			<method name="public static double sigLevelByApproxRand(int[] A, int[] B, int iterations)">5</method>
			<method name="public static int argmax(double[] a)">3</method>
			<method name="public static double variance(double[] a)">1</method>
			<method name="public static double norm(double[] a)">2</method>
			<method name="public static int min(int[] a)">1</method>
			<method name="public static double[] pow(double[] a, double c)">2</method>
			<method name="public static float sum(float[] a)">2</method>
			<method name="public static double sum(double[] a)">1</method>
			<method name="public static double logSum(java.util.List logInputs, int fromIndex, int toIndex)">11</method>
			<method name="public static double[] add(double[] a, double c)">2</method>
			<method name="public static String toString(double[][] counts, int cellSize, Object[] rowLabels, Object[] colLabels, java.text.NumberFormat nf, boolean printTotals)">14</method>
			<method name="public static void shuffle(int[] a, java.util.Random rand)">2</method>
			<method name="public static String toBinaryString(byte[] b)">4</method>
			<method name="public static int[][] deepCopy(int[][] counts)">2</method>
			<method name="public static boolean hasNaN(float[] a)">3</method>
			<method name="public static double innerProduct(double[] a, double[] b)">2</method>
			<method name="public static int max(int[] a)">1</method>
			<method name="public static void pairwiseMultiply(double[] a, double[] b, double[] result)">3</method>
			<method name="public static double median(double[] a)">2</method>
			<method name="public static double sigLevelByApproxRand(int[] A, int[] B)">1</method>
			<method name="public static void standardize(double[] a)">4</method>
			<method name="public static Integer[] box(int[] assignment)">2</method>
			<method name="public static int countPositive(double[] v)">3</method>
			<method name="public static int argmin(float[] a)">3</method>
			<method name="public static double[] pairwiseScaleAdd(double[] a, double[] b, double bScale)">2</method>
			<method name="public static void multiplyInPlace(double[] a, double b)">2</method>
			<method name="public static int indexOf(int n, int[] a)">3</method>
			<method name="public static double sigLevelByApproxRand(boolean[] A, boolean[] B, int iterations)">7</method>
			<method name="public static void addInPlace(double[] a, double b)">2</method>
			<method name="public static double norm_inf(double[] a)">3</method>
			<method name="public static double[] multiply(double[] a, double c)">2</method>
			<method name="public static int[] pairwiseAdd(int[] a, int[] b)">2</method>
			<method name="public static float[] doubleArrayToFloatArray(double[] a)">2</method>
			<method name="public static double standardErrorOfMean(double[] a)">1</method>
			<method name="public static int numRows(double[] v)">1</method>
			<method name="public static int countInfinite(double[] v)">3</method>
			<method name="public static double sigLevelByApproxRand(double[] A, double[] B)">1</method>
			<method name="public static void pairwiseAddInPlace(double[] to, double[] from)">3</method>
			<method name="public static void main(String[] args)">3</method>
			<method name="public static double sigLevelByApproxRand(double[] A, double[] B, int iterations)">6</method>
			<method name="public static double dotProduct(double[] a, double[] b)">3</method>
			<method name="public static double max(java.util.Collection a)">2</method>
			<method name="public static void setToLogDeterministic(float[] a, int i)">3</method>
			<method name="public static boolean hasInfinite(double[] a)">3</method>
			<method name="public static double sum(double[] a, int fromIndex, int toIndex)">2</method>
			<method name="public static void reverse(int[] a)">2</method>
			<method name="public static int countNonZero(double[] v)">3</method>
			<method name="public static double[] filterNaN(double[] v)">3</method>
			<method name="public static String toString(int[] a)">1</method>
			<method name="public static void powInPlace(double[] a, double c)">2</method>
			<method name="public static double safeMean(double[] v)">2</method>
			<method name="public static int[] unboxToInt(java.util.Collection list)">2</method>
			<method name="public static double[] pairwiseSubtract(double[] a, double[] b)">2</method>
			<method name="public static double[] log(double[] a)">2</method>
			<method name="public static String toString(int[][] counts)">1</method>
			<method name="public static int argmin(double[] a)">3</method>
			<method name="public static float min(float[] a)">1</method>
			<method name="public static void pairwiseAddInPlace(double[] to, int[] from)">3</method>
			<method name="public static float[] pow(float[] a, float c)">2</method>
			<method name="public static void multiplyInto(double[] a, double[] b, double c)">2</method>
			<method name="public static double jensenShannonDivergence(double[] a, double[] b)">1</method>
			<method name="public static double[][] covariance(double[][] data)">7</method>
			<method name="public static double logSum(double[] logInputs, int fromIndex, int afterIndex, int stride)">11</method>
			<method name="public static int[][] castToInt(double[][] doubleCounts)">3</method>
			<method name="public static void pairwiseDivideInPlace(double[] a, double[] b)">3</method>
			<method name="public static void pairwiseScaleAddInPlace(double[] to, double[] from, double fromScale)">3</method>
			<method name="public static double stdev(double[] a)">1</method>
			<method name="public static int min(int[][] matrix)">3</method>
			<method name="public static void divideInPlace(double[] a, double b)">2</method>
			<method name="public static void addMultInto(double[] a, double[] b, double[] c, double d)">2</method>
			<method name="public static int[] range(int start, int end)">4</method>
			<method name="public static int[] diag(int[][] a)">2</method>
			<method name="public static double L2Norm(double[] a)">2</method>
			<method name="public static void pairwiseSubtractInPlace(double[] to, double[] from)">3</method>
			<method name="public static float[] add(float[] a, double c)">2</method>
			<method name="public static int sampleFromDistribution(double[] d)">1</method>
			<method name="public static double sigLevelByApproxRand(boolean[] A, boolean[] B)">1</method>
			<method name="public static int sampleFromDistribution(double[] d, java.util.Random random)">4</method>
			<method name="public static int max(int[][] matrix)">3</method>
			<method name="public static String toString(float[] a, java.text.NumberFormat nf)">6</method>
			<method name="public static double[] floatArrayToDoubleArray(float[] a)">2</method>
			<method name="public static double[] exp(double[] a)">2</method>
			<method name="public static double safeMax(double[] v)">2</method>
			<method name="public static void normalize(double[] a)">3</method>
			<method name="public static double L1Norm(double[] a)">2</method>
			<method name="public static int countNegative(double[] v)">3</method>
			<method name="public static int[] subArray(int[] a, int from, int to)">1</method>
			<method name="public static double[] filterInfinite(double[] v)">3</method>
			<method name="public static double[][] load2DMatrixFromFile(String filename)">1</method>
			<method name="public static double[] copyOf(double[] original, int newSize)">1</method>
			<method name="public static String toString(int[] a, java.text.NumberFormat nf)">6</method>
			<method name="public static int countNaN(double[] v)">3</method>
			<method name="public static double norm_inf(float[] a)">3</method>
			<method name="public static boolean contains(int[] a, int i)">3</method>
			<method name="public static void shuffle(int[] a)">1</method>
			<method name="public static double[][] floatArrayToDoubleArray(float[][] a)">3</method>
			<method name="public static double entropy(double[] probs)">3</method>
			<method name="public static double mean(double[] a)">1</method>
			<method name="public static float[] pairwiseSubtract(float[] a, float[] b)">2</method>
			<method name="public static double min(double[] a)">1</method>
			<method name="public static double[] pairwiseMultiply(double[] a, double[] b)">3</method>
			<method name="public static int argmin(int[] a)">3</method>
			<method name="public static double sumSquared(double[] a)">2</method>
			<method name="public static String toString(byte[] a, java.text.NumberFormat nf)">6</method>
			<method name="public static void setToLogDeterministic(double[] a, int i)">3</method>
			<method name="public static void sampleWithoutReplacement(int[] array, int numArgClasses)">1</method>
			<method name="public static double[] unbox(java.util.Collection list)">2</method>
			<method name="public static void pairwiseAddInPlace(double[] to, short[] from)">3</method>
			<method name="public static double logSum(double[] logInputs, int fromIndex, int toIndex)">11</method>
			<method name="public static float[] pairwiseMultiply(float[] a, float[] b)">3</method>
			<method name="public static String toString(byte[] a)">1</method>
			<method name="public static int argmax(int[] a)">3</method>
			<method name="public static String toString(double[][] counts)">1</method>
			<method name="private static double absDiffOfMeans(double[] A, double[] B, boolean randomize)">4</method>
			<method name="public static void pairwiseMultiply(float[] a, float[] b, float[] result)">3</method>
			<method name="public static void addMultInPlace(double[] a, double[] b, double c)">2</method>
			<method name="public static double norm_1(float[] a)">3</method>
			<method name="public static void L1normalize(double[] a)">4</method>
			<method name="public static String toString(float[][] counts, int cellSize, Object[] rowLabels, Object[] colLabels, java.text.NumberFormat nf, boolean printTotals)">12</method>
			<method name="public static void expInPlace(double[] a)">2</method>
			<method name="public static double pearsonCorrelation(double[] x, double[] y)">3</method>
			<method name="public static int sum(int[][] a)">3</method>
			<method name="public static double average(double[] a)">1</method>
			<method name="public static double logSum(java.util.List logInputs)">1</method>
			<method name="public static int sampleFromDistribution(float[] d, java.util.Random random)">4</method>
			<method name="public static float[] multiply(float[] a, float c)">2</method>
			<method name="public static double max(double[] a)">1</method>
			<method name="public static int argmax_tieLast(double[] a)">3</method>
			<method name="public static float logSum(float[] logInputs)">8</method>
			<method name="public static void logInPlace(double[] a)">2</method>
			<method name="public static Double[] box(double[] assignment)">2</method>
			<method name="public static float[] pairwiseAdd(float[] a, float[] b)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalRelations$AttributiveGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$MentionTokenAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.PhraseTable$TokenList</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>10</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>5</npm>
		<lcom3>0.375</lcom3>
		<loc>45</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.45</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.6</amc>
		<cc>
			<method name="public int size()">1</method>
			<method name="public void _init_(java.util.List tokens, Class key)">0</method>
			<method name="public String getWord(int i)">1</method>
			<method name="public void _init_(java.util.List tokens)">0</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Characters</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>14</rfc>
		<lcom>21</lcom>
		<ca>3</ca>
		<ce>0</ce>
		<npm>6</npm>
		<lcom3>2.0</lcom3>
		<loc>99</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.142857142857142</amc>
		<cc>
			<method name="public static Character[] asCharacterArray(String s)">2</method>
			<method name="public static boolean isControl(char c)">2</method>
			<method name="private void _init_()">0</method>
			<method name="public static boolean isPunctuation(char c)">8</method>
			<method name="public static String unicodeBlockStringOf(char c)">2</method>
			<method name="public static boolean isSymbol(char c)">5</method>
			<method name="public static Character getCharacter(char c)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.TreePrint$1</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>18</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>1</npm>
		<lcom3>1.0</lcom3>
		<loc>58</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>27.5</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.trees.TreePrint)">0</method>
			<method name="public edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree t)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.TreePrint$2</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>7</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>8</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>19</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.5</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="public edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader in)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.LexicalizedParserQuery</name>
		<wmc>33</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>43</cbo>
		<rfc>120</rfc>
		<lcom>142</lcom>
		<ca>2</ca>
		<ce>43</ce>
		<npm>26</npm>
		<lcom3>0.748046875</lcom3>
		<loc>1358</loc>
		<dam>1.0</dam>
		<moa>7</moa>
		<mfa>0.0</mfa>
		<cam>0.16835016835016836</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>39.666666666666664</amc>
		<cc>
			<method name="public boolean parseAndReport(java.util.List sentence, java.io.PrintWriter pwErr)">10</method>
			<method name="public void restoreOriginalWords(edu.stanford.nlp.trees.Tree tree)">5</method>
			<method name="boolean parse(edu.stanford.nlp.parser.lexparser.HTKLatticeReader lr)">5</method>
			<method name="private boolean parseInternal(java.util.List sentence)">23</method>
			<method name="public edu.stanford.nlp.trees.Tree getBestParse()">1</method>
			<method name="public java.util.List getKGoodFactoredParses(int k)">5</method>
			<method name="public edu.stanford.nlp.parser.KBestViterbiParser getFactoredParser()">1</method>
			<method name="public edu.stanford.nlp.parser.KBestViterbiParser getPCFGParser()">1</method>
			<method name="public boolean parseSkipped()">1</method>
			<method name="public boolean parseNoMemory()">1</method>
			<method name="public boolean saidMemMessage()">1</method>
			<method name="double getPCFGScore(String goalStr)">1</method>
			<method name="public edu.stanford.nlp.trees.Tree getBestDependencyParse()">1</method>
			<method name="public edu.stanford.nlp.parser.KBestViterbiParser getDependencyParser()">1</method>
			<method name="public boolean parseSucceeded()">1</method>
			<method name="public void setConstraints(java.util.List constraints)">2</method>
			<method name="public java.util.List getBestPCFGParses()">1</method>
			<method name="public double getPCFGScore()">1</method>
			<method name="public boolean parse(java.util.List sentence)">7</method>
			<method name="public edu.stanford.nlp.trees.Tree getBestFactoredParse()">1</method>
			<method name="void parsePCFG(java.util.List sentence)">1</method>
			<method name="edu.stanford.nlp.trees.Tree getBestParse(boolean stripSubcat)">10</method>
			<method name="public edu.stanford.nlp.trees.Tree getBestPCFGParse(boolean stripSubcategories)">6</method>
			<method name="void addSentenceFinalPunctIfNeeded(java.util.List sentence, int length)">10</method>
			<method name="public edu.stanford.nlp.trees.TreePrint getTreePrint()">1</method>
			<method name="void _init_(edu.stanford.nlp.parser.lexparser.LexicalizedParser parser)">0</method>
			<method name="public edu.stanford.nlp.trees.Tree getBestPCFGParse()">1</method>
			<method name="public java.util.List originalSentence()">1</method>
			<method name="public boolean hasFactoredParse()">5</method>
			<method name="public boolean parseUnparsable()">1</method>
			<method name="public boolean parseFallback()">1</method>
			<method name="public java.util.List getKBestPCFGParses(int k)">4</method>
			<method name="public edu.stanford.nlp.trees.Tree getBestDependencyParse(boolean debinarize)">6</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$UtteranceAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.CoreMapNodePattern$NumericAnnotationPattern$CmpType</name>
		<wmc>6</wmc>
		<dit>2</dit>
		<noc>7</noc>
		<cbo>11</cbo>
		<rfc>16</rfc>
		<lcom>13</lcom>
		<ca>9</ca>
		<ce>9</ce>
		<npm>2</npm>
		<lcom3>0.975</lcom3>
		<loc>109</loc>
		<dam>0.125</dam>
		<moa>8</moa>
		<mfa>0.8125</mfa>
		<cam>0.4</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>15.833333333333334</amc>
		<cc>
			<method name="void _init_(String x0, int x1, edu.stanford.nlp.ling.tokensregex.CoreMapNodePattern$1 x2)">0</method>
			<method name="public static edu.stanford.nlp.ling.tokensregex.CoreMapNodePattern$NumericAnnotationPattern$CmpType valueOf(String name)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="boolean accept(double v1, double v2)">1</method>
			<method name="public static edu.stanford.nlp.ling.tokensregex.CoreMapNodePattern$NumericAnnotationPattern$CmpType[] values()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.classify.CrossValidator</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>16</rfc>
		<lcom>18</lcom>
		<ca>5</ca>
		<ce>5</ce>
		<npm>4</npm>
		<lcom3>0.5238095238095238</lcom3>
		<loc>101</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.25</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.25</amc>
		<cc>
			<method name="public double computeAverage(edu.stanford.nlp.util.Function function)">2</method>
			<method name="public static void main(String[] args)">2</method>
			<method name="private java.util.Iterator iterator()">1</method>
			<method name="public void _init_(edu.stanford.nlp.classify.GeneralDataset trainData, int kFold)">0</method>
			<method name="static edu.stanford.nlp.classify.CrossValidator$SavedState[] access$200(edu.stanford.nlp.classify.CrossValidator x0)">1</method>
			<method name="static edu.stanford.nlp.classify.GeneralDataset access$100(edu.stanford.nlp.classify.CrossValidator x0)">1</method>
			<method name="static int access$000(edu.stanford.nlp.classify.CrossValidator x0)">1</method>
			<method name="public void _init_(edu.stanford.nlp.classify.GeneralDataset trainData)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.pascal.CliqueTemplates</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>38</loc>
		<dam>0.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>31.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.ACEMentionExtractor</name>
		<wmc>7</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>21</cbo>
		<rfc>71</rfc>
		<lcom>11</lcom>
		<ca>1</ca>
		<ce>21</ce>
		<npm>4</npm>
		<lcom3>0.6333333333333333</lcom3>
		<loc>786</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.3</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>110.57142857142857</amc>
		<cc>
			<method name="private static void printRawDoc(java.util.List sentences, java.util.List allMentions, String filename, boolean gold)">1</method>
			<method name="private void extractGoldMentions(edu.stanford.nlp.util.CoreMap s, java.util.List allGoldMentions, edu.stanford.nlp.dcoref.ACEMentionExtractor$EntityComparator comparator)">8</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void resetDocs()">1</method>
			<method name="public edu.stanford.nlp.dcoref.Document nextDoc()">1</method>
			<method name="public void _init_(edu.stanford.nlp.dcoref.Dictionaries dict, java.util.Properties props, edu.stanford.nlp.dcoref.Semantics semantics)">0</method>
			<method name="public void _init_(edu.stanford.nlp.dcoref.Dictionaries dict, java.util.Properties props, edu.stanford.nlp.dcoref.Semantics semantics, edu.stanford.nlp.classify.LogisticClassifier singletonModel)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.BasicDatum</name>
		<wmc>13</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>27</rfc>
		<lcom>36</lcom>
		<ca>6</ca>
		<ce>1</ce>
		<npm>13</npm>
		<lcom3>0.5833333333333334</lcom3>
		<loc>123</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5384615384615384</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>8.23076923076923</amc>
		<cc>
			<method name="public void _init_(java.util.Collection features, Object label)">0</method>
			<method name="public boolean equals(Object o)">2</method>
			<method name="public java.util.Collection labels()">1</method>
			<method name="public int hashCode()">1</method>
			<method name="public void addLabel(Object label)">2</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(java.util.Collection features, java.util.Collection labels)">0</method>
			<method name="public Object label()">2</method>
			<method name="public void setLabel(Object label)">1</method>
			<method name="public String toString()">1</method>
			<method name="public void setLabels(java.util.Collection labels)">2</method>
			<method name="public void _init_(java.util.Collection features)">0</method>
			<method name="public java.util.Collection asFeatures()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.HasTag</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>32</cbo>
		<rfc>2</rfc>
		<lcom>1</lcom>
		<ca>32</ca>
		<ce>0</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>2</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract void setTag(String)">1</method>
			<method name="public abstract String tag()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.CTBErrorCorrectingTreeNormalizer$CTBErrorCorrectingTreeReaderFactory</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>11</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.AbstractTreebankParserParams$UnorderedTypedDependencyTyper</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>8</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>60</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.666666666666668</amc>
		<cc>
			<method name="public java.util.List makeDependency(edu.stanford.nlp.trees.Tree head, edu.stanford.nlp.trees.Tree dep, edu.stanford.nlp.trees.Tree root)">1</method>
			<method name="public void _init_(edu.stanford.nlp.trees.HeadFinder hf)">0</method>
			<method name="public volatile Object makeDependency(edu.stanford.nlp.trees.Tree x0, edu.stanford.nlp.trees.Tree x1, edu.stanford.nlp.trees.Tree x2)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$IsoDateTime</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>2</npm>
		<lcom3>1.0</lcom3>
		<loc>28</loc>
		<dam>0.3333333333333333</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.5</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.time.SUTime$IsoDate date, edu.stanford.nlp.time.SUTime$IsoTime time)">0</method>
			<method name="public boolean hasTime()">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.AnnotationSerializer</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>1</noc>
		<cbo>5</cbo>
		<rfc>4</rfc>
		<lcom>3</lcom>
		<ca>3</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>6</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>1.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public abstract edu.stanford.nlp.util.Pair read(java.io.InputStream)">1</method>
			<method name="public abstract java.io.OutputStream write(edu.stanford.nlp.pipeline.Annotation, java.io.OutputStream)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalRelations$ModifierGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.PhraseTable$Phrase</name>
		<wmc>9</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>16</rfc>
		<lcom>10</lcom>
		<ca>4</ca>
		<ce>1</ce>
		<npm>9</npm>
		<lcom3>0.75</lcom3>
		<loc>107</loc>
		<dam>0.2</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.3111111111111111</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.333333333333334</amc>
		<cc>
			<method name="public String getTag()">1</method>
			<method name="public java.util.Collection getAlternateForms()">2</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.PhraseTable$WordList getWordList()">1</method>
			<method name="public Object getData()">1</method>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.PhraseTable$WordList wordList, String text, String tag, Object data)">0</method>
			<method name="public String getText()">1</method>
			<method name="public String toString()">1</method>
			<method name="public boolean addForm(String form)">2</method>
			<method name="public boolean isLonger(edu.stanford.nlp.ling.tokensregex.PhraseTable$Phrase phrase)">4</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$TextAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.process.TransformXML$NoEscapingSAXInterface</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>8</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>23</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public void processText(String text)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.ExtractorFrames$ExtractorWordTag</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>13</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>0.75</lcom3>
		<loc>53</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.0</amc>
		<cc>
			<method name="String extract(edu.stanford.nlp.tagger.maxent.History h, edu.stanford.nlp.tagger.maxent.PairsHolder pH)">1</method>
			<method name="public void _init_(int posW, int posT)">0</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$HasIthChild$1</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>8</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>0</npm>
		<lcom3>0.0</lcom3>
		<loc>46</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>21.0</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.trees.tregex.Relation$HasIthChild, edu.stanford.nlp.trees.Tree)">0</method>
			<method name="void initialize()">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.BasicSequenceMatchResult$MatchedGroup</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>8</rfc>
		<lcom>0</lcom>
		<ca>6</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>0.16666666666666674</lcom3>
		<loc>68</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>20.666666666666668</amc>
		<cc>
			<method name="protected void _init_(int matchBegin, int matchEnd, Object value)">0</method>
			<method name="protected void _init_(edu.stanford.nlp.ling.tokensregex.BasicSequenceMatchResult$MatchedGroup mg)">0</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$NumTxtSentencesAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalRelations$ClausalPassiveSubjectGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$SRLIDAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.PrettyLogger$1</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>6</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>19</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.5</amc>
		<cc>
			<method name="public int compare(Object a, Object b)">3</method>
			<method name="void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$RoleAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.international.arabic.Buckwalter</name>
		<wmc>11</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>60</rfc>
		<lcom>29</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>9</npm>
		<lcom3>0.55</lcom3>
		<loc>1203</loc>
		<dam>0.9285714285714286</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.38</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>107.0909090909091</amc>
		<cc>
			<method name="public void suppressBuckDigitConversion(boolean b)">1</method>
			<method name="public static void main(String[] args)">15</method>
			<method name="public String apply(String in)">1</method>
			<method name="public void _init_(boolean unicodeToBuckwalter)">0</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void suppressBuckPunctConversion(boolean b)">1</method>
			<method name="public String buckwalterToUnicode(String in)">1</method>
			<method name="private String convert(String in, boolean unicodeToBuckwalter)">13</method>
			<method name="public volatile Object apply(Object x0)">1</method>
			<method name="public String unicodeToBuckwalter(String in)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequenceMatchResult$3</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>37</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.333333333333334</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="void _init_()">0</method>
			<method name="public int compare(java.util.regex.MatchResult e1, java.util.regex.MatchResult e2)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.fsm.FastExactAutomatonMinimizer</name>
		<wmc>22</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>16</cbo>
		<rfc>94</rfc>
		<lcom>177</lcom>
		<ca>1</ca>
		<ce>15</ce>
		<npm>3</npm>
		<lcom3>0.6952380952380952</lcom3>
		<loc>639</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.22448979591836735</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>27.818181818181817</amc>
		<cc>
			<method name="protected edu.stanford.nlp.fsm.TransducerGraph getUnminimizedFA()">1</method>
			<method name="protected java.util.Collection difference(java.util.Collection block, java.util.Collection members)">2</method>
			<method name="protected void removeAll(java.util.Collection block, java.util.Collection members)">2</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="protected void makeBlock(java.util.Collection members)">2</method>
			<method name="protected void minimize()">5</method>
			<method name="protected boolean hasSplit()">2</method>
			<method name="protected void addSplit(edu.stanford.nlp.fsm.FastExactAutomatonMinimizer$Split split)">1</method>
			<method name="protected java.util.Collection getInverseImages(edu.stanford.nlp.fsm.FastExactAutomatonMinimizer$Split split)">3</method>
			<method name="protected edu.stanford.nlp.fsm.TransducerGraph buildMinimizedFA()">3</method>
			<method name="protected java.util.Collection getSymbols()">1</method>
			<method name="protected Object projectNode(Object node)">1</method>
			<method name="protected java.util.Collection getInverseArcs(Object member)">2</method>
			<method name="protected java.util.Collection getInverseArcs(Object member, Object symbol)">2</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="protected edu.stanford.nlp.fsm.FastExactAutomatonMinimizer$Block getBlock(Object o)">3</method>
			<method name="public edu.stanford.nlp.fsm.TransducerGraph minimizeFA(edu.stanford.nlp.fsm.TransducerGraph unminimizedFA)">1</method>
			<method name="protected java.util.Map sortIntoBlocks(java.util.Collection nodes)">2</method>
			<method name="protected void makeInitialBlocks()">1</method>
			<method name="protected void addSplits(edu.stanford.nlp.fsm.FastExactAutomatonMinimizer$Block block)">3</method>
			<method name="protected edu.stanford.nlp.fsm.FastExactAutomatonMinimizer$Split getSplit()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequenceMatchResult$4</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>43</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.333333333333334</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="void _init_()">0</method>
			<method name="public int compare(java.util.regex.MatchResult e1, java.util.regex.MatchResult e2)">5</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequencePattern$SpecialNodePatternExpr</name>
		<wmc>7</wmc>
		<dit>0</dit>
		<noc>2</noc>
		<cbo>7</cbo>
		<rfc>10</rfc>
		<lcom>5</lcom>
		<ca>2</ca>
		<ce>5</ce>
		<npm>3</npm>
		<lcom3>0.5833333333333334</lcom3>
		<loc>48</loc>
		<dam>0.5</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.34285714285714286</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.571428571428571</amc>
		<cc>
			<method name="protected void updateBindings(edu.stanford.nlp.ling.tokensregex.SequencePattern$VarGroupBindings bindings)">1</method>
			<method name="protected int assignGroupIds(int start)">1</method>
			<method name="public void _init_(String name, edu.stanford.nlp.util.Factory stateFactory)">0</method>
			<method name="protected edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr copy()">1</method>
			<method name="protected edu.stanford.nlp.ling.tokensregex.SequencePattern$Frag build()">1</method>
			<method name="public void _init_(String name)">0</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$SectionStartAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$LocationAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$IsDateRangeAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.JollyDayHolidays</name>
		<wmc>11</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>56</rfc>
		<lcom>43</lcom>
		<ca>0</ca>
		<ce>11</ce>
		<npm>10</npm>
		<lcom3>0.7666666666666666</lcom3>
		<loc>394</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.22727272727272727</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>34.54545454545455</amc>
		<cc>
			<method name="public void init(String prefix, java.util.Properties props)">5</method>
			<method name="public edu.stanford.nlp.util.CollectionValuedMap getAllHolidaysCVMap(java.util.Set allHolidays)">2</method>
			<method name="public java.util.Map getAllHolidaysMap(de.jollyday.config.Configuration config)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void bind(edu.stanford.nlp.ling.tokensregex.Env env)">3</method>
			<method name="private static boolean isGetter(java.lang.reflect.Method method)">4</method>
			<method name="public static void getAllHolidays(de.jollyday.config.Holidays holidays, java.util.Set allHolidays)">4</method>
			<method name="public java.util.Map getAllHolidaysMap(java.util.Set allHolidays)">2</method>
			<method name="public static void getAllHolidays(de.jollyday.config.Configuration config, java.util.Set allHolidays)">2</method>
			<method name="public static java.util.Set getAllHolidays(de.jollyday.config.Configuration config)">1</method>
			<method name="public edu.stanford.nlp.util.CollectionValuedMap getAllHolidaysCVMap(de.jollyday.config.Configuration config)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.TreeFactory</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>85</cbo>
		<rfc>4</rfc>
		<lcom>6</lcom>
		<ca>84</ca>
		<ce>2</ce>
		<npm>4</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract edu.stanford.nlp.trees.Tree newLeaf(edu.stanford.nlp.ling.Label)">1</method>
			<method name="public abstract edu.stanford.nlp.trees.Tree newTreeNode(String, java.util.List)">1</method>
			<method name="public abstract edu.stanford.nlp.trees.Tree newTreeNode(edu.stanford.nlp.ling.Label, java.util.List)">1</method>
			<method name="public abstract edu.stanford.nlp.trees.Tree newLeaf(String)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.negra.NegraPennTreeReaderFactory</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>13</cbo>
		<rfc>26</rfc>
		<lcom>4</lcom>
		<ca>2</ca>
		<ce>12</ce>
		<npm>4</npm>
		<lcom3>0.3333333333333333</lcom3>
		<loc>126</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>29.5</amc>
		<cc>
			<method name="public edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader in)">2</method>
			<method name="public static void main(String[] args)">3</method>
			<method name="public void _init_(int nodeCleanup, boolean treeNormalizerInsertNPinPP, boolean treeNormalizerLeaveGF, edu.stanford.nlp.trees.TreebankLanguagePack tlp)">0</method>
			<method name="public void _init_(edu.stanford.nlp.trees.TreebankLanguagePack tlp)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalRelations$AgentGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.LabelValidator</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract boolean validLabel(String, edu.stanford.nlp.ie.machinereading.structure.ExtractionObject)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.french.FrenchTreeNormalizer$1</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>8</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>1.25</lcom3>
		<loc>35</loc>
		<dam>0.5</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.0</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.trees.international.french.FrenchTreeNormalizer)">0</method>
			<method name="public volatile boolean accept(Object x0)">1</method>
			<method name="public boolean accept(edu.stanford.nlp.trees.Tree tree)">4</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$GazetteerAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>9</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.MapFactory$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>7</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.Counters$7$1$1</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>12</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>4</npm>
		<lcom3>0.41666666666666663</lcom3>
		<loc>57</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.8</amc>
		<cc>
			<method name="public boolean hasNext()">1</method>
			<method name="public void remove()">1</method>
			<method name="public java.util.Map$Entry next()">1</method>
			<method name="public volatile Object next()">1</method>
			<method name="void _init_(edu.stanford.nlp.stats.Counters$7$1)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.RandomWalk</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>24</rfc>
		<lcom>2</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>5</npm>
		<lcom3>0.75</lcom3>
		<loc>265</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.65</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>51.0</amc>
		<cc>
			<method name="public void train(java.util.Collection data)">4</method>
			<method name="public double score(Object hidden, Object seen, int steps)">2</method>
			<method name="public void _init_(java.util.Collection data, int steps)">0</method>
			<method name="public double step(Object hidden, Object seen, int steps)">3</method>
			<method name="public double score(Object hidden, Object seen)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.hebrew.HebrewTreeNormalizer$HebrewEmptyFilter</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>7</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>1.5</lcom3>
		<loc>24</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.666666666666667</amc>
		<cc>
			<method name="public boolean accept(edu.stanford.nlp.trees.Tree t)">3</method>
			<method name="public void _init_()">0</method>
			<method name="public volatile boolean accept(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats</name>
		<wmc>31</wmc>
		<dit>0</dit>
		<noc>1</noc>
		<cbo>13</cbo>
		<rfc>90</rfc>
		<lcom>375</lcom>
		<ca>2</ca>
		<ce>11</ce>
		<npm>26</npm>
		<lcom3>0.680952380952381</lcom3>
		<loc>832</loc>
		<dam>1.0</dam>
		<moa>4</moa>
		<mfa>0.0</mfa>
		<cam>0.1935483870967742</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>25.612903225806452</amc>
		<cc>
			<method name="public double score(java.util.List guesses, java.util.List trueLabels)">1</method>
			<method name="public int getRetrieved(Object label)">1</method>
			<method name="public double getAccuracy()">1</method>
			<method name="public double score(java.util.List guesses, java.util.List trueLabels, edu.stanford.nlp.util.Index dataLabelIndex)">1</method>
			<method name="public String getAccuracyDescription(int numDigits)">1</method>
			<method name="public edu.stanford.nlp.util.Triple getAccuracyInfo()">1</method>
			<method name="protected void finalizeCounts()">8</method>
			<method name="public double score()">1</method>
			<method name="public void _init_(edu.stanford.nlp.util.Index dataLabelIndex, Object negLabel)">0</method>
			<method name="public double score(String filename, String delimiter, String boundary)">1</method>
			<method name="public void setLabelIndex(edu.stanford.nlp.util.Index dataLabelIndex)">1</method>
			<method name="public void addGuesses(java.util.List guesses, java.util.List trueLabels)">2</method>
			<method name="protected void addGuess(Object guess, Object label, boolean addUnknownLabels)">7</method>
			<method name="public int getRelevant()">1</method>
			<method name="protected void markBoundary()">1</method>
			<method name="public void _init_(edu.stanford.nlp.classify.Classifier classifier, edu.stanford.nlp.classify.GeneralDataset data, Object negLabel)">0</method>
			<method name="private String getConllEvalString(java.util.List orderedLabels, boolean ignoreNegLabel)">4</method>
			<method name="public double score(edu.stanford.nlp.classify.Classifier classifier, edu.stanford.nlp.classify.GeneralDataset data)">2</method>
			<method name="public void _init_(Object negLabel)">0</method>
			<method name="public String getConllEvalString()">1</method>
			<method name="public int getCorrect()">1</method>
			<method name="public java.util.List getLabels()">1</method>
			<method name="public double score(java.io.BufferedReader br, String delimiter)">1</method>
			<method name="public String getConllEvalString(boolean ignoreNegLabel)">3</method>
			<method name="public void clearCounts()">7</method>
			<method name="public double score(String filename, String delimiter)">1</method>
			<method name="public int getCorrect(Object label)">1</method>
			<method name="protected void addGuess(Object guess, Object label)">1</method>
			<method name="public int getRelevant(Object label)">1</method>
			<method name="public int getRetrieved()">1</method>
			<method name="public double score(java.io.BufferedReader br, String delimiter, String boundary)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.NodePattern$AnyNodePattern</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>4</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>10</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.3333333333333335</amc>
		<cc>
			<method name="protected void _init_()">0</method>
			<method name="public boolean match(Object node)">1</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.ChineseCharacterBasedLexicon</name>
		<wmc>29</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>16</cbo>
		<rfc>100</rfc>
		<lcom>372</lcom>
		<ca>1</ca>
		<ce>16</ce>
		<npm>25</npm>
		<lcom3>0.9196428571428571</lcom3>
		<loc>896</loc>
		<dam>0.9166666666666666</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.14285714285714285</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>29.482758620689655</amc>
		<cc>
			<method name="public edu.stanford.nlp.stats.Distribution getPOSDistribution()">1</method>
			<method name="public boolean isKnown(int word)">1</method>
			<method name="public void finishTraining()">16</method>
			<method name="public void writeData(java.io.Writer w)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void train(java.util.List sentence, double weight)">1</method>
			<method name="public void train(edu.stanford.nlp.ling.TaggedWord tw, int loc, double weight)">1</method>
			<method name="private edu.stanford.nlp.stats.Distribution getBackedOffDist(java.util.List context)">3</method>
			<method name="public void setUnknownWordModel(edu.stanford.nlp.parser.lexparser.UnknownWordModel uwm)">1</method>
			<method name="public edu.stanford.nlp.parser.lexparser.UnknownWordModel getUnknownWordModel()">1</method>
			<method name="public float score(edu.stanford.nlp.parser.lexparser.IntTaggedWord iTW, int loc, String word, String featureSpec)">7</method>
			<method name="public void train(java.util.Collection trees, java.util.Collection rawTrees)">1</method>
			<method name="private edu.stanford.nlp.parser.lexparser.ChineseCharacterBasedLexicon$Symbol unknownCharClass(edu.stanford.nlp.parser.lexparser.ChineseCharacterBasedLexicon$Symbol ch)">2</method>
			<method name="private edu.stanford.nlp.stats.Distribution getWordLengthDistribution()">2</method>
			<method name="public int numRules()">1</method>
			<method name="public java.util.Iterator ruleIteratorByWord(int word, int loc, String featureSpec)">1</method>
			<method name="public void incrementTreesRead(double weight)">1</method>
			<method name="public java.util.Iterator ruleIteratorByWord(String word, int loc, String featureSpec)">1</method>
			<method name="public void train(java.util.Collection trees, double weight)">2</method>
			<method name="public String sampleFrom(String tag)">9</method>
			<method name="public void trainUnannotated(java.util.List sentence, double weight)">1</method>
			<method name="public void initializeTraining(double numTrees)">1</method>
			<method name="public boolean isKnown(String word)">1</method>
			<method name="public void train(java.util.Collection trees)">2</method>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.ChineseTreebankParserParams params, edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex)">0</method>
			<method name="public static boolean isForeign(String s)">4</method>
			<method name="public void train(edu.stanford.nlp.trees.Tree tree, double weight)">1</method>
			<method name="public void readData(java.io.BufferedReader in)">1</method>
			<method name="public String sampleFrom()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$SentenceIndexAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.classify.LogPrior$1</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>56</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>54.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Pair$ByFirstReversePairComparator</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>21</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="public int compare(edu.stanford.nlp.util.Pair pair1, edu.stanford.nlp.util.Pair pair2)">1</method>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPatternRoot</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>12</cbo>
		<rfc>8</rfc>
		<lcom>0</lcom>
		<ca>8</ca>
		<ce>5</ce>
		<npm>2</npm>
		<lcom3>0.5</lcom3>
		<loc>52</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>24.0</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern[] children)">0</method>
			<method name="public edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.tregex.TregexMatcher m)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.BaseUnknownWordModel</name>
		<wmc>13</wmc>
		<dit>1</dit>
		<noc>5</noc>
		<cbo>17</cbo>
		<rfc>39</rfc>
		<lcom>60</lcom>
		<ca>6</ca>
		<ce>11</ce>
		<npm>11</npm>
		<lcom3>0.8583333333333334</lcom3>
		<loc>347</loc>
		<dam>0.95</dam>
		<moa>6</moa>
		<mfa>0.0</mfa>
		<cam>0.2708333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>24.153846153846153</amc>
		<cc>
			<method name="public edu.stanford.nlp.stats.Counter unSeenCounter()">1</method>
			<method name="public float score(edu.stanford.nlp.parser.lexparser.IntTaggedWord itw, int loc, double c_Tseen, double total, double smooth, String word)">1</method>
			<method name="public float score(edu.stanford.nlp.parser.lexparser.IntTaggedWord itw, String word)">10</method>
			<method name="public void addTagging(boolean seen, edu.stanford.nlp.parser.lexparser.IntTaggedWord itw, double count)">2</method>
			<method name="public int getUnknownLevel()">1</method>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.Options op, edu.stanford.nlp.parser.lexparser.Lexicon lex, edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex)">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public int getSignatureIndex(int wordIndex, int sentencePosition, String word)">1</method>
			<method name="protected float scoreGT(String tag)">2</method>
			<method name="public double scoreProbTagGivenWordSignature(edu.stanford.nlp.parser.lexparser.IntTaggedWord iTW, int loc, double smooth, String word)">1</method>
			<method name="public String getSignature(String word, int loc)">7</method>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.Options op, edu.stanford.nlp.parser.lexparser.Lexicon lex, edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex, edu.stanford.nlp.stats.ClassicCounter unSeenCounter, java.util.Map tagHash, java.util.Map unknownGT, java.util.Set seenEnd)">0</method>
			<method name="public edu.stanford.nlp.parser.lexparser.Lexicon getLexicon()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.VisibilityHandler$State</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.888888888888889</lcom3>
		<loc>45</loc>
		<dam>0.3333333333333333</dam>
		<moa>3</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>9.5</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static edu.stanford.nlp.util.logging.VisibilityHandler$State valueOf(String name)">1</method>
			<method name="public static edu.stanford.nlp.util.logging.VisibilityHandler$State[] values()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.MemoryMonitor$PeakMemoryMonitor</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>18</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>5</npm>
		<lcom3>0.71875</lcom3>
		<loc>100</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>17.4</amc>
		<cc>
			<method name="public void _init_(int pollFrequency, int logFrequency)">0</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(int pollFrequency, int logFrequency, java.io.PrintStream out)">0</method>
			<method name="public void run()">2</method>
			<method name="public void log()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.classify.LinearClassifierFactory$9</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>2</npm>
		<lcom3>0.2777777777777777</lcom3>
		<loc>60</loc>
		<dam>0.1111111111111111</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4666666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.0</amc>
		<cc>
			<method name="public edu.stanford.nlp.optimization.Minimizer create()">1</method>
			<method name="void _init_(edu.stanford.nlp.classify.LinearClassifierFactory, double, int, int, int, int, int, boolean)">0</method>
			<method name="public volatile Object create()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseEscaper</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>16</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>0.3333333333333333</lcom3>
		<loc>55</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public java.util.List apply(java.util.List arg)">3</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.classify.LinearClassifierFactory$6</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>2</npm>
		<lcom3>0.625</lcom3>
		<loc>30</loc>
		<dam>0.25</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.666666666666667</amc>
		<cc>
			<method name="public edu.stanford.nlp.optimization.Minimizer create()">1</method>
			<method name="public volatile Object create()">1</method>
			<method name="void _init_(edu.stanford.nlp.classify.LinearClassifierFactory, double, int)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.classify.LinearClassifierFactory$5</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>2</npm>
		<lcom3>0.41666666666666674</lcom3>
		<loc>42</loc>
		<dam>0.16666666666666666</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.4666666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.0</amc>
		<cc>
			<method name="public edu.stanford.nlp.optimization.Minimizer create()">1</method>
			<method name="void _init_(edu.stanford.nlp.classify.LinearClassifierFactory, double, int, edu.stanford.nlp.optimization.StochasticCalculateMethods, int)">0</method>
			<method name="public volatile Object create()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.classify.LinearClassifierFactory$8</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>7</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>2</npm>
		<lcom3>0.30000000000000004</lcom3>
		<loc>51</loc>
		<dam>0.2</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>14.333333333333334</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.classify.LinearClassifierFactory, double, int, int)">0</method>
			<method name="public edu.stanford.nlp.optimization.Minimizer create()">1</method>
			<method name="public volatile Object create()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.classify.LinearClassifierFactory$7</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>2</npm>
		<lcom3>0.5</lcom3>
		<loc>36</loc>
		<dam>0.2</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.333333333333334</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.classify.LinearClassifierFactory, double, int, int)">0</method>
			<method name="public edu.stanford.nlp.optimization.Minimizer create()">1</method>
			<method name="public volatile Object create()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.sequences.CoolingSchedule</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>2</noc>
		<cbo>4</cbo>
		<rfc>8</rfc>
		<lcom>10</lcom>
		<ca>4</ca>
		<ce>2</ce>
		<npm>5</npm>
		<lcom3>2.0</lcom3>
		<loc>21</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.2</amc>
		<cc>
			<method name="public abstract int numIterations()">1</method>
			<method name="public abstract double getTemperature(int)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public static edu.stanford.nlp.sequences.CoolingSchedule getLinearSchedule(double start, int numIterations)">1</method>
			<method name="public static edu.stanford.nlp.sequences.CoolingSchedule getExponentialSchedule(double start, double rate, int numIterations)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.classify.LinearClassifierFactory$2</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>2</npm>
		<lcom3>0.75</lcom3>
		<loc>21</loc>
		<dam>0.5</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.333333333333333</amc>
		<cc>
			<method name="public edu.stanford.nlp.optimization.Minimizer create()">1</method>
			<method name="void _init_(edu.stanford.nlp.classify.LinearClassifierFactory)">0</method>
			<method name="public volatile Object create()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.classify.LinearClassifierFactory$1</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>0.8333333333333334</lcom3>
		<loc>21</loc>
		<dam>0.3333333333333333</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.0</amc>
		<cc>
			<method name="public edu.stanford.nlp.optimization.Minimizer create()">1</method>
			<method name="void _init_(edu.stanford.nlp.classify.LinearClassifierFactory, edu.stanford.nlp.optimization.Minimizer)">0</method>
			<method name="public volatile Object create()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.classify.LinearClassifierFactory$4</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>2</npm>
		<lcom3>0.375</lcom3>
		<loc>34</loc>
		<dam>0.25</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.0</amc>
		<cc>
			<method name="public edu.stanford.nlp.optimization.Minimizer create()">1</method>
			<method name="public volatile Object create()">1</method>
			<method name="void _init_(edu.stanford.nlp.classify.LinearClassifierFactory, double, int)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.OutsideRuleFilter</name>
		<wmc>10</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>34</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>6</npm>
		<lcom3>0.5111111111111111</lcom3>
		<loc>392</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.3333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>37.7</amc>
		<cc>
			<method name="public void rightAccepting(boolean[] result)">2</method>
			<method name="protected final void registerRule(java.util.List leftTags, java.util.List rightTags, int state)">1</method>
			<method name="public void advanceLeft(boolean[] tags)">5</method>
			<method name="public void leftAccepting(boolean[] result)">2</method>
			<method name="protected static java.util.List reverse(java.util.List list)">2</method>
			<method name="private void allocate(int numFAs)">1</method>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.BinaryGrammar bg, edu.stanford.nlp.util.Index stateIndex, edu.stanford.nlp.util.Index tagIndex)">0</method>
			<method name="public void advanceRight(boolean[] tags)">5</method>
			<method name="protected edu.stanford.nlp.parser.lexparser.OutsideRuleFilter$FA buildFA(java.util.List tags)">3</method>
			<method name="public void init()">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.TokenizerAnnotator</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>2</noc>
		<cbo>7</cbo>
		<rfc>24</rfc>
		<lcom>8</lcom>
		<ca>2</ca>
		<ce>5</ce>
		<npm>5</npm>
		<lcom3>0.75</lcom3>
		<loc>90</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.8</amc>
		<cc>
			<method name="public abstract edu.stanford.nlp.process.Tokenizer getTokenizer(java.io.Reader)">1</method>
			<method name="public void annotate(edu.stanford.nlp.pipeline.Annotation annotation)">3</method>
			<method name="public java.util.Set requires()">1</method>
			<method name="public void _init_(boolean verbose)">0</method>
			<method name="public java.util.Set requirementsSatisfied()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.TimeFormatter$DateTimeFieldComponent</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>2</noc>
		<cbo>9</cbo>
		<rfc>16</rfc>
		<lcom>8</lcom>
		<ca>2</ca>
		<ce>7</ce>
		<npm>3</npm>
		<lcom3>0.75</lcom3>
		<loc>68</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.45</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.4</amc>
		<cc>
			<method name="public Integer parseValue(String str)">1</method>
			<method name="private void _init_()">0</method>
			<method name="public edu.stanford.nlp.time.SUTime$Temporal updateTemporal(edu.stanford.nlp.time.SUTime$Temporal t, String fieldValueStr)">4</method>
			<method name="public org.joda.time.DateTimeFieldType getDateTimeFieldType()">1</method>
			<method name="void _init_(edu.stanford.nlp.time.TimeFormatter$1 x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.JollyDayHolidays$MyXMLManager</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>8</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public de.jollyday.config.Configuration getConfiguration()">1</method>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.classify.LinearClassifierFactory$3</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>2</npm>
		<lcom3>0.5</lcom3>
		<loc>27</loc>
		<dam>0.3333333333333333</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.0</amc>
		<cc>
			<method name="public edu.stanford.nlp.optimization.Minimizer create()">1</method>
			<method name="void _init_(edu.stanford.nlp.classify.LinearClassifierFactory, boolean)">0</method>
			<method name="public volatile Object create()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser$Arc</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>11</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>4</npm>
		<lcom3>0.5</lcom3>
		<loc>70</loc>
		<dam>0.25</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>15.5</amc>
		<cc>
			<method name="public int size()">1</method>
			<method name="public boolean equals(Object o)">4</method>
			<method name="public int hashCode()">2</method>
			<method name="public void _init_(java.util.List tails, edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser$Vertex head, double ruleScore)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$CopyAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.CNFTransformers$ToCNFTransformer</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>25</rfc>
		<lcom>1</lcom>
		<ca>2</ca>
		<ce>5</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>192</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>95.0</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="public edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree t)">14</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.semgraph.SemanticGraphCoreAnnotations$BasicDependenciesAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.CollectionValuedMap</name>
		<wmc>34</wmc>
		<dit>1</dit>
		<noc>1</noc>
		<cbo>19</cbo>
		<rfc>73</rfc>
		<lcom>181</lcom>
		<ca>15</ca>
		<ce>5</ce>
		<npm>34</npm>
		<lcom3>0.6212121212121212</lcom3>
		<loc>863</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.1895424836601307</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>24.205882352941178</amc>
		<cc>
			<method name="public void clear()">1</method>
			<method name="public void removeAll(java.util.Collection keys)">2</method>
			<method name="public java.util.Collection put(Object key, java.util.Collection collection)">1</method>
			<method name="public boolean equals(Object o)">6</method>
			<method name="public volatile Object clone()">1</method>
			<method name="public void _init_(edu.stanford.nlp.util.MapFactory mf, edu.stanford.nlp.util.CollectionFactory cf, boolean treatCollectionsAsImmutable)">0</method>
			<method name="public void _init_(edu.stanford.nlp.util.CollectionFactory cf)">0</method>
			<method name="public boolean containsKey(Object key)">1</method>
			<method name="public java.util.Set entrySet()">1</method>
			<method name="public java.util.Collection get(Object key)">2</method>
			<method name="public void add(Object key, Object value)">4</method>
			<method name="public int size()">1</method>
			<method name="public java.util.Collection remove(Object key)">1</method>
			<method name="public volatile Object get(Object x0)">1</method>
			<method name="public boolean containsValue(Object value)">1</method>
			<method name="public String toString()">4</method>
			<method name="public volatile Object put(Object x0, Object x1)">1</method>
			<method name="public edu.stanford.nlp.util.CollectionValuedMap deltaClone()">1</method>
			<method name="public void addAll(java.util.Map m)">3</method>
			<method name="public edu.stanford.nlp.util.CollectionValuedMap clone()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public boolean isEmpty()">1</method>
			<method name="public java.util.Set keySet()">1</method>
			<method name="public void addKey(Object key)">2</method>
			<method name="public java.util.Collection allValues()">2</method>
			<method name="public void addAll(edu.stanford.nlp.util.CollectionValuedMap cvm)">5</method>
			<method name="public int hashCode()">1</method>
			<method name="public static void main(String[] args)">4</method>
			<method name="public volatile Object remove(Object x0)">1</method>
			<method name="public void addAll(Object key, java.util.Collection values)">4</method>
			<method name="public void _init_(edu.stanford.nlp.util.CollectionValuedMap cvm)">0</method>
			<method name="public void removeMapping(Object key, Object value)">2</method>
			<method name="public java.util.Collection values()">1</method>
			<method name="public void putAll(java.util.Map m)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.negra.NegraLabel$NegraLabelFactory</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>21</rfc>
		<lcom>15</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>4</npm>
		<lcom3>2.0</lcom3>
		<loc>70</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.666666666666666</amc>
		<cc>
			<method name="public edu.stanford.nlp.ling.Label newLabel(String labelStr, int options)">1</method>
			<method name="private void _init_()">0</method>
			<method name="public edu.stanford.nlp.ling.Label newLabel(String labelStr)">1</method>
			<method name="public edu.stanford.nlp.ling.Label newLabel(edu.stanford.nlp.ling.Label oldLabel)">2</method>
			<method name="public edu.stanford.nlp.ling.Label newLabelFromString(String encodedLabelStr)">1</method>
			<method name="void _init_(edu.stanford.nlp.trees.international.negra.NegraLabel$1 x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.Redwood$Record</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>16</cbo>
		<rfc>17</rfc>
		<lcom>0</lcom>
		<ca>15</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>0.5</lcom3>
		<loc>103</loc>
		<dam>0.3333333333333333</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.36</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.4</amc>
		<cc>
			<method name="protected void _init_(Object content, Object[] channels, int depth, long timestamp)">0</method>
			<method name="public Object[] channels()">1</method>
			<method name="private void sort()">3</method>
			<method name="public boolean force()">3</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.Redwood$FileHandler</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>2</noc>
		<cbo>5</cbo>
		<rfc>10</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>43</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.8333333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>20.0</amc>
		<cc>
			<method name="public void _init_(String filename)">0</method>
			<method name="public void print(Object[] channels, String line)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.TreeFilters</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="private void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.pascal.InfoTemplate</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>11</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>2</ce>
		<npm>4</npm>
		<lcom3>0.0</lcom3>
		<loc>196</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4375</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>46.5</amc>
		<cc>
			<method name="public int hashCode()">1</method>
			<method name="public boolean equals(Object obj)">9</method>
			<method name="public String toString()">1</method>
			<method name="public void _init_(String whomepage, String wacronym, String wname, String chomepage, String cacronym, String cname, edu.stanford.nlp.ie.pascal.CliqueTemplates ct)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.ConcatenationIterator</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>16</rfc>
		<lcom>13</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>5</npm>
		<lcom3>0.0</lcom3>
		<loc>76</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3888888888888889</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.333333333333334</amc>
		<cc>
			<method name="public static void main(String[] args)">2</method>
			<method name="java.util.Iterator current()">2</method>
			<method name="public boolean hasNext()">1</method>
			<method name="public void remove()">1</method>
			<method name="public void _init_(java.util.Iterator first, java.util.Iterator second)">0</method>
			<method name="public Object next()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.ExtractorVerbalVBNZero</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>21</rfc>
		<lcom>2</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>1.0909090909090908</lcom3>
		<loc>188</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>34.4</amc>
		<cc>
			<method name="String extract(edu.stanford.nlp.tagger.maxent.History h, edu.stanford.nlp.tagger.maxent.PairsHolder pH)">11</method>
			<method name="public boolean precondition(String tag)">7</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void _init_(int bound)">0</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.wordseg.affDict</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>18</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>0.8333333333333334</lcom3>
		<loc>71</loc>
		<dam>0.5</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.875</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.25</amc>
		<cc>
			<method name="public String getInDict(String a1)">2</method>
			<method name="java.util.Set getInDict()">1</method>
			<method name="public void _init_(String affixFilename)">0</method>
			<method name="private java.util.Set readDict(String filename)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.sequences.ColumnDocumentReaderAndWriter$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.metrics.Evalb</name>
		<wmc>8</wmc>
		<dit>0</dit>
		<noc>1</noc>
		<cbo>22</cbo>
		<rfc>81</rfc>
		<lcom>26</lcom>
		<ca>4</ca>
		<ce>19</ce>
		<npm>3</npm>
		<lcom3>0.9285714285714286</lcom3>
		<loc>784</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.20833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>96.75</amc>
		<cc>
			<method name="private static String usage()">1</method>
			<method name="private static java.util.Map optionArgDefs()">1</method>
			<method name="public void _init_(String str, boolean runningAverages)">0</method>
			<method name="public static void main(String[] args)">17</method>
			<method name="protected java.util.Set makeObjects(edu.stanford.nlp.trees.Tree tree)">2</method>
			<method name="public void evaluate(edu.stanford.nlp.trees.Tree guess, edu.stanford.nlp.trees.Tree gold, java.io.PrintWriter pw)">4</method>
			<method name="private static void storeTrees(java.util.PriorityQueue queue, edu.stanford.nlp.trees.Tree guess, edu.stanford.nlp.trees.Tree gold, double curF1)">2</method>
			<method name="private static void emitSortedTrees(java.util.PriorityQueue queue, int worstKTreesToEmit, String filePrefix)">6</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.pascal.DateTemplate</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>10</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>4</npm>
		<lcom3>0.0</lcom3>
		<loc>146</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>34.5</amc>
		<cc>
			<method name="public int hashCode()">1</method>
			<method name="public boolean equals(Object obj)">7</method>
			<method name="public String toString()">1</method>
			<method name="public void _init_(String subdate, String noadate, String crcdate, String workdate)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.FrenchTreebankParserParams$AnnotatePunctuationFunction</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>9</rfc>
		<lcom>10</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>1.25</lcom3>
		<loc>55</loc>
		<dam>0.5</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.6</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="void _init_(edu.stanford.nlp.parser.lexparser.FrenchTreebankParserParams$1 x0)">0</method>
			<method name="public String toString()">1</method>
			<method name="public volatile Object apply(Object x0)">1</method>
			<method name="public String apply(edu.stanford.nlp.trees.tregex.TregexMatcher m)">6</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.OutputHandler$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CategoryWordTag$LabelFactoryHolder</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>0.5</lcom3>
		<loc>14</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.3333333333333335</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="static edu.stanford.nlp.ling.LabelFactory access$000()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.CoreMap</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>143</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>141</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.LabeledScoredConstituent$ConstituentFactoryHolder</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>0.5</lcom3>
		<loc>14</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.3333333333333335</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="static edu.stanford.nlp.trees.ConstituentFactory access$100()">1</method>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.structure.EntityMentionFactory</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>17</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.0</amc>
		<cc>
			<method name="public edu.stanford.nlp.ie.machinereading.structure.EntityMention constructEntityMention(String objectId, edu.stanford.nlp.util.CoreMap sentence, edu.stanford.nlp.ie.machinereading.structure.Span extentSpan, edu.stanford.nlp.ie.machinereading.structure.Span headSpan, String type, String subtype, String mentionType)">1</method>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.classify.LinearClassifierFactory$LinearClassifierCreator</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>10</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>8</ce>
		<npm>5</npm>
		<lcom3>0.08333333333333326</lcom3>
		<loc>64</loc>
		<dam>0.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.55</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.2</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.util.Index featureIndex, edu.stanford.nlp.util.Index labelIndex)">0</method>
			<method name="public edu.stanford.nlp.classify.LinearClassifier createLinearClassifier(double[] weights)">2</method>
			<method name="public edu.stanford.nlp.classify.Classifier createClassifier(double[] weights)">1</method>
			<method name="public edu.stanford.nlp.classify.ProbabilisticClassifier createProbabilisticClassifier(double[] weights)">1</method>
			<method name="public void _init_(edu.stanford.nlp.classify.LogConditionalObjectiveFunction objective, edu.stanford.nlp.util.Index featureIndex, edu.stanford.nlp.util.Index labelIndex)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.RedirectOutputHandler</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>18</rfc>
		<lcom>3</lcom>
		<ca>2</ca>
		<ce>4</ce>
		<npm>4</npm>
		<lcom3>0.3</lcom3>
		<loc>203</loc>
		<dam>0.5</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>32.166666666666664</amc>
		<cc>
			<method name="public void _init_(Object logger, java.lang.reflect.Method loggingMethod)">0</method>
			<method name="public void _init_(Object logger, java.lang.reflect.Method loggingMethod, java.util.Map channelMapping, Object defaultChannel)">0</method>
			<method name="public static edu.stanford.nlp.util.logging.RedirectOutputHandler fromJavaUtilLogging(java.util.logging.Logger logger)">1</method>
			<method name="public void print(Object[] channels, String line)">7</method>
			<method name="protected boolean formatChannel(StringBuilder b, String channelStr, Object channel)">3</method>
			<method name="private boolean shouldLogChannels()">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonParserTokenManager</name>
		<wmc>33</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>49</rfc>
		<lcom>108</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>7</npm>
		<lcom3>0.7013888888888888</lcom3>
		<loc>3034</loc>
		<dam>0.2222222222222222</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>90.39393939393939</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="private int jjMoveStringLiteralDfa0_0()">12</method>
			<method name="private int jjMoveStringLiteralDfa11_0(long old0, long active0)">4</method>
			<method name="private void jjCheckNAddStates(int start, int end)">2</method>
			<method name="private int jjMoveStringLiteralDfa3_0(long old0, long active0)">4</method>
			<method name="private int jjMoveStringLiteralDfa5_0(long old0, long active0)">11</method>
			<method name="private final int jjStopStringLiteralDfa_0(int pos, long active0)">19</method>
			<method name="private int jjMoveStringLiteralDfa2_0(long old0, long active0)">3</method>
			<method name="private int jjMoveStringLiteralDfa12_0(long old0, long active0)">5</method>
			<method name="public void ReInit(edu.stanford.nlp.trees.tregex.tsurgeon.SimpleCharStream stream)">1</method>
			<method name="private final int jjStartNfa_0(int pos, long active0)">1</method>
			<method name="public void ReInit(edu.stanford.nlp.trees.tregex.tsurgeon.SimpleCharStream stream, int lexState)">1</method>
			<method name="private void ReInitRounds()">2</method>
			<method name="public edu.stanford.nlp.trees.tregex.tsurgeon.Token getNextToken()">9</method>
			<method name="public void SwitchTo(int lexState)">3</method>
			<method name="private int jjMoveNfa_0(int startState, int curPos)">130</method>
			<method name="protected edu.stanford.nlp.trees.tregex.tsurgeon.Token jjFillToken()">2</method>
			<method name="public void _init_(edu.stanford.nlp.trees.tregex.tsurgeon.SimpleCharStream stream)">0</method>
			<method name="private int jjMoveStringLiteralDfa7_0(long old0, long active0)">4</method>
			<method name="private int jjMoveStringLiteralDfa9_0(long old0, long active0)">4</method>
			<method name="private void jjCheckNAdd(int state)">2</method>
			<method name="private void jjCheckNAddTwoStates(int state1, int state2)">1</method>
			<method name="private int jjMoveStringLiteralDfa10_0(long old0, long active0)">4</method>
			<method name="private int jjMoveStringLiteralDfa6_0(long old0, long active0)">14</method>
			<method name="public void _init_(edu.stanford.nlp.trees.tregex.tsurgeon.SimpleCharStream stream, int lexState)">0</method>
			<method name="public void setDebugStream(java.io.PrintStream ds)">1</method>
			<method name="private void jjAddStates(int start, int end)">2</method>
			<method name="private int jjStartNfaWithStates_0(int pos, int kind, int state)">1</method>
			<method name="private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)">5</method>
			<method name="private int jjMoveStringLiteralDfa4_0(long old0, long active0)">4</method>
			<method name="private int jjMoveStringLiteralDfa1_0(long active0)">8</method>
			<method name="private int jjMoveStringLiteralDfa8_0(long old0, long active0)">4</method>
			<method name="private int jjStopAtPos(int pos, int kind)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.MetaClass</name>
		<wmc>22</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>16</cbo>
		<rfc>113</rfc>
		<lcom>157</lcom>
		<ca>6</ca>
		<ce>11</ce>
		<npm>15</npm>
		<lcom3>0.5952380952380952</lcom3>
		<loc>1596</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.1761904761904762</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>71.45454545454545</amc>
		<cc>
			<method name="private static String[] decodeArray(String encoded)">24</method>
			<method name="private static int argmin(int[] scores, int atLeast)">4</method>
			<method name="public void _init_(String classname)">0</method>
			<method name="public static Object castWithoutKnowingType(String value)">6</method>
			<method name="public transient boolean checkConstructor(Object[] params)">1</method>
			<method name="public boolean equals(Object o)">2</method>
			<method name="private static java.util.Map decodeMap(String encoded)">32</method>
			<method name="static void _clinit_()">0</method>
			<method name="static Object access$400(Object[] x0, int[] x1, int x2)">1</method>
			<method name="private static Object argmin(Object[] elems, int[] scores, int atLeast)">2</method>
			<method name="public static Object cast(String value, java.lang.reflect.Type type)">55</method>
			<method name="public void _init_(Class classname)">0</method>
			<method name="public transient Object createInstance(Object[] objects)">1</method>
			<method name="public transient Object createInstance(Class type, Object[] params)">2</method>
			<method name="public static edu.stanford.nlp.util.MetaClass create(Class clazz)">1</method>
			<method name="public int hashCode()">1</method>
			<method name="public transient edu.stanford.nlp.util.MetaClass$ClassFactory createFactory(Object[] objects)">1</method>
			<method name="public static edu.stanford.nlp.util.MetaClass create(String classname)">1</method>
			<method name="public String toString()">1</method>
			<method name="public transient edu.stanford.nlp.util.MetaClass$ClassFactory createFactory(String[] classes)">1</method>
			<method name="private static Class type2class(java.lang.reflect.Type type)">5</method>
			<method name="public transient edu.stanford.nlp.util.MetaClass$ClassFactory createFactory(Class[] classes)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.RuleBasedCorefMentionFinder</name>
		<wmc>30</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>24</cbo>
		<rfc>116</rfc>
		<lcom>417</lcom>
		<ca>2</ca>
		<ce>22</ce>
		<npm>4</npm>
		<lcom3>0.9181034482758621</lcom3>
		<loc>2189</loc>
		<dam>0.875</dam>
		<moa>5</moa>
		<mfa>0.0</mfa>
		<cam>0.17506631299734748</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>71.7</amc>
		<cc>
			<method name="protected static void setBarePlural(java.util.List mentions)">2</method>
			<method name="private edu.stanford.nlp.trees.Tree parse(java.util.List tokens, java.util.List constraints)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private static boolean isPleonastic(edu.stanford.nlp.dcoref.Mention m, edu.stanford.nlp.trees.Tree tree)">4</method>
			<method name="public void _init_(boolean allowReparsing)">0</method>
			<method name="protected static void assignMentionIDs(java.util.List predictedMentions, int maxID)">2</method>
			<method name="private edu.stanford.nlp.pipeline.Annotator getParser()">4</method>
			<method name="private static boolean inStopList(edu.stanford.nlp.dcoref.Mention m)">9</method>
			<method name="protected void findHead(edu.stanford.nlp.util.CoreMap s, java.util.List mentions)">4</method>
			<method name="private edu.stanford.nlp.trees.Tree parse(java.util.List tokens)">1</method>
			<method name="private static boolean checkPleonastic(edu.stanford.nlp.dcoref.Mention m, edu.stanford.nlp.trees.Tree tree, edu.stanford.nlp.trees.tregex.TregexPattern tgrepPattern)">1</method>
			<method name="private edu.stanford.nlp.trees.Tree safeHead(edu.stanford.nlp.trees.Tree top, int endIndex)">7</method>
			<method name="private static boolean partitiveRule(edu.stanford.nlp.dcoref.Mention m, java.util.List sent, edu.stanford.nlp.dcoref.Dictionaries dict)">4</method>
			<method name="private static edu.stanford.nlp.trees.Tree findTreeWithSpan(edu.stanford.nlp.trees.Tree tree, int start, int end)">11</method>
			<method name="private static void convertToCoreLabels(edu.stanford.nlp.trees.Tree tree)">3</method>
			<method name="private static boolean insideNE(edu.stanford.nlp.util.IntPair mSpan, java.util.Set namedEntitySpanSet)">2</method>
			<method name="public void _init_()">0</method>
			<method name="private static edu.stanford.nlp.trees.Tree findPartialSpan(edu.stanford.nlp.trees.Tree root, int start)">5</method>
			<method name="protected static void extractPremarkedEntityMentions(edu.stanford.nlp.util.CoreMap s, java.util.List mentions, java.util.Set mentionSpanSet, java.util.Set namedEntitySpanSet)">4</method>
			<method name="protected static void removeSpuriousMentions(edu.stanford.nlp.util.CoreMap s, java.util.List mentions, edu.stanford.nlp.dcoref.Dictionaries dict)">22</method>
			<method name="private static edu.stanford.nlp.trees.tregex.TregexPattern[] getPleonasticPatterns()">2</method>
			<method name="protected edu.stanford.nlp.trees.Tree findSyntacticHead(edu.stanford.nlp.dcoref.Mention m, edu.stanford.nlp.trees.Tree root, java.util.List tokens)">20</method>
			<method name="static edu.stanford.nlp.trees.Tree findTreeWithSmallestSpan(edu.stanford.nlp.trees.Tree tree, int start, int end)">1</method>
			<method name="protected static void extractNPorPRP(edu.stanford.nlp.util.CoreMap s, java.util.List mentions, java.util.Set mentionSpanSet, java.util.Set namedEntitySpanSet)">3</method>
			<method name="private static edu.stanford.nlp.trees.Tree funkyFindLeafWithApproximateSpan(edu.stanford.nlp.trees.Tree root, String token, int index, int approximateness)">4</method>
			<method name="protected static void extractEnumerations(edu.stanford.nlp.util.CoreMap s, java.util.List mentions, java.util.Set mentionSpanSet, java.util.Set namedEntitySpanSet)">3</method>
			<method name="public java.util.List filterPredictedMentions(java.util.List allGoldMentions, edu.stanford.nlp.pipeline.Annotation doc, edu.stanford.nlp.dcoref.Dictionaries dict)">3</method>
			<method name="public java.util.List extractPredictedMentions(edu.stanford.nlp.pipeline.Annotation doc, int maxID, edu.stanford.nlp.dcoref.Dictionaries dict)">3</method>
			<method name="protected static void extractNamedEntityMentions(edu.stanford.nlp.util.CoreMap s, java.util.List mentions, java.util.Set mentionSpanSet, java.util.Set namedEntitySpanSet)">8</method>
			<method name="private static edu.stanford.nlp.ling.CoreLabel initCoreLabel(String token)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalRelations$XClausalComplementGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.RecursiveTreeTransformer</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>1</noc>
		<cbo>6</cbo>
		<rfc>19</rfc>
		<lcom>28</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>8</npm>
		<lcom3>2.0</lcom3>
		<loc>91</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.9375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.375</amc>
		<cc>
			<method name="public edu.stanford.nlp.ling.Label transformTerminalLabel(edu.stanford.nlp.trees.Tree tree)">1</method>
			<method name="public edu.stanford.nlp.ling.Label transformLabel(edu.stanford.nlp.trees.Tree tree)">2</method>
			<method name="public edu.stanford.nlp.ling.Label transformNonterminalLabel(edu.stanford.nlp.trees.Tree tree)">1</method>
			<method name="public edu.stanford.nlp.trees.Tree transformHelper(edu.stanford.nlp.trees.Tree tree)">2</method>
			<method name="public void _init_()">0</method>
			<method name="public edu.stanford.nlp.trees.Tree transformNonterminal(edu.stanford.nlp.trees.Tree tree)">2</method>
			<method name="public edu.stanford.nlp.trees.Tree transformTerminal(edu.stanford.nlp.trees.Tree tree)">1</method>
			<method name="public edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree tree)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.french.DybroFrenchHeadFinder$1</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>6</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>18</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.5</amc>
		<cc>
			<method name="public void visitTree(edu.stanford.nlp.trees.Tree pt)">1</method>
			<method name="void _init_(edu.stanford.nlp.trees.HeadFinder)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$UnbrokenCategoryDominates$1</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>11</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>0.33333333333333326</lcom3>
		<loc>84</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>26.0</amc>
		<cc>
			<method name="public void initialize()">3</method>
			<method name="void advance()">4</method>
			<method name="void _init_(edu.stanford.nlp.trees.tregex.Relation$UnbrokenCategoryDominates, edu.stanford.nlp.trees.Tree)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$UnbrokenCategoryIsDominatedBy$1</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>7</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>1</npm>
		<lcom3>0.33333333333333326</lcom3>
		<loc>45</loc>
		<dam>0.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.0</amc>
		<cc>
			<method name="public void advance()">2</method>
			<method name="void initialize()">1</method>
			<method name="void _init_(edu.stanford.nlp.trees.tregex.Relation$UnbrokenCategoryIsDominatedBy, edu.stanford.nlp.trees.tregex.TregexMatcher, edu.stanford.nlp.trees.Tree)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.TestClassifier</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>45</rfc>
		<lcom>12</lcom>
		<ca>1</ca>
		<ce>10</ce>
		<npm>2</npm>
		<lcom3>0.5934065934065933</lcom3>
		<loc>602</loc>
		<dam>0.7692307692307693</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.3541666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>72.625</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.tagger.maxent.MaxentTagger maxentTagger, String testFile)">0</method>
			<method name="void setDebug(boolean status)">1</method>
			<method name="private void test()">1</method>
			<method name="int getNumWords()">1</method>
			<method name="void printModelAndAccuracy(edu.stanford.nlp.tagger.maxent.MaxentTagger maxentTagger)">1</method>
			<method name="private void processResults(edu.stanford.nlp.tagger.maxent.TestSentence testS, edu.stanford.nlp.io.PrintFile wordsFile, edu.stanford.nlp.io.PrintFile unknDictFile, edu.stanford.nlp.io.PrintFile topWordsFile, boolean verboseResults)">5</method>
			<method name="String resultsString(edu.stanford.nlp.tagger.maxent.MaxentTagger maxentTagger)">2</method>
			<method name="public void _init_(edu.stanford.nlp.tagger.maxent.MaxentTagger maxentTagger)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalRelations$EtcGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.metrics.Evalb$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.TaggerExperiments</name>
		<wmc>13</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>21</cbo>
		<rfc>90</rfc>
		<lcom>12</lcom>
		<ca>4</ca>
		<ce>21</ce>
		<npm>1</npm>
		<lcom3>0.775</lcom3>
		<loc>1163</loc>
		<dam>1.0</dam>
		<moa>4</moa>
		<mfa>0.0</mfa>
		<cam>0.25274725274725274</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>87.6923076923077</amc>
		<cc>
			<method name="protected boolean add(edu.stanford.nlp.tagger.maxent.FeatureKey s)">2</method>
			<method name="private void hashHistories()">13</method>
			<method name="protected void _init_(edu.stanford.nlp.tagger.maxent.TaggerConfig config, edu.stanford.nlp.tagger.maxent.MaxentTagger maxentTagger)">0</method>
			<method name="private void addTemplatesNew(edu.stanford.nlp.tagger.maxent.History h, String tag)">4</method>
			<method name="edu.stanford.nlp.tagger.maxent.HistoryTable getHistoryTable()">1</method>
			<method name="private void getFeaturesNew()">27</method>
			<method name="void _init_(edu.stanford.nlp.tagger.maxent.MaxentTagger maxentTagger)">0</method>
			<method name="byte[][] getFnumArr()">1</method>
			<method name="private void addRareTemplatesNew(edu.stanford.nlp.tagger.maxent.History h, String tag)">5</method>
			<method name="protected static boolean isPopulated(int fNo, int size, edu.stanford.nlp.tagger.maxent.MaxentTagger maxentTagger)">6</method>
			<method name="public edu.stanford.nlp.tagger.maxent.TaggerFeatures getTaggerFeatures()">1</method>
			<method name="private void initTemplatesNew()">1</method>
			<method name="protected boolean populated(int fNo, int size)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$PrevChildAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$3</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>14</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.5</amc>
		<cc>
			<method name="void _init_(org.joda.time.ReadablePeriod x0)">0</method>
			<method name="public org.joda.time.DateTimeFieldType[] getDateTimeFields()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.international.french.process.FrenchLexer</name>
		<wmc>35</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>76</rfc>
		<lcom>489</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>10</npm>
		<lcom3>0.9592030360531308</lcom3>
		<loc>2240</loc>
		<dam>0.8225806451612904</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.17320261437908496</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>61.22857142857143</amc>
		<cc>
			<method name="private static int[] zzUnpackTrans()">1</method>
			<method name="private Object getNext(String txt, String originalText)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public final int yystate()">1</method>
			<method name="private static char[] zzUnpackCMap(String packed)">3</method>
			<method name="private Object getNext()">1</method>
			<method name="private static int zzUnpackTrans(String packed, int offset, int[] result)">3</method>
			<method name="void _init_(java.io.InputStream in)">0</method>
			<method name="private static int zzUnpackAttribute(String packed, int offset, int[] result)">3</method>
			<method name="private static int[] zzUnpackRowMap()">1</method>
			<method name="private Object getNext(String txt, String originalText, String annotation)">5</method>
			<method name="public void yypushback(int number)">2</method>
			<method name="private Object getNormalizedAmpNext()">2</method>
			<method name="void _init_(java.io.Reader in)">0</method>
			<method name="private Object normalizeFractions(String in)">3</method>
			<method name="private static int zzUnpackRowMap(String packed, int offset, int[] result)">2</method>
			<method name="private static String asciiQuotes(String in)">1</method>
			<method name="public final String yytext()">1</method>
			<method name="private Object handleEllipsis(String tok)">3</method>
			<method name="public final void yybegin(int newState)">1</method>
			<method name="public final void yyclose()">1</method>
			<method name="public final void yyreset(java.io.Reader reader)">1</method>
			<method name="public final int yylength()">1</method>
			<method name="public final char yycharat(int pos)">1</method>
			<method name="private static int zzUnpackAction(String packed, int offset, int[] result)">3</method>
			<method name="private static String asciiDash(String in)">1</method>
			<method name="private static String normalizeAmp(String in)">1</method>
			<method name="public Object next()">1</method>
			<method name="public void _init_(java.io.Reader r, edu.stanford.nlp.process.LexedTokenFactory tf, java.util.Properties props)">0</method>
			<method name="private static String removeSoftHyphens(String in)">2</method>
			<method name="private static int[] zzUnpackAttribute()">1</method>
			<method name="private static int[] zzUnpackAction()">1</method>
			<method name="private static String delimit(String s, char c)">4</method>
			<method name="private boolean zzRefill()">1</method>
			<method name="private void zzScanError(int errorCode)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$4</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>14</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.5</amc>
		<cc>
			<method name="void _init_(org.joda.time.ReadablePeriod x0)">0</method>
			<method name="public org.joda.time.DateTimeFieldType[] getDateTimeFields()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$1</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>33</cbo>
		<rfc>6</rfc>
		<lcom>1</lcom>
		<ca>30</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>22</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.5</amc>
		<cc>
			<method name="void _init_(org.joda.time.ReadablePeriod x0)">0</method>
			<method name="public org.joda.time.DateTimeFieldType[] getDateTimeFields()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$2</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>6</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>22</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.5</amc>
		<cc>
			<method name="void _init_(org.joda.time.ReadablePeriod x0)">0</method>
			<method name="public org.joda.time.DateTimeFieldType[] getDateTimeFields()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$HeadWordStringAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$7</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>18</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.5</amc>
		<cc>
			<method name="void _init_(org.joda.time.ReadablePeriod x0)">0</method>
			<method name="public org.joda.time.DateTimeFieldType[] getDateTimeFields()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$8</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>18</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.5</amc>
		<cc>
			<method name="void _init_(org.joda.time.ReadablePeriod x0)">0</method>
			<method name="public org.joda.time.DateTimeFieldType[] getDateTimeFields()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$5</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>14</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.5</amc>
		<cc>
			<method name="void _init_(org.joda.time.ReadablePeriod x0)">0</method>
			<method name="public org.joda.time.DateTimeFieldType[] getDateTimeFields()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$6</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>14</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.5</amc>
		<cc>
			<method name="void _init_(org.joda.time.ReadablePeriod x0)">0</method>
			<method name="public org.joda.time.DateTimeFieldType[] getDateTimeFields()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$9</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>18</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.5</amc>
		<cc>
			<method name="void _init_(org.joda.time.ReadablePeriod x0)">0</method>
			<method name="public org.joda.time.DateTimeFieldType[] getDateTimeFields()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.process.WordToSentenceProcessor$NewlineIsSentenceBreak</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>3</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.9166666666666666</lcom3>
		<loc>56</loc>
		<dam>0.25</dam>
		<moa>4</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>12.0</amc>
		<cc>
			<method name="public static edu.stanford.nlp.process.WordToSentenceProcessor$NewlineIsSentenceBreak valueOf(String name)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static edu.stanford.nlp.process.WordToSentenceProcessor$NewlineIsSentenceBreak[] values()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.crf.NonLinearCliquePotentialFunction</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>8</rfc>
		<lcom>4</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>268</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4642857142857143</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>64.5</amc>
		<cc>
			<method name="private static double sigmoid(double x)">1</method>
			<method name="public double computeCliquePotential(int cliqueSize, int labelIndex, int[] cliqueFeatures, double[] featureVal, int posInSent)">8</method>
			<method name="public double[] hiddenLayerOutput(double[][] inputLayerWeights, int[] nodeCliqueFeatures, edu.stanford.nlp.sequences.SeqClassifierFlags aFlag, double[] featureVal)">11</method>
			<method name="public void _init_(double[][] linearWeights, double[][] inputLayerWeights, double[][] outputLayerWeights, edu.stanford.nlp.sequences.SeqClassifierFlags flags)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.TreeVisitor</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>31</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>30</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract void visitTree(edu.stanford.nlp.trees.Tree)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseEnglishWordMap$SingletonHolder</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>0.5</lcom3>
		<loc>14</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.3333333333333335</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="static edu.stanford.nlp.trees.international.pennchinese.ChineseEnglishWordMap access$000()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$SRL_ID</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.9333333333333332</lcom3>
		<loc>67</loc>
		<dam>0.2</dam>
		<moa>5</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>14.5</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static edu.stanford.nlp.ling.CoreAnnotations$SRL_ID[] values()">1</method>
			<method name="public static edu.stanford.nlp.ling.CoreAnnotations$SRL_ID valueOf(String name)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$LastTaggedAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.SGDToQNMinimizer</name>
		<wmc>11</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>26</rfc>
		<lcom>37</lcom>
		<ca>2</ca>
		<ce>8</ce>
		<npm>8</npm>
		<lcom3>0.5777777777777777</lcom3>
		<loc>231</loc>
		<dam>0.5555555555555556</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.38636363636363635</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.181818181818183</amc>
		<cc>
			<method name="public double[] minimize(edu.stanford.nlp.optimization.DiffFunction function, double functionTolerance, double[] initial, int maxIterations)">2</method>
			<method name="public void _init_(double SGDGain, int batchSize, int sgdPasses, int qnPasses, int hessSamples, int QNMem, boolean outputToFile)">0</method>
			<method name="public void _init_(double SGDGain, int batchSize, int sgdPasses, int qnPasses, int hessSamples, int QNMem)">0</method>
			<method name="protected String getName()">1</method>
			<method name="private void sayln(String s)">2</method>
			<method name="public volatile double[] minimize(edu.stanford.nlp.optimization.Function x0, double x1, double[] x2)">1</method>
			<method name="public double[] minimize(edu.stanford.nlp.optimization.DiffFunction function, double functionTolerance, double[] initial)">1</method>
			<method name="private void say(String s)">2</method>
			<method name="public volatile double[] minimize(edu.stanford.nlp.optimization.Function x0, double x1, double[] x2, int x3)">1</method>
			<method name="public void _init_(double SGDGain, int batchSize, int SGDPasses, int QNPasses)">0</method>
			<method name="public void shutUp()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.Counters</name>
		<wmc>159</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>57</cbo>
		<rfc>325</rfc>
		<lcom>12541</lcom>
		<ca>34</ca>
		<ce>29</ce>
		<npm>156</npm>
		<lcom3>0.9620253164556962</lcom3>
		<loc>4863</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.07127132636213539</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>29.57861635220126</amc>
		<cc>
			<method name="public static edu.stanford.nlp.stats.Counter tfLogScale(edu.stanford.nlp.stats.Counter c, double base)">3</method>
			<method name="public static double[] asArray(edu.stanford.nlp.stats.Counter counter)">2</method>
			<method name="public static void addInPlace(edu.stanford.nlp.stats.Counter target, java.util.Collection arg)">2</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static java.util.List toDescendingMagnitudeSortedListWithCounts(edu.stanford.nlp.stats.Counter c)">2</method>
			<method name="public static Object argmin(edu.stanford.nlp.stats.Counter c)">3</method>
			<method name="public static String toSortedString(edu.stanford.nlp.stats.Counter counter, int k, String itemFormat, String joiner)">1</method>
			<method name="public static void transformValuesInPlace(edu.stanford.nlp.stats.Counter counter, edu.stanford.nlp.util.Function func)">2</method>
			<method name="public static void removeKeys(edu.stanford.nlp.stats.Counter counter, java.util.Collection removeKeysCollection)">2</method>
			<method name="public static java.util.Set retainBelow(edu.stanford.nlp.stats.Counter counter, double countMaxThreshold)">3</method>
			<method name="public static void ensureKeys(edu.stanford.nlp.stats.Counter t, java.util.Collection keys, double value)">2</method>
			<method name="private void _init_()">0</method>
			<method name="public static edu.stanford.nlp.stats.TwoDimensionalCounter scale(edu.stanford.nlp.stats.TwoDimensionalCounter c, double d)">2</method>
			<method name="public static void printCounterComparison(edu.stanford.nlp.stats.Counter a, edu.stanford.nlp.stats.Counter b)">1</method>
			<method name="public static double pearsonsCorrelationCoefficient(edu.stanford.nlp.stats.Counter x, edu.stanford.nlp.stats.Counter y)">1</method>
			<method name="public static String toVerticalString(edu.stanford.nlp.stats.Counter c)">1</method>
			<method name="public static String toVerticalString(edu.stanford.nlp.stats.Counter c, int k, String fmt)">1</method>
			<method name="public static edu.stanford.nlp.stats.Counter average(edu.stanford.nlp.stats.Counter c1, edu.stanford.nlp.stats.Counter c2)">2</method>
			<method name="public static double logSum(edu.stanford.nlp.stats.Counter c)">1</method>
			<method name="public static double skewDivergence(edu.stanford.nlp.stats.Counter c1, edu.stanford.nlp.stats.Counter c2, double skew)">1</method>
			<method name="public static double crossEntropy(edu.stanford.nlp.stats.Counter from, edu.stanford.nlp.stats.Counter to)">4</method>
			<method name="public static double entropy(edu.stanford.nlp.stats.Counter c)">3</method>
			<method name="public static void printCounterComparison(edu.stanford.nlp.stats.Counter a, edu.stanford.nlp.stats.Counter b, java.io.PrintStream out)">1</method>
			<method name="public static double[] asArray(edu.stanford.nlp.stats.Counter counter, edu.stanford.nlp.util.Index index)">1</method>
			<method name="public static edu.stanford.nlp.stats.Counter toTiedRankCounter(edu.stanford.nlp.stats.Counter c)">8</method>
			<method name="public static double spearmanRankCorrelation(edu.stanford.nlp.stats.Counter x, edu.stanford.nlp.stats.Counter y)">1</method>
			<method name="public static edu.stanford.nlp.stats.Counter transformWithValuesAdd(edu.stanford.nlp.stats.Counter c, edu.stanford.nlp.util.Function f)">2</method>
			<method name="public static java.util.Set retainMatchingKeys(edu.stanford.nlp.stats.Counter counter, java.util.List matchPatterns)">4</method>
			<method name="public static java.util.Map asMap(edu.stanford.nlp.stats.Counter counter)">1</method>
			<method name="public static void subtractInPlace(edu.stanford.nlp.stats.Counter target, edu.stanford.nlp.stats.Counter arg)">2</method>
			<method name="public static double min(edu.stanford.nlp.stats.Counter c)">2</method>
			<method name="public static double cosine(edu.stanford.nlp.stats.Counter c1, edu.stanford.nlp.stats.Counter c2)">5</method>
			<method name="public static edu.stanford.nlp.stats.Counter asCounter(edu.stanford.nlp.util.FixedPrioritiesPriorityQueue p)">2</method>
			<method name="public static double[] asArray(edu.stanford.nlp.stats.Counter counter, edu.stanford.nlp.util.Index index, int dimension)">3</method>
			<method name="public static edu.stanford.nlp.stats.Counter unmodifiableCounter(edu.stanford.nlp.stats.Counter counter)">1</method>
			<method name="public static edu.stanford.nlp.stats.Counter exp(edu.stanford.nlp.stats.Counter c)">2</method>
			<method name="public static String toVerticalString(edu.stanford.nlp.stats.Counter c, int k, String fmt, boolean swap)">5</method>
			<method name="public static Object argmin(edu.stanford.nlp.stats.Counter c, java.util.Comparator tieBreaker)">4</method>
			<method name="public static double sumEntries(edu.stanford.nlp.stats.Counter c1, java.util.Collection entries)">2</method>
			<method name="public static void dotProductInPlace(edu.stanford.nlp.stats.Counter target, edu.stanford.nlp.stats.Counter term)">2</method>
			<method name="private static void loadIntoCounter(String filename, Class c, edu.stanford.nlp.stats.Counter counter)">1</method>
			<method name="public static edu.stanford.nlp.stats.Counter getCountCounts(edu.stanford.nlp.stats.Counter c)">2</method>
			<method name="public static Object argmax(edu.stanford.nlp.stats.Counter c)">3</method>
			<method name="public static Object restrictedArgMax(edu.stanford.nlp.stats.Counter c, java.util.Collection restriction)">2</method>
			<method name="public static java.util.Set keysAt(edu.stanford.nlp.stats.Counter c, double count)">2</method>
			<method name="public static java.util.Set retainAbove(edu.stanford.nlp.stats.TwoDimensionalCounter counter, double countThreshold)">3</method>
			<method name="public static edu.stanford.nlp.stats.Counter L2NormalizeInPlace(edu.stanford.nlp.stats.Counter c)">1</method>
			<method name="public static java.util.Set keysBelow(edu.stanford.nlp.stats.Counter c, double countThreshold)">2</method>
			<method name="public static java.util.Set retainAbove(edu.stanford.nlp.stats.Counter counter, double countThreshold)">3</method>
			<method name="public static edu.stanford.nlp.stats.Counter saferL2Normalize(edu.stanford.nlp.stats.Counter c)">1</method>
			<method name="public static void addInPlace(edu.stanford.nlp.stats.Counter target, edu.stanford.nlp.stats.Counter arg)">2</method>
			<method name="public static edu.stanford.nlp.stats.Counter add(edu.stanford.nlp.stats.Counter c1, edu.stanford.nlp.stats.Counter c2)">2</method>
			<method name="public static edu.stanford.nlp.stats.Counter multiplyInPlace(edu.stanford.nlp.stats.Counter target, edu.stanford.nlp.stats.Counter mult)">2</method>
			<method name="public static edu.stanford.nlp.stats.Counter powNormalized(edu.stanford.nlp.stats.Counter c, double temp)">2</method>
			<method name="public static void loadIncInto2DCounter(String filename, Class t1, Class t2, edu.stanford.nlp.stats.TwoDimensionalCounterInterface tdc)">1</method>
			<method name="public static void saveCounter(edu.stanford.nlp.stats.Counter c, String filename)">1</method>
			<method name="public static double mean(edu.stanford.nlp.stats.Counter c)">1</method>
			<method name="public static edu.stanford.nlp.stats.Counter pow(edu.stanford.nlp.stats.Counter c, double temp)">2</method>
			<method name="public static Object sample(edu.stanford.nlp.stats.Counter c, java.util.Random rand)">2</method>
			<method name="public static void addInPlace(edu.stanford.nlp.stats.Counter target, double value)">2</method>
			<method name="public static double pointwiseMutualInformation(edu.stanford.nlp.stats.Counter var1Distribution, edu.stanford.nlp.stats.Counter var2Distribution, edu.stanford.nlp.stats.Counter jointDistribution, edu.stanford.nlp.util.Pair values)">1</method>
			<method name="public static edu.stanford.nlp.stats.IntCounter loadIntCounter(String filename, Class c)">1</method>
			<method name="public static String toSortedString(edu.stanford.nlp.stats.Counter counter, int k, String itemFormat, String joiner, String wrapperFormat)">3</method>
			<method name="public static String toString(edu.stanford.nlp.stats.Counter counter, java.text.NumberFormat nf, String preAppend, String postAppend, String keyValSeparator, String itemSeparator)">2</method>
			<method name="public static java.util.List topKeys(edu.stanford.nlp.stats.Counter t, int topNum)">3</method>
			<method name="public static String toString(edu.stanford.nlp.stats.Counter counter, java.text.NumberFormat nf)">2</method>
			<method name="public static java.util.List toSortedListWithCounts(edu.stanford.nlp.stats.Counter c, java.util.Comparator comparator)">2</method>
			<method name="public static double saferL2Norm(edu.stanford.nlp.stats.Counter c)">3</method>
			<method name="public static edu.stanford.nlp.stats.ClassicCounter loadCounter(String filename, Class c)">1</method>
			<method name="public static void divideInPlace(edu.stanford.nlp.stats.TwoDimensionalCounter counter, double divisor)">2</method>
			<method name="public static void retainBottom(edu.stanford.nlp.stats.Counter c, int num)">3</method>
			<method name="public static boolean isUniformDistribution(edu.stanford.nlp.stats.Counter distribution, double tolerance)">5</method>
			<method name="public static double sumSquares(edu.stanford.nlp.stats.Counter c)">2</method>
			<method name="public static java.util.List toSortedListWithCounts(edu.stanford.nlp.stats.Counter c)">2</method>
			<method name="public static boolean equals(edu.stanford.nlp.stats.Counter o1, edu.stanford.nlp.stats.Counter o2, double tolerance)">5</method>
			<method name="public static Object sample(edu.stanford.nlp.stats.Counter c)">1</method>
			<method name="public static String toBiggestValuesFirstString(edu.stanford.nlp.stats.Counter c, int k)">3</method>
			<method name="public static edu.stanford.nlp.stats.Counter scale(edu.stanford.nlp.stats.Counter c, double s)">2</method>
			<method name="public static edu.stanford.nlp.stats.Counter fromMap(java.util.Map map)">2</method>
			<method name="public static String toBiggestValuesFirstString(edu.stanford.nlp.stats.Counter c)">1</method>
			<method name="public static void addInPlace(edu.stanford.nlp.stats.Counter target, edu.stanford.nlp.stats.Counter arg, double scale)">2</method>
			<method name="public static void retainTopMass(edu.stanford.nlp.stats.Counter counter, double thresholdCount)">3</method>
			<method name="public static edu.stanford.nlp.stats.Counter divideInPlace(edu.stanford.nlp.stats.Counter target, double divisor)">2</method>
			<method name="public static void normalize(edu.stanford.nlp.stats.TwoDimensionalCounter target)">1</method>
			<method name="public static edu.stanford.nlp.stats.Counter product(edu.stanford.nlp.stats.Counter c1, edu.stanford.nlp.stats.Counter c2)">2</method>
			<method name="public static void loadInto2DCounter(String filename, Class t1, Class t2, edu.stanford.nlp.stats.TwoDimensionalCounter tdc)">1</method>
			<method name="public static String toSortedByKeysString(edu.stanford.nlp.stats.Counter counter, String itemFormat, String joiner, String wrapperFormat)">2</method>
			<method name="public static void retainTopKeyComparable(edu.stanford.nlp.stats.Counter c, int num)">3</method>
			<method name="public static void printCounterSortedByKeys(edu.stanford.nlp.stats.Counter c)">2</method>
			<method name="public static edu.stanford.nlp.stats.Counter getCopy(edu.stanford.nlp.stats.Counter originalCounter)">1</method>
			<method name="public static edu.stanford.nlp.stats.Counter transform(edu.stanford.nlp.stats.Counter c, edu.stanford.nlp.util.Function f)">2</method>
			<method name="public static void maxInPlace(edu.stanford.nlp.stats.Counter target, edu.stanford.nlp.stats.Counter other)">2</method>
			<method name="public static void addInPlace(edu.stanford.nlp.stats.TwoDimensionalCounter target, double value)">2</method>
			<method name="public static double L2Norm(edu.stanford.nlp.stats.Counter c)">1</method>
			<method name="public static void expInPlace(edu.stanford.nlp.stats.Counter c)">2</method>
			<method name="public static edu.stanford.nlp.stats.Counter division(edu.stanford.nlp.stats.Counter c1, edu.stanford.nlp.stats.Counter c2)">2</method>
			<method name="public static void save2DCounter(edu.stanford.nlp.stats.TwoDimensionalCounter tdc, String filename)">1</method>
			<method name="public static java.util.List deleteOutofRange(edu.stanford.nlp.stats.Counter c, int top, int bottom)">4</method>
			<method name="public static double dotProduct(edu.stanford.nlp.stats.Counter c, double[] a, edu.stanford.nlp.util.Index idx)">2</method>
			<method name="public static edu.stanford.nlp.stats.Counter perturbCounts(edu.stanford.nlp.stats.Counter c, java.util.Random random, double p)">2</method>
			<method name="public static void normalize(edu.stanford.nlp.stats.Counter target)">1</method>
			<method name="public static void printCounterComparison(edu.stanford.nlp.stats.Counter a, edu.stanford.nlp.stats.Counter b, java.io.PrintWriter out)">4</method>
			<method name="public static void addInPlace(edu.stanford.nlp.stats.TwoDimensionalCounter target, edu.stanford.nlp.stats.TwoDimensionalCounter arg, double scale)">2</method>
			<method name="public static void saveCounter(edu.stanford.nlp.stats.Counter c, java.io.OutputStream stream)">2</method>
			<method name="public static void divideInPlace(edu.stanford.nlp.stats.Counter target, edu.stanford.nlp.stats.Counter denominator)">2</method>
			<method name="public static java.util.Comparator toComparator(edu.stanford.nlp.stats.Counter counter)">1</method>
			<method name="public static void powInPlace(edu.stanford.nlp.stats.Counter c, double temp)">2</method>
			<method name="public static double klDivergence(edu.stanford.nlp.stats.Counter from, edu.stanford.nlp.stats.Counter to)">4</method>
			<method name="public static java.util.Set keysAbove(edu.stanford.nlp.stats.Counter c, double countThreshold)">2</method>
			<method name="public static java.util.Set retainNonZeros(edu.stanford.nlp.stats.Counter counter)">3</method>
			<method name="public static edu.stanford.nlp.stats.Counter absoluteDifference(edu.stanford.nlp.stats.Counter c1, edu.stanford.nlp.stats.Counter c2)">2</method>
			<method name="public static edu.stanford.nlp.stats.TwoDimensionalCounter load2DCounter(String filename, Class t1, Class t2)">1</method>
			<method name="public static void addInPlace(edu.stanford.nlp.stats.Counter target, java.util.Collection arg, double value)">2</method>
			<method name="public static java.util.Comparator toComparator(edu.stanford.nlp.stats.Counter counter, boolean ascending, boolean useMagnitude)">1</method>
			<method name="public static java.util.List toSortedList(edu.stanford.nlp.stats.Counter c, boolean ascending)">2</method>
			<method name="public static double optimizedDotProduct(edu.stanford.nlp.stats.Counter c1, edu.stanford.nlp.stats.Counter c2)">3</method>
			<method name="public static void subtractInPlace(double[] target, edu.stanford.nlp.stats.Counter arg, edu.stanford.nlp.util.Index idx)">2</method>
			<method name="public static double jensenShannonDivergence(edu.stanford.nlp.stats.Counter c1, edu.stanford.nlp.stats.Counter c2)">1</method>
			<method name="public static edu.stanford.nlp.stats.Counter toCounter(java.util.Map counts, edu.stanford.nlp.util.Index index)">2</method>
			<method name="public static java.util.List topKeysWithCounts(edu.stanford.nlp.stats.Counter t, int topNum)">3</method>
			<method name="public static String toVerticalString(edu.stanford.nlp.stats.Counter c, String fmt)">1</method>
			<method name="public static edu.stanford.nlp.stats.Counter toCounter(double[] counts, edu.stanford.nlp.util.Index index)">4</method>
			<method name="public static void addInPlace(double[] target, edu.stanford.nlp.stats.Counter arg, edu.stanford.nlp.util.Index idx)">2</method>
			<method name="public static Object argmax(edu.stanford.nlp.stats.Counter c, java.util.Comparator tieBreaker)">4</method>
			<method name="public static String toString(edu.stanford.nlp.stats.Counter counter, int maxKeysToPrint)">1</method>
			<method name="public static void logNormalizeInPlace(edu.stanford.nlp.stats.Counter c)">2</method>
			<method name="public static edu.stanford.nlp.stats.Counter union(edu.stanford.nlp.stats.Counter c1, edu.stanford.nlp.stats.Counter c2)">1</method>
			<method name="public static void retainTop(edu.stanford.nlp.stats.Counter c, int num)">3</method>
			<method name="public static java.util.List toSortedListKeyComparable(edu.stanford.nlp.stats.Counter c)">1</method>
			<method name="public static double dotProduct(edu.stanford.nlp.stats.Counter c1, edu.stanford.nlp.stats.Counter c2)">7</method>
			<method name="public static String toVerticalString(edu.stanford.nlp.stats.Counter c, int k)">1</method>
			<method name="public static void addInPlace(edu.stanford.nlp.stats.TwoDimensionalCounter target, edu.stanford.nlp.stats.TwoDimensionalCounter arg)">2</method>
			<method name="public static int hIndex(edu.stanford.nlp.stats.Counter citationCounts)">3</method>
			<method name="public static java.util.Comparator toComparatorWithKeys(edu.stanford.nlp.stats.Counter counter)">1</method>
			<method name="public static double jaccardCoefficient(edu.stanford.nlp.stats.Counter c1, edu.stanford.nlp.stats.Counter c2)">4</method>
			<method name="public static java.util.List toSortedList(edu.stanford.nlp.stats.Counter c)">1</method>
			<method name="public static edu.stanford.nlp.stats.IntCounter toRankCounter(edu.stanford.nlp.stats.Counter c)">2</method>
			<method name="public static edu.stanford.nlp.stats.Counter diff(edu.stanford.nlp.stats.Counter goldFeatures, edu.stanford.nlp.stats.Counter guessedFeatures)">2</method>
			<method name="public static double standardDeviation(edu.stanford.nlp.stats.Counter c)">2</method>
			<method name="public static double max(edu.stanford.nlp.stats.Counter c)">2</method>
			<method name="public static edu.stanford.nlp.stats.Counter add(edu.stanford.nlp.stats.Counter c1, double value)">2</method>
			<method name="public static edu.stanford.nlp.util.PriorityQueue toPriorityQueue(edu.stanford.nlp.stats.Counter c)">2</method>
			<method name="public static void minInPlace(edu.stanford.nlp.stats.Counter target, edu.stanford.nlp.stats.Counter other)">2</method>
			<method name="public static java.util.Set retainKeys(edu.stanford.nlp.stats.Counter counter, java.util.Collection matchKeys)">3</method>
			<method name="public static edu.stanford.nlp.stats.ClassicCounter deserializeCounter(String filename)">1</method>
			<method name="public static edu.stanford.nlp.stats.Counter asCounter(java.util.Collection c)">2</method>
			<method name="public static edu.stanford.nlp.stats.Counter L2Normalize(edu.stanford.nlp.stats.Counter c)">1</method>
			<method name="public static java.util.Comparator toComparatorDescending(edu.stanford.nlp.stats.Counter counter)">1</method>
			<method name="public static edu.stanford.nlp.stats.Counter linearCombination(edu.stanford.nlp.stats.Counter c1, double w1, edu.stanford.nlp.stats.Counter c2, double w2)">3</method>
			<method name="public static boolean equals(edu.stanford.nlp.stats.Counter o1, edu.stanford.nlp.stats.Counter o2)">1</method>
			<method name="public static edu.stanford.nlp.stats.Counter multiplyInPlace(edu.stanford.nlp.stats.Counter target, double multiplier)">2</method>
			<method name="public static edu.stanford.nlp.stats.Counter fromMap(java.util.Map map, Class type)">2</method>
			<method name="public static String toBiggestValuesFirstString(edu.stanford.nlp.stats.Counter c, int k, edu.stanford.nlp.util.Index index)">3</method>
			<method name="public static void logInPlace(edu.stanford.nlp.stats.Counter target)">2</method>
			<method name="public static double L1Norm(edu.stanford.nlp.stats.Counter c)">2</method>
			<method name="public static edu.stanford.nlp.stats.Counter getFCounter(edu.stanford.nlp.stats.Counter precision, edu.stanford.nlp.stats.Counter recall, double beta)">2</method>
			<method name="public static void serializeCounter(edu.stanford.nlp.stats.Counter c, String filename)">1</method>
			<method name="public static edu.stanford.nlp.stats.Counter intersection(edu.stanford.nlp.stats.Counter c1, edu.stanford.nlp.stats.Counter c2)">3</method>
			<method name="public static void save2DCounterSorted(edu.stanford.nlp.stats.TwoDimensionalCounterInterface tdc, String filename)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.ParserAnnotations</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="private void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Filters$CombinedFilter</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.5</lcom3>
		<loc>49</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>21.5</amc>
		<cc>
			<method name="public boolean accept(Object o)">6</method>
			<method name="public void _init_(edu.stanford.nlp.util.Filter f1, edu.stanford.nlp.util.Filter f2, boolean conjunction)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonParser$JJCalls</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>8</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$TrueCaseAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.MultiWordStringMatcher</name>
		<wmc>21</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>63</rfc>
		<lcom>168</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>17</npm>
		<lcom3>0.83125</lcom3>
		<loc>699</loc>
		<dam>0.75</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.3142857142857143</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>31.904761904761905</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="public String getLWsRegex(String targetString)">1</method>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.MultiWordStringMatcher$MatchType matchType)">0</method>
			<method name="public static java.util.List findOffsets(java.util.regex.Pattern pattern, String text, int start, int end)">12</method>
			<method name="public String getRegex(String[] targetStrings)">3</method>
			<method name="protected String markTargetString(String text, String targetString, String beginMark, String endMark, boolean markOnlyIfSpace)">13</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.MultiWordStringMatcher$MatchType getMatchType()">1</method>
			<method name="public void setMatchType(edu.stanford.nlp.ling.tokensregex.MultiWordStringMatcher$MatchType matchType)">3</method>
			<method name="public String putSpacesAroundTargetString(String text, String targetString)">1</method>
			<method name="protected java.util.List findTargetStringOffsetsExct(String text, String targetString, int start, int end)">12</method>
			<method name="protected java.util.List findTargetStringOffsetsRegex(String text, String targetString, int start, int end)">3</method>
			<method name="public String getExctWsRegex(String targetString)">5</method>
			<method name="public java.util.regex.Pattern getPattern(String targetString)">2</method>
			<method name="public java.util.List findTargetStringOffsets(String text, String targetString, int start, int end)">3</method>
			<method name="public String getLnrmRegex(String targetString)">3</method>
			<method name="public java.util.regex.Pattern getPattern(String[] targetStrings)">1</method>
			<method name="public java.util.regex.Pattern createPattern(String targetString)">1</method>
			<method name="public String getRegex(String targetString)">2</method>
			<method name="public java.util.List findTargetStringOffsets(String text, String targetString)">1</method>
			<method name="public void _init_(String matchTypeStr)">0</method>
			<method name="public static java.util.List findOffsets(java.util.regex.Pattern pattern, String text)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$TextPatternExtractRuleCreator</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>17</cbo>
		<rfc>18</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>17</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>128</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5416666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>31.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="protected void updateExtractRule(edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule r, edu.stanford.nlp.ling.tokensregex.Env env, String expr, edu.stanford.nlp.ling.tokensregex.types.Expression action, edu.stanford.nlp.ling.tokensregex.types.Expression result)">1</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule create(edu.stanford.nlp.ling.tokensregex.Env env, java.util.Map attributes)">3</method>
			<method name="protected edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule create(edu.stanford.nlp.ling.tokensregex.Env env, String expr, edu.stanford.nlp.ling.tokensregex.types.Expression result)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.TregexParser</name>
		<wmc>28</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>14</cbo>
		<rfc>70</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>14</ce>
		<npm>24</npm>
		<lcom3>0.5580246913580247</lcom3>
		<loc>1979</loc>
		<dam>0.7333333333333333</dam>
		<moa>6</moa>
		<mfa>0.0</mfa>
		<cam>0.17037037037037037</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>69.14285714285714</amc>
		<cc>
			<method name="public final edu.stanford.nlp.trees.tregex.TregexPattern Root()">1</method>
			<method name="public final edu.stanford.nlp.trees.tregex.DescriptionPattern ModDescription(edu.stanford.nlp.trees.tregex.Relation r)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void ReInit(edu.stanford.nlp.trees.tregex.TregexParserTokenManager tm)">2</method>
			<method name="public final edu.stanford.nlp.trees.tregex.Token getToken(int index)">3</method>
			<method name="public final void disable_tracing()">1</method>
			<method name="public void ReInit(java.io.Reader stream)">2</method>
			<method name="public final edu.stanford.nlp.trees.tregex.TregexPattern ChildrenConj()">1</method>
			<method name="public final edu.stanford.nlp.trees.tregex.TregexPattern Node(edu.stanford.nlp.trees.tregex.Relation r)">1</method>
			<method name="public final edu.stanford.nlp.trees.tregex.TregexPattern Relation()">1</method>
			<method name="public void _init_(java.io.InputStream stream)">0</method>
			<method name="private edu.stanford.nlp.trees.tregex.Token jj_consume_token(int kind)">1</method>
			<method name="private int jj_ntk_f()">2</method>
			<method name="private static void jj_la1_init_0()">1</method>
			<method name="public edu.stanford.nlp.trees.tregex.ParseException generateParseException()">9</method>
			<method name="public final edu.stanford.nlp.trees.tregex.TregexPattern ModChild()">1</method>
			<method name="public final edu.stanford.nlp.trees.tregex.DescriptionPattern Description(edu.stanford.nlp.trees.tregex.Relation r, boolean negateDesc, boolean cat)">1</method>
			<method name="public final edu.stanford.nlp.trees.tregex.DescriptionPattern SubNode(edu.stanford.nlp.trees.tregex.Relation r)">1</method>
			<method name="public void _init_(java.io.Reader stream, edu.stanford.nlp.util.Function basicCatFunction, edu.stanford.nlp.trees.HeadFinder headFinder)">0</method>
			<method name="public final edu.stanford.nlp.trees.tregex.Token getNextToken()">2</method>
			<method name="public final edu.stanford.nlp.trees.tregex.TregexPattern Child()">1</method>
			<method name="public void _init_(edu.stanford.nlp.trees.tregex.TregexParserTokenManager tm)">0</method>
			<method name="public final edu.stanford.nlp.trees.tregex.TregexPattern ChildrenDisj()">1</method>
			<method name="public void ReInit(java.io.InputStream stream, String encoding)">2</method>
			<method name="public void _init_(java.io.Reader stream)">0</method>
			<method name="public final void enable_tracing()">1</method>
			<method name="public void ReInit(java.io.InputStream stream)">1</method>
			<method name="public void _init_(java.io.InputStream stream, String encoding)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$TimexAttr</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>4</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.9761904761904763</lcom3>
		<loc>166</loc>
		<dam>0.07142857142857142</dam>
		<moa>14</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>37.0</amc>
		<cc>
			<method name="public static edu.stanford.nlp.time.SUTime$TimexAttr valueOf(String name)">1</method>
			<method name="public static edu.stanford.nlp.time.SUTime$TimexAttr[] values()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.neural.rnn.RNNCoreAnnotations$PredictionError</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.IterativeCKYPCFGParser</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>15</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>10</ce>
		<npm>1</npm>
		<lcom3>1.5</lcom3>
		<loc>1379</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.42857142857142855</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>458.3333333333333</amc>
		<cc>
			<method name="private boolean doInsideScoresHelper(float threshold)">111</method>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.BinaryGrammar bg, edu.stanford.nlp.parser.lexparser.UnaryGrammar ug, edu.stanford.nlp.parser.lexparser.Lexicon lex, edu.stanford.nlp.parser.lexparser.Options op, edu.stanford.nlp.util.Index stateIndex, edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex)">0</method>
			<method name="void doInsideScores()">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.TimeFormatter$CustomDateFormatExtractor</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>21</rfc>
		<lcom>2</lcom>
		<ca>1</ca>
		<ce>9</ce>
		<npm>5</npm>
		<lcom3>0.5</lcom3>
		<loc>111</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.45</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>20.6</amc>
		<cc>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Value apply(String str)">2</method>
			<method name="public java.util.regex.Pattern getTextPattern()">1</method>
			<method name="public void _init_(String timePattern, String localeString)">0</method>
			<method name="public volatile Object apply(Object x0)">1</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Value apply(java.util.regex.MatchResult m)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.TimeFormatter$1</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>13</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>13</ca>
		<ce>0</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>31</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.333333333333334</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="void _init_()">0</method>
			<method name="public int compare(String o1, String o2)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.CorefCoreAnnotations$CorefDestAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.CollocationFinder$Collocation</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>8</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>0.19999999999999996</lcom3>
		<loc>50</loc>
		<dam>0.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>14.0</amc>
		<cc>
			<method name="private void _init_(edu.stanford.nlp.util.Pair span, edu.stanford.nlp.trees.Tree parentNode, java.util.ArrayList indicesOfConstituentChildren, String collocationString, edu.stanford.nlp.ling.Label headLabel)">0</method>
			<method name="void _init_(edu.stanford.nlp.util.Pair x0, edu.stanford.nlp.trees.Tree x1, java.util.ArrayList x2, String x3, edu.stanford.nlp.ling.Label x4, edu.stanford.nlp.trees.CollocationFinder$1 x5)">0</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.NERCombinerAnnotator</name>
		<wmc>12</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>57</rfc>
		<lcom>18</lcom>
		<ca>1</ca>
		<ce>10</ce>
		<npm>9</npm>
		<lcom3>0.33333333333333326</lcom3>
		<loc>412</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.25</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>33.083333333333336</amc>
		<cc>
			<method name="private void timerStop()">2</method>
			<method name="public void _init_(String name, java.util.Properties properties)">0</method>
			<method name="public transient void _init_(boolean verbose, String[] classifiers)">0</method>
			<method name="public void _init_()">0</method>
			<method name="public void annotate(edu.stanford.nlp.pipeline.Annotation annotation)">3</method>
			<method name="public java.util.Set requires()">3</method>
			<method name="public void _init_(boolean verbose)">0</method>
			<method name="public java.util.Set requirementsSatisfied()">1</method>
			<method name="private static final edu.stanford.nlp.ie.NERClassifierCombiner createNERClassifierCombiner(String name, java.util.Properties properties)">5</method>
			<method name="private void timerStart(String msg)">2</method>
			<method name="public edu.stanford.nlp.util.CoreMap doOneSentence(edu.stanford.nlp.pipeline.Annotation annotation, edu.stanford.nlp.util.CoreMap sentence)">9</method>
			<method name="public void _init_(edu.stanford.nlp.ie.NERClassifierCombiner ner, boolean verbose)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.ParserConstraint</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>5</rfc>
		<lcom>3</lcom>
		<ca>5</ca>
		<ce>0</ce>
		<npm>3</npm>
		<lcom3>0.75</lcom3>
		<loc>29</loc>
		<dam>0.25</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.333333333333333</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(int start, int end, java.util.regex.Pattern state)">0</method>
			<method name="public void _init_(int start, int end, String pattern)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.semgraph.SemanticGraphFactory$1</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>35</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>33.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.metrics.AbstractEval</name>
		<wmc>18</wmc>
		<dit>1</dit>
		<noc>8</noc>
		<cbo>15</cbo>
		<rfc>33</rfc>
		<lcom>113</lcom>
		<ca>13</ca>
		<ce>2</ce>
		<npm>16</npm>
		<lcom3>0.6515837104072398</lcom3>
		<loc>602</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.25396825396825395</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>31.72222222222222</amc>
		<cc>
			<method name="public double getSentAveF1()">1</method>
			<method name="public void _init_(boolean runningAverages)">0</method>
			<method name="public void _init_(String str, boolean runningAverages)">0</method>
			<method name="public void _init_()">0</method>
			<method name="public void display(boolean verbose, java.io.PrintWriter pw)">1</method>
			<method name="protected static double precision(java.util.Set s1, java.util.Set s2)">4</method>
			<method name="public void evaluate(edu.stanford.nlp.trees.Tree guess, edu.stanford.nlp.trees.Tree gold, java.io.PrintWriter pw)">1</method>
			<method name="public void _init_(String str)">0</method>
			<method name="public double getExactPercent()">1</method>
			<method name="public void evaluate(edu.stanford.nlp.trees.Tree guess, edu.stanford.nlp.trees.Tree gold)">1</method>
			<method name="public void display(boolean verbose)">1</method>
			<method name="public void evaluate(edu.stanford.nlp.trees.Tree guess, edu.stanford.nlp.trees.Tree gold, java.io.PrintWriter pw, double weight)">8</method>
			<method name="public int getNum()">1</method>
			<method name="protected abstract java.util.Set makeObjects(edu.stanford.nlp.trees.Tree)">1</method>
			<method name="public double getEvalbF1()">1</method>
			<method name="public double getLastF1()">1</method>
			<method name="public double getEvalbF1Percent()">1</method>
			<method name="public double getExact()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.Evaluator</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>13</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>13</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract double evaluate(double[])">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.process.TokenizerAdapter</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>1</noc>
		<cbo>2</cbo>
		<rfc>10</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>5</npm>
		<lcom3>0.25</lcom3>
		<loc>71</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.8</amc>
		<cc>
			<method name="public String getNext()">6</method>
			<method name="public volatile Object getNext()">1</method>
			<method name="public void setEolString(String eolString)">2</method>
			<method name="public void _init_(java.io.StreamTokenizer st)">0</method>
			<method name="public boolean isEol(String str)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.ExtractorLetterDigitDash</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>9</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>1.3333333333333333</lcom3>
		<loc>30</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.25</amc>
		<cc>
			<method name="String extract(edu.stanford.nlp.tagger.maxent.History h, edu.stanford.nlp.tagger.maxent.PairsHolder pH)">4</method>
			<method name="public boolean isLocal()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public boolean isDynamic()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.ner.CMMClassifier$Scorer</name>
		<wmc>10</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>32</rfc>
		<lcom>17</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>7</npm>
		<lcom3>0.7916666666666666</lcom3>
		<loc>452</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.2625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>42.6</amc>
		<cc>
			<method name="public double scoreOf(int[] sequence)">1</method>
			<method name="public int length()">1</method>
			<method name="static double[] recenter(double[] x)">2</method>
			<method name="public double scoreOf(int[] tags, int pos)">10</method>
			<method name="public int rightWindow()">1</method>
			<method name="void _init_(java.util.List lineInfos, edu.stanford.nlp.util.Index tagIndex, edu.stanford.nlp.ie.ner.CMMClassifier classifier, int pre, int post, java.util.Set legalTags)">0</method>
			<method name="public double[] scoresOf(int[] tags, int pos)">9</method>
			<method name="void buildTagArray()">2</method>
			<method name="public int[] getPossibleValues(int position)">3</method>
			<method name="public int leftWindow()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.Labeled</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>4</rfc>
		<lcom>6</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>4</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract edu.stanford.nlp.ling.Label label()">1</method>
			<method name="public abstract void setLabel(edu.stanford.nlp.ling.Label)">1</method>
			<method name="public abstract void setLabels(java.util.Collection)">1</method>
			<method name="public abstract java.util.Collection labels()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$20$1</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>6</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>0</npm>
		<lcom3>0.33333333333333326</lcom3>
		<loc>49</loc>
		<dam>0.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>22.0</amc>
		<cc>
			<method name="void initialize()">4</method>
			<method name="void _init_(edu.stanford.nlp.trees.tregex.Relation$20, edu.stanford.nlp.trees.Tree, edu.stanford.nlp.trees.tregex.TregexMatcher)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.Expressions$IfExpression</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>6</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>45</loc>
		<dam>0.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>20.0</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.types.Expression cond, edu.stanford.nlp.ling.tokensregex.types.Expression vt, edu.stanford.nlp.ling.tokensregex.types.Expression vf)">0</method>
			<method name="public transient edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env env, Object[] args)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalRelations$PunctuationGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$BeforeAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.negra.NegraPennTreeNormalizer$2</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>9</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>2</npm>
		<lcom3>1.25</lcom3>
		<loc>45</loc>
		<dam>0.5</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.333333333333334</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.trees.international.negra.NegraPennTreeNormalizer)">0</method>
			<method name="public boolean accept(edu.stanford.nlp.trees.Tree t)">6</method>
			<method name="public volatile boolean accept(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.negra.NegraPennTreeNormalizer$1</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>9</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>2</npm>
		<lcom3>1.25</lcom3>
		<loc>48</loc>
		<dam>0.5</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>14.333333333333334</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.trees.international.negra.NegraPennTreeNormalizer)">0</method>
			<method name="public boolean accept(edu.stanford.nlp.trees.Tree t)">7</method>
			<method name="public volatile boolean accept(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$SequenceMatchResultExtractor</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>6</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>5</ce>
		<npm>4</npm>
		<lcom3>0.11111111111111116</lcom3>
		<loc>67</loc>
		<dam>0.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.0</amc>
		<cc>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.SequenceMatchResult matchResult)">3</method>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.Env env, edu.stanford.nlp.ling.tokensregex.types.Expression result)">0</method>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.Env env, edu.stanford.nlp.ling.tokensregex.types.Expression action, edu.stanford.nlp.ling.tokensregex.types.Expression result)">0</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.Expressions$RegexMatchResultVarExpression</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>15</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>4</npm>
		<lcom3>2.0</lcom3>
		<loc>92</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4166666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>22.0</amc>
		<cc>
			<method name="public transient void _init_(Integer groupid, String[] tags)">0</method>
			<method name="public static edu.stanford.nlp.ling.tokensregex.types.Expressions$RegexMatchResultVarExpression valueOf(String group)">2</method>
			<method name="public transient void _init_(String groupname, String[] tags)">0</method>
			<method name="public transient edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env env, Object[] args)">6</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.Color</name>
		<wmc>5</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>11</rfc>
		<lcom>6</lcom>
		<ca>2</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>0.9318181818181819</lcom3>
		<loc>160</loc>
		<dam>0.09090909090909091</dam>
		<moa>10</moa>
		<mfa>0.8125</mfa>
		<cam>0.5</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>28.8</amc>
		<cc>
			<method name="public static edu.stanford.nlp.util.logging.Color[] values()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static edu.stanford.nlp.util.logging.Color valueOf(String name)">1</method>
			<method name="public String apply(String toColor)">3</method>
			<method name="private void _init_(String, int, String ansiCode)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.TestClassifier$TestSentenceProcessor</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>8</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>4</npm>
		<lcom3>0.3333333333333333</lcom3>
		<loc>34</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.25</amc>
		<cc>
			<method name="public edu.stanford.nlp.tagger.maxent.TestSentence process(java.util.List taggedSentence)">1</method>
			<method name="public edu.stanford.nlp.util.concurrent.ThreadsafeProcessor newInstance()">1</method>
			<method name="public volatile Object process(Object x0)">1</method>
			<method name="public void _init_(edu.stanford.nlp.tagger.maxent.MaxentTagger maxentTagger)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.WordFactory</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>8</rfc>
		<lcom>10</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>5</npm>
		<lcom3>2.0</lcom3>
		<loc>28</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.6</amc>
		<cc>
			<method name="public edu.stanford.nlp.ling.Label newLabel(String word)">1</method>
			<method name="public edu.stanford.nlp.ling.Label newLabel(edu.stanford.nlp.ling.Label oldLabel)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public edu.stanford.nlp.ling.Label newLabel(String word, int options)">1</method>
			<method name="public edu.stanford.nlp.ling.Label newLabelFromString(String word)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.neural.rnn.RNNCoreAnnotations$GoldClass</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseTreebankLanguagePack</name>
		<wmc>34</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>21</cbo>
		<rfc>47</rfc>
		<lcom>513</lcom>
		<ca>9</ca>
		<ce>14</ce>
		<npm>33</npm>
		<lcom3>0.9569377990430622</lcom3>
		<loc>915</loc>
		<dam>0.9473684210526315</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.17575757575757575</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>25.352941176470587</amc>
		<cc>
			<method name="public static edu.stanford.nlp.util.Filter chineseOtherAcceptFilter()">1</method>
			<method name="public char[] labelAnnotationIntroducingCharacters()">1</method>
			<method name="public static edu.stanford.nlp.util.Filter chineseRightQuoteMarkAcceptFilter()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public String[] punctuationWords()">1</method>
			<method name="public String getEncoding()">1</method>
			<method name="public edu.stanford.nlp.trees.HeadFinder typedDependencyHeadFinder()">1</method>
			<method name="public boolean isPunctuationWord(String str)">9</method>
			<method name="public String[] sentenceFinalPunctuationTags()">1</method>
			<method name="public static edu.stanford.nlp.util.Filter chineseDashAcceptFilter()">1</method>
			<method name="public String[] punctuationTags()">1</method>
			<method name="public String[] sentenceFinalPunctuationWords()">1</method>
			<method name="public edu.stanford.nlp.trees.GrammaticalStructureFactory grammaticalStructureFactory()">1</method>
			<method name="public boolean isEvalBIgnoredPunctuationTag(String str)">1</method>
			<method name="public void setTokenizerFactory(edu.stanford.nlp.process.TokenizerFactory tf)">1</method>
			<method name="public String treebankFileExtension()">1</method>
			<method name="public static edu.stanford.nlp.util.Filter chineseRightParenthesisAcceptFilter()">1</method>
			<method name="public boolean isPunctuationTag(String str)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public static edu.stanford.nlp.util.Filter chineseColonAcceptFilter()">1</method>
			<method name="public String[] startSymbols()">1</method>
			<method name="public static edu.stanford.nlp.util.Filter chineseEndSentenceAcceptFilter()">1</method>
			<method name="public edu.stanford.nlp.trees.TreeReaderFactory treeReaderFactory()">1</method>
			<method name="public static edu.stanford.nlp.util.Filter chineseLeftQuoteMarkAcceptFilter()">1</method>
			<method name="public edu.stanford.nlp.trees.GrammaticalStructureFactory grammaticalStructureFactory(edu.stanford.nlp.util.Filter puncFilt)">1</method>
			<method name="public static edu.stanford.nlp.util.Filter chineseDouHaoAcceptFilter()">1</method>
			<method name="public edu.stanford.nlp.trees.HeadFinder headFinder()">1</method>
			<method name="public edu.stanford.nlp.process.TokenizerFactory getTokenizerFactory()">2</method>
			<method name="public static edu.stanford.nlp.util.Filter chineseCommaAcceptFilter()">1</method>
			<method name="public static edu.stanford.nlp.util.Filter chineseParenthesisAcceptFilter()">1</method>
			<method name="public boolean isSentenceFinalPunctuationTag(String str)">1</method>
			<method name="public static edu.stanford.nlp.util.Filter chineseLeftParenthesisAcceptFilter()">1</method>
			<method name="public edu.stanford.nlp.trees.GrammaticalStructureFactory grammaticalStructureFactory(edu.stanford.nlp.util.Filter puncFilt, edu.stanford.nlp.trees.HeadFinder hf)">1</method>
			<method name="public static edu.stanford.nlp.util.Filter chineseQuoteMarkAcceptFilter()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.JodaTimeUtils$5</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>9</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>3</npm>
		<lcom3>1.3333333333333333</lcom3>
		<loc>29</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="public org.joda.time.DateTimeField getField(org.joda.time.Chronology chronology)">1</method>
			<method name="public org.joda.time.DurationFieldType getRangeDurationType()">1</method>
			<method name="public org.joda.time.DurationFieldType getDurationType()">1</method>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.CustomAnnotationSerializer$IntermediateNode</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>20</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.0</amc>
		<cc>
			<method name="void _init_(String docId, int sentIndex, int index, int copy)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.JodaTimeUtils$4</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>15</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="public org.joda.time.DurationField getField(org.joda.time.Chronology chronology)">1</method>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.JodaTimeUtils$3</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>15</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="public org.joda.time.DurationField getField(org.joda.time.Chronology chronology)">1</method>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRuleCreator</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>4</noc>
		<cbo>8</cbo>
		<rfc>11</rfc>
		<lcom>3</lcom>
		<ca>5</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>47</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>14.666666666666666</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule create(edu.stanford.nlp.ling.tokensregex.Env env, java.util.Map attributes)">2</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule create(edu.stanford.nlp.ling.tokensregex.Env env)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.JodaTimeUtils$2</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>15</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="public org.joda.time.DurationField getField(org.joda.time.Chronology chronology)">1</method>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.io.Lexer</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>5</rfc>
		<lcom>10</lcom>
		<ca>4</ca>
		<ce>0</ce>
		<npm>5</npm>
		<lcom3>1.25</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4666666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract void pushBack(int)">1</method>
			<method name="public abstract int yylex()">1</method>
			<method name="public abstract int getYYEOF()">1</method>
			<method name="public abstract String yytext()">1</method>
			<method name="public abstract void yyreset(java.io.Reader)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.ArrayMap</name>
		<wmc>16</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>31</rfc>
		<lcom>0</lcom>
		<ca>7</ca>
		<ce>2</ce>
		<npm>15</npm>
		<lcom3>0.56</lcom3>
		<loc>397</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.6</mfa>
		<cam>0.275</cam>
		<ic>2</ic>
		<cbm>9</cbm>
		<amc>23.5</amc>
		<cc>
			<method name="public void clear()">1</method>
			<method name="public void _init_(java.util.Map m)">0</method>
			<method name="public boolean equals(Object o)">7</method>
			<method name="public void _init_()">0</method>
			<method name="public boolean isEmpty()">2</method>
			<method name="public Object remove(Object key)">6</method>
			<method name="public void _init_(int capacity)">0</method>
			<method name="private void resize()">2</method>
			<method name="public Object put(Object key, Object val)">4</method>
			<method name="public java.util.Set entrySet()">1</method>
			<method name="public Object get(Object key)">5</method>
			<method name="public static edu.stanford.nlp.util.ArrayMap newArrayMap()">1</method>
			<method name="public int size()">1</method>
			<method name="public int hashCode()">3</method>
			<method name="public void _init_(Object[] keys, Object[] values)">0</method>
			<method name="public static edu.stanford.nlp.util.ArrayMap newArrayMap(int capacity)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructure</name>
		<wmc>12</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>24</cbo>
		<rfc>96</rfc>
		<lcom>60</lcom>
		<ca>3</ca>
		<ce>23</ce>
		<npm>8</npm>
		<lcom3>0.9090909090909091</lcom3>
		<loc>720</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.19834710743801653</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>58.833333333333336</amc>
		<cc>
			<method name="private static void AddTreesFromFile(String treeFileName, String encoding, edu.stanford.nlp.trees.Treebank tb)">2</method>
			<method name="public static void main(String[] args)">29</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void _init_(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.HeadFinder hf)">0</method>
			<method name="public void _init_(edu.stanford.nlp.trees.Tree t)">0</method>
			<method name="private static void collapsePrepAndPoss(java.util.Collection list)">7</method>
			<method name="public static edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructure buildCoNLLXGrammaticalStructure(java.util.List tokenFields)">1</method>
			<method name="public static java.util.List readCoNLLXGrammaticalStructureCollection(String fileName)">1</method>
			<method name="public void _init_(java.util.List projectiveDependencies, edu.stanford.nlp.trees.TreeGraphNode root)">0</method>
			<method name="public void _init_(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.util.Filter puncFilter, edu.stanford.nlp.trees.HeadFinder hf)">0</method>
			<method name="public void _init_(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.util.Filter puncFilter)">0</method>
			<method name="protected void collapseDependencies(java.util.List list, boolean CCprocess, boolean includeExtras)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.JodaTimeUtils$9</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>10</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>3</npm>
		<lcom3>1.3333333333333333</lcom3>
		<loc>29</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="public org.joda.time.DateTimeField getField(org.joda.time.Chronology chronology)">1</method>
			<method name="public org.joda.time.DurationFieldType getRangeDurationType()">1</method>
			<method name="public org.joda.time.DurationFieldType getDurationType()">1</method>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.JodaTimeUtils$8</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>9</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>3</npm>
		<lcom3>1.3333333333333333</lcom3>
		<loc>29</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="public org.joda.time.DateTimeField getField(org.joda.time.Chronology chronology)">1</method>
			<method name="public org.joda.time.DurationFieldType getRangeDurationType()">1</method>
			<method name="public org.joda.time.DurationFieldType getDurationType()">1</method>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$NumericComparator</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>10</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>35</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.666666666666666</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="public int compare(Number o1, Number o2)">3</method>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.JodaTimeUtils$7</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>9</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>3</npm>
		<lcom3>1.3333333333333333</lcom3>
		<loc>29</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="public org.joda.time.DateTimeField getField(org.joda.time.Chronology chronology)">1</method>
			<method name="public org.joda.time.DurationFieldType getRangeDurationType()">1</method>
			<method name="public org.joda.time.DurationFieldType getDurationType()">1</method>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.JodaTimeUtils$6</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>9</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>3</npm>
		<lcom3>1.3333333333333333</lcom3>
		<loc>29</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="public org.joda.time.DateTimeField getField(org.joda.time.Chronology chronology)">1</method>
			<method name="public org.joda.time.DurationFieldType getRangeDurationType()">1</method>
			<method name="public org.joda.time.DurationFieldType getDurationType()">1</method>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequencePattern$ConjMatchStateInfo</name>
		<wmc>9</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>21</rfc>
		<lcom>6</lcom>
		<ca>3</ca>
		<ce>3</ce>
		<npm>0</npm>
		<lcom3>0.65625</lcom3>
		<loc>256</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>27.0</amc>
		<cc>
			<method name="void _init_(int x0, int x1, int x2, edu.stanford.nlp.ling.tokensregex.SequencePattern$1 x3)">0</method>
			<method name="static void access$300(edu.stanford.nlp.ling.tokensregex.SequencePattern$ConjMatchStateInfo x0, int x1, int x2, int x3)">1</method>
			<method name="private int[] getAllChildMatchedBids(int index, int bid, int pos)">6</method>
			<method name="private void addChildBid(int i, int bid, int pos)">2</method>
			<method name="private void _init_(int startBid, int childCount, int startPos)">0</method>
			<method name="protected void updateKeepBids(java.util.Set bids)">4</method>
			<method name="static int[] access$400(edu.stanford.nlp.ling.tokensregex.SequencePattern$ConjMatchStateInfo x0, int x1, int x2, int x3)">1</method>
			<method name="private boolean isAllChildMatched()">4</method>
			<method name="private boolean isAllChildMatched(int index, int bid, int pos)">7</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.DeltaIndex$1</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>11</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>0.5555555555555555</lcom3>
		<loc>53</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.5</amc>
		<cc>
			<method name="public boolean hasNext()">3</method>
			<method name="void _init_(edu.stanford.nlp.util.DeltaIndex)">0</method>
			<method name="public void remove()">1</method>
			<method name="public Object next()">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.TwoDimensionalMap</name>
		<wmc>27</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>16</cbo>
		<rfc>61</rfc>
		<lcom>141</lcom>
		<ca>12</ca>
		<ce>6</ce>
		<npm>27</npm>
		<lcom3>0.6153846153846154</lcom3>
		<loc>343</loc>
		<dam>0.75</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.2814814814814815</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>11.555555555555555</amc>
		<cc>
			<method name="public java.util.Map getMap(Object key1)">2</method>
			<method name="public void clear()">1</method>
			<method name="public void remove(Object key1)">1</method>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="public boolean equals(Object o)">3</method>
			<method name="public java.util.Set secondKeySet()">2</method>
			<method name="public int size()">2</method>
			<method name="public void put(Object key1)">1</method>
			<method name="public boolean contains(Object key1, Object key2)">2</method>
			<method name="public static edu.stanford.nlp.util.TwoDimensionalMap hashMap()">1</method>
			<method name="public static edu.stanford.nlp.util.TwoDimensionalMap identityHashMap()">1</method>
			<method name="public String toString()">1</method>
			<method name="public Object remove(Object key1, Object key2)">1</method>
			<method name="public boolean isEmpty()">2</method>
			<method name="public void _init_()">0</method>
			<method name="public static edu.stanford.nlp.util.TwoDimensionalMap treeMap()">1</method>
			<method name="public Object put(Object key1, Object key2, Object value)">1</method>
			<method name="public void _init_(edu.stanford.nlp.util.TwoDimensionalMap tdm)">0</method>
			<method name="public int hashCode()">1</method>
			<method name="public boolean containsKey(Object key1)">1</method>
			<method name="public Object get(Object key1, Object key2)">1</method>
			<method name="public void addAll(edu.stanford.nlp.util.TwoDimensionalMap other, edu.stanford.nlp.util.Function function)">2</method>
			<method name="public void _init_(edu.stanford.nlp.util.MapFactory mf1, edu.stanford.nlp.util.MapFactory mf2)">0</method>
			<method name="public java.util.Iterator valueIterator()">1</method>
			<method name="public java.util.Map get(Object key1)">1</method>
			<method name="public java.util.Set firstKeySet()">1</method>
			<method name="public java.util.Collection values()">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.TwoDimensionalMap$TwoDimensionalMapIterator</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>16</rfc>
		<lcom>7</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>4</npm>
		<lcom3>0.33333333333333337</lcom3>
		<loc>104</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.833333333333334</amc>
		<cc>
			<method name="private void primeNext()">5</method>
			<method name="void _init_(edu.stanford.nlp.util.TwoDimensionalMap map)">0</method>
			<method name="public boolean hasNext()">2</method>
			<method name="public edu.stanford.nlp.util.TwoDimensionalMap$Entry next()">2</method>
			<method name="public void remove()">1</method>
			<method name="public volatile Object next()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.JodaTimeUtils$1</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>15</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="public org.joda.time.DurationField getField(org.joda.time.Chronology chronology)">1</method>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalRelations$PunctuationGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.FastFactoredParser$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.IntCounter$1$1$1</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>15</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>5</npm>
		<lcom3>0.3</lcom3>
		<loc>73</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.833333333333334</amc>
		<cc>
			<method name="public volatile Object setValue(Object x0)">1</method>
			<method name="void _init_(edu.stanford.nlp.stats.IntCounter$1$1)">0</method>
			<method name="public Double setValue(Double value)">1</method>
			<method name="public volatile Object getValue()">1</method>
			<method name="public Double getValue()">1</method>
			<method name="public Object getKey()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.Extractor</name>
		<wmc>16</wmc>
		<dit>1</dit>
		<noc>15</noc>
		<cbo>25</cbo>
		<rfc>33</rfc>
		<lcom>78</lcom>
		<ca>24</ca>
		<ce>3</ce>
		<npm>7</npm>
		<lcom3>0.75</lcom3>
		<loc>257</loc>
		<dam>0.5</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.29464285714285715</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>14.8125</amc>
		<cc>
			<method name="public boolean precondition(String tag)">1</method>
			<method name="static String getParenthesizedArg(String str, int num)">2</method>
			<method name="public void _init_()">0</method>
			<method name="public boolean isLocal()">3</method>
			<method name="String extractLV(edu.stanford.nlp.tagger.maxent.History h, edu.stanford.nlp.tagger.maxent.PairsHolder pH)">4</method>
			<method name="public int rightContext()">3</method>
			<method name="final String extract(edu.stanford.nlp.tagger.maxent.History h)">1</method>
			<method name="public boolean isDynamic()">1</method>
			<method name="String extractLV(edu.stanford.nlp.tagger.maxent.History h, edu.stanford.nlp.tagger.maxent.PairsHolder pH, int bound)">5</method>
			<method name="String extract(edu.stanford.nlp.tagger.maxent.History h, edu.stanford.nlp.tagger.maxent.PairsHolder pH, int bound)">1</method>
			<method name="protected void _init_(int position, boolean isTag)">0</method>
			<method name="String extract(edu.stanford.nlp.tagger.maxent.History h, edu.stanford.nlp.tagger.maxent.PairsHolder pH)">2</method>
			<method name="public int leftContext()">3</method>
			<method name="static int getParenthesizedNum(String str, int num)">1</method>
			<method name="protected void setGlobalHolder(edu.stanford.nlp.tagger.maxent.MaxentTagger tagger)">1</method>
			<method name="public String toString()">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.TreeGraph</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>1</noc>
		<cbo>6</cbo>
		<rfc>29</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>5</ce>
		<npm>8</npm>
		<lcom3>0.6190476190476192</lcom3>
		<loc>111</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.325</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.5</amc>
		<cc>
			<method name="public java.util.Collection getNodes()">1</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="public edu.stanford.nlp.trees.TreeGraphNode getNodeByIndex(int index)">1</method>
			<method name="public void _init_(edu.stanford.nlp.trees.Tree t)">0</method>
			<method name="public edu.stanford.nlp.trees.TreeGraphNode root()">1</method>
			<method name="public void _init_(edu.stanford.nlp.trees.TreeGraphNode root)">0</method>
			<method name="public String toString()">1</method>
			<method name="public void addNodeToIndexMap(int index, edu.stanford.nlp.trees.TreeGraphNode node)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.arabic.ArabicTreeReaderFactory$XFilter</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>8</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>1.5</lcom3>
		<loc>26</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.333333333333333</amc>
		<cc>
			<method name="public boolean accept(edu.stanford.nlp.trees.Tree t)">3</method>
			<method name="public void _init_()">0</method>
			<method name="public volatile boolean accept(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$LBeginAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalRelations$PossessiveModifierGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalRelations$CoordinationGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.IntDependency</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>18</rfc>
		<lcom>0</lcom>
		<ca>6</ca>
		<ce>3</ce>
		<npm>6</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>205</loc>
		<dam>0.2222222222222222</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.3611111111111111</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>27.0</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.IntTaggedWord head, edu.stanford.nlp.parser.lexparser.IntTaggedWord arg, boolean leftHeaded, int distance)">0</method>
			<method name="public String toString(edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex)">2</method>
			<method name="public boolean equals(Object o)">7</method>
			<method name="public int hashCode()">2</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void _init_(int headWord, int headTag, int argWord, int argTag, boolean leftHeaded, int distance)">0</method>
			<method name="public String toString()">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.Redwood$Flag</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>22</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>21</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.9523809523809524</lcom3>
		<loc>89</loc>
		<dam>0.14285714285714285</dam>
		<moa>7</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>19.5</amc>
		<cc>
			<method name="public static edu.stanford.nlp.util.logging.Redwood$Flag[] values()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static edu.stanford.nlp.util.logging.Redwood$Flag valueOf(String name)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$StringMatchedExpressionExtractor</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>9</rfc>
		<lcom>1</lcom>
		<ca>2</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>41</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4666666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.0</amc>
		<cc>
			<method name="public edu.stanford.nlp.ling.tokensregex.MatchedExpression apply(java.util.regex.MatchResult matched)">1</method>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.MatchedExpression$SingleAnnotationExtractor extractor, int group)">0</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.IndexedWord</name>
		<wmc>16</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>17</cbo>
		<rfc>44</rfc>
		<lcom>108</lcom>
		<ca>13</ca>
		<ce>5</ce>
		<npm>15</npm>
		<lcom3>1.0</lcom3>
		<loc>389</loc>
		<dam>0.25</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.21666666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>22.8125</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.ling.CoreLabel w)">0</method>
			<method name="public boolean equals(Object o)">12</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void _init_(edu.stanford.nlp.util.CoreMap w)">0</method>
			<method name="public void _init_(String docID, int sentenceIndex, int index)">0</method>
			<method name="public int compareTo(edu.stanford.nlp.ling.IndexedWord w)">6</method>
			<method name="public volatile int compareTo(Object x0)">1</method>
			<method name="public String toString(String format)">11</method>
			<method name="public void _init_(edu.stanford.nlp.ling.Label w)">0</method>
			<method name="public int hashCode()">5</method>
			<method name="public edu.stanford.nlp.ling.LabelFactory labelFactory()">1</method>
			<method name="public void _init_(String docID, int sentenceIndex, int index, edu.stanford.nlp.ling.CoreLabel label)">0</method>
			<method name="public static edu.stanford.nlp.ling.LabelFactory factory()">1</method>
			<method name="public String toString()">1</method>
			<method name="public static void setPrintFormat(String printFormat)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.SGDWithAdaGradAndFOBOS</name>
		<wmc>25</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>15</cbo>
		<rfc>75</rfc>
		<lcom>240</lcom>
		<ca>1</ca>
		<ce>14</ce>
		<npm>15</npm>
		<lcom3>0.849780701754386</lcom3>
		<loc>1858</loc>
		<dam>0.9210526315789473</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.2962962962962963</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>71.8</amc>
		<cc>
			<method name="public void terminateOnEvalImprovement(boolean toTerminate)">1</method>
			<method name="private double doEvaluation(double[] x)">5</method>
			<method name="protected String getName()">1</method>
			<method name="public void suppressTestPrompt(boolean suppressTestPrompt)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public volatile double[] minimize(edu.stanford.nlp.optimization.Function x0, double x1, double[] x2)">1</method>
			<method name="private double computeLearningRate(int index, double grad)">4</method>
			<method name="public void _init_(double initRate, double lambda, int numPasses, int batchSize, String priorType, double alpha, boolean useAdaDelta, boolean useAdaDiff, double adaGradEps, double adaDeltaRho)">0</method>
			<method name="protected void say(String s)">2</method>
			<method name="public void shutUp()">1</method>
			<method name="protected void sayln(String s)">2</method>
			<method name="private static double pospart(double number)">2</method>
			<method name="private static double getNorm(double[] w)">2</method>
			<method name="public void setTerminateOnEvalImprovementNumOfEpoch(int terminateOnEvalImprovementNumOfEpoch)">1</method>
			<method name="public boolean toContinue(double[] x, double currEval)">4</method>
			<method name="public void _init_(double initRate, double lambda, int numPasses, int batchSize)">0</method>
			<method name="public void setHessSampleSize(int hessSize)">1</method>
			<method name="public double[] minimize(edu.stanford.nlp.optimization.DiffFunction function, double functionTolerance, double[] initial)">1</method>
			<method name="private void updateX(double[] x, int index, double realUpdate)">1</method>
			<method name="private static edu.stanford.nlp.optimization.SGDWithAdaGradAndFOBOS$Prior getPrior(String priorType)">8</method>
			<method name="public void _init_(double initRate, double lambda, int numPasses)">0</method>
			<method name="public volatile double[] minimize(edu.stanford.nlp.optimization.Function x0, double x1, double[] x2, int x3)">1</method>
			<method name="public void terminateOnAvgImprovement(boolean toTerminate, double tolerance)">1</method>
			<method name="public double[] minimize(edu.stanford.nlp.optimization.DiffFunction f, double functionTolerance, double[] initial, int maxIterations)">69</method>
			<method name="public void setEvaluators(int iters, edu.stanford.nlp.optimization.Evaluator[] evaluators)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.structure.RelationMention</name>
		<wmc>31</wmc>
		<dit>0</dit>
		<noc>1</noc>
		<cbo>17</cbo>
		<rfc>71</rfc>
		<lcom>207</lcom>
		<ca>11</ca>
		<ce>8</ce>
		<npm>29</npm>
		<lcom3>0.8380952380952381</lcom3>
		<loc>709</loc>
		<dam>0.7142857142857143</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.13111111111111112</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>21.64516129032258</amc>
		<cc>
			<method name="public edu.stanford.nlp.ie.machinereading.structure.ExtractionObject getArg(int argpos)">1</method>
			<method name="public boolean equals(Object o)">13</method>
			<method name="public void setArgs(java.util.List args)">1</method>
			<method name="public void addArg(edu.stanford.nlp.ie.machinereading.structure.ExtractionObject a)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public boolean replaceGoldArgsWithPredicted(java.util.List predictedMentions)">5</method>
			<method name="public boolean argsMatch(edu.stanford.nlp.ie.machinereading.structure.RelationMention rel)">1</method>
			<method name="public java.util.List getEntityMentionArgs()">2</method>
			<method name="public java.util.List getArgs()">1</method>
			<method name="public java.util.List getArgNames()">1</method>
			<method name="public boolean argsMatch(java.util.List inputArgs)">4</method>
			<method name="public int getLastSyntacticHeadPosition()">3</method>
			<method name="public transient void _init_(String objectId, edu.stanford.nlp.util.CoreMap sentence, edu.stanford.nlp.ie.machinereading.structure.Span span, String type, String subtype, edu.stanford.nlp.ie.machinereading.structure.ExtractionObject[] args)">0</method>
			<method name="public void removeArgument(edu.stanford.nlp.ie.machinereading.structure.ExtractionObject argToRemove, boolean removeParent)">1</method>
			<method name="public static synchronized String makeUniqueId()">1</method>
			<method name="public String toString()">6</method>
			<method name="public void _init_(String objectId, edu.stanford.nlp.util.CoreMap sentence, edu.stanford.nlp.ie.machinereading.structure.Span span, String type, String subtype, java.util.List args, java.util.List argNames)">0</method>
			<method name="public boolean printableObject(double beam)">1</method>
			<method name="public String getSignature()">1</method>
			<method name="public static java.util.Collection filterUnrelatedRelations(java.util.Collection relationMentions)">2</method>
			<method name="public static transient edu.stanford.nlp.ie.machinereading.structure.RelationMention createUnrelatedRelation(edu.stanford.nlp.ie.machinereading.structure.RelationMentionFactory factory, edu.stanford.nlp.ie.machinereading.structure.ExtractionObject[] args)">1</method>
			<method name="public transient boolean argsMatch(edu.stanford.nlp.ie.machinereading.structure.ExtractionObject[] inputArgs)">1</method>
			<method name="private static transient edu.stanford.nlp.ie.machinereading.structure.RelationMention createUnrelatedRelation(edu.stanford.nlp.ie.machinereading.structure.RelationMentionFactory factory, String type, edu.stanford.nlp.ie.machinereading.structure.ExtractionObject[] args)">1</method>
			<method name="public int getFirstSyntacticHeadPosition()">3</method>
			<method name="public void removeArguments(java.util.Set argsToRemove, boolean removeParent)">5</method>
			<method name="public boolean isNegativeRelation()">1</method>
			<method name="public int hashCode()">4</method>
			<method name="public static boolean isUnrelatedLabel(String label)">1</method>
			<method name="public void setSignature(String s)">1</method>
			<method name="public void setArgNames(java.util.List argNames)">1</method>
			<method name="public void _init_(String objectId, edu.stanford.nlp.util.CoreMap sentence, edu.stanford.nlp.ie.machinereading.structure.Span span, String type, String subtype, java.util.List args)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$IDAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.tsurgeon.AdjoinToHeadNode</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>8</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>32</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.0</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.trees.tregex.tsurgeon.AuxiliaryTree t, edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern p)">0</method>
			<method name="public edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.tregex.TregexMatcher m)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.Counters$NaturalComparator</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>5</rfc>
		<lcom>3</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>18</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.0</amc>
		<cc>
			<method name="public int compare(Object o1, Object o2)">2</method>
			<method name="public void _init_()">0</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceRelationMentionArgument</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>4</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="public void _init_(String role, edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEntityMention content)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalRelations</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>17</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>2</npm>
		<lcom3>0.9878787878787879</lcom3>
		<loc>1273</loc>
		<dam>0.03636363636363636</dam>
		<moa>54</moa>
		<mfa>0.0</mfa>
		<cam>0.3333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>303.5</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static java.util.List values()">1</method>
			<method name="public static edu.stanford.nlp.trees.GrammaticalRelation valueOf(String s)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Iterables$4$1</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>8</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>3</npm>
		<lcom3>0.16666666666666666</lcom3>
		<loc>46</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.0</amc>
		<cc>
			<method name="public boolean hasNext()">3</method>
			<method name="public void remove()">1</method>
			<method name="public Object next()">1</method>
			<method name="void _init_(edu.stanford.nlp.util.Iterables$4)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.SimpleConstituent$LabelFactoryHolder</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>0</npm>
		<lcom3>1.0</lcom3>
		<loc>12</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.5</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.HebrewTreebankParserParams</name>
		<wmc>14</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>14</cbo>
		<rfc>26</rfc>
		<lcom>85</lcom>
		<ca>1</ca>
		<ce>13</ce>
		<npm>12</npm>
		<lcom3>0.9487179487179488</lcom3>
		<loc>163</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.38461538461538464</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.428571428571429</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public edu.stanford.nlp.trees.MemoryTreebank memoryTreebank()">1</method>
			<method name="public edu.stanford.nlp.trees.HeadFinder typedDependencyHeadFinder()">1</method>
			<method name="public edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.Tree root)">1</method>
			<method name="public edu.stanford.nlp.trees.TreeReaderFactory treeReaderFactory()">1</method>
			<method name="public String[] sisterSplitters()">1</method>
			<method name="public java.util.List defaultTestSentence()">1</method>
			<method name="protected void _init_(edu.stanford.nlp.trees.TreebankLanguagePack tlp)">0</method>
			<method name="public edu.stanford.nlp.trees.HeadFinder headFinder()">1</method>
			<method name="public edu.stanford.nlp.trees.TreeTransformer collinizer()">1</method>
			<method name="public edu.stanford.nlp.trees.TreeTransformer collinizerEvalb()">1</method>
			<method name="public edu.stanford.nlp.trees.DiskTreebank diskTreebank()">1</method>
			<method name="public void display()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.QNMinimizer$QNInfo</name>
		<wmc>20</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>40</rfc>
		<lcom>0</lcom>
		<ca>4</ca>
		<ce>7</ce>
		<npm>15</npm>
		<lcom3>0.6081871345029239</lcom3>
		<loc>702</loc>
		<dam>0.6666666666666666</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.25</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>33.65</amc>
		<cc>
			<method name="static int access$1402(edu.stanford.nlp.optimization.QNMinimizer$QNInfo x0, int x1)">1</method>
			<method name="public void clear()">1</method>
			<method name="public double[] applyInitialHessian(double[] x)">7</method>
			<method name="public void setHistory(java.util.List sList, java.util.List yList)">2</method>
			<method name="public void _init_(edu.stanford.nlp.optimization.QNMinimizer, int size)">0</method>
			<method name="public void _init_(edu.stanford.nlp.optimization.QNMinimizer)">0</method>
			<method name="static java.util.List access$1100(edu.stanford.nlp.optimization.QNMinimizer$QNInfo x0)">1</method>
			<method name="public double[] getY(int ind)">1</method>
			<method name="public double[] getS(int ind)">1</method>
			<method name="public void useScalarScaling()">1</method>
			<method name="public int size()">1</method>
			<method name="public void useDiagonalScaling()">1</method>
			<method name="public int update(double[] newS, double[] newY, double yy, double sy, double sg, double step)">18</method>
			<method name="public double getRho(int ind)">1</method>
			<method name="static int access$1400(edu.stanford.nlp.optimization.QNMinimizer$QNInfo x0)">1</method>
			<method name="static java.util.List access$1200(edu.stanford.nlp.optimization.QNMinimizer$QNInfo x0)">1</method>
			<method name="public void _init_(edu.stanford.nlp.optimization.QNMinimizer, java.util.List sList, java.util.List yList)">0</method>
			<method name="public int update(double[] newX, double[] x, double[] newGrad, double[] grad, double step)">1</method>
			<method name="static java.util.List access$1300(edu.stanford.nlp.optimization.QNMinimizer$QNInfo x0)">1</method>
			<method name="public void free()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.neural.Embedding</name>
		<wmc>20</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>45</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>16</npm>
		<lcom3>0.9473684210526315</lcom3>
		<loc>550</loc>
		<dam>0.125</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.40789473684210525</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>25.7</amc>
		<cc>
			<method name="public void _init_(String wordVectorFile, int embeddingSize)">0</method>
			<method name="public void _init_(String wordFile, String vectorFile, int embeddingSize)">0</method>
			<method name="public org.ejml.simple.SimpleMatrix get(String word)">2</method>
			<method name="public org.ejml.simple.SimpleMatrix getStartWordVector()">1</method>
			<method name="public java.util.Set keySet()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public java.util.Map getWordVectors()">1</method>
			<method name="private void loadWordVectors(String wordFile, String vectorFile)">13</method>
			<method name="public java.util.Set entrySet()">1</method>
			<method name="public void _init_(java.util.Map wordVectors)">0</method>
			<method name="public int size()">1</method>
			<method name="public int getEmbeddingSize()">1</method>
			<method name="public void _init_(String wordVectorFile)">0</method>
			<method name="private int getEmbeddingSize(java.util.Map wordVectors)">6</method>
			<method name="public void _init_(String wordFile, String vectorFile)">0</method>
			<method name="public org.ejml.simple.SimpleMatrix getEndWordVector()">1</method>
			<method name="private void loadWordVectors(String wordVectorFile)">13</method>
			<method name="public void setWordVectors(java.util.Map wordVectors)">1</method>
			<method name="public org.ejml.simple.SimpleMatrix getUnknownWordVector()">1</method>
			<method name="public java.util.Collection values()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.AbstractCachingDiffFunction</name>
		<wmc>13</wmc>
		<dit>1</dit>
		<noc>11</noc>
		<cbo>16</cbo>
		<rfc>42</rfc>
		<lcom>56</lcom>
		<ca>14</ca>
		<ce>2</ce>
		<npm>10</npm>
		<lcom3>0.75</lcom3>
		<loc>427</loc>
		<dam>0.6</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.48717948717948717</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>31.46153846153846</amc>
		<cc>
			<method name="public double[] derivativeAt(double[] x)">1</method>
			<method name="public void ensure(double[] x)">4</method>
			<method name="public boolean gradientCheck()">1</method>
			<method name="public double[] getDerivative()">1</method>
			<method name="protected static void copy(double[] copy, double[] orig)">1</method>
			<method name="protected abstract void calculate(double[])">1</method>
			<method name="public void _init_()">0</method>
			<method name="public double lastValue()">1</method>
			<method name="public boolean gradientCheck(int numOfChecks, int numOfRandomChecks, double[] x)">14</method>
			<method name="public double valueAt(double[] x)">1</method>
			<method name="public double[] randomInitial()">2</method>
			<method name="public double[] initial()">1</method>
			<method name="protected void clearCache()">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.TreeReader</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>35</cbo>
		<rfc>2</rfc>
		<lcom>1</lcom>
		<ca>35</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>2</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract void close()">1</method>
			<method name="public abstract edu.stanford.nlp.trees.Tree readTree()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.QNMinimizer$QNInfo$ZeroGradient</name>
		<wmc>1</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>9</loc>
		<dam>0.5</dam>
		<moa>1</moa>
		<mfa>1.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.optimization.QNMinimizer$QNInfo)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$MorphoCaseAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.crf.CRFFeatureExporter</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>38</rfc>
		<lcom>13</lcom>
		<ca>1</ca>
		<ce>10</ce>
		<npm>4</npm>
		<lcom3>0.38888888888888884</lcom3>
		<loc>348</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.2708333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>48.285714285714285</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.ie.crf.CRFClassifier classifier)">0</method>
			<method name="public void printFeatures(String exportFile, int[][][][] docsData, int[][] labels)">5</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void printFeatures(String exportFile, java.util.Collection documents)">2</method>
			<method name="private String getFeatureString(java.util.List document)">5</method>
			<method name="private static String ubPrefixFeatureString(String feat)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.UnnamedConcreteDependency$DependencyFactoryHolder</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>0</npm>
		<lcom3>0.5</lcom3>
		<loc>15</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.6666666666666665</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="static edu.stanford.nlp.trees.DependencyFactory access$000()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.sentiment.SentimentCoreAnnotations$AnnotatedTree</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.parser.TokenMgrError</name>
		<wmc>6</wmc>
		<dit>3</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>22</rfc>
		<lcom>15</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>4</npm>
		<lcom3>1.1333333333333333</lcom3>
		<loc>185</loc>
		<dam>0.16666666666666666</dam>
		<moa>0</moa>
		<mfa>0.875</mfa>
		<cam>0.5</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>28.833333333333332</amc>
		<cc>
			<method name="public void _init_(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar, int reason)">0</method>
			<method name="public void _init_()">0</method>
			<method name="protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar)">2</method>
			<method name="public String getMessage()">1</method>
			<method name="protected static final String addEscapes(String str)">14</method>
			<method name="public void _init_(String message, int reason)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.Constants</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>111</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>24.5</amc>
		<cc>
			<method name="public static void printConstants(java.util.logging.Logger logger)">1</method>
			<method name="protected void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Filters$DisjFilter</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>13</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>4</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>52</loc>
		<dam>0.5</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.5</amc>
		<cc>
			<method name="public void _init_(java.util.List filters)">0</method>
			<method name="public void addFilter(edu.stanford.nlp.util.Filter filter)">1</method>
			<method name="public boolean accept(Object obj)">2</method>
			<method name="public transient void _init_(edu.stanford.nlp.util.Filter[] filters)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.TimeExpression</name>
		<wmc>9</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>21</cbo>
		<rfc>19</rfc>
		<lcom>32</lcom>
		<ca>8</ca>
		<ce>14</ce>
		<npm>7</npm>
		<lcom3>0.9375</lcom3>
		<loc>123</loc>
		<dam>0.5</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.2361111111111111</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.444444444444445</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.util.Interval charOffsets, edu.stanford.nlp.util.Interval tokenOffsets, edu.stanford.nlp.util.Function temporalFunc, double priority, double weight)">0</method>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.MatchedExpression expr)">0</method>
			<method name="private static edu.stanford.nlp.ling.tokensregex.MatchedExpression$SingleAnnotationExtractor getSingleAnnotationExtractor(edu.stanford.nlp.util.Function temporalFunc)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public edu.stanford.nlp.time.SUTime$Temporal getTemporal()">3</method>
			<method name="public boolean extractAnnotation(edu.stanford.nlp.ling.tokensregex.Env env, edu.stanford.nlp.util.CoreMap sourceAnnotation)">2</method>
			<method name="public boolean addMod()">3</method>
			<method name="public void setTemporal(edu.stanford.nlp.time.SUTime$Temporal temporal)">1</method>
			<method name="public boolean extractAnnotation(edu.stanford.nlp.ling.tokensregex.Env env, java.util.List source)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.CoNLL2011DocumentReader$CorefMentionAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.TreeFunctions</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>15</cbo>
		<rfc>18</rfc>
		<lcom>10</lcom>
		<ca>2</ca>
		<ce>13</ce>
		<npm>4</npm>
		<lcom3>2.0</lcom3>
		<loc>74</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.8</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public static edu.stanford.nlp.util.Function getLabeledTreeToStringLabeledTreeFunction()">1</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="public static edu.stanford.nlp.util.Function getLabeledToDescriptiveCoreLabelTreeFunction()">1</method>
			<method name="public static edu.stanford.nlp.util.Function getLabeledTreeToCategoryWordTagTreeFunction()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.GrammaticalRelation$GrammaticalRelationAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>110</noc>
		<cbo>111</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>110</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.pascal.Alignment</name>
		<wmc>9</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>32</rfc>
		<lcom>4</lcom>
		<ca>10</ca>
		<ce>0</ce>
		<npm>8</npm>
		<lcom3>0.4375</lcom3>
		<loc>290</loc>
		<dam>0.25</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.25</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>30.77777777777778</amc>
		<cc>
			<method name="public void print()">1</method>
			<method name="public void serialize(java.io.PrintWriter writer)">2</method>
			<method name="public boolean equals(Object o)">6</method>
			<method name="public int hashCode()">2</method>
			<method name="public String toString(String prefix)">6</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void _init_(java.io.BufferedReader reader)">0</method>
			<method name="public void _init_(char[] longForm, char[] shortForm, int[] pointers)">0</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.sievepasses.NameMatchPrecise</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>10</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.UniformPrior</name>
		<wmc>10</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>14</rfc>
		<lcom>39</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>10</npm>
		<lcom3>0.9629629629629629</lcom3>
		<loc>87</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.36666666666666664</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.1</amc>
		<cc>
			<method name="public double scoreOf(int[] sequence, int position)">1</method>
			<method name="public int length()">1</method>
			<method name="public double scoreOf(int[] sequence)">1</method>
			<method name="public int rightWindow()">1</method>
			<method name="public double[] scoresOf(int[] sequence, int position)">2</method>
			<method name="public void setInitialSequence(int[] sequence)">1</method>
			<method name="public int[] getPossibleValues(int position)">1</method>
			<method name="public void updateSequenceElement(int[] sequence, int pos, int oldVal)">1</method>
			<method name="public void _init_(String backgroundSymbol, edu.stanford.nlp.util.Index classIndex, java.util.List doc)">0</method>
			<method name="public int leftWindow()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.tsurgeon.Node</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>7</rfc>
		<lcom>21</lcom>
		<ca>3</ca>
		<ce>0</ce>
		<npm>7</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5238095238095238</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract edu.stanford.nlp.trees.tregex.tsurgeon.Node jjtGetParent()">1</method>
			<method name="public abstract edu.stanford.nlp.trees.tregex.tsurgeon.Node jjtGetChild(int)">1</method>
			<method name="public abstract void jjtSetParent(edu.stanford.nlp.trees.tregex.tsurgeon.Node)">1</method>
			<method name="public abstract void jjtAddChild(edu.stanford.nlp.trees.tregex.tsurgeon.Node, int)">1</method>
			<method name="public abstract void jjtOpen()">1</method>
			<method name="public abstract void jjtClose()">1</method>
			<method name="public abstract int jjtGetNumChildren()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.OutsideRuleFilter$FA</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>9</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>7</npm>
		<lcom3>0.7083333333333334</lcom3>
		<loc>143</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5714285714285714</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.285714285714285</amc>
		<cc>
			<method name="public void input(int symbol)">3</method>
			<method name="public void advance()">4</method>
			<method name="public void _init_(int numStates, int numSymbols)">0</method>
			<method name="public void setLoopState(int state, boolean loops)">1</method>
			<method name="public boolean isAccepting()">1</method>
			<method name="public void setTransition(int state, int symbol, int result)">1</method>
			<method name="public void init()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMatcher</name>
		<wmc>12</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>12</cbo>
		<rfc>54</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>12</ce>
		<npm>3</npm>
		<lcom3>0.5194805194805195</lcom3>
		<loc>544</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.18518518518518517</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>43.75</amc>
		<cc>
			<method name="private void commitVariableGroups(String value)">2</method>
			<method name="public boolean matches()">7</method>
			<method name="private void removeNamedNodes()">4</method>
			<method name="public void _init_(edu.stanford.nlp.trees.tregex.DescriptionPattern n, edu.stanford.nlp.trees.Tree root, edu.stanford.nlp.trees.Tree tree, java.util.IdentityHashMap nodesToParents, java.util.Map namesToNodes, edu.stanford.nlp.trees.tregex.VariableStrings variableStrings, edu.stanford.nlp.trees.HeadFinder headFinder)">0</method>
			<method name="private void goToNextTreeNodeMatch()">20</method>
			<method name="private void resetChild()">3</method>
			<method name="private boolean matchChild()">6</method>
			<method name="void resetChildIter()">2</method>
			<method name="private void commitVariableGroups(java.util.regex.Matcher m)">2</method>
			<method name="boolean getChangesVariables()">1</method>
			<method name="public edu.stanford.nlp.trees.Tree getMatch()">1</method>
			<method name="private void decommitVariableGroups()">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$UnbrokenCategoryPrecedes$1</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>18</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>1</npm>
		<lcom3>0.5333333333333333</lcom3>
		<loc>149</loc>
		<dam>0.4</dam>
		<moa>4</moa>
		<mfa>0.0</mfa>
		<cam>0.45</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>35.0</amc>
		<cc>
			<method name="public void initialize()">1</method>
			<method name="void advance()">2</method>
			<method name="private void initializeHelper(java.util.Stack stack, edu.stanford.nlp.trees.Tree node, edu.stanford.nlp.trees.Tree root)">9</method>
			<method name="void _init_(edu.stanford.nlp.trees.tregex.Relation$UnbrokenCategoryPrecedes, edu.stanford.nlp.trees.Tree, edu.stanford.nlp.trees.tregex.TregexMatcher)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.negra.NegraPennTreeNormalizer</name>
		<wmc>14</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>12</cbo>
		<rfc>65</rfc>
		<lcom>51</lcom>
		<ca>3</ca>
		<ce>11</ce>
		<npm>10</npm>
		<lcom3>0.8531468531468531</lcom3>
		<loc>472</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.2755102040816326</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>31.928571428571427</amc>
		<cc>
			<method name="public edu.stanford.nlp.trees.Tree normalizeWholeTree(edu.stanford.nlp.trees.Tree tree, edu.stanford.nlp.trees.TreeFactory tf)">11</method>
			<method name="private void insertNPinPP(edu.stanford.nlp.trees.Tree t)">7</method>
			<method name="public void _init_()">0</method>
			<method name="public boolean getInsertNPinPP()">1</method>
			<method name="public String normalizeTerminal(String leaf)">1</method>
			<method name="public String nonUnaryRootSymbol()">1</method>
			<method name="private void insertNPinPPall(edu.stanford.nlp.trees.Tree t)">2</method>
			<method name="public void setInsertNPinPP(boolean b)">1</method>
			<method name="public String rootSymbol()">1</method>
			<method name="public String normalizeNonterminal(String category)">3</method>
			<method name="protected String cleanUpLabel(String label)">3</method>
			<method name="private edu.stanford.nlp.trees.Tree fixNonUnaryRoot(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.TreeFactory tf)">4</method>
			<method name="public void _init_(edu.stanford.nlp.trees.TreebankLanguagePack tlp, int nodeCleanup)">0</method>
			<method name="public void _init_(edu.stanford.nlp.trees.TreebankLanguagePack tlp)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.ExtractorUCase</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>7</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>1.3333333333333333</lcom3>
		<loc>24</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.75</amc>
		<cc>
			<method name="String extract(edu.stanford.nlp.tagger.maxent.History h, edu.stanford.nlp.tagger.maxent.PairsHolder pH)">2</method>
			<method name="public boolean isLocal()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public boolean isDynamic()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Quadruple</name>
		<wmc>17</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>28</rfc>
		<lcom>28</lcom>
		<ca>4</ca>
		<ce>5</ce>
		<npm>17</npm>
		<lcom3>0.5125</lcom3>
		<loc>303</loc>
		<dam>0.2</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3176470588235294</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>16.529411764705884</amc>
		<cc>
			<method name="public java.util.List asList()">1</method>
			<method name="public int compareTo(edu.stanford.nlp.util.Quadruple another)">4</method>
			<method name="public boolean equals(Object o)">15</method>
			<method name="public Object first()">1</method>
			<method name="public void setFirst(Object o)">1</method>
			<method name="public Object fourth()">1</method>
			<method name="public static edu.stanford.nlp.util.Quadruple makeQuadruple(Object t1, Object t2, Object t3, Object t4)">1</method>
			<method name="public void _init_(Object first, Object second, Object third, Object fourth)">0</method>
			<method name="public void prettyLog(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels channels, String description)">1</method>
			<method name="public void setFourth(Object o)">1</method>
			<method name="public volatile int compareTo(Object x0)">1</method>
			<method name="public void setSecond(Object o)">1</method>
			<method name="public int hashCode()">5</method>
			<method name="public void setThird(Object o)">1</method>
			<method name="public Object second()">1</method>
			<method name="public String toString()">1</method>
			<method name="public Object third()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.Redwood$Util</name>
		<wmc>35</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>14</cbo>
		<rfc>84</rfc>
		<lcom>579</lcom>
		<ca>7</ca>
		<ce>10</ce>
		<npm>32</npm>
		<lcom3>0.9897058823529411</lcom3>
		<loc>468</loc>
		<dam>0.0</dam>
		<moa>20</moa>
		<mfa>0.0</mfa>
		<cam>0.18137254901960784</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.8</amc>
		<cc>
			<method name="private static transient Object[] revConcat(Object[] B, Object[] A)">1</method>
			<method name="public static transient edu.stanford.nlp.util.logging.Redwood$RedwoodChannels channels(Object[] channels)">1</method>
			<method name="public static void endTrack(String check)">1</method>
			<method name="static Object[] access$800(Object[] x0, Object[] x1)">1</method>
			<method name="public static void printChannels(int width)">2</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static RuntimeException fail(Object msg)">4</method>
			<method name="public static void startThreads(String title)">1</method>
			<method name="public static void endTrack()">1</method>
			<method name="public static transient void fatal(Object[] objs)">1</method>
			<method name="public static void threadAndRun(String title, Iterable runnables, int numThreads)">5</method>
			<method name="public static void prettyLog(String description, Object obj)">1</method>
			<method name="public static void threadAndRun(Iterable runnables, int numThreads)">1</method>
			<method name="public static transient void debug(Object[] objs)">1</method>
			<method name="public static void forceTrack(String title)">1</method>
			<method name="public static void threadAndRun(String title, Iterable runnables)">1</method>
			<method name="public static void endThreads(String check)">1</method>
			<method name="public static transient void err(Object[] objs)">1</method>
			<method name="public static transient void logf(String format, Object[] args)">1</method>
			<method name="public static void finishThread()">1</method>
			<method name="public static void endTracksUntil(String check)">3</method>
			<method name="public void _init_()">0</method>
			<method name="public static java.util.ArrayList thread(String title, Iterable runnables)">2</method>
			<method name="public static void println(Object o)">1</method>
			<method name="public static void exit(int exitCode)">1</method>
			<method name="public static void endTracksTo(String check)">1</method>
			<method name="public static void prettyLog(Object obj)">1</method>
			<method name="public static RuntimeException fail()">1</method>
			<method name="public static void exit()">1</method>
			<method name="public static transient void warn(Object[] objs)">1</method>
			<method name="public static void threadAndRun(Iterable runnables)">1</method>
			<method name="public static transient void log(Object[] objs)">1</method>
			<method name="public static java.util.ArrayList thread(Iterable runnables)">1</method>
			<method name="public static transient void startTrack(Object[] objs)">1</method>
			<method name="public static void endTrackIfOpen(String check)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.MaxentTagger$SentenceTaggingProcessor</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>6</rfc>
		<lcom>4</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>0.3333333333333333</lcom3>
		<loc>30</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="public edu.stanford.nlp.util.concurrent.ThreadsafeProcessor newInstance()">1</method>
			<method name="public volatile Object process(Object x0)">1</method>
			<method name="void _init_(edu.stanford.nlp.tagger.maxent.MaxentTagger maxentTagger, boolean outputLemmas)">0</method>
			<method name="public java.util.List process(java.util.List sentence)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.CleanXmlAnnotator</name>
		<wmc>21</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>18</cbo>
		<rfc>103</rfc>
		<lcom>174</lcom>
		<ca>1</ca>
		<ce>17</ce>
		<npm>16</npm>
		<lcom3>0.8982142857142857</lcom3>
		<loc>1523</loc>
		<dam>0.5357142857142857</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.235</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>70.19047619047619</amc>
		<cc>
			<method name="private java.util.regex.Pattern toCaseInsensitivePattern(String tags)">2</method>
			<method name="public void setSsplitDiscardTokensMatcher(String tags)">1</method>
			<method name="public void setDiscourseTags(String utteranceTurnTags, String speakerTags)">1</method>
			<method name="public void setDocAnnotationPatterns(String conf)">1</method>
			<method name="public void setTokenAnnotationPatterns(String conf)">1</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public java.util.Set requires()">1</method>
			<method name="public void setSingleSentenceTagMatcher(String tags)">1</method>
			<method name="private void addAnnotationPatterns(edu.stanford.nlp.util.CollectionValuedMap annotationPatterns, String conf, boolean attrOnly)">7</method>
			<method name="public java.util.Set requirementsSatisfied()">1</method>
			<method name="public java.util.List process(edu.stanford.nlp.pipeline.Annotation annotation, java.util.List tokens)">82</method>
			<method name="public void setDocIdTagMatcher(String docIdTags)">1</method>
			<method name="private String tokensToString(edu.stanford.nlp.pipeline.Annotation annotation, java.util.List tokens)">4</method>
			<method name="public java.util.List process(java.util.List tokens)">1</method>
			<method name="public void setSectionTagMatcher(String sectionTags)">1</method>
			<method name="public void setDocTypeTagMatcher(String docTypeTags)">1</method>
			<method name="public void annotate(edu.stanford.nlp.pipeline.Annotation annotation)">2</method>
			<method name="public void _init_(String xmlTagsToRemove, String sentenceEndingTags, String dateTags, boolean allowFlawedXml)">0</method>
			<method name="public void setSectionAnnotationPatterns(String conf)">1</method>
			<method name="private java.util.Set annotateWithTag(edu.stanford.nlp.pipeline.Annotation annotation, edu.stanford.nlp.util.CoreMap cm, edu.stanford.nlp.util.XMLUtils$XMLTag tag, edu.stanford.nlp.util.CollectionValuedMap annotationPatterns, java.util.Map savedTokens, java.util.Collection toAnnotate, java.util.Map savedTokenAnnotations)">15</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$AuthorAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.ErasureUtils</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>67</cbo>
		<rfc>12</rfc>
		<lcom>15</lcom>
		<ca>67</ca>
		<ce>0</ce>
		<npm>5</npm>
		<lcom3>2.0</lcom3>
		<loc>44</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2222222222222222</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.333333333333333</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public static java.util.List sortedIfPossible(java.util.Collection collection)">1</method>
			<method name="public static Object[] mkTArray(Class klass, int size)">1</method>
			<method name="public static Object[][] mkT2DArray(Class klass, int[] dim)">2</method>
			<method name="public static Object uncheckedCast(Object o)">1</method>
			<method name="public static void noop(Object o)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$NumericCompositeValueAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.structure.MachineReadingAnnotations$GenderAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunctionWithDropout$1</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>10</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>0.3333333333333333</lcom3>
		<loc>31</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.5</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunctionWithDropout)">0</method>
			<method name="public edu.stanford.nlp.util.concurrent.ThreadsafeProcessor newInstance()">1</method>
			<method name="public volatile Object process(Object x0)">1</method>
			<method name="public edu.stanford.nlp.util.Quadruple process(edu.stanford.nlp.util.Pair docIndexUnsup)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.ValuedInterval</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>0.5</lcom3>
		<loc>20</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.0</amc>
		<cc>
			<method name="public edu.stanford.nlp.util.Interval getInterval()">1</method>
			<method name="public void _init_(Object value, edu.stanford.nlp.util.Interval interval)">0</method>
			<method name="public Object getValue()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.CollectionFactory$SizedArrayListFactory</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>6</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>3</npm>
		<lcom3>1.0</lcom3>
		<loc>22</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.666666666666667</amc>
		<cc>
			<method name="public void _init_(int size)">0</method>
			<method name="public java.util.Collection newCollection()">1</method>
			<method name="public java.util.Collection newEmptyCollection()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.WordTag$LabelFactoryHolder</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>0.5</lcom3>
		<loc>14</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.3333333333333335</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="static edu.stanford.nlp.ling.LabelFactory access$000()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$FemaleGazAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.structure.EntityMention</name>
		<wmc>25</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>21</cbo>
		<rfc>44</rfc>
		<lcom>150</lcom>
		<ca>15</ca>
		<ce>7</ce>
		<npm>24</npm>
		<lcom3>0.8333333333333334</lcom3>
		<loc>567</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.17592592592592593</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>21.4</amc>
		<cc>
			<method name="public edu.stanford.nlp.trees.Tree getSyntacticHeadTree()">1</method>
			<method name="public boolean headIncludes(edu.stanford.nlp.ie.machinereading.structure.EntityMention otherEnt, boolean useSubType)">14</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void setCorefID(String id)">1</method>
			<method name="public int getHeadTokenEnd()">1</method>
			<method name="public String getMentionType()">1</method>
			<method name="public edu.stanford.nlp.ie.machinereading.structure.Span getHead()">1</method>
			<method name="public boolean equals(Object other)">2</method>
			<method name="public int getSyntacticHeadTokenPosition()">1</method>
			<method name="public boolean equals(edu.stanford.nlp.ie.machinereading.structure.EntityMention otherEnt, boolean useSubType)">3</method>
			<method name="public boolean textEquals(edu.stanford.nlp.ie.machinereading.structure.EntityMention otherEnt)">10</method>
			<method name="public static void sortByHeadSpan(java.util.List mentions)">1</method>
			<method name="public int hashCode()">4</method>
			<method name="public String getValue()">3</method>
			<method name="public int getHeadTokenStart()">1</method>
			<method name="public void setNormalizedName(String n)">1</method>
			<method name="public void _init_(String objectId, edu.stanford.nlp.util.CoreMap sentence, edu.stanford.nlp.ie.machinereading.structure.Span extentSpan, edu.stanford.nlp.ie.machinereading.structure.Span headSpan, String type, String subtype, String mentionType)">0</method>
			<method name="public static synchronized String makeUniqueId()">1</method>
			<method name="public String getNormalizedName()">1</method>
			<method name="public String getCorefID()">1</method>
			<method name="public void setHeadTokenPosition(int i)">1</method>
			<method name="public String toString()">10</method>
			<method name="public boolean labelEquals(edu.stanford.nlp.ie.machinereading.structure.EntityMention otherEnt, boolean useSubType)">12</method>
			<method name="public void setHeadTokenSpan(edu.stanford.nlp.ie.machinereading.structure.Span s)">1</method>
			<method name="public edu.stanford.nlp.ling.CoreLabel getSyntacticHeadToken()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.TokensRegexNERAnnotator$1</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>28</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>26.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.sievepasses.LexicalChainMatch</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>28</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>27.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.io.IOUtils$1$1</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>17</rfc>
		<lcom>2</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>0.25</lcom3>
		<loc>95</loc>
		<dam>0.6666666666666666</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>17.4</amc>
		<cc>
			<method name="public boolean hasNext()">2</method>
			<method name="private java.io.File findNext()">6</method>
			<method name="public java.io.File next()">2</method>
			<method name="void _init_(edu.stanford.nlp.io.IOUtils$1)">0</method>
			<method name="public volatile Object next()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.CompanyNameDetector</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>11</rfc>
		<lcom>8</lcom>
		<ca>2</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>1.0</lcom3>
		<loc>183</loc>
		<dam>0.3333333333333333</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>35.0</amc>
		<cc>
			<method name="String extract(edu.stanford.nlp.tagger.maxent.History h, edu.stanford.nlp.tagger.maxent.PairsHolder pH)">4</method>
			<method name="private boolean companyNameEnd(String s)">1</method>
			<method name="public boolean isLocal()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public boolean isDynamic()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.io.NumberRangeFileFilter</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>9</rfc>
		<lcom>0</lcom>
		<ca>7</ca>
		<ce>0</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>99</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>47.0</amc>
		<cc>
			<method name="public boolean accept(java.io.File file)">13</method>
			<method name="public void _init_(int min, int max, boolean recurse)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.crf.HasCliquePotentialFunction</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>9</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract edu.stanford.nlp.ie.crf.CliquePotentialFunction getCliquePotentialFunction(double[])">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Timing</name>
		<wmc>32</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>41</cbo>
		<rfc>45</rfc>
		<lcom>434</lcom>
		<ca>41</ca>
		<ce>0</ce>
		<npm>31</npm>
		<lcom3>0.6236559139784947</lcom3>
		<loc>340</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2967741935483871</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.53125</amc>
		<cc>
			<method name="public static long endTime()">1</method>
			<method name="public long report()">1</method>
			<method name="public static long tick()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static void endDoing()">1</method>
			<method name="public void done(String msg)">1</method>
			<method name="public static void startTime()">1</method>
			<method name="public void start()">1</method>
			<method name="public String toSecondsString()">1</method>
			<method name="public long report(String str)">1</method>
			<method name="public void done()">1</method>
			<method name="public long restart()">1</method>
			<method name="public long stop()">1</method>
			<method name="public long stop(String str, java.io.PrintWriter writer)">1</method>
			<method name="public String toString()">1</method>
			<method name="public long report(String str, java.io.PrintStream stream)">1</method>
			<method name="public long stop(String str)">1</method>
			<method name="public void doing(String str)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public long restart(String str)">1</method>
			<method name="public long restart(String str, java.io.PrintWriter writer)">1</method>
			<method name="public static long tick(String str)">1</method>
			<method name="public long restart(String str, java.io.PrintStream stream)">1</method>
			<method name="public long stop(String str, java.io.PrintStream stream)">1</method>
			<method name="public static void startDoing(String str)">1</method>
			<method name="public static String toSecondsString(long elapsed)">1</method>
			<method name="public static long endTime(String str, java.io.PrintStream stream)">1</method>
			<method name="public static long endTime(String str)">1</method>
			<method name="public static String toMilliSecondsString(long elapsed)">1</method>
			<method name="public static long tick(String str, java.io.PrintStream stream)">1</method>
			<method name="public long report(String str, java.io.PrintWriter writer)">1</method>
			<method name="public static void endDoing(String msg)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$ParentAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.RepeatedRecordHandler$ApproximateRepeatSemantics</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>19</rfc>
		<lcom>15</lcom>
		<ca>3</ca>
		<ce>2</ce>
		<npm>5</npm>
		<lcom3>2.0</lcom3>
		<loc>73</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.166666666666666</amc>
		<cc>
			<method name="public String message(int linesOmitted)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public int numToForcePrint()">1</method>
			<method name="private boolean sameMessage(String last, String current)">1</method>
			<method name="public long maxWaitTimeInMillis()">1</method>
			<method name="public boolean equals(edu.stanford.nlp.util.logging.Redwood$Record lastRecord, edu.stanford.nlp.util.logging.Redwood$Record record)">5</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.Item</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>2</noc>
		<cbo>5</cbo>
		<rfc>7</rfc>
		<lcom>9</lcom>
		<ca>4</ca>
		<ce>2</ce>
		<npm>6</npm>
		<lcom3>0.8666666666666666</lcom3>
		<loc>90</loc>
		<dam>0.1111111111111111</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4444444444444444</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.5</amc>
		<cc>
			<method name="public double score()">2</method>
			<method name="public boolean isPostHook()">1</method>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.Item item)">0</method>
			<method name="public boolean isEdge()">1</method>
			<method name="public boolean isPreHook()">1</method>
			<method name="public void _init_(boolean exhaustiveTest)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.SeminarsPrior</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>35</rfc>
		<lcom>2</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>2</npm>
		<lcom3>0.75</lcom3>
		<loc>551</loc>
		<dam>0.75</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>135.75</amc>
		<cc>
			<method name="public double scoreOf(int[] sequence)">36</method>
			<method name="static void _clinit_()">0</method>
			<method name="private void init(java.util.List doc)">2</method>
			<method name="public void _init_(String backgroundSymbol, edu.stanford.nlp.util.Index classIndex, java.util.List doc)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.AnnotationPipeline</name>
		<wmc>13</wmc>
		<dit>1</dit>
		<noc>1</noc>
		<cbo>17</cbo>
		<rfc>58</rfc>
		<lcom>40</lcom>
		<ca>5</ca>
		<ce>14</ce>
		<npm>12</npm>
		<lcom3>0.611111111111111</lcom3>
		<loc>356</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.23076923076923078</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>26.153846153846153</amc>
		<cc>
			<method name="public void _init_(java.util.List annotators)">0</method>
			<method name="public String timingInformation()">2</method>
			<method name="protected long getTotalTime()">2</method>
			<method name="public void _init_()">0</method>
			<method name="public void addAnnotator(edu.stanford.nlp.pipeline.Annotator annotator)">1</method>
			<method name="public void annotate(Iterable annotations, int numThreads)">1</method>
			<method name="public java.util.Set requires()">2</method>
			<method name="public java.util.Set requirementsSatisfied()">2</method>
			<method name="public void annotate(Iterable annotations, int numThreads, edu.stanford.nlp.util.Function callback)">3</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="public void annotate(edu.stanford.nlp.pipeline.Annotation annotation)">2</method>
			<method name="public void annotate(Iterable annotations)">1</method>
			<method name="public void annotate(Iterable annotations, edu.stanford.nlp.util.Function callback)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.RedwoodConfiguration$Handlers$1</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>5</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>5</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>19</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.0</amc>
		<cc>
			<method name="public void apply(edu.stanford.nlp.util.logging.RedwoodConfiguration config, edu.stanford.nlp.util.logging.Redwood$RecordHandlerTree root)">1</method>
			<method name="void _init_(String)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.RedwoodConfiguration$Handlers$2</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>7</rfc>
		<lcom>1</lcom>
		<ca>2</ca>
		<ce>5</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>16</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.0</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="public void apply(edu.stanford.nlp.util.logging.RedwoodConfiguration config, edu.stanford.nlp.util.logging.Redwood$RecordHandlerTree root)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.RedwoodConfiguration$Handlers$3</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>6</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>15</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.5</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="public void apply(edu.stanford.nlp.util.logging.RedwoodConfiguration config, edu.stanford.nlp.util.logging.Redwood$RecordHandlerTree root)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.RedwoodConfiguration$Handlers$4</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>6</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>15</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.5</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="public void apply(edu.stanford.nlp.util.logging.RedwoodConfiguration config, edu.stanford.nlp.util.logging.Redwood$RecordHandlerTree root)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.RedwoodConfiguration$Handlers$5</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>6</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>15</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.5</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="public void apply(edu.stanford.nlp.util.logging.RedwoodConfiguration config, edu.stanford.nlp.util.logging.Redwood$RecordHandlerTree root)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.RedwoodConfiguration$Handlers$6</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>8</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.0</amc>
		<cc>
			<method name="void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.RedwoodConfiguration$Handlers$7</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>8</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.0</amc>
		<cc>
			<method name="void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.RedwoodConfiguration$Handlers$8</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>8</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.0</amc>
		<cc>
			<method name="void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.RedwoodConfiguration$Handlers$9</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>10</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.0</amc>
		<cc>
			<method name="void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.CoreMapNodePattern$NumericAnnotationPattern$CmpType$1</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>10</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.0</amc>
		<cc>
			<method name="void _init_(String, int)">0</method>
			<method name="boolean accept(double v1, double v2)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.CoreMapNodePattern$NumericAnnotationPattern$CmpType$2</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>16</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.0</amc>
		<cc>
			<method name="void _init_(String, int)">0</method>
			<method name="boolean accept(double v1, double v2)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.CoreMapNodePattern$NumericAnnotationPattern$CmpType$3</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>16</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.0</amc>
		<cc>
			<method name="void _init_(String, int)">0</method>
			<method name="boolean accept(double v1, double v2)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.CoreMapNodePattern$NumericAnnotationPattern$CmpType$4</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>16</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.0</amc>
		<cc>
			<method name="void _init_(String, int)">0</method>
			<method name="boolean accept(double v1, double v2)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.TreeFunctions$LabeledTreeToCategoryWordTagTreeFunction</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>19</rfc>
		<lcom>8</lcom>
		<ca>1</ca>
		<ce>8</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>92</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.45</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>17.2</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.trees.TreeFunctions$1 x0)">0</method>
			<method name="private void _init_()">0</method>
			<method name="public edu.stanford.nlp.trees.Tree apply(edu.stanford.nlp.trees.Tree o)">1</method>
			<method name="public edu.stanford.nlp.trees.Tree helper(edu.stanford.nlp.trees.Tree t)">5</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.CoreMapNodePattern$NumericAnnotationPattern$CmpType$5</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>16</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.0</amc>
		<cc>
			<method name="void _init_(String, int)">0</method>
			<method name="boolean accept(double v1, double v2)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.CoreMapNodePattern$NumericAnnotationPattern$CmpType$6</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>16</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.0</amc>
		<cc>
			<method name="void _init_(String, int)">0</method>
			<method name="boolean accept(double v1, double v2)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.CoreMapNodePattern$NumericAnnotationPattern$CmpType$7</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>16</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.0</amc>
		<cc>
			<method name="void _init_(String, int)">0</method>
			<method name="boolean accept(double v1, double v2)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.CaselessCompanyNameDetector</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>15</rfc>
		<lcom>8</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>3</npm>
		<lcom3>0.875</lcom3>
		<loc>69</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.4</amc>
		<cc>
			<method name="String extract(edu.stanford.nlp.tagger.maxent.History h, edu.stanford.nlp.tagger.maxent.PairsHolder pH)">3</method>
			<method name="private boolean companyNameEnd(String s)">1</method>
			<method name="public boolean isLocal()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public boolean isDynamic()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotation</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>233</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>232</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.Dependencies$ComparatorHolder$DependencyIdxComparator</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>8</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>41</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.25</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="public int compare(edu.stanford.nlp.trees.Dependency dep1, edu.stanford.nlp.trees.Dependency dep2)">1</method>
			<method name="private void _init_()">0</method>
			<method name="void _init_(edu.stanford.nlp.trees.Dependencies$1 x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$AbbrAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.HashIndex$2</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>1.5</lcom3>
		<loc>15</loc>
		<dam>0.5</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.5</amc>
		<cc>
			<method name="public void unlock()">1</method>
			<method name="void _init_(edu.stanford.nlp.util.HashIndex)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.ExtractorFramesRare</name>
		<wmc>11</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>34</cbo>
		<rfc>59</rfc>
		<lcom>49</lcom>
		<ca>1</ca>
		<ce>33</ce>
		<npm>0</npm>
		<lcom3>0.9217391304347826</lcom3>
		<loc>1749</loc>
		<dam>1.0</dam>
		<moa>23</moa>
		<mfa>0.0</mfa>
		<cam>0.2</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>155.9090909090909</amc>
		<cc>
			<method name="private static edu.stanford.nlp.tagger.maxent.Extractor[] lcTagFeatures(edu.stanford.nlp.tagger.maxent.TTags ttags)">2</method>
			<method name="private void _init_()">0</method>
			<method name="private static edu.stanford.nlp.tagger.maxent.Extractor[] ctbPreFeatures(int n)">2</method>
			<method name="private static void getNaaclExtractors(java.util.ArrayList extrs)">3</method>
			<method name="private static edu.stanford.nlp.tagger.maxent.Extractor[] asbcUnkFeatures(int n)">2</method>
			<method name="static void _clinit_()">0</method>
			<method name="protected static edu.stanford.nlp.tagger.maxent.Extractor[] getExtractorFramesRare(String identifier, edu.stanford.nlp.tagger.maxent.TTags ttags)">21</method>
			<method name="private static edu.stanford.nlp.tagger.maxent.Extractor[] naacl2003Conjunctions()">1</method>
			<method name="private static edu.stanford.nlp.tagger.maxent.Extractor[] ctbUnkDictFeatures(int n)">2</method>
			<method name="private static void getCaselessNaaclExtractors(java.util.ArrayList extrs)">3</method>
			<method name="private static edu.stanford.nlp.tagger.maxent.Extractor[] ctbSufFeatures(int n)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.HashIndex$1</name>
		<wmc>3</wmc>
		<dit>3</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>5</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.25</lcom3>
		<loc>27</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.9444444444444444</mfa>
		<cam>0.5</cam>
		<ic>2</ic>
		<cbm>5</cbm>
		<amc>7.333333333333333</amc>
		<cc>
			<method name="public int size()">1</method>
			<method name="public Object get(int index)">1</method>
			<method name="void _init_(edu.stanford.nlp.util.HashIndex, int[])">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEntity</name>
		<wmc>10</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>28</rfc>
		<lcom>3</lcom>
		<ca>5</ca>
		<ce>4</ce>
		<npm>10</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>141</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.7</amc>
		<cc>
			<method name="public void _init_(String id, String type, String subtype, String cls)">0</method>
			<method name="public String getClasss()">1</method>
			<method name="public String toXml(int offset)">2</method>
			<method name="public void setClass(String s)">1</method>
			<method name="public java.util.List getMentions()">1</method>
			<method name="public void addMention(edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEntityMention m)">1</method>
			<method name="public void setSubtype(String s)">1</method>
			<method name="public String getType()">1</method>
			<method name="public void setType(String s)">1</method>
			<method name="public String getSubtype()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.SimpleTree</name>
		<wmc>7</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>10</rfc>
		<lcom>15</lcom>
		<ca>2</ca>
		<ce>4</ce>
		<npm>7</npm>
		<lcom3>0.8333333333333334</lcom3>
		<loc>44</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.35714285714285715</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.0</amc>
		<cc>
			<method name="public static edu.stanford.nlp.trees.TreeFactory factory()">1</method>
			<method name="public edu.stanford.nlp.trees.TreeFactory treeFactory()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void setChildren(edu.stanford.nlp.trees.Tree[] children)">2</method>
			<method name="public void _init_(edu.stanford.nlp.ling.Label label)">0</method>
			<method name="public edu.stanford.nlp.trees.Tree[] children()">1</method>
			<method name="public void _init_(edu.stanford.nlp.ling.Label label, java.util.List daughterTreesList)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.dvparser.CacheParseHypotheses</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>31</cbo>
		<rfc>84</rfc>
		<lcom>24</lcom>
		<ca>4</ca>
		<ce>30</ce>
		<npm>7</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>609</loc>
		<dam>0.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.23214285714285715</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>74.75</amc>
		<cc>
			<method name="public static void main(String[] args)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static java.util.IdentityHashMap convertToTrees(java.util.IdentityHashMap compressed, int numThreads)">1</method>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.LexicalizedParser parser)">0</method>
			<method name="public static java.util.IdentityHashMap convertToTrees(java.util.Collection keys, java.util.IdentityHashMap compressed, int numThreads)">4</method>
			<method name="public java.util.IdentityHashMap convertToBytes(java.util.IdentityHashMap uncompressed)">2</method>
			<method name="public static java.util.List convertToTrees(byte[] input)">2</method>
			<method name="public byte[] convertToBytes(java.util.List input)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.CoreMapNodePatternTrigger</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>22</rfc>
		<lcom>4</lcom>
		<ca>2</ca>
		<ce>7</ce>
		<npm>4</npm>
		<lcom3>0.16666666666666666</lcom3>
		<loc>170</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>40.5</amc>
		<cc>
			<method name="public java.util.Collection apply(edu.stanford.nlp.util.CoreMap in)">3</method>
			<method name="public transient void _init_(edu.stanford.nlp.ling.tokensregex.SequencePattern[] patterns)">0</method>
			<method name="public void _init_(java.util.Collection patterns)">0</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.NamedDependency$NamedDependencyFactory</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>6</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>23</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.75</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="void _init_(edu.stanford.nlp.trees.NamedDependency$1 x0)">0</method>
			<method name="public edu.stanford.nlp.trees.Dependency newDependency(edu.stanford.nlp.ling.Label regent, edu.stanford.nlp.ling.Label dependent)">1</method>
			<method name="public edu.stanford.nlp.trees.Dependency newDependency(edu.stanford.nlp.ling.Label regent, edu.stanford.nlp.ling.Label dependent, Object name)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalRelations$ArgumentGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.HeidelTimeAnnotator</name>
		<wmc>11</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>14</cbo>
		<rfc>76</rfc>
		<lcom>43</lcom>
		<ca>1</ca>
		<ce>13</ce>
		<npm>7</npm>
		<lcom3>0.8833333333333334</lcom3>
		<loc>649</loc>
		<dam>0.6666666666666666</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.22857142857142856</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>57.45454545454545</amc>
		<cc>
			<method name="private static int beginOffset(edu.stanford.nlp.util.CoreMap ann)">1</method>
			<method name="public void annotate(edu.stanford.nlp.util.CoreMap document)">1</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void annotate(edu.stanford.nlp.pipeline.Annotation annotation)">1</method>
			<method name="public java.util.Set requires()">1</method>
			<method name="public void _init_(java.io.File heideltimePath)">0</method>
			<method name="public java.util.Set requirementsSatisfied()">1</method>
			<method name="public void _init_(String name, java.util.Properties props)">0</method>
			<method name="private static int endOffset(edu.stanford.nlp.util.CoreMap ann)">1</method>
			<method name="private static java.util.List toTimexCoreMaps(org.w3c.dom.Element docElem, edu.stanford.nlp.util.CoreMap originalDocument)">14</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.DeltaMap</name>
		<wmc>14</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>38</rfc>
		<lcom>15</lcom>
		<ca>5</ca>
		<ce>3</ce>
		<npm>9</npm>
		<lcom3>0.5</lcom3>
		<loc>281</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.6206896551724138</mfa>
		<cam>0.23076923076923078</cam>
		<ic>1</ic>
		<cbm>6</cbm>
		<amc>18.785714285714285</amc>
		<cc>
			<method name="public void clear()">2</method>
			<method name="public void _init_(java.util.Map originalMap, edu.stanford.nlp.util.MapFactory mf)">0</method>
			<method name="static Object access$300()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public Object remove(Object key)">1</method>
			<method name="public void _init_(java.util.Map originalMap)">0</method>
			<method name="public boolean containsKey(Object key)">3</method>
			<method name="public java.util.Set entrySet()">1</method>
			<method name="public Object get(Object key)">4</method>
			<method name="static java.util.Map access$000(edu.stanford.nlp.util.DeltaMap x0)">1</method>
			<method name="public Object put(Object key, Object value)">5</method>
			<method name="static Object access$200()">1</method>
			<method name="public static void main(String[] args)">5</method>
			<method name="static java.util.Map access$100(edu.stanford.nlp.util.DeltaMap x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceRelation</name>
		<wmc>9</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>31</rfc>
		<lcom>0</lcom>
		<ca>4</ca>
		<ce>3</ce>
		<npm>9</npm>
		<lcom3>0.7708333333333333</lcom3>
		<loc>228</loc>
		<dam>0.8333333333333334</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4166666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>23.666666666666668</amc>
		<cc>
			<method name="public int getMentionCount()">1</method>
			<method name="public void _init_(String id, String type, String subtype, String modality, String tense)">0</method>
			<method name="public String toXml(int offset)">3</method>
			<method name="public edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceRelationMention getMention(int which)">1</method>
			<method name="public void setSubtype(String s)">1</method>
			<method name="public String getType()">1</method>
			<method name="public void setType(String s)">1</method>
			<method name="public String getSubtype()">1</method>
			<method name="public void addMention(edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceRelationMention m)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.TwoDimensionalSet</name>
		<wmc>18</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>38</rfc>
		<lcom>63</lcom>
		<ca>4</ca>
		<ce>4</ce>
		<npm>17</npm>
		<lcom3>0.5588235294117647</lcom3>
		<loc>205</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.3472222222222222</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>10.277777777777779</amc>
		<cc>
			<method name="public boolean addAll(edu.stanford.nlp.util.TwoDimensionalSet set)">2</method>
			<method name="public boolean addAllKeys(edu.stanford.nlp.util.TwoDimensionalMap map)">2</method>
			<method name="public void clear()">1</method>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="public boolean equals(Object o)">3</method>
			<method name="public boolean isEmpty()">1</method>
			<method name="public void _init_()">0</method>
			<method name="static edu.stanford.nlp.util.TwoDimensionalMap access$000(edu.stanford.nlp.util.TwoDimensionalSet x0)">1</method>
			<method name="public static edu.stanford.nlp.util.TwoDimensionalSet hashSet()">1</method>
			<method name="public boolean containsAll(edu.stanford.nlp.util.TwoDimensionalSet set)">2</method>
			<method name="public static edu.stanford.nlp.util.TwoDimensionalSet treeSet()">1</method>
			<method name="public boolean removeAll(edu.stanford.nlp.util.TwoDimensionalSet set)">2</method>
			<method name="public boolean contains(Object k1, Object k2)">1</method>
			<method name="public int size()">1</method>
			<method name="public void _init_(edu.stanford.nlp.util.TwoDimensionalMap backingMap)">0</method>
			<method name="public boolean add(Object k1, Object k2)">2</method>
			<method name="public int hashCode()">1</method>
			<method name="public boolean remove(Object k1, Object k2)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.FragDiscardingPennTreeReader</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>7</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>26</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.0</amc>
		<cc>
			<method name="public edu.stanford.nlp.trees.Tree readTree()">1</method>
			<method name="public void _init_(java.io.Reader in, edu.stanford.nlp.trees.TreeFactory tf, edu.stanford.nlp.trees.TreeNormalizer tn, edu.stanford.nlp.process.Tokenizer tk)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.TypedDependency</name>
		<wmc>16</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>31</rfc>
		<lcom>10</lcom>
		<ca>9</ca>
		<ce>2</ce>
		<npm>16</npm>
		<lcom3>0.64</lcom3>
		<loc>298</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.23214285714285715</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>17.3125</amc>
		<cc>
			<method name="public void setExtra()">1</method>
			<method name="public boolean extra()">1</method>
			<method name="public boolean equals(Object o)">12</method>
			<method name="public void setGov(edu.stanford.nlp.trees.TreeGraphNode gov)">1</method>
			<method name="public volatile int compareTo(Object x0)">1</method>
			<method name="public edu.stanford.nlp.trees.TreeGraphNode gov()">1</method>
			<method name="public edu.stanford.nlp.trees.GrammaticalRelation reln()">1</method>
			<method name="public String toString(boolean noIndex)">2</method>
			<method name="public String toString(String format)">1</method>
			<method name="public void setReln(edu.stanford.nlp.trees.GrammaticalRelation reln)">1</method>
			<method name="public edu.stanford.nlp.trees.TreeGraphNode dep()">1</method>
			<method name="public int hashCode()">4</method>
			<method name="public void setDep(edu.stanford.nlp.trees.TreeGraphNode dep)">1</method>
			<method name="public int compareTo(edu.stanford.nlp.trees.TypedDependency tdArg)">5</method>
			<method name="public void _init_(edu.stanford.nlp.trees.GrammaticalRelation reln, edu.stanford.nlp.trees.TreeGraphNode gov, edu.stanford.nlp.trees.TreeGraphNode dep)">0</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.GrammaticalStructure$TreeBankGrammaticalStructureWrapper</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>11</rfc>
		<lcom>9</lcom>
		<ca>2</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>0.7916666666666666</lcom3>
		<loc>51</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.2619047619047619</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.714285714285714</amc>
		<cc>
			<method name="public edu.stanford.nlp.trees.Tree getOriginalTree(edu.stanford.nlp.trees.GrammaticalStructure gs)">1</method>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="public void _init_(Iterable wrappedTrees, boolean keepPunct, edu.stanford.nlp.parser.lexparser.TreebankLangParserParams params)">0</method>
			<method name="static edu.stanford.nlp.parser.lexparser.TreebankLangParserParams access$300(edu.stanford.nlp.trees.GrammaticalStructure$TreeBankGrammaticalStructureWrapper x0)">1</method>
			<method name="static boolean access$200(edu.stanford.nlp.trees.GrammaticalStructure$TreeBankGrammaticalStructureWrapper x0)">1</method>
			<method name="static java.util.Map access$400(edu.stanford.nlp.trees.GrammaticalStructure$TreeBankGrammaticalStructureWrapper x0)">1</method>
			<method name="static Iterable access$100(edu.stanford.nlp.trees.GrammaticalStructure$TreeBankGrammaticalStructureWrapper x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalRelations$AdverbialModifierGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.wordseg.Gale2007ChineseSegmenterFeatureFactory</name>
		<wmc>14</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>47</rfc>
		<lcom>45</lcom>
		<ca>0</ca>
		<ce>10</ce>
		<npm>3</npm>
		<lcom3>0.9120879120879122</lcom3>
		<loc>3459</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.27350427350427353</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>245.57142857142858</amc>
		<cc>
			<method name="public java.util.Collection getCliqueFeatures(edu.stanford.nlp.util.PaddedList cInfo, int loc, edu.stanford.nlp.sequences.Clique clique)">4</method>
			<method name="private static String isEngPU(String Ep)">2</method>
			<method name="private void dictionaryFeaturesCpC(Class lbeginFieldName, Class lmiddleFieldName, Class lendFieldName, String dictSuffix, java.util.Collection features, edu.stanford.nlp.ling.CoreLabel p2, edu.stanford.nlp.ling.CoreLabel p, edu.stanford.nlp.ling.CoreLabel c, edu.stanford.nlp.ling.CoreLabel c2)">3</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="protected java.util.Collection featuresCpCp2Cp3C(edu.stanford.nlp.util.PaddedList cInfo, int loc)">12</method>
			<method name="private static void dictionaryFeaturesC(Class lbeginFieldName, Class lmiddleFieldName, Class lendFieldName, String dictSuffix, java.util.Collection features, edu.stanford.nlp.ling.CoreLabel p, edu.stanford.nlp.ling.CoreLabel c, edu.stanford.nlp.ling.CoreLabel c2)">1</method>
			<method name="private synchronized void createTADetector()">2</method>
			<method name="private static String isEnglish(String chp, String chc)">19</method>
			<method name="private synchronized void createOutDict()">2</method>
			<method name="protected java.util.Collection featuresCnC(edu.stanford.nlp.util.PaddedList cInfo, int loc)">2</method>
			<method name="public void init(edu.stanford.nlp.sequences.SeqClassifierFlags flags)">1</method>
			<method name="protected java.util.Collection featuresC(edu.stanford.nlp.util.PaddedList cInfo, int loc)">28</method>
			<method name="protected java.util.Collection featuresCpC(edu.stanford.nlp.util.PaddedList cInfo, int loc)">91</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.DependencyReader</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract java.util.List readDependencies(String)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.POSTaggerAnnotator$POSTaggerProcessor</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>7</rfc>
		<lcom>8</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>0.25</lcom3>
		<loc>28</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.4</amc>
		<cc>
			<method name="public edu.stanford.nlp.util.CoreMap process(edu.stanford.nlp.util.CoreMap sentence)">1</method>
			<method name="private void _init_(edu.stanford.nlp.pipeline.POSTaggerAnnotator)">0</method>
			<method name="void _init_(edu.stanford.nlp.pipeline.POSTaggerAnnotator x0, edu.stanford.nlp.pipeline.POSTaggerAnnotator$1 x1)">0</method>
			<method name="public edu.stanford.nlp.util.concurrent.ThreadsafeProcessor newInstance()">1</method>
			<method name="public volatile Object process(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Filters$CollectionAcceptFilter</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>11</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>0.5</lcom3>
		<loc>48</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>14.0</amc>
		<cc>
			<method name="protected void _init_(java.util.Collection c, boolean judgment)">0</method>
			<method name="public String toString()">1</method>
			<method name="public boolean accept(Object obj)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$19$1</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>7</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>0</npm>
		<lcom3>0.33333333333333326</lcom3>
		<loc>53</loc>
		<dam>0.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>24.0</amc>
		<cc>
			<method name="void initialize()">4</method>
			<method name="void _init_(edu.stanford.nlp.trees.tregex.Relation$19, edu.stanford.nlp.trees.Tree, edu.stanford.nlp.trees.tregex.TregexMatcher)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.tsurgeon.DeleteNode</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>10</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>58</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4666666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.333333333333332</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern[] children)">0</method>
			<method name="public edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.tregex.TregexMatcher m)">3</method>
			<method name="public void _init_(java.util.List children)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.CollectionFactory$ArrayListFactory</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>3</npm>
		<lcom3>1.5</lcom3>
		<loc>13</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public java.util.Collection newCollection()">1</method>
			<method name="public java.util.Collection newEmptyCollection()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.ArrayStringFilter$1</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>28</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>26.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.HookChart$WeakChartIndex</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>5</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>47</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>10.25</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public boolean equals(Object o)">5</method>
			<method name="public int hashCode()">1</method>
			<method name="void _init_(edu.stanford.nlp.parser.lexparser.HookChart$1 x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.tsurgeon.MoveNode</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>20</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>83</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.5</amc>
		<cc>
			<method name="public edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.tregex.TregexMatcher m)">1</method>
			<method name="public String toString()">1</method>
			<method name="public void _init_(edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern child, edu.stanford.nlp.trees.tregex.tsurgeon.TreeLocation l)">0</method>
			<method name="protected void setRoot(edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPatternRoot root)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.ner.CMMClassifier</name>
		<wmc>50</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>38</cbo>
		<rfc>203</rfc>
		<lcom>529</lcom>
		<ca>2</ca>
		<ce>37</ce>
		<npm>34</npm>
		<lcom3>0.8469387755102041</lcom3>
		<loc>3163</loc>
		<dam>0.25</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.10204081632653061</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>62.18</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="private static java.util.List getThresholds(String filename)">2</method>
			<method name="public void _init_(java.util.Properties props)">0</method>
			<method name="private void adaptMaxEnt(edu.stanford.nlp.classify.Dataset adapt)">4</method>
			<method name="private boolean normalize()">1</method>
			<method name="public edu.stanford.nlp.util.Index getFeaturesAboveThreshhold(edu.stanford.nlp.classify.Dataset dataset, double thresh)">5</method>
			<method name="private void trainSVM(edu.stanford.nlp.classify.Dataset train)">1</method>
			<method name="public java.util.Set getTags()">1</method>
			<method name="protected String classOf(java.util.List lineInfos, int pos)">1</method>
			<method name="public edu.stanford.nlp.ling.Datum makeDatum(java.util.List info, int loc, edu.stanford.nlp.sequences.FeatureFactory featureFactory)">2</method>
			<method name="public void train(java.util.Collection wordInfos, edu.stanford.nlp.sequences.DocumentReaderAndWriter readerAndWriter)">5</method>
			<method name="private void trainSemiSup(edu.stanford.nlp.classify.Dataset data, edu.stanford.nlp.classify.Dataset biasedData, double[][] confusionMatrix)">4</method>
			<method name="public edu.stanford.nlp.classify.Dataset getDataset(edu.stanford.nlp.classify.Dataset oldData, edu.stanford.nlp.util.Index goodFeatures)">10</method>
			<method name="public edu.stanford.nlp.classify.Dataset getDataset(java.util.Collection data, edu.stanford.nlp.util.Index featureIndex, edu.stanford.nlp.util.Index classIndex)">9</method>
			<method name="public void retrain(edu.stanford.nlp.objectbank.ObjectBank doc)">2</method>
			<method name="private void adapt(edu.stanford.nlp.classify.Dataset adapt)">2</method>
			<method name="public double loglikelihood(java.util.List lineInfos)">5</method>
			<method name="private void classifySeq(java.util.List document)">33</method>
			<method name="private void classifyNoSeq(java.util.List document)">10</method>
			<method name="public static edu.stanford.nlp.ie.ner.CMMClassifier getClassifierNoExceptions(java.io.InputStream in)">1</method>
			<method name="public edu.stanford.nlp.sequences.SequenceModel getSequenceModel(java.util.List document)">5</method>
			<method name="public void loadDefaultClassifier()">1</method>
			<method name="public java.util.List classifyWithGlobalInformation(java.util.List tokenSeq, edu.stanford.nlp.util.CoreMap doc, edu.stanford.nlp.util.CoreMap sent)">1</method>
			<method name="public edu.stanford.nlp.classify.Dataset getDataset(edu.stanford.nlp.objectbank.ObjectBank data, edu.stanford.nlp.classify.Dataset origDataset)">2</method>
			<method name="private void train(edu.stanford.nlp.classify.Dataset train)">2</method>
			<method name="public static edu.stanford.nlp.ie.ner.CMMClassifier getDefaultClassifier()">1</method>
			<method name="public void retrain(edu.stanford.nlp.objectbank.ObjectBank featureLabels, edu.stanford.nlp.util.Index featureIndex, edu.stanford.nlp.util.Index labelIndex)">3</method>
			<method name="public void adapt(String filename, edu.stanford.nlp.classify.Dataset trainDataset, edu.stanford.nlp.sequences.DocumentReaderAndWriter readerWriter)">1</method>
			<method name="public static edu.stanford.nlp.ie.ner.CMMClassifier getClassifierNoExceptions(String loadPath)">1</method>
			<method name="public edu.stanford.nlp.stats.Counter scoresOf(java.util.List lineInfos, int pos)">1</method>
			<method name="public static edu.stanford.nlp.ie.ner.CMMClassifier getClassifier(String loadPath)">1</method>
			<method name="public static edu.stanford.nlp.ie.ner.CMMClassifier getClassifier(java.io.InputStream in)">1</method>
			<method name="public static edu.stanford.nlp.ie.ner.CMMClassifier getClassifier(java.io.File file)">1</method>
			<method name="static boolean access$000(edu.stanford.nlp.ie.ner.CMMClassifier x0)">1</method>
			<method name="public void adapt(edu.stanford.nlp.objectbank.ObjectBank featureLabels, edu.stanford.nlp.classify.Dataset trainDataset)">1</method>
			<method name="private static java.util.Collection addOtherClasses(java.util.Collection feats, java.util.List info, int loc, edu.stanford.nlp.sequences.Clique c)">14</method>
			<method name="public double[][] weights()">1</method>
			<method name="public static edu.stanford.nlp.ie.ner.CMMClassifier getClassifierNoExceptions(java.io.File file)">1</method>
			<method name="public double weight(String feature, String label)">1</method>
			<method name="public void trainSemiSup()">8</method>
			<method name="public edu.stanford.nlp.classify.Dataset getDataset(java.util.Collection data)">1</method>
			<method name="private void makeAnswerArraysAndTagIndex(java.util.Collection docs)">10</method>
			<method name="public void printProbsDocument(java.util.List document)">1</method>
			<method name="public edu.stanford.nlp.classify.Dataset getBiasedDataset(edu.stanford.nlp.objectbank.ObjectBank data, edu.stanford.nlp.util.Index featureIndex, edu.stanford.nlp.util.Index classIndex)">8</method>
			<method name="public java.util.List classify(java.util.List document)">2</method>
			<method name="protected void _init_()">0</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="public void serializeClassifier(String serializePath)">1</method>
			<method name="public void loadClassifier(java.io.ObjectInputStream ois, java.util.Properties props)">1</method>
			<method name="private void trainMaxEnt(edu.stanford.nlp.classify.Dataset train)">10</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.wordseg.CorpusChar</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>22</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>0.5</lcom3>
		<loc>110</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.875</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>26.0</amc>
		<cc>
			<method name="private java.util.Map readDict(String filename)">3</method>
			<method name="public void _init_(String charlistFilename)">0</method>
			<method name="java.util.Map getCharMap()">1</method>
			<method name="public String getTag(String a1, String a2)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.UnnamedConcreteDependency$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.ExtractorCapLCSeen</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>15</rfc>
		<lcom>7</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>3</npm>
		<lcom3>0.8400000000000001</lcom3>
		<loc>77</loc>
		<dam>0.6</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.36666666666666664</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.0</amc>
		<cc>
			<method name="String extract(edu.stanford.nlp.tagger.maxent.History h, edu.stanford.nlp.tagger.maxent.PairsHolder pH)">3</method>
			<method name="public boolean isLocal()">1</method>
			<method name="void _init_(String tag)">0</method>
			<method name="public boolean precondition(String tag1)">1</method>
			<method name="public boolean isDynamic()">1</method>
			<method name="protected void setGlobalHolder(edu.stanford.nlp.tagger.maxent.MaxentTagger tagger)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequencePattern$GroupEndState</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>6</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>35</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.7</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.0</amc>
		<cc>
			<method name="public void _init_(int captureGroupId)">0</method>
			<method name="protected boolean match(int bid, edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates matchedStates, boolean consume, edu.stanford.nlp.ling.tokensregex.SequencePattern$State prevState)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams$AnnotatePunctuationFunction2</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>13</rfc>
		<lcom>13</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>1.0</lcom3>
		<loc>92</loc>
		<dam>0.6666666666666666</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.833333333333334</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="void _init_(edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams$1 x0)">0</method>
			<method name="public String toString()">1</method>
			<method name="public volatile Object apply(Object x0)">1</method>
			<method name="public String apply(edu.stanford.nlp.trees.tregex.TregexMatcher m)">11</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.PostSplitter</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>15</cbo>
		<rfc>43</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>14</ce>
		<npm>4</npm>
		<lcom3>0.3333333333333333</lcom3>
		<loc>323</loc>
		<dam>1.0</dam>
		<moa>5</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>78.5</amc>
		<cc>
			<method name="public edu.stanford.nlp.trees.Tree transformTreeHelper(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.Tree root)">21</method>
			<method name="public void dumpStats()">2</method>
			<method name="public edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree t)">1</method>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.TreebankLangParserParams tlpParams, edu.stanford.nlp.parser.lexparser.Options op)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.sentiment.CollapseUnaryTransformer</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>14</rfc>
		<lcom>1</lcom>
		<ca>2</ca>
		<ce>6</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>69</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>33.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree tree)">6</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.tsurgeon.RelabelNode$1</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>21</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.WordTagFactory</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>14</rfc>
		<lcom>13</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>6</npm>
		<lcom3>0.6</lcom3>
		<loc>79</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.0</amc>
		<cc>
			<method name="public edu.stanford.nlp.ling.Label newLabel(String labelStr, int options)">2</method>
			<method name="public edu.stanford.nlp.ling.Label newLabel(String labelStr)">1</method>
			<method name="public edu.stanford.nlp.ling.Label newLabel(edu.stanford.nlp.ling.Label oldLabel)">2</method>
			<method name="public void _init_()">0</method>
			<method name="public edu.stanford.nlp.ling.Label newLabelFromString(String word)">2</method>
			<method name="public void _init_(char divider)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.TimeExpressionExtractorFactory</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>11</rfc>
		<lcom>22</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>7</npm>
		<lcom3>0.9047619047619048</lcom3>
		<loc>78</loc>
		<dam>0.3333333333333333</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.42857142857142855</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.375</amc>
		<cc>
			<method name="public edu.stanford.nlp.time.TimeExpressionExtractor create()">1</method>
			<method name="public void _init_(String className)">0</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static edu.stanford.nlp.time.TimeExpressionExtractor createExtractor()">1</method>
			<method name="public volatile Object create()">1</method>
			<method name="public static edu.stanford.nlp.time.TimeExpressionExtractor create(String className)">1</method>
			<method name="public static boolean isDefaultExtractorPresent()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.PhraseTable$PhraseTableIterator</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>21</rfc>
		<lcom>2</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>4</npm>
		<lcom3>0.5</lcom3>
		<loc>119</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>22.2</amc>
		<cc>
			<method name="private edu.stanford.nlp.ling.tokensregex.PhraseTable$Phrase getNext()">6</method>
			<method name="public boolean hasNext()">2</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.PhraseTable$Phrase next()">1</method>
			<method name="public volatile Object next()">1</method>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.PhraseTable phraseTable)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$SequencePatternExtractRule</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>16</rfc>
		<lcom>1</lcom>
		<ca>2</ca>
		<ce>6</ce>
		<npm>7</npm>
		<lcom3>0.08333333333333333</lcom3>
		<loc>135</loc>
		<dam>0.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.3333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>17.714285714285715</amc>
		<cc>
			<method name="public volatile boolean extract(Object x0, java.util.List x1)">1</method>
			<method name="public Object apply(java.util.List seq)">3</method>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.SequencePattern p, edu.stanford.nlp.util.Function extractor, edu.stanford.nlp.ling.tokensregex.SequenceMatcher$FindType findType, boolean matchWithResult)">0</method>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.Env env, String regex, edu.stanford.nlp.util.Function extractor)">0</method>
			<method name="public boolean extract(java.util.List seq, java.util.List out)">4</method>
			<method name="public volatile Object apply(Object x0)">1</method>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.SequencePattern p, edu.stanford.nlp.util.Function extractor)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$7$1</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>0</npm>
		<lcom3>0.33333333333333326</lcom3>
		<loc>25</loc>
		<dam>0.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.0</amc>
		<cc>
			<method name="void initialize()">1</method>
			<method name="void _init_(edu.stanford.nlp.trees.tregex.Relation$7, edu.stanford.nlp.trees.tregex.TregexMatcher, edu.stanford.nlp.trees.Tree)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalRelations$LocalizerComplementGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.Span$ConstituentFactoryHolder</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>0</npm>
		<lcom3>0.5</lcom3>
		<loc>15</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.6666666666666665</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="static edu.stanford.nlp.trees.ConstituentFactory access$100()">1</method>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.NodePattern$DisjNodePattern</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>9</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>38</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.333333333333334</amc>
		<cc>
			<method name="public boolean match(Object node)">2</method>
			<method name="public String toString()">1</method>
			<method name="public void _init_(java.util.List nodePatterns)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequenceMatcher$State</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>7</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>73</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>22.666666666666668</amc>
		<cc>
			<method name="public void _init_(int bid, edu.stanford.nlp.ling.tokensregex.SequencePattern$State tstate)">0</method>
			<method name="public boolean equals(Object o)">8</method>
			<method name="public int hashCode()">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.Word$WordFactoryHolder</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>0.5</lcom3>
		<loc>14</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.3333333333333335</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="static edu.stanford.nlp.ling.LabelFactory access$000()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequenceMatchResult</name>
		<wmc>24</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>30</cbo>
		<rfc>30</rfc>
		<lcom>276</lcom>
		<ca>23</ca>
		<ce>10</ce>
		<npm>23</npm>
		<lcom3>1.0096618357487923</lcom3>
		<loc>77</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5507246376811594</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>1.8333333333333333</amc>
		<cc>
			<method name="public abstract Object groupMatchResult(String, int)">1</method>
			<method name="public abstract edu.stanford.nlp.ling.tokensregex.SequenceMatchResult$MatchedGroupInfo groupInfo(String)">1</method>
			<method name="public abstract edu.stanford.nlp.ling.tokensregex.SequencePattern pattern()">1</method>
			<method name="public abstract java.util.List groupNodes()">1</method>
			<method name="public abstract int start(String)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public abstract int end(String)">1</method>
			<method name="public abstract edu.stanford.nlp.ling.tokensregex.SequenceMatchResult$MatchedGroupInfo groupInfo()">1</method>
			<method name="public abstract Object groupValue(int)">1</method>
			<method name="public abstract java.util.List elements()">1</method>
			<method name="public abstract int getOrder()">1</method>
			<method name="public abstract Object nodeMatchResult(int)">1</method>
			<method name="public abstract Object groupMatchResult(int, int)">1</method>
			<method name="public abstract java.util.List groupMatchResults(int)">1</method>
			<method name="public abstract java.util.List groupNodes(int)">1</method>
			<method name="public abstract Object groupValue()">1</method>
			<method name="public abstract java.util.List groupNodes(String)">1</method>
			<method name="public abstract java.util.List groupMatchResults(String)">1</method>
			<method name="public abstract edu.stanford.nlp.ling.tokensregex.SequenceMatchResult$MatchedGroupInfo groupInfo(int)">1</method>
			<method name="public abstract Object groupValue(String)">1</method>
			<method name="public abstract java.util.List groupMatchResults()">1</method>
			<method name="public abstract edu.stanford.nlp.ling.tokensregex.BasicSequenceMatchResult toBasicSequenceMatchResult()">1</method>
			<method name="public abstract double score()">1</method>
			<method name="public abstract String group(String)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.UTF8EquivalenceFunction</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>7</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>4</npm>
		<lcom3>1.3333333333333333</lcom3>
		<loc>35</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public String apply(String input)">4</method>
			<method name="public volatile Object apply(Object x0)">1</method>
			<method name="public static String replaceAscii(String w)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.crf.CRFBiasedClassifier</name>
		<wmc>8</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>17</cbo>
		<rfc>57</rfc>
		<lcom>8</lcom>
		<ca>2</ca>
		<ce>16</ce>
		<npm>7</npm>
		<lcom3>0.8571428571428571</lcom3>
		<loc>428</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2777777777777778</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>52.25</amc>
		<cc>
			<method name="public void setBiasWeight(int cindex, double weight)">1</method>
			<method name="public java.util.List classify(java.util.List document)">1</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="public edu.stanford.nlp.ie.crf.CRFDatum makeDatum(java.util.List info, int loc, edu.stanford.nlp.sequences.FeatureFactory featureFactory)">4</method>
			<method name="public void adjustBias(java.util.List develData, edu.stanford.nlp.util.Function evalFunction, double low, double high)">1</method>
			<method name="public void _init_(java.util.Properties props)">0</method>
			<method name="public void setBiasWeight(String cname, double weight)">1</method>
			<method name="void addBiasFeature()">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.ClassicCounter$2$1</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>10</rfc>
		<lcom>8</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>4</npm>
		<lcom3>0.875</lcom3>
		<loc>37</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.stats.ClassicCounter$2)">0</method>
			<method name="public boolean hasNext()">1</method>
			<method name="public void remove()">1</method>
			<method name="public java.util.Map$Entry next()">1</method>
			<method name="public volatile Object next()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$CharAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.HeadFinder</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>91</cbo>
		<rfc>2</rfc>
		<lcom>1</lcom>
		<ca>91</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>2</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract edu.stanford.nlp.trees.Tree determineHead(edu.stanford.nlp.trees.Tree)">1</method>
			<method name="public abstract edu.stanford.nlp.trees.Tree determineHead(edu.stanford.nlp.trees.Tree, edu.stanford.nlp.trees.Tree)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.MapFactory$HashMapFactory</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>9</rfc>
		<lcom>15</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>4</npm>
		<lcom3>1.2</lcom3>
		<loc>27</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4583333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.3333333333333335</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public java.util.Map setMap(java.util.Map map)">1</method>
			<method name="public java.util.Map newMap()">1</method>
			<method name="void _init_(edu.stanford.nlp.util.MapFactory$1 x0)">0</method>
			<method name="public java.util.Map newMap(int initCapacity)">1</method>
			<method name="public java.util.Map setMap(java.util.Map map, int initCapacity)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$3</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>8</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>39</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.5</amc>
		<cc>
			<method name="void _init_(String x0, int x1)">0</method>
			<method name="public transient Number compute(Number[] in)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$4</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>8</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>62</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>30.0</amc>
		<cc>
			<method name="void _init_(String x0, int x1)">0</method>
			<method name="public transient Number compute(Number[] in)">4</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.sentiment.SentimentCostAndGradient</name>
		<wmc>13</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>18</cbo>
		<rfc>94</rfc>
		<lcom>48</lcom>
		<ca>3</ca>
		<ce>15</ce>
		<npm>5</npm>
		<lcom3>0.75</lcom3>
		<loc>1393</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.26153846153846155</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>106.0</amc>
		<cc>
			<method name="private org.ejml.simple.SimpleMatrix computeTensorDeltaDown(org.ejml.simple.SimpleMatrix deltaFull, org.ejml.simple.SimpleMatrix leftVector, org.ejml.simple.SimpleMatrix rightVector, org.ejml.simple.SimpleMatrix W, edu.stanford.nlp.neural.SimpleTensor Wt)">2</method>
			<method name="private void backpropDerivativesAndError(edu.stanford.nlp.trees.Tree tree, edu.stanford.nlp.util.TwoDimensionalMap binaryTD, edu.stanford.nlp.util.TwoDimensionalMap binaryCD, edu.stanford.nlp.util.TwoDimensionalMap binaryTensorTD, java.util.Map unaryCD, java.util.Map wordVectorD, org.ejml.simple.SimpleMatrix deltaUp)">7</method>
			<method name="double scaleAndRegularizeTensor(edu.stanford.nlp.util.TwoDimensionalMap derivatives, edu.stanford.nlp.util.TwoDimensionalMap currentMatrices, double scale, double regCost)">2</method>
			<method name="private void backpropDerivativesAndError(edu.stanford.nlp.trees.Tree tree, edu.stanford.nlp.util.TwoDimensionalMap binaryTD, edu.stanford.nlp.util.TwoDimensionalMap binaryCD, edu.stanford.nlp.util.TwoDimensionalMap binaryTensorTD, java.util.Map unaryCD, java.util.Map wordVectorD)">1</method>
			<method name="double scaleAndRegularize(java.util.Map derivatives, java.util.Map currentMatrices, double scale, double regCost)">2</method>
			<method name="public int getPredictedClass(org.ejml.simple.SimpleMatrix predictions)">3</method>
			<method name="private edu.stanford.nlp.neural.SimpleTensor getTensorGradient(org.ejml.simple.SimpleMatrix deltaFull, org.ejml.simple.SimpleMatrix leftVector, org.ejml.simple.SimpleMatrix rightVector)">2</method>
			<method name="public int domainDimension()">1</method>
			<method name="public void _init_(edu.stanford.nlp.sentiment.SentimentModel model, java.util.List trainingBatch)">0</method>
			<method name="double scaleAndRegularize(edu.stanford.nlp.util.TwoDimensionalMap derivatives, edu.stanford.nlp.util.TwoDimensionalMap currentMatrices, double scale, double regCost)">2</method>
			<method name="private static double sumError(edu.stanford.nlp.trees.Tree tree)">4</method>
			<method name="public void forwardPropagateTree(edu.stanford.nlp.trees.Tree tree)">7</method>
			<method name="public void calculate(double[] theta)">10</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.CorefCluster</name>
		<wmc>10</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>18</cbo>
		<rfc>47</rfc>
		<lcom>0</lcom>
		<ca>9</ca>
		<ce>10</ce>
		<npm>9</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>627</loc>
		<dam>0.8333333333333334</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.25925925925925924</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>60.5</amc>
		<cc>
			<method name="public int getClusterID()">1</method>
			<method name="public void printCorefCluster(java.util.logging.Logger logger)">5</method>
			<method name="static void _clinit_()">0</method>
			<method name="public boolean isSinglePronounCluster(edu.stanford.nlp.dcoref.Dictionaries dict)">4</method>
			<method name="public edu.stanford.nlp.dcoref.Mention getFirstMention()">1</method>
			<method name="public edu.stanford.nlp.dcoref.Mention getRepresentativeMention()">1</method>
			<method name="public java.util.Set getCorefMentions()">1</method>
			<method name="public static void mergeClusters(edu.stanford.nlp.dcoref.CorefCluster to, edu.stanford.nlp.dcoref.CorefCluster from)">17</method>
			<method name="public void _init_(int ID)">0</method>
			<method name="public void _init_(int ID, java.util.Set mentions)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$1</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>8</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>39</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.5</amc>
		<cc>
			<method name="void _init_(String x0, int x1)">0</method>
			<method name="public transient Number compute(Number[] in)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$2</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>8</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>39</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.5</amc>
		<cc>
			<method name="void _init_(String x0, int x1)">0</method>
			<method name="public transient Number compute(Number[] in)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.crf.CRFClassifierEvaluator</name>
		<wmc>9</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>39</rfc>
		<lcom>2</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>8</npm>
		<lcom3>0.625</lcom3>
		<loc>254</loc>
		<dam>0.6</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.3333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>26.666666666666668</amc>
		<cc>
			<method name="public void _init_(String description, edu.stanford.nlp.ie.crf.CRFClassifier classifier, java.util.Collection data, java.util.List featurizedData)">0</method>
			<method name="public void setTestData(java.util.Collection data, java.util.List featurizedData)">1</method>
			<method name="private double interpretCmdOutput()">4</method>
			<method name="public void setEvalCmd(String evalCmd)">3</method>
			<method name="public String[] getCmd()">1</method>
			<method name="public void _init_(String description, edu.stanford.nlp.ie.crf.CRFClassifier classifier)">0</method>
			<method name="public double evaluate(double[] x)">2</method>
			<method name="public void outputToCmd(java.io.OutputStream outputStream)">1</method>
			<method name="public void setValues(double[] x)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$ParamInfo</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>9</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>20</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.0</amc>
		<cc>
			<method name="public void _init_(String name, String typeName, Class className, boolean nullable)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.CoNLLMentionExtractor</name>
		<wmc>9</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>21</cbo>
		<rfc>59</rfc>
		<lcom>22</lcom>
		<ca>1</ca>
		<ce>21</ce>
		<npm>6</npm>
		<lcom3>0.8035714285714286</lcom3>
		<loc>669</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.265625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>72.55555555555556</amc>
		<cc>
			<method name="public java.util.List extractGoldMentions(edu.stanford.nlp.dcoref.CoNLL2011DocumentReader$Document conllDoc)">6</method>
			<method name="static void _clinit_()">0</method>
			<method name="private static void recallErrors(java.util.List goldMentions, java.util.List predictedMentions, edu.stanford.nlp.pipeline.Annotation doc)">1</method>
			<method name="public static java.util.List makeCopy(java.util.List mentions)">3</method>
			<method name="public void resetDocs()">1</method>
			<method name="public edu.stanford.nlp.dcoref.Document nextDoc()">1</method>
			<method name="public void _init_(edu.stanford.nlp.dcoref.Dictionaries dict, java.util.Properties props, edu.stanford.nlp.dcoref.Semantics semantics)">0</method>
			<method name="public void _init_(edu.stanford.nlp.dcoref.Dictionaries dict, java.util.Properties props, edu.stanford.nlp.dcoref.Semantics semantics, edu.stanford.nlp.classify.LogisticClassifier singletonModel)">0</method>
			<method name="private static java.util.List extractSpans(java.util.List listOfMentions)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$UnbrokenCategoryFollows$1</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>18</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>1</npm>
		<lcom3>0.5333333333333333</lcom3>
		<loc>139</loc>
		<dam>0.0</dam>
		<moa>4</moa>
		<mfa>0.0</mfa>
		<cam>0.45</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>32.5</amc>
		<cc>
			<method name="public void initialize()">1</method>
			<method name="void advance()">2</method>
			<method name="private void initializeHelper(java.util.Stack stack, edu.stanford.nlp.trees.Tree node, edu.stanford.nlp.trees.Tree root)">9</method>
			<method name="void _init_(edu.stanford.nlp.trees.tregex.Relation$UnbrokenCategoryFollows, edu.stanford.nlp.trees.Tree, edu.stanford.nlp.trees.tregex.TregexMatcher)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.sievepasses.NameMatch</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>1</noc>
		<cbo>12</cbo>
		<rfc>16</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>11</ce>
		<npm>3</npm>
		<lcom3>0.5833333333333334</lcom3>
		<loc>151</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.39285714285714285</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>35.75</amc>
		<cc>
			<method name="private static boolean isNamedMention(edu.stanford.nlp.dcoref.Mention m, edu.stanford.nlp.dcoref.Dictionaries dict, java.util.Set roleSet)">2</method>
			<method name="public void init(java.util.Properties props)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public boolean checkEntityMatch(edu.stanford.nlp.dcoref.Document document, edu.stanford.nlp.dcoref.CorefCluster mentionCluster, edu.stanford.nlp.dcoref.CorefCluster potentialAntecedent, edu.stanford.nlp.dcoref.Dictionaries dict, java.util.Set roleSet)">10</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.graph.DijkstraShortestPath</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>28</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>127</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>62.5</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public static java.util.List getShortestPath(edu.stanford.nlp.graph.Graph graph, Object node1, Object node2, boolean directionSensitive)">7</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.TimeFormatter$NumericDateComponent</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>13</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>6</ce>
		<npm>2</npm>
		<lcom3>0.5</lcom3>
		<loc>93</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4666666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>28.666666666666668</amc>
		<cc>
			<method name="public Integer parseValue(String str)">3</method>
			<method name="protected StringBuilder appendRegex0(StringBuilder sb)">4</method>
			<method name="public void _init_(org.joda.time.DateTimeFieldType fieldType, int minDigits, int maxDigits)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequencePattern$NodePatternExpr</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>10</rfc>
		<lcom>3</lcom>
		<ca>5</ca>
		<ce>6</ce>
		<npm>2</npm>
		<lcom3>0.4</lcom3>
		<loc>37</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.0</amc>
		<cc>
			<method name="protected void updateBindings(edu.stanford.nlp.ling.tokensregex.SequencePattern$VarGroupBindings bindings)">1</method>
			<method name="protected int assignGroupIds(int start)">1</method>
			<method name="protected edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr copy()">1</method>
			<method name="protected edu.stanford.nlp.ling.tokensregex.SequencePattern$Frag build()">1</method>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.NodePattern nodePattern)">0</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.maxent.CGRunner$LikelihoodFunction</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>13</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>2</ce>
		<npm>6</npm>
		<lcom3>0.6</lcom3>
		<loc>180</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>28.0</amc>
		<cc>
			<method name="public double[] derivativeAt(double[] lambda)">6</method>
			<method name="public double likelihood()">1</method>
			<method name="public double valueAt(double[] lambda)">3</method>
			<method name="public int domainDimension()">1</method>
			<method name="public void _init_(edu.stanford.nlp.maxent.iis.LambdaSolve m, double tol, boolean useGaussianPrior, double sigmaSquared, double[] sigmaSquareds)">0</method>
			<method name="public int numCalls()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalRelations$NumberModifierGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.sequences.SequenceModel</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>21</cbo>
		<rfc>7</rfc>
		<lcom>21</lcom>
		<ca>21</ca>
		<ce>0</ce>
		<npm>7</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6190476190476191</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract int[] getPossibleValues(int)">1</method>
			<method name="public abstract int leftWindow()">1</method>
			<method name="public abstract int length()">1</method>
			<method name="public abstract int rightWindow()">1</method>
			<method name="public abstract double[] scoresOf(int[], int)">1</method>
			<method name="public abstract double scoreOf(int[], int)">1</method>
			<method name="public abstract double scoreOf(int[])">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationMatchedFilter</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>8</rfc>
		<lcom>1</lcom>
		<ca>4</ca>
		<ce>5</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>38</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.333333333333334</amc>
		<cc>
			<method name="public boolean accept(edu.stanford.nlp.ling.tokensregex.MatchedExpression me)">3</method>
			<method name="public volatile boolean accept(Object x0)">1</method>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.MatchedExpression$SingleAnnotationExtractor extractor)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.StringLabel$StringLabelFactoryHolder</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>1.0</lcom3>
		<loc>11</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.0</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$6</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>10</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>39</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.5</amc>
		<cc>
			<method name="void _init_(String x0, int x1)">0</method>
			<method name="public transient Number compute(Number[] in)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalRelations$TemporalGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$UBlockAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$5</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>8</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>39</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.5</amc>
		<cc>
			<method name="void _init_(String x0, int x1)">0</method>
			<method name="public transient Number compute(Number[] in)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.TreebankTransformer</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract edu.stanford.nlp.trees.MemoryTreebank transformTrees(edu.stanford.nlp.trees.Treebank)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$8</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>6</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>18</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.0</amc>
		<cc>
			<method name="void _init_(String x0, int x1)">0</method>
			<method name="public transient Number compute(Number[] in)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.TreeTokenizerFactory$1</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>7</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>2</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>36</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.0</amc>
		<cc>
			<method name="public volatile Object getNext()">1</method>
			<method name="public edu.stanford.nlp.trees.Tree getNext()">1</method>
			<method name="void _init_(edu.stanford.nlp.trees.TreeTokenizerFactory, java.io.Reader)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$7</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>10</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>39</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.5</amc>
		<cc>
			<method name="void _init_(String x0, int x1)">0</method>
			<method name="public transient Number compute(Number[] in)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.QNMinimizer$SurpriseConvergence</name>
		<wmc>1</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>6</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>1.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.0</amc>
		<cc>
			<method name="public void _init_(String s)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.Expressions$ListExpression</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>17</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>5</npm>
		<lcom3>0.0</lcom3>
		<loc>76</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>14.0</amc>
		<cc>
			<method name="public void add(edu.stanford.nlp.ling.tokensregex.types.Expression expr)">1</method>
			<method name="public void addAll(java.util.List exprs)">2</method>
			<method name="public transient void _init_(String typename, java.util.List exprs, String[] tags)">0</method>
			<method name="public transient void _init_(String typename, String[] tags)">0</method>
			<method name="public transient edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env env, Object[] args)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$9</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>8</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>26</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.0</amc>
		<cc>
			<method name="void _init_(String x0, int x1)">0</method>
			<method name="public transient Number compute(Number[] in)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.international.arabic.process.ArabicLexer</name>
		<wmc>30</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>61</rfc>
		<lcom>335</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>10</npm>
		<lcom3>0.9391480730223123</lcom3>
		<loc>1723</loc>
		<dam>0.9411764705882353</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.18007662835249041</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>54.733333333333334</amc>
		<cc>
			<method name="private Object getNext(String txt, String originalText)">3</method>
			<method name="private static int[] zzUnpackTrans()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private static char[] zzUnpackCMap(String packed)">3</method>
			<method name="public final int yystate()">1</method>
			<method name="private static int zzUnpackTrans(String packed, int offset, int[] result)">3</method>
			<method name="void _init_(java.io.InputStream in)">0</method>
			<method name="private static int zzUnpackAttribute(String packed, int offset, int[] result)">3</method>
			<method name="private Object getNewline()">2</method>
			<method name="private static int[] zzUnpackRowMap()">1</method>
			<method name="private Object getEllipsis()">2</method>
			<method name="public void yypushback(int number)">2</method>
			<method name="private Object getNext(boolean isWord)">1</method>
			<method name="void _init_(java.io.Reader in)">0</method>
			<method name="private static int zzUnpackRowMap(String packed, int offset, int[] result)">2</method>
			<method name="private void setupNormalizationMap()">9</method>
			<method name="public final String yytext()">1</method>
			<method name="public final void yyclose()">1</method>
			<method name="public final void yybegin(int newState)">1</method>
			<method name="public final void yyreset(java.io.Reader reader)">1</method>
			<method name="public final int yylength()">1</method>
			<method name="public final char yycharat(int pos)">1</method>
			<method name="private static int zzUnpackAction(String packed, int offset, int[] result)">3</method>
			<method name="public Object next()">1</method>
			<method name="public void _init_(java.io.Reader r, edu.stanford.nlp.process.LexedTokenFactory tf, java.util.Properties props)">0</method>
			<method name="private static int[] zzUnpackAttribute()">1</method>
			<method name="private static int[] zzUnpackAction()">1</method>
			<method name="private String normalizeToken(String text, boolean isWord)">9</method>
			<method name="private boolean zzRefill()">1</method>
			<method name="private void zzScanError(int errorCode)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.structure.MachineReadingAnnotations$EventMentionsAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>9</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.io.EncodingPrintWriter</name>
		<wmc>10</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>11</rfc>
		<lcom>29</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>0.8888888888888888</lcom3>
		<loc>47</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.18518518518518517</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.2</amc>
		<cc>
			<method name="static String access$302(String x0)">1</method>
			<method name="private void _init_()">0</method>
			<method name="static java.io.PrintWriter access$202(java.io.PrintWriter x0)">1</method>
			<method name="static String access$100()">1</method>
			<method name="static java.io.PrintWriter access$000()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="static java.io.PrintWriter access$200()">1</method>
			<method name="static String access$300()">1</method>
			<method name="static java.io.PrintWriter access$002(java.io.PrintWriter x0)">1</method>
			<method name="static String access$102(String x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.tsurgeon.AdjoinNode</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>2</noc>
		<cbo>7</cbo>
		<rfc>19</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>94</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>22.25</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.trees.tregex.tsurgeon.AuxiliaryTree t, edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern p)">0</method>
			<method name="protected edu.stanford.nlp.trees.tregex.tsurgeon.AuxiliaryTree adjunctionTree()">1</method>
			<method name="public edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.tregex.TregexMatcher m)">2</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.Tags</name>
		<wmc>9</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>14</cbo>
		<rfc>19</rfc>
		<lcom>0</lcom>
		<ca>12</ca>
		<ce>2</ce>
		<npm>9</npm>
		<lcom3>0.5625</lcom3>
		<loc>133</loc>
		<dam>0.5</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.37777777777777777</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>13.555555555555555</amc>
		<cc>
			<method name="public void addTag(String tag)">1</method>
			<method name="public boolean equals(Object o)">6</method>
			<method name="public int hashCode()">2</method>
			<method name="public transient void _init_(String[] tags)">0</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Value getTag(String tag)">2</method>
			<method name="public java.util.Collection getTags()">1</method>
			<method name="public void addTag(String tag, edu.stanford.nlp.ling.tokensregex.types.Value v)">2</method>
			<method name="public void removeTag(String tag)">2</method>
			<method name="public boolean hasTag(String tag)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.Redwood</name>
		<wmc>35</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>43</cbo>
		<rfc>115</rfc>
		<lcom>379</lcom>
		<ca>37</ca>
		<ce>18</ce>
		<npm>16</npm>
		<lcom3>0.781733746130031</lcom3>
		<loc>2051</loc>
		<dam>0.5789473684210527</dam>
		<moa>7</moa>
		<mfa>0.0</mfa>
		<cam>0.06951871657754011</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>57.05714285714286</amc>
		<cc>
			<method name="static int access$200()">1</method>
			<method name="public static transient void log(Object[] args)">4</method>
			<method name="public static String formatTimeDifference(long diff)">1</method>
			<method name="static edu.stanford.nlp.util.logging.Redwood$RecordHandlerTree access$300()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static void forceTrack(Object name)">1</method>
			<method name="protected static void restoreSystemStreams()">1</method>
			<method name="static boolean access$000()">1</method>
			<method name="public static void startThreads(String title)">2</method>
			<method name="public static transient edu.stanford.nlp.util.logging.Redwood$RedwoodChannels channels(Object[] channelNames)">1</method>
			<method name="public static void endTrack()">1</method>
			<method name="private static void queueTask(long threadId, Runnable toRun)">10</method>
			<method name="protected static void clearHandlers()">1</method>
			<method name="static void access$600(long x0)">1</method>
			<method name="public static void endThreads(String check)">23</method>
			<method name="private static edu.stanford.nlp.util.logging.LogRecordHandler getHandler(Class clazz)">2</method>
			<method name="public static transient void logf(String format, Object[] args)">1</method>
			<method name="private static void attemptThreadControlThreadsafe(long threadId)">22</method>
			<method name="static int access$220(int x0)">1</method>
			<method name="public static void finishThread()">2</method>
			<method name="public static transient void startTrack(Object[] args)">5</method>
			<method name="protected static void formatTimeDifference(long diff, StringBuilder b)">10</method>
			<method name="protected static void captureSystemStreams(boolean captureOut, boolean captureErr)">3</method>
			<method name="public static void endTrack(String title)">3</method>
			<method name="public void _init_()">0</method>
			<method name="public static transient void hideChannelsEverywhere(Object[] channels)">2</method>
			<method name="static int access$212(int x0)">1</method>
			<method name="protected static edu.stanford.nlp.util.logging.Redwood$RecordHandlerTree rootHandler()">1</method>
			<method name="private static void attemptThreadControl(long threadId, Runnable r)">6</method>
			<method name="public static void forceTrack()">1</method>
			<method name="public static void stop()">2</method>
			<method name="public static void main(String[] args)">20</method>
			<method name="private static void releaseThreadControl(long threadId)">7</method>
			<method name="static java.util.Stack access$500()">1</method>
			<method name="static java.util.concurrent.locks.ReentrantLock access$100()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.Sampler</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract Object drawSample()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequencePattern$VarGroupBindings</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>14</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>14</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>0.0</lcom3>
		<loc>16</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.8333333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.5</amc>
		<cc>
			<method name="protected void set(int index, String name)">1</method>
			<method name="protected void _init_(int size)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunction$ExpectationThreadsafeProcessor</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>23</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>5</npm>
		<lcom3>0.25</lcom3>
		<loc>149</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>28.4</amc>
		<cc>
			<method name="public edu.stanford.nlp.util.Pair process(edu.stanford.nlp.util.Pair threadIDAndDocIndices)">8</method>
			<method name="public edu.stanford.nlp.util.concurrent.ThreadsafeProcessor newInstance()">1</method>
			<method name="public volatile Object process(Object x0)">1</method>
			<method name="public void _init_(edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunction, boolean calculateEmpirical)">0</method>
			<method name="public void _init_(edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunction)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.Expressions$VarAssignmentExpression</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>19</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>6</ce>
		<npm>4</npm>
		<lcom3>0.0</lcom3>
		<loc>216</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.35714285714285715</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>52.25</amc>
		<cc>
			<method name="public boolean equals(Object o)">11</method>
			<method name="public void _init_(String varName, edu.stanford.nlp.ling.tokensregex.types.Expression valueExpr, boolean bindAsValue)">0</method>
			<method name="public int hashCode()">4</method>
			<method name="public transient edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env env, Object[] args)">10</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.ModCollinsHeadFinder</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>2</noc>
		<cbo>10</cbo>
		<rfc>7</rfc>
		<lcom>1</lcom>
		<ca>7</ca>
		<ce>4</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>2034</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>1015.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(edu.stanford.nlp.trees.TreebankLanguagePack tlp)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.ArabicUnknownWordSignatures</name>
		<wmc>9</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>16</rfc>
		<lcom>24</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>0.875</lcom3>
		<loc>166</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.555555555555557</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="static String abstractionNounSuffix(String word)">2</method>
			<method name="static void _clinit_()">0</method>
			<method name="static String masdarPrefix(String word)">2</method>
			<method name="static String pastTenseVerbNumberSuffix(String word)">4</method>
			<method name="static String likelyAdjectivalSuffix(String word)">2</method>
			<method name="static boolean allDigitPlus(String word)">11</method>
			<method name="static String presentTenseVerbNumberSuffix(String word)">2</method>
			<method name="static String taaMarbuuTaSuffix(String word)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$LastGazAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.HookChart</name>
		<wmc>14</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>29</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>11</npm>
		<lcom3>0.78698224852071</lcom3>
		<loc>591</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.32051282051282054</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>40.285714285714285</amc>
		<cc>
			<method name="public void registerEdgeIndexes(edu.stanford.nlp.parser.lexparser.Edge edge)">3</method>
			<method name="public boolean isBuiltR(int state, int end, int head, int tag)">1</method>
			<method name="public java.util.Collection getEdges(edu.stanford.nlp.parser.lexparser.Hook hook)">3</method>
			<method name="void _init_()">0</method>
			<method name="public java.util.Collection getRealEdgesWithL(int state, int start)">2</method>
			<method name="static void _clinit_()">0</method>
			<method name="public boolean isBuiltL(int state, int start, int head, int tag)">1</method>
			<method name="public java.util.Collection getRealEdgesWithR(int state, int end)">2</method>
			<method name="public java.util.Collection getPostHooks(edu.stanford.nlp.parser.lexparser.Edge edge)">2</method>
			<method name="public void addEdge(edu.stanford.nlp.parser.lexparser.Edge edge)">3</method>
			<method name="public void addHook(edu.stanford.nlp.parser.lexparser.Hook hook)">3</method>
			<method name="public java.util.Collection getPreHooks(edu.stanford.nlp.parser.lexparser.Edge edge)">2</method>
			<method name="private static void insert(java.util.Map map, Object index, Object item)">2</method>
			<method name="public void registerRealEdge(edu.stanford.nlp.parser.lexparser.Edge edge)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.GrammaticalStructureFromDependenciesFactory</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>5</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract edu.stanford.nlp.trees.GrammaticalStructure build(java.util.List, edu.stanford.nlp.trees.TreeGraphNode)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.ClassifierCombiner$CombinationMode</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.888888888888889</lcom3>
		<loc>45</loc>
		<dam>0.3333333333333333</dam>
		<moa>3</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>9.5</amc>
		<cc>
			<method name="public static edu.stanford.nlp.ie.ClassifierCombiner$CombinationMode[] values()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static edu.stanford.nlp.ie.ClassifierCombiner$CombinationMode valueOf(String name)">1</method>
			<method name="private void _init_(String, int)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Execution</name>
		<wmc>30</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>138</rfc>
		<lcom>373</lcom>
		<ca>1</ca>
		<ce>8</ce>
		<npm>23</npm>
		<lcom3>0.7389162561576356</lcom3>
		<loc>1670</loc>
		<dam>0.42857142857142855</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.16379310344827586</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>54.43333333333333</amc>
		<cc>
			<method name="public static void exec(Runnable toRun, String[] args)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private static String threadRootClass()">1</method>
			<method name="public static void fillOptions(java.util.Properties props, String[] args)">4</method>
			<method name="protected static java.util.Map fillOptionsImpl(Object[] instances, Class[] classes, java.util.Properties options)">1</method>
			<method name="public static void fillOptions(Object instance, String[] args)">1</method>
			<method name="private static Class filePathToClass(String cpEntry, String path)">3</method>
			<method name="private static void fillField(Object instance, java.lang.reflect.Field f, String value)">7</method>
			<method name="public static void usageAndExit(java.util.Map argToFlagsMap)">5</method>
			<method name="public static void fillOptions(Class[] optionClasses, java.util.Properties props, String[] args)">1</method>
			<method name="public static void fillOptions(Object[] instances, java.util.Properties options)">2</method>
			<method name="public static void fillOptions(Class clazz, String[] args)">1</method>
			<method name="public static void fillOptions(Class[] classes, String[] args)">1</method>
			<method name="public static void usageAndExit(String[] expectedArgs)">2</method>
			<method name="public static void fillOptions(Class[] classes, java.util.Properties options)">1</method>
			<method name="public static void exec(Runnable toRun)">1</method>
			<method name="public static void exec(Runnable toRun, java.util.Properties options, boolean exit)">4</method>
			<method name="public static void exec(Runnable toRun, java.util.Properties options)">1</method>
			<method name="public static void fillOptions(java.util.Properties props)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public static Class[] getVisibleClasses()">6</method>
			<method name="public static void exec(Runnable toRun, String[] args, boolean exit)">1</method>
			<method name="private static boolean isIgnored(String path)">3</method>
			<method name="public static void exec(Runnable toRun, String[] args, Class[] optionClasses)">1</method>
			<method name="public static void fillOptions(Class clazz, java.util.Properties options)">1</method>
			<method name="public static void fillOptions(Object instance, java.util.Properties options)">1</method>
			<method name="protected static java.util.Map fillOptionsImpl(Object[] instances, Class[] classes, java.util.Properties options, boolean ensureAllOptions)">30</method>
			<method name="public static void exec(Runnable toRun, Class[] optionClasses)">1</method>
			<method name="public static void exec(Runnable toRun, String[] args, Class[] optionClasses, boolean exit)">1</method>
			<method name="public static void fillOptions(Object[] instances, String[] args)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.ParserQuery</name>
		<wmc>23</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>23</rfc>
		<lcom>253</lcom>
		<ca>8</ca>
		<ce>2</ce>
		<npm>23</npm>
		<lcom3>2.0</lcom3>
		<loc>23</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2246376811594203</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract boolean parseSucceeded()">1</method>
			<method name="public abstract edu.stanford.nlp.trees.Tree getBestPCFGParse()">1</method>
			<method name="public abstract java.util.List originalSentence()">1</method>
			<method name="public abstract edu.stanford.nlp.trees.Tree getBestParse()">1</method>
			<method name="public abstract edu.stanford.nlp.trees.Tree getBestDependencyParse(boolean)">1</method>
			<method name="public abstract boolean parseFallback()">1</method>
			<method name="public abstract void setConstraints(java.util.List)">1</method>
			<method name="public abstract boolean parseNoMemory()">1</method>
			<method name="public abstract boolean saidMemMessage()">1</method>
			<method name="public abstract boolean hasFactoredParse()">1</method>
			<method name="public abstract java.util.List getKBestPCFGParses(int)">1</method>
			<method name="public abstract void restoreOriginalWords(edu.stanford.nlp.trees.Tree)">1</method>
			<method name="public abstract edu.stanford.nlp.parser.KBestViterbiParser getDependencyParser()">1</method>
			<method name="public abstract java.util.List getBestPCFGParses()">1</method>
			<method name="public abstract java.util.List getKGoodFactoredParses(int)">1</method>
			<method name="public abstract edu.stanford.nlp.trees.Tree getBestFactoredParse()">1</method>
			<method name="public abstract boolean parseUnparsable()">1</method>
			<method name="public abstract edu.stanford.nlp.parser.KBestViterbiParser getPCFGParser()">1</method>
			<method name="public abstract edu.stanford.nlp.parser.KBestViterbiParser getFactoredParser()">1</method>
			<method name="public abstract boolean parseSkipped()">1</method>
			<method name="public abstract boolean parseAndReport(java.util.List, java.io.PrintWriter)">1</method>
			<method name="public abstract boolean parse(java.util.List)">1</method>
			<method name="public abstract double getPCFGScore()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.objectbank.IteratorFromReaderFactory</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>17</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>17</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract java.util.Iterator getIterator(java.io.Reader)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.process.DocumentPreprocessor</name>
		<wmc>24</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>16</cbo>
		<rfc>62</rfc>
		<lcom>184</lcom>
		<ca>6</ca>
		<ce>12</ce>
		<npm>13</npm>
		<lcom3>0.7312252964426879</lcom3>
		<loc>668</loc>
		<dam>0.9090909090909091</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.20108695652173914</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>26.375</amc>
		<cc>
			<method name="static edu.stanford.nlp.process.TokenizerFactory access$400(edu.stanford.nlp.process.DocumentPreprocessor x0)">1</method>
			<method name="public void setSentenceFinalPuncWords(String[] sentenceFinalPuncWords)">1</method>
			<method name="static java.io.Reader access$502(edu.stanford.nlp.process.DocumentPreprocessor x0, java.io.Reader x1)">1</method>
			<method name="static java.util.regex.Pattern access$300()">1</method>
			<method name="public void _init_(String docPath, edu.stanford.nlp.process.DocumentPreprocessor$DocType t)">0</method>
			<method name="static String access$800(edu.stanford.nlp.process.DocumentPreprocessor x0)">1</method>
			<method name="public java.util.Iterator iterator()">3</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void setElementDelimiter(String s)">1</method>
			<method name="static java.io.Reader access$500(edu.stanford.nlp.process.DocumentPreprocessor x0)">1</method>
			<method name="public void setSentenceDelimiter(String s)">1</method>
			<method name="static String access$000(edu.stanford.nlp.process.DocumentPreprocessor x0)">1</method>
			<method name="static String access$600(edu.stanford.nlp.process.DocumentPreprocessor x0)">1</method>
			<method name="public void _init_(String docPath, edu.stanford.nlp.process.DocumentPreprocessor$DocType t, String encoding)">0</method>
			<method name="static String[] access$100(edu.stanford.nlp.process.DocumentPreprocessor x0)">1</method>
			<method name="static String[] access$200(edu.stanford.nlp.process.DocumentPreprocessor x0)">1</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="public void setTagDelimiter(String s)">1</method>
			<method name="public void setTokenizerFactory(edu.stanford.nlp.process.TokenizerFactory newTokenizerFactory)">1</method>
			<method name="public void _init_(String docPath)">0</method>
			<method name="public void _init_(java.io.Reader input)">0</method>
			<method name="public void _init_(java.io.Reader input, edu.stanford.nlp.process.DocumentPreprocessor$DocType t)">0</method>
			<method name="static edu.stanford.nlp.util.Function access$700(edu.stanford.nlp.process.DocumentPreprocessor x0)">1</method>
			<method name="public void setEscaper(edu.stanford.nlp.util.Function e)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.IntCounter</name>
		<wmc>66</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>31</cbo>
		<rfc>111</rfc>
		<lcom>1473</lcom>
		<ca>20</ca>
		<ce>15</ce>
		<npm>62</npm>
		<lcom3>0.7252747252747253</lcom3>
		<loc>908</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.14743589743589744</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.651515151515152</amc>
		<cc>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="public boolean equals(Object o)">3</method>
			<method name="static void _clinit_()">0</method>
			<method name="public String toString(java.text.NumberFormat nf)">2</method>
			<method name="static int access$202(edu.stanford.nlp.stats.IntCounter x0, int x1)">1</method>
			<method name="public void prettyLog(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels channels, String description)">1</method>
			<method name="public boolean containsKey(Object key)">1</method>
			<method name="public int size()">1</method>
			<method name="public Object argmin()">1</method>
			<method name="public void removeAll(java.util.Collection c)">2</method>
			<method name="public void setCount(Object key, int count)">3</method>
			<method name="public double doubleMax()">1</method>
			<method name="public double incrementCount(Object key, double value)">1</method>
			<method name="public int max()">2</method>
			<method name="public int totalIntCount(edu.stanford.nlp.util.Filter filter)">2</method>
			<method name="public String toString(java.text.NumberFormat nf, String preAppend, String postAppend, String keyValSeparator, String itemSeparator)">2</method>
			<method name="static int access$200(edu.stanford.nlp.stats.IntCounter x0)">1</method>
			<method name="public void incrementCounts(java.util.Collection keys)">1</method>
			<method name="public double decrementCount(Object key)">1</method>
			<method name="public String getCountAsString(Object key)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public boolean isEmpty()">2</method>
			<method name="public double averageCount()">1</method>
			<method name="public Object argmax(java.util.Comparator tieBreaker)">4</method>
			<method name="public double getNormalizedCount(Object key)">1</method>
			<method name="public double totalCount()">1</method>
			<method name="public java.util.Set keysAbove(int countThreshold)">2</method>
			<method name="public int min()">2</method>
			<method name="public void setCount(Object key, String s)">1</method>
			<method name="public int getIntCount(Object key)">2</method>
			<method name="static java.util.Map access$100(edu.stanford.nlp.stats.IntCounter x0)">1</method>
			<method name="public double defaultReturnValue()">1</method>
			<method name="public void _init_(edu.stanford.nlp.util.MapFactory mapFactory)">0</method>
			<method name="public void setDefaultReturnValue(int rv)">1</method>
			<method name="public int totalIntCount()">1</method>
			<method name="public Object argmax()">1</method>
			<method name="public int incrementCount(Object key, int count)">3</method>
			<method name="public void removeZeroCounts()">3</method>
			<method name="public java.util.Collection values()">1</method>
			<method name="public void addAll(edu.stanford.nlp.stats.IntCounter counter)">2</method>
			<method name="public void clear()">1</method>
			<method name="public Object clone()">1</method>
			<method name="public java.util.Set keysBelow(int countThreshold)">2</method>
			<method name="public void _init_(edu.stanford.nlp.stats.IntCounter c)">0</method>
			<method name="public double totalCount(edu.stanford.nlp.util.Filter filter)">1</method>
			<method name="public double getCount(Object key)">1</method>
			<method name="public void decrementCounts(java.util.Collection keys, int count)">1</method>
			<method name="public edu.stanford.nlp.util.Factory getFactory()">1</method>
			<method name="public java.util.Set entrySet()">1</method>
			<method name="public java.util.Set keysAt(int count)">2</method>
			<method name="public void setCounts(java.util.Collection keys, int count)">2</method>
			<method name="public double totalDoubleCount(edu.stanford.nlp.util.Filter filter)">1</method>
			<method name="public void setDefaultReturnValue(double rv)">1</method>
			<method name="public String toString()">1</method>
			<method name="public void subtractAll(edu.stanford.nlp.stats.IntCounter counter)">2</method>
			<method name="public edu.stanford.nlp.util.MapFactory getMapFactory()">1</method>
			<method name="public double remove(Object key)">2</method>
			<method name="public java.util.Set keySet()">1</method>
			<method name="public void decrementCounts(java.util.Collection keys)">1</method>
			<method name="public int decrementCount(Object key, int count)">1</method>
			<method name="public Object argmin(java.util.Comparator tieBreaker)">4</method>
			<method name="public double totalDoubleCount()">1</method>
			<method name="public double incrementCount(Object key)">1</method>
			<method name="public int hashCode()">1</method>
			<method name="public void setCount(Object key, double value)">1</method>
			<method name="public void incrementCounts(java.util.Collection keys, int count)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.TreeGraphNode</name>
		<wmc>47</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>33</cbo>
		<rfc>102</rfc>
		<lcom>749</lcom>
		<ca>15</ca>
		<ce>20</ce>
		<npm>36</npm>
		<lcom3>0.7484472049689441</lcom3>
		<loc>1030</loc>
		<dam>1.0</dam>
		<moa>6</moa>
		<mfa>0.0</mfa>
		<cam>0.10190217391304347</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>20.76595744680851</amc>
		<cc>
			<method name="private void setHeadWordNode(edu.stanford.nlp.trees.TreeGraphNode hwn)">1</method>
			<method name="public static edu.stanford.nlp.trees.TreeFactory factory()">1</method>
			<method name="protected void setIndex(int index)">1</method>
			<method name="public boolean equals(Object o)">2</method>
			<method name="protected void indexNodes()">1</method>
			<method name="public void _init_(edu.stanford.nlp.ling.Label label, java.util.List children)">0</method>
			<method name="public java.util.Set followArcToSet(Class arcLabel)">1</method>
			<method name="public edu.stanford.nlp.trees.TreeGraphNode[] children()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void setLabel(edu.stanford.nlp.ling.CoreLabel label)">1</method>
			<method name="public void setParent(edu.stanford.nlp.trees.TreeGraphNode parent)">1</method>
			<method name="public java.util.Set dependencies(edu.stanford.nlp.util.Filter filter, edu.stanford.nlp.trees.HeadFinder hf)">13</method>
			<method name="public edu.stanford.nlp.trees.TreeGraphNode headTagNode()">4</method>
			<method name="public String toPrimes()">2</method>
			<method name="public edu.stanford.nlp.trees.TreeGraphNode followArcToNode(Class arcLabel)">2</method>
			<method name="private int indexLeaves(int startIndex)">5</method>
			<method name="public void setChildren(java.util.List childTreesList)">3</method>
			<method name="private void setHeadTagNode(edu.stanford.nlp.trees.TreeGraphNode htn)">1</method>
			<method name="public edu.stanford.nlp.trees.TreeGraphNode headWordNode()">4</method>
			<method name="public volatile edu.stanford.nlp.ling.Label label()">1</method>
			<method name="public String toString(String format)">1</method>
			<method name="protected edu.stanford.nlp.trees.TreeGraph treeGraph()">1</method>
			<method name="public static edu.stanford.nlp.trees.TreeFactory factory(edu.stanford.nlp.ling.LabelFactory lf)">1</method>
			<method name="public volatile edu.stanford.nlp.trees.Tree[] children()">1</method>
			<method name="private static edu.stanford.nlp.trees.TreeGraphNode safeCast(Object t)">3</method>
			<method name="public String toString()">1</method>
			<method name="private int indexNodes(int startIndex)">5</method>
			<method name="public edu.stanford.nlp.trees.TreeGraphNode highestNodeWithSameHead()">3</method>
			<method name="public void _init_(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.TreeGraph graph)">0</method>
			<method name="public void percolateHeads(edu.stanford.nlp.trees.HeadFinder hf)">8</method>
			<method name="public void _init_()">0</method>
			<method name="public String toPrettyString(int indentLevel)">5</method>
			<method name="public String toOneLineString()">4</method>
			<method name="protected void setTreeGraph(edu.stanford.nlp.trees.TreeGraph tg)">2</method>
			<method name="public Class arcLabelToNode(edu.stanford.nlp.trees.TreeGraphNode destNode)">2</method>
			<method name="public boolean addArc(Class arcLabel, edu.stanford.nlp.trees.TreeGraphNode node)">4</method>
			<method name="public int hashCode()">1</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="public edu.stanford.nlp.trees.TreeFactory treeFactory()">2</method>
			<method name="public edu.stanford.nlp.ling.CoreLabel label()">1</method>
			<method name="public void _init_(edu.stanford.nlp.trees.TreeGraphNode t)">0</method>
			<method name="public void _init_(edu.stanford.nlp.ling.Label label)">0</method>
			<method name="public void setChildren(edu.stanford.nlp.trees.Tree[] children)">5</method>
			<method name="public int index()">1</method>
			<method name="protected void _init_(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.TreeGraphNode parent)">0</method>
			<method name="public java.util.Set arcLabelsToNode(edu.stanford.nlp.trees.TreeGraphNode destNode)">4</method>
			<method name="public edu.stanford.nlp.trees.Tree parent()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.process.DistSimClassifier</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>23</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>4</npm>
		<lcom3>0.2666666666666666</lcom3>
		<loc>153</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>36.0</amc>
		<cc>
			<method name="public void _init_(String filename, boolean cased, boolean numberEquivalence)">0</method>
			<method name="public String distSimClass(String word)">4</method>
			<method name="public void _init_(String filename, String format, String encoding, int distSimMaxBits, boolean cased, boolean numberEquivalence, String unknownWordClass)">0</method>
			<method name="public void _init_(String filename, boolean cased, boolean numberEquivalence, String unknownWordClass)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.Entity</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>10</rfc>
		<lcom>1</lcom>
		<ca>4</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>1.0</lcom3>
		<loc>58</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>26.0</amc>
		<cc>
			<method name="public String toString(edu.stanford.nlp.util.Index classIndex)">1</method>
			<method name="void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalRelations$NpAdverbialModifierGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.MatchedExpression$8</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>7</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>37</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.333333333333334</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="void _init_()">0</method>
			<method name="public int compare(edu.stanford.nlp.ling.tokensregex.MatchedExpression e1, edu.stanford.nlp.ling.tokensregex.MatchedExpression e2)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.TreeFunctions$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>4</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.sequences.FactoredSequenceModel</name>
		<wmc>10</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>20</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>10</npm>
		<lcom3>0.3333333333333333</lcom3>
		<loc>286</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.3</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>27.0</amc>
		<cc>
			<method name="public int length()">2</method>
			<method name="public double scoreOf(int[] sequence)">3</method>
			<method name="public int rightWindow()">2</method>
			<method name="public void _init_(edu.stanford.nlp.sequences.SequenceModel model1, edu.stanford.nlp.sequences.SequenceModel model2)">0</method>
			<method name="public void _init_(edu.stanford.nlp.sequences.SequenceModel model1, edu.stanford.nlp.sequences.SequenceModel model2, double wt1, double wt2)">0</method>
			<method name="public double scoreOf(int[] sequence, int pos)">1</method>
			<method name="public int[] getPossibleValues(int position)">2</method>
			<method name="public double[] scoresOf(int[] sequence, int pos)">4</method>
			<method name="public void _init_(edu.stanford.nlp.sequences.SequenceModel[] models, double[] weights)">0</method>
			<method name="public int leftWindow()">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.sentiment.SentimentPipeline$1</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>5</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>54</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>51.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.MatchedExpression$3</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>4</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>14</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.6666666666666665</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="public edu.stanford.nlp.util.Interval apply(edu.stanford.nlp.ling.tokensregex.MatchedExpression in)">1</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.MatchedExpression$2</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>21</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="public edu.stanford.nlp.util.Interval apply(edu.stanford.nlp.util.CoreMap in)">1</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.MatchedExpression$1</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>21</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="public edu.stanford.nlp.util.Interval apply(edu.stanford.nlp.util.CoreMap in)">1</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.Expressions$TypedExpression</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>7</noc>
		<cbo>10</cbo>
		<rfc>14</rfc>
		<lcom>2</lcom>
		<ca>7</ca>
		<ce>3</ce>
		<npm>8</npm>
		<lcom3>0.7142857142857143</lcom3>
		<loc>108</loc>
		<dam>0.3333333333333333</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.2708333333333333</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>12.125</amc>
		<cc>
			<method name="public boolean hasValue()">1</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Expression simplify(edu.stanford.nlp.ling.tokensregex.Env env)">1</method>
			<method name="public boolean equals(Object o)">9</method>
			<method name="public int hashCode()">3</method>
			<method name="public String getType()">1</method>
			<method name="public void setTags(edu.stanford.nlp.ling.tokensregex.types.Tags tags)">1</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Tags getTags()">1</method>
			<method name="public transient void _init_(String typename, String[] tags)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.fsm.TransducerGraph$ObjectToSetNodeProcessor</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>8</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Object processNode(Object node)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.MatchedExpression$7</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>5</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>19</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.333333333333333</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="void _init_()">0</method>
			<method name="public int compare(edu.stanford.nlp.ling.tokensregex.MatchedExpression e1, edu.stanford.nlp.ling.tokensregex.MatchedExpression e2)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.MatchedExpression$6</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>8</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>65</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>20.666666666666668</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="void _init_()">0</method>
			<method name="public int compare(edu.stanford.nlp.ling.tokensregex.MatchedExpression e1, edu.stanford.nlp.ling.tokensregex.MatchedExpression e2)">7</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.MatchedExpression$5</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>5</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>31</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.333333333333334</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="void _init_()">0</method>
			<method name="public int compare(edu.stanford.nlp.ling.tokensregex.MatchedExpression e1, edu.stanford.nlp.ling.tokensregex.MatchedExpression e2)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.RerouteChannel</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>8</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>65</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>30.5</amc>
		<cc>
			<method name="public void _init_(Object oldChannelName, Object newChannelName)">0</method>
			<method name="public java.util.List handle(edu.stanford.nlp.util.logging.Redwood$Record record)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.MatchedExpression$4</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>5</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>33</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.0</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="void _init_()">0</method>
			<method name="public int compare(edu.stanford.nlp.ling.tokensregex.MatchedExpression e1, edu.stanford.nlp.ling.tokensregex.MatchedExpression e2)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.DependencyFactory</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>2</rfc>
		<lcom>1</lcom>
		<ca>10</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>2</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.8333333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract edu.stanford.nlp.trees.Dependency newDependency(edu.stanford.nlp.ling.Label, edu.stanford.nlp.ling.Label, Object)">1</method>
			<method name="public abstract edu.stanford.nlp.trees.Dependency newDependency(edu.stanford.nlp.ling.Label, edu.stanford.nlp.ling.Label)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.CopulaHeadFinder</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract boolean makesCopulaHead()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.TimeExpression$Annotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$SemanticHeadTagAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseHeadFinder</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>1</noc>
		<cbo>6</cbo>
		<rfc>7</rfc>
		<lcom>1</lcom>
		<ca>3</ca>
		<ce>4</ce>
		<npm>2</npm>
		<lcom3>0.75</lcom3>
		<loc>1039</loc>
		<dam>0.5</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>344.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void _init_(edu.stanford.nlp.trees.TreebankLanguagePack tlp)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequenceMatchAction$BoundAction</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>1.0</lcom3>
		<loc>14</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.0</amc>
		<cc>
			<method name="public edu.stanford.nlp.ling.tokensregex.SequenceMatchResult apply(edu.stanford.nlp.ling.tokensregex.SequenceMatchResult seqMatchResult)">1</method>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.FactoredLexiconEvent</name>
		<wmc>9</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>10</rfc>
		<lcom>18</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>9</npm>
		<lcom3>0.8571428571428572</lcom3>
		<loc>64</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4074074074074074</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.333333333333333</amc>
		<cc>
			<method name="public int getLoc()">1</method>
			<method name="public int tagId()">1</method>
			<method name="public int wordId()">1</method>
			<method name="public String featureStr()">1</method>
			<method name="public int morphId()">1</method>
			<method name="public String toString()">1</method>
			<method name="public int lemmaId()">1</method>
			<method name="public void _init_(int wordId, int tagId, int lemmaId, int morphId, int loc, String word, String featureStr)">0</method>
			<method name="public String word()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.HTKLatticeReader$LatticeWord</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>14</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>6</npm>
		<lcom3>0.6</lcom3>
		<loc>184</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>28.5</amc>
		<cc>
			<method name="public volatile int compareTo(Object x0)">1</method>
			<method name="public void _init_(String word, int startNode, int endNode, double lm, double am, int pronunciation, boolean mergeType)">0</method>
			<method name="public int compareTo(edu.stanford.nlp.parser.lexparser.HTKLatticeReader$LatticeWord other)">5</method>
			<method name="public boolean equals(Object o)">5</method>
			<method name="public void merge(edu.stanford.nlp.parser.lexparser.HTKLatticeReader$LatticeWord lw)">3</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.french.FrenchHeadFinder$1</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>6</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>18</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.5</amc>
		<cc>
			<method name="public void visitTree(edu.stanford.nlp.trees.Tree pt)">1</method>
			<method name="void _init_(edu.stanford.nlp.trees.HeadFinder)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.Dependencies$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.TimeFormatter$TextDateComponent</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>28</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>8</ce>
		<npm>4</npm>
		<lcom3>0.75</lcom3>
		<loc>168</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.34285714285714286</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>31.4</amc>
		<cc>
			<method name="protected StringBuilder appendRegex0(StringBuilder sb)">3</method>
			<method name="public Integer parseValue(String str)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(org.joda.time.DateTimeFieldType fieldType, java.util.Locale locale, Boolean isShort)">0</method>
			<method name="public void addValue(String str, int v)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.pascal.AcronymModel$BegWord</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>5</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>57</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.0</amc>
		<cc>
			<method name="public double value(edu.stanford.nlp.ie.pascal.Alignment alignment)">6</method>
			<method name="public void _init_()">0</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.Expressions$RegexValue</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="public transient void _init_(String regex, String[] tags)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequencePattern$GroupPatternExpr</name>
		<wmc>10</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>26</rfc>
		<lcom>3</lcom>
		<ca>2</ca>
		<ce>6</ce>
		<npm>4</npm>
		<lcom3>0.25</lcom3>
		<loc>168</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.35</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.4</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr pattern, String varname)">0</method>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr pattern, boolean capture)">0</method>
			<method name="protected void updateBindings(edu.stanford.nlp.ling.tokensregex.SequencePattern$VarGroupBindings bindings)">2</method>
			<method name="protected int assignGroupIds(int start)">2</method>
			<method name="protected edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr copy()">1</method>
			<method name="protected edu.stanford.nlp.ling.tokensregex.SequencePattern$Frag build()">1</method>
			<method name="public String toString()">3</method>
			<method name="protected edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr optimize()">1</method>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr pattern)">0</method>
			<method name="private void _init_(edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr pattern, boolean capture, int captureGroupId, String varname)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.Expressions$FunctionCallExpression</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>4</noc>
		<cbo>17</cbo>
		<rfc>47</rfc>
		<lcom>0</lcom>
		<ca>7</ca>
		<ce>10</ce>
		<npm>6</npm>
		<lcom3>0.0</lcom3>
		<loc>572</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.30952380952380953</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>94.0</amc>
		<cc>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Expression simplify(edu.stanford.nlp.ling.tokensregex.Env env)">3</method>
			<method name="public boolean equals(Object o)">9</method>
			<method name="public int hashCode()">3</method>
			<method name="public String toString()">1</method>
			<method name="public transient edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env env, Object[] args)">19</method>
			<method name="public transient void _init_(String function, java.util.List params, String[] tags)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$ChunkAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.sequences.LatticeWriter</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract void printLattice(edu.stanford.nlp.fsm.DFSA, java.util.List, java.io.PrintWriter)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.VisibilityHandler$1</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>21</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.ArrayUtils</name>
		<wmc>65</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>13</cbo>
		<rfc>118</rfc>
		<lcom>2080</lcom>
		<ca>11</ca>
		<ce>2</ce>
		<npm>62</npm>
		<lcom3>2.0</lcom3>
		<loc>2426</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.042679900744416875</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>36.323076923076925</amc>
		<cc>
			<method name="public static void fill(double[][][][] d, double val)">2</method>
			<method name="public static java.util.Set asImmutableSet(Object[] a)">3</method>
			<method name="public static byte[] deltaEncode(int[] orig)">2</method>
			<method name="public static java.util.List getSubListIndex(Object[] tofind, Object[] tokens)">11</method>
			<method name="public static long[] toPrimitive(Long[] in, long valueForNull)">4</method>
			<method name="public static double[] normalize(double[] ar)">3</method>
			<method name="public static double[] toPrimitive(Double[] in)">1</method>
			<method name="public static boolean equalContents(int[] xs, int[] ys)">4</method>
			<method name="public static float[][][] copy(float[][][] d)">3</method>
			<method name="public static java.util.List gapEncodeList(int[] orig)">14</method>
			<method name="public static boolean equalContents(int[][] xs, int[][] ys)">7</method>
			<method name="private void _init_()">0</method>
			<method name="public static int compareArrays(Comparable[] first, Comparable[] second)">1</method>
			<method name="public static char[] toPrimitive(Character[] in, char valueForNull)">4</method>
			<method name="public static double[][] copy(double[][] d)">3</method>
			<method name="public static void fill(boolean[][][] d, boolean val)">2</method>
			<method name="public static String toString(int[][] a)">3</method>
			<method name="public static java.util.List deltaDecodeList(byte[] deltaEncoded, int startIndex, int endIndex)">13</method>
			<method name="public static boolean contains(Object[] a, Object o)">3</method>
			<method name="public static byte[] gapEncode(int[] orig)">2</method>
			<method name="public static double[] flatten(double[][] array)">4</method>
			<method name="private static java.util.BitSet byteArrayToBitSet(byte[] array)">10</method>
			<method name="public static int[] deltaDecode(byte[] deltaEncoded, int startIndex, int endIndex)">2</method>
			<method name="public static float[][] copy(float[][] d)">3</method>
			<method name="public static String toString(boolean[][] b)">3</method>
			<method name="public static double[] toPrimitive(Double[] in, double valueForNull)">4</method>
			<method name="public static int[] copy(int[] i)">2</method>
			<method name="public static char[] toPrimitive(Character[] in)">1</method>
			<method name="public static int[] toPrimitive(Integer[] in)">1</method>
			<method name="public static int[][] copy(int[][] i)">3</method>
			<method name="public static double[] copy(double[] d)">2</method>
			<method name="public static Object[] subArray(Object[] arr, int startindexInclusive, int endindexExclusive)">6</method>
			<method name="public static java.util.List gapDecodeList(byte[] gapEncoded)">1</method>
			<method name="public static double[] asPrimitiveDoubleArray(java.util.Collection d)">2</method>
			<method name="public static int[] toPrimitive(Integer[] in, int valueForNull)">4</method>
			<method name="public static double[][] to2D(double[] array, int dim1Size, int dim2Size)">3</method>
			<method name="public static float[] copy(float[] d)">2</method>
			<method name="public static int[] asPrimitiveIntArray(java.util.Collection d)">2</method>
			<method name="public static void fill(boolean[][][][] d, boolean val)">2</method>
			<method name="public static java.util.List deltaDecodeList(byte[] deltaEncoded)">1</method>
			<method name="public static java.util.Set asSet(Object[] a)">1</method>
			<method name="public static long[] toPrimitive(Long[] in)">1</method>
			<method name="public static void fill(double[][] d, double val)">2</method>
			<method name="public static short[] toPrimitive(Short[] in)">1</method>
			<method name="public static Object[] removeAt(Object[] array, int index)">7</method>
			<method name="public static java.util.List asList(int[] array)">2</method>
			<method name="public static double[] toDouble(int[] array)">2</method>
			<method name="public static double[][][] copy(double[][][] d)">3</method>
			<method name="public static double[][] to2D(double[] array, int dim1Size)">1</method>
			<method name="public static boolean equals(boolean[][] xs, boolean[][] ys)">7</method>
			<method name="public static int[] gapDecode(byte[] gapEncoded, int startIndex, int endIndex)">2</method>
			<method name="public static double[] removeAt(double[] array, int index)">7</method>
			<method name="public static boolean equals(double[][] xs, double[][] ys)">7</method>
			<method name="public static java.util.List gapDecodeList(byte[] gapEncoded, int startIndex, int endIndex)">10</method>
			<method name="private static byte[] bitSetToByteArray(java.util.BitSet bitSet)">5</method>
			<method name="public static void main(String[] args)">4</method>
			<method name="public static int[] deltaDecode(byte[] deltaEncoded)">1</method>
			<method name="public static short[] toPrimitive(Short[] in, short valueForNull)">4</method>
			<method name="public static double[] toDouble(float[] a)">2</method>
			<method name="public static String toString(double[][] b)">3</method>
			<method name="public static int[] gapDecode(byte[] gapEncoded)">1</method>
			<method name="public static java.util.List deltaEncodeList(int[] orig)">18</method>
			<method name="public static double[] toDoubleArray(String[] in)">2</method>
			<method name="public static void fill(boolean[][] d, boolean val)">2</method>
			<method name="public static void fill(double[][][] d, double val)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.Dependencies$DependentPuncTagRejectFilter</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>7</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>0.75</lcom3>
		<loc>36</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.333333333333334</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.util.Filter trf)">0</method>
			<method name="public boolean accept(edu.stanford.nlp.trees.Dependency d)">3</method>
			<method name="public volatile boolean accept(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.sievepasses.MarkRole</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>8</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.Expressions$AssignableFunctionCallExpression</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>2</noc>
		<cbo>6</cbo>
		<rfc>6</rfc>
		<lcom>1</lcom>
		<ca>2</ca>
		<ce>4</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>33</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.5</amc>
		<cc>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Expression assign(edu.stanford.nlp.ling.tokensregex.types.Expression expr)">1</method>
			<method name="public transient void _init_(String function, java.util.List params, String[] tags)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.process.AbstractListProcessor</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>2</noc>
		<cbo>5</cbo>
		<rfc>13</rfc>
		<lcom>3</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>44</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.666666666666666</amc>
		<cc>
			<method name="public edu.stanford.nlp.ling.Document processDocument(edu.stanford.nlp.ling.Document in)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public java.util.List processLists(java.util.List lists)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.metrics.FilteredEval</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>9</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>8</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>45</loc>
		<dam>0.5</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.333333333333334</amc>
		<cc>
			<method name="public void _init_(String str, boolean runningAverages, edu.stanford.nlp.util.Filter subtreeFilter)">0</method>
			<method name="protected java.util.Set makeObjects(edu.stanford.nlp.trees.Tree tree)">2</method>
			<method name="public static edu.stanford.nlp.parser.metrics.FilteredEval childFilteredEval(String str, boolean runningAverages, edu.stanford.nlp.trees.TreebankLanguagePack tlp, String childPattern)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.charniak.CharniakScoredParsesReaderWriter$ScoredParsesIterator</name>
		<wmc>8</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>36</rfc>
		<lcom>18</lcom>
		<ca>1</ca>
		<ce>8</ce>
		<npm>3</npm>
		<lcom3>0.22222222222222218</lcom3>
		<loc>304</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>35.875</amc>
		<cc>
			<method name="void _init_(String x0, edu.stanford.nlp.parser.charniak.CharniakScoredParsesReaderWriter$1 x1)">0</method>
			<method name="private void _init_(String inputDesc, java.io.BufferedReader br)">0</method>
			<method name="public java.util.List next()">4</method>
			<method name="void _init_(String x0, java.io.BufferedReader x1, edu.stanford.nlp.parser.charniak.CharniakScoredParsesReaderWriter$1 x2)">0</method>
			<method name="public boolean hasNext()">2</method>
			<method name="private java.util.List getNext()">9</method>
			<method name="private void _init_(String filename)">0</method>
			<method name="public volatile Object next()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalRelations$ComplementizerGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.process.SerializableFunction</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>15</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>14</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.ChineseCharacterBasedLexicon$Symbol</name>
		<wmc>11</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>26</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>9</npm>
		<lcom3>0.8944444444444445</lcom3>
		<loc>260</loc>
		<dam>0.5555555555555556</dam>
		<moa>6</moa>
		<mfa>0.0</mfa>
		<cam>0.28</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>21.0</amc>
		<cc>
			<method name="public void _init_(char ch)">0</method>
			<method name="public boolean equals(Object o)">8</method>
			<method name="public static edu.stanford.nlp.parser.lexparser.ChineseCharacterBasedLexicon$Symbol cannonicalSymbol(char ch)">4</method>
			<method name="public int hashCode()">2</method>
			<method name="public void _init_(int type)">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="protected Object readResolve()">1</method>
			<method name="public void _init_(String unkClass)">0</method>
			<method name="public char getCh()">2</method>
			<method name="public edu.stanford.nlp.parser.lexparser.ChineseCharacterBasedLexicon$Symbol intern()">1</method>
			<method name="public String toString()">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$BestFullAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalRelations$NumericModifierGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.TaggedWord</name>
		<wmc>13</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>39</cbo>
		<rfc>27</rfc>
		<lcom>48</lcom>
		<ca>34</ca>
		<ce>5</ce>
		<npm>13</npm>
		<lcom3>0.8611111111111112</lcom3>
		<loc>111</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5128205128205128</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.3076923076923075</amc>
		<cc>
			<method name="public String toString(String divider)">1</method>
			<method name="public String tag()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(String word)">0</method>
			<method name="public void _init_(edu.stanford.nlp.ling.Label word, edu.stanford.nlp.ling.Label tag)">0</method>
			<method name="public void setTag(String tag)">1</method>
			<method name="public void _init_(String word, String tag)">0</method>
			<method name="public edu.stanford.nlp.ling.LabelFactory labelFactory()">1</method>
			<method name="public void setFromString(String taggedWord)">1</method>
			<method name="public void setFromString(String taggedWord, String divider)">2</method>
			<method name="public static edu.stanford.nlp.ling.LabelFactory factory()">1</method>
			<method name="public void _init_(edu.stanford.nlp.ling.Label oldLabel)">0</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.StringLabel</name>
		<wmc>14</wmc>
		<dit>0</dit>
		<noc>4</noc>
		<cbo>20</cbo>
		<rfc>18</rfc>
		<lcom>7</lcom>
		<ca>15</ca>
		<ce>5</ce>
		<npm>14</npm>
		<lcom3>0.7115384615384616</lcom3>
		<loc>116</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.0</amc>
		<cc>
			<method name="public void _init_(String str, int beginPosition, int endPosition)">0</method>
			<method name="public String value()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(String str)">0</method>
			<method name="public void setValue(String value)">1</method>
			<method name="public int beginPosition()">1</method>
			<method name="public void setFromString(String str)">1</method>
			<method name="public void setEndPosition(int endPosition)">1</method>
			<method name="public edu.stanford.nlp.ling.LabelFactory labelFactory()">1</method>
			<method name="public void _init_(edu.stanford.nlp.ling.Label label)">0</method>
			<method name="public int endPosition()">1</method>
			<method name="public String toString()">1</method>
			<method name="public static edu.stanford.nlp.ling.LabelFactory factory()">1</method>
			<method name="public void setBeginPosition(int beginPosition)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.SunJurafskyChineseHeadFinder</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>6</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>846</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>421.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(edu.stanford.nlp.trees.TreebankLanguagePack tlp)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.ReflectionLoading$ReflectionLoadingException</name>
		<wmc>1</wmc>
		<dit>4</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>1.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.0</amc>
		<cc>
			<method name="public void _init_(String message, Throwable reason)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.HasContext</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>6</rfc>
		<lcom>15</lcom>
		<ca>5</ca>
		<ce>0</ce>
		<npm>6</npm>
		<lcom3>2.0</lcom3>
		<loc>6</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract void setAfter(String)">1</method>
			<method name="public abstract void setBefore(String)">1</method>
			<method name="public abstract String originalText()">1</method>
			<method name="public abstract String after()">1</method>
			<method name="public abstract void setOriginalText(String)">1</method>
			<method name="public abstract String before()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.RedwoodConfiguration$Thunk</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>12</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>11</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract void apply(edu.stanford.nlp.util.logging.RedwoodConfiguration, edu.stanford.nlp.util.logging.Redwood$RecordHandlerTree)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequencePattern$RepeatPatternExpr</name>
		<wmc>8</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>27</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>3</npm>
		<lcom3>0.21428571428571427</lcom3>
		<loc>255</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>30.375</amc>
		<cc>
			<method name="protected void updateBindings(edu.stanford.nlp.ling.tokensregex.SequencePattern$VarGroupBindings bindings)">1</method>
			<method name="protected int assignGroupIds(int start)">1</method>
			<method name="protected edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr copy()">1</method>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr pattern, int minMatch, int maxMatch, boolean greedy)">0</method>
			<method name="protected edu.stanford.nlp.ling.tokensregex.SequencePattern$Frag build()">9</method>
			<method name="public String toString()">2</method>
			<method name="protected edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr optimize()">1</method>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr pattern, int minMatch, int maxMatch)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.sentiment.SentimentPipeline$Output</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.9333333333333332</lcom3>
		<loc>67</loc>
		<dam>0.2</dam>
		<moa>5</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>14.5</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static edu.stanford.nlp.sentiment.SentimentPipeline$Output[] values()">1</method>
			<method name="public static edu.stanford.nlp.sentiment.SentimentPipeline$Output valueOf(String name)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.Mention</name>
		<wmc>84</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>44</cbo>
		<rfc>208</rfc>
		<lcom>2474</lcom>
		<ca>20</ca>
		<ce>27</ce>
		<npm>61</npm>
		<lcom3>0.9198533263488737</lcom3>
		<loc>5414</loc>
		<dam>0.08695652173913043</dam>
		<moa>12</moa>
		<mfa>0.0</mfa>
		<cam>0.1368330464716007</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>62.904761904761905</amc>
		<cc>
			<method name="public boolean isListMemberOf(edu.stanford.nlp.dcoref.Mention m)">5</method>
			<method name="public boolean gendersAgree(edu.stanford.nlp.dcoref.Mention m)">1</method>
			<method name="public boolean animaciesAgree(edu.stanford.nlp.dcoref.Mention m, boolean strict)">6</method>
			<method name="public String lowercaseNormalizedSpanString()">2</method>
			<method name="private static edu.stanford.nlp.util.Pair findDependentVerb(edu.stanford.nlp.dcoref.Mention m)">7</method>
			<method name="private static boolean included(edu.stanford.nlp.ling.CoreLabel small, java.util.List big)">4</method>
			<method name="public String[] getSplitPattern()">4</method>
			<method name="public String stringWithoutArticle(String str)">8</method>
			<method name="static void _clinit_()">0</method>
			<method name="public String getPattern()">3</method>
			<method name="public boolean isPredicateNominatives(edu.stanford.nlp.dcoref.Mention m)">3</method>
			<method name="private void setDiscourse()">7</method>
			<method name="public boolean isMemberOfSameList(edu.stanford.nlp.dcoref.Mention m)">4</method>
			<method name="private static int[] getNumberCount(edu.stanford.nlp.dcoref.Dictionaries dict, java.util.List mStr)">7</method>
			<method name="private static java.util.List getContextHelper(java.util.List words)">6</method>
			<method name="private int[] getGenderCount(edu.stanford.nlp.dcoref.Dictionaries dict, java.util.List mStr)">14</method>
			<method name="public boolean sameSentence(edu.stanford.nlp.dcoref.Mention m)">2</method>
			<method name="public String removePhraseAfterHead()">17</method>
			<method name="public void _init_(int mentionID, int startIndex, int endIndex, edu.stanford.nlp.semgraph.SemanticGraph dependency, java.util.List mentionSpan, edu.stanford.nlp.trees.Tree mentionTree)">0</method>
			<method name="public boolean includedIn(edu.stanford.nlp.dcoref.Mention m)">5</method>
			<method name="protected void setNumber(edu.stanford.nlp.dcoref.Dictionaries dict, int[] genderNumberCount)">19</method>
			<method name="public static String buildQueryText(java.util.List terms)">2</method>
			<method name="public java.util.ArrayList getPremodifiers()">3</method>
			<method name="public boolean gendersAgree(edu.stanford.nlp.dcoref.Mention m, boolean strict)">6</method>
			<method name="public void _init_()">0</method>
			<method name="private void setHeadString()">7</method>
			<method name="public boolean isRelativePronoun(edu.stanford.nlp.dcoref.Mention m)">3</method>
			<method name="public void process(edu.stanford.nlp.dcoref.Dictionaries dict, edu.stanford.nlp.dcoref.Semantics semantics, edu.stanford.nlp.dcoref.MentionExtractor mentionExtractor, edu.stanford.nlp.classify.LogisticClassifier singletonPredictor)">1</method>
			<method name="private void setSingleton(edu.stanford.nlp.classify.LogisticClassifier predictor, edu.stanford.nlp.dcoref.Dictionaries dict)">2</method>
			<method name="public int getCoordination()">4</method>
			<method name="private void setType(edu.stanford.nlp.dcoref.Dictionaries dict)">13</method>
			<method name="private void setAnimacy(edu.stanford.nlp.dcoref.Dictionaries dict)">23</method>
			<method name="public boolean entityTypesAgree(edu.stanford.nlp.dcoref.Mention m, edu.stanford.nlp.dcoref.Dictionaries dict, boolean strict)">26</method>
			<method name="public boolean isApposition(edu.stanford.nlp.dcoref.Mention m)">3</method>
			<method name="private java.util.List getMentionString()">2</method>
			<method name="public String getRelation()">27</method>
			<method name="public String lowestNPIncludesHead()">8</method>
			<method name="public static String removeParenthesis(String text)">2</method>
			<method name="public java.util.ArrayList getPostmodifiers()">4</method>
			<method name="private static boolean knownSuffix(String s)">4</method>
			<method name="private boolean numbersAgree(edu.stanford.nlp.dcoref.Mention m, boolean strict)">6</method>
			<method name="public int getModal(edu.stanford.nlp.dcoref.Dictionaries dict)">10</method>
			<method name="public int getReportEmbedding(edu.stanford.nlp.dcoref.Dictionaries dict)">9</method>
			<method name="public String getPattern(java.util.List pTokens)">11</method>
			<method name="protected java.util.ArrayList getSingletonFeatures(edu.stanford.nlp.dcoref.Dictionaries dict)">5</method>
			<method name="public String longestNNPEndsWithHead()">4</method>
			<method name="public void _init_(int mentionID, int startIndex, int endIndex, edu.stanford.nlp.semgraph.SemanticGraph dependency)">0</method>
			<method name="public String getPosition()">9</method>
			<method name="protected boolean headsAgree(edu.stanford.nlp.dcoref.Mention m)">6</method>
			<method name="public String nerName()">2</method>
			<method name="private void setNERString()">5</method>
			<method name="public void addRelativePronoun(edu.stanford.nlp.dcoref.Mention m)">2</method>
			<method name="public boolean isCoordinated()">3</method>
			<method name="protected boolean isTheCommonNoun()">4</method>
			<method name="public boolean animaciesAgree(edu.stanford.nlp.dcoref.Mention m)">1</method>
			<method name="public int getModifiers(edu.stanford.nlp.dcoref.Dictionaries dict)">9</method>
			<method name="private void setGender(edu.stanford.nlp.dcoref.Dictionaries dict, int[] genderNumberCount)">19</method>
			<method name="public boolean appearEarlierThan(edu.stanford.nlp.dcoref.Mention m)">12</method>
			<method name="public String toString()">1</method>
			<method name="public java.util.List getPremodifierContext()">2</method>
			<method name="public boolean isDemonym(edu.stanford.nlp.dcoref.Mention m, edu.stanford.nlp.dcoref.Dictionaries dict)">7</method>
			<method name="private boolean isListLike()">18</method>
			<method name="public int getNegation(edu.stanford.nlp.dcoref.Dictionaries dict)">6</method>
			<method name="private void setPerson(edu.stanford.nlp.dcoref.Dictionaries dict)">15</method>
			<method name="public boolean numbersAgree(edu.stanford.nlp.dcoref.Mention m)">1</method>
			<method name="private void setSemantics(edu.stanford.nlp.dcoref.Dictionaries dict, edu.stanford.nlp.dcoref.Semantics semantics, edu.stanford.nlp.dcoref.MentionExtractor mentionExtractor)">1</method>
			<method name="public void addApposition(edu.stanford.nlp.dcoref.Mention m)">2</method>
			<method name="public String spanToString()">4</method>
			<method name="public void process(edu.stanford.nlp.dcoref.Dictionaries dict, edu.stanford.nlp.dcoref.Semantics semantics, edu.stanford.nlp.dcoref.MentionExtractor mentionExtractor)">1</method>
			<method name="public Class getType()">1</method>
			<method name="public void _init_(int mentionID, int startIndex, int endIndex, edu.stanford.nlp.semgraph.SemanticGraph dependency, java.util.List mentionSpan)">0</method>
			<method name="public boolean entityTypesAgree(edu.stanford.nlp.dcoref.Mention m, edu.stanford.nlp.dcoref.Dictionaries dict)">1</method>
			<method name="public java.util.List getContext()">1</method>
			<method name="public boolean isRoleAppositive(edu.stanford.nlp.dcoref.Mention m, edu.stanford.nlp.dcoref.Dictionaries dict)">18</method>
			<method name="public java.util.List nerTokens()">7</method>
			<method name="public void addListMember(edu.stanford.nlp.dcoref.Mention m)">2</method>
			<method name="public void addBelongsToList(edu.stanford.nlp.dcoref.Mention m)">2</method>
			<method name="public boolean insideIn(edu.stanford.nlp.dcoref.Mention m)">4</method>
			<method name="public boolean moreRepresentativeThan(edu.stanford.nlp.dcoref.Mention m)">33</method>
			<method name="public boolean isPronominal()">2</method>
			<method name="public String getQuantification(edu.stanford.nlp.dcoref.Dictionaries dict)">8</method>
			<method name="public void addPredicateNominatives(edu.stanford.nlp.dcoref.Mention m)">2</method>
			<method name="public boolean attributesAgree(edu.stanford.nlp.dcoref.Mention potentialAntecedent, edu.stanford.nlp.dcoref.Dictionaries dict)">5</method>
			<method name="public java.util.List preprocessSearchTerm()">19</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.DescriptionPattern</name>
		<wmc>20</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>13</cbo>
		<rfc>47</rfc>
		<lcom>116</lcom>
		<ca>2</ca>
		<ce>12</ce>
		<npm>6</npm>
		<lcom3>0.9105263157894737</lcom3>
		<loc>742</loc>
		<dam>1.0</dam>
		<moa>5</moa>
		<mfa>0.0</mfa>
		<cam>0.1214574898785425</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>35.1</amc>
		<cc>
			<method name="static java.util.List access$1000(edu.stanford.nlp.trees.tregex.DescriptionPattern x0)">1</method>
			<method name="static String access$400(edu.stanford.nlp.trees.tregex.DescriptionPattern x0)">1</method>
			<method name="static edu.stanford.nlp.util.Filter access$900(edu.stanford.nlp.trees.tregex.DescriptionPattern x0)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="static java.util.regex.Pattern access$800(edu.stanford.nlp.trees.tregex.DescriptionPattern x0)">1</method>
			<method name="public String localString()">4</method>
			<method name="public java.util.List getChildren()">2</method>
			<method name="static String access$700(edu.stanford.nlp.trees.tregex.DescriptionPattern x0)">1</method>
			<method name="public void _init_(edu.stanford.nlp.trees.tregex.Relation rel, boolean negDesc, String desc, String name, boolean useBasicCat, edu.stanford.nlp.util.Function basicCatFunction, java.util.List variableGroups, boolean isLink, String linkedName)">0</method>
			<method name="static boolean access$300(edu.stanford.nlp.trees.tregex.DescriptionPattern x0)">1</method>
			<method name="static edu.stanford.nlp.util.Function access$500(edu.stanford.nlp.trees.tregex.DescriptionPattern x0)">1</method>
			<method name="static edu.stanford.nlp.trees.tregex.TregexPattern access$000(edu.stanford.nlp.trees.tregex.DescriptionPattern x0)">1</method>
			<method name="public edu.stanford.nlp.trees.tregex.TregexMatcher matcher(edu.stanford.nlp.trees.Tree root, edu.stanford.nlp.trees.Tree tree, java.util.IdentityHashMap nodesToParents, java.util.Map namesToNodes, edu.stanford.nlp.trees.tregex.VariableStrings variableStrings, edu.stanford.nlp.trees.HeadFinder headFinder)">1</method>
			<method name="static String access$600(edu.stanford.nlp.trees.tregex.DescriptionPattern x0)">1</method>
			<method name="public void setChild(edu.stanford.nlp.trees.tregex.TregexPattern n)">7</method>
			<method name="static edu.stanford.nlp.trees.tregex.Relation access$100(edu.stanford.nlp.trees.tregex.DescriptionPattern x0)">1</method>
			<method name="static boolean access$1100(edu.stanford.nlp.trees.tregex.DescriptionPattern x0)">1</method>
			<method name="public String toString()">9</method>
			<method name="boolean getChangesVariables()">1</method>
			<method name="static edu.stanford.nlp.trees.tregex.DescriptionPattern$DescriptionMode access$200(edu.stanford.nlp.trees.tregex.DescriptionPattern x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$CalendarAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.ChineseTreebankParserParams</name>
		<wmc>25</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>48</cbo>
		<rfc>121</rfc>
		<lcom>238</lcom>
		<ca>7</ca>
		<ce>46</ce>
		<npm>21</npm>
		<lcom3>0.8645833333333334</lcom3>
		<loc>3083</loc>
		<dam>0.10714285714285714</dam>
		<moa>4</moa>
		<mfa>0.0</mfa>
		<cam>0.13454545454545455</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>120.08</amc>
		<cc>
			<method name="static edu.stanford.nlp.parser.lexparser.Lexicon access$000(edu.stanford.nlp.parser.lexparser.ChineseTreebankParserParams x0)">1</method>
			<method name="private static boolean hasV(java.util.List tags)">3</method>
			<method name="public void _init_()">0</method>
			<method name="public boolean supportsBasicDependencies()">1</method>
			<method name="public int setOptionFlag(String[] args, int i)">63</method>
			<method name="public edu.stanford.nlp.trees.MemoryTreebank memoryTreebank()">2</method>
			<method name="public volatile java.util.List defaultTestSentence()">1</method>
			<method name="public edu.stanford.nlp.trees.HeadFinder typedDependencyHeadFinder()">1</method>
			<method name="public edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.Tree root)">149</method>
			<method name="public edu.stanford.nlp.parser.lexparser.Extractor dependencyGrammarExtractor(edu.stanford.nlp.parser.lexparser.Options op, edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex)">2</method>
			<method name="public edu.stanford.nlp.trees.TreeReaderFactory treeReaderFactory()">1</method>
			<method name="private static void printlnErr(String s)">1</method>
			<method name="public String[] sisterSplitters()">1</method>
			<method name="public java.util.List readGrammaticalStructureFromFile(String filename)">1</method>
			<method name="public edu.stanford.nlp.trees.HeadFinder headFinder()">4</method>
			<method name="public static void main(String[] args)">3</method>
			<method name="private java.util.List listBasicCategories(java.util.List l)">2</method>
			<method name="public double[] MLEDependencyGrammarSmoothingParams()">1</method>
			<method name="public edu.stanford.nlp.trees.TreeTransformer collinizer()">1</method>
			<method name="public edu.stanford.nlp.trees.TreeTransformer collinizerEvalb()">1</method>
			<method name="public java.util.ArrayList defaultTestSentence()">1</method>
			<method name="public edu.stanford.nlp.trees.GrammaticalStructure getGrammaticalStructure(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.util.Filter filter, edu.stanford.nlp.trees.HeadFinder hf)">1</method>
			<method name="public void display()">3</method>
			<method name="public edu.stanford.nlp.parser.lexparser.Lexicon lex(edu.stanford.nlp.parser.lexparser.Options op, edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex)">5</method>
			<method name="public edu.stanford.nlp.trees.DiskTreebank diskTreebank()">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.TokenSequencePattern</name>
		<wmc>15</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>25</cbo>
		<rfc>35</rfc>
		<lcom>99</lcom>
		<ca>10</ca>
		<ce>16</ce>
		<npm>14</npm>
		<lcom3>0.9285714285714286</lcom3>
		<loc>171</loc>
		<dam>0.5</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.18253968253968253</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.266666666666667</amc>
		<cc>
			<method name="public static transient edu.stanford.nlp.ling.tokensregex.MultiPatternMatcher getMultiPatternMatcher(edu.stanford.nlp.ling.tokensregex.TokenSequencePattern[] patterns)">1</method>
			<method name="public static edu.stanford.nlp.ling.tokensregex.TokenSequencePattern compile(edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr nodeSequencePattern)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void _init_(String patternStr, edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr nodeSequencePattern, edu.stanford.nlp.ling.tokensregex.SequenceMatchAction action)">0</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.TokenSequenceMatcher getMatcher(java.util.List tokens)">1</method>
			<method name="public static edu.stanford.nlp.ling.tokensregex.Env getNewEnv()">1</method>
			<method name="public static edu.stanford.nlp.ling.tokensregex.TokenSequencePattern compile(edu.stanford.nlp.ling.tokensregex.Env env, String string)">1</method>
			<method name="public void _init_(String patternStr, edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr nodeSequencePattern)">0</method>
			<method name="public static edu.stanford.nlp.ling.tokensregex.MultiPatternMatcher getMultiPatternMatcher(java.util.Collection patterns)">1</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.TokenSequenceMatcher matcher(java.util.List tokens)">1</method>
			<method name="public static transient edu.stanford.nlp.ling.tokensregex.TokenSequencePattern compile(edu.stanford.nlp.ling.tokensregex.Env env, String[] strings)">2</method>
			<method name="public volatile edu.stanford.nlp.ling.tokensregex.SequenceMatcher getMatcher(java.util.List x0)">1</method>
			<method name="public String toString()">1</method>
			<method name="public static edu.stanford.nlp.ling.tokensregex.TokenSequencePattern compile(String string)">1</method>
			<method name="public static transient edu.stanford.nlp.ling.tokensregex.TokenSequencePattern compile(String[] strings)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.sequences.BeamBestSequenceFinder</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>26</rfc>
		<lcom>20</lcom>
		<ca>3</ca>
		<ce>6</ce>
		<npm>5</npm>
		<lcom3>0.5</lcom3>
		<loc>245</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>29.125</amc>
		<cc>
			<method name="static int[] access$002(int[] x0)">1</method>
			<method name="public int[] bestSequence(edu.stanford.nlp.sequences.SequenceModel ts, int size)">10</method>
			<method name="public void _init_(int beamSize, boolean exhaustiveStart)">0</method>
			<method name="public int[] bestSequence(edu.stanford.nlp.sequences.SequenceModel ts)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="static int[] access$000()">1</method>
			<method name="public void _init_(int beamSize, boolean exhaustiveStart, boolean recenter)">0</method>
			<method name="public void _init_(int beamSize)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.Value</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>77</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>77</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract Object get()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequenceMatcher$GroupMatchReplacement</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>5</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>17</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.0</amc>
		<cc>
			<method name="public void append(edu.stanford.nlp.ling.tokensregex.SequenceMatchResult match, java.util.List list)">1</method>
			<method name="public void _init_(int group)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.StringUtils</name>
		<wmc>108</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>135</cbo>
		<rfc>259</rfc>
		<lcom>5768</lcom>
		<ca>124</ca>
		<ce>13</ce>
		<npm>105</npm>
		<lcom3>0.9989615784008307</lcom3>
		<loc>4257</loc>
		<dam>0.6666666666666666</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.08113848768054376</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>38.333333333333336</amc>
		<cc>
			<method name="public static boolean isAlphanumeric(String s)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static String toCSVString(String[] fields)">3</method>
			<method name="public static String joinFields(java.util.List l, Class field, String defaultFieldValue, String glue, int start, int end)">1</method>
			<method name="public static void printToFile(String filename, String message)">1</method>
			<method name="public static String tr(String input, String from, String to)">7</method>
			<method name="private void _init_()">0</method>
			<method name="public static transient String checkRequiredProperties(java.util.Properties props, String[] requiredProps)">3</method>
			<method name="public static String padOrTrim(String str, int num)">5</method>
			<method name="public static String chomp(String s)">3</method>
			<method name="public static boolean isAcronym(String s)">1</method>
			<method name="public static String padLeft(String str, int totalChars, char ch)">3</method>
			<method name="public static String joinMultipleFields(java.util.List l, Class[] fields, String defaultFieldValue, String fieldGlue, String glue, int start, int end)">1</method>
			<method name="public static String joinWords(Iterable l, String glue)">3</method>
			<method name="public static java.util.Properties propFileToProperties(String filename)">2</method>
			<method name="public static void printStringOneCharPerLine(String s)">2</method>
			<method name="public static String getNotNullString(String s)">2</method>
			<method name="public static String trim(String s, int maxWidth)">2</method>
			<method name="public static java.util.Map parseCommandLineArguments(String[] args, boolean parseNumbers)">6</method>
			<method name="public static String trim(Object obj, int maxWidth)">1</method>
			<method name="public static void printToFileLn(java.io.File file, String message, boolean append)">4</method>
			<method name="public static java.util.List split(String str, String regex)">1</method>
			<method name="public static boolean find(String str, String regex)">1</method>
			<method name="public static String normalize(String s)">1</method>
			<method name="public static void printToFile(String filename, String message, boolean append)">1</method>
			<method name="public static String[] splitOnChar(String input, char delimiter)">4</method>
			<method name="public static String joinMultipleFields(java.util.List l, Class[] fields, String defaultFieldValue, String fieldGlue, String glue, int start, int end, edu.stanford.nlp.util.Function toStringFunc)">1</method>
			<method name="public static String padLeft(String str, int totalChars)">1</method>
			<method name="public static String padLeft(Object obj, int totalChars)">1</method>
			<method name="public static void printToFile(java.io.File file, String message, boolean append, boolean printLn, String encoding)">6</method>
			<method name="public static String stripSGML(String orig)">1</method>
			<method name="public static String join(Iterable l)">1</method>
			<method name="public static int longestCommonSubstring(String s, String t)">8</method>
			<method name="public static boolean matches(String str, String regex)">1</method>
			<method name="public static boolean isPunct(String s)">1</method>
			<method name="public static void printToFile(java.io.File file, String message, boolean append)">4</method>
			<method name="public static String getBaseName(String fileName, String suffix)">2</method>
			<method name="public static String getBaseName(String fileName)">1</method>
			<method name="public static java.util.Map mapStringToMap(String map)">2</method>
			<method name="public static String pad(Object obj, int totalChars)">1</method>
			<method name="public static String padOrTrim(Object obj, int totalChars)">1</method>
			<method name="public static java.util.Map parseCommandLineArguments(String[] args)">1</method>
			<method name="public static String join(java.util.List l, String glue, edu.stanford.nlp.util.Function toStringFunc, int start, int end)">3</method>
			<method name="public static String joinFields(java.util.List l, Class field, String defaultFieldValue, String glue, int start, int end, edu.stanford.nlp.util.Function toStringFunc)">1</method>
			<method name="public static String pad(String str, int totalChars)">3</method>
			<method name="public static java.util.List split(String s)">1</method>
			<method name="public static String join(Iterable l, String glue)">3</method>
			<method name="public static String toInvocationString(String cls, String[] args)">2</method>
			<method name="public static java.util.Properties stringToProperties(String str)">1</method>
			<method name="public static boolean isAlpha(String s)">1</method>
			<method name="public static String joinWords(java.util.List l, String glue, int start, int end)">1</method>
			<method name="public static String stripNonAlphaNumerics(String orig)">8</method>
			<method name="public static String padLeft(double d, int totalChars)">1</method>
			<method name="public static void main(String[] args)">3</method>
			<method name="public static String resolveVars(String str, java.util.Map props)">6</method>
			<method name="public static String objectToColumnString(Object object, String delimiter, String[] fieldNames)">1</method>
			<method name="public static java.util.List splitFieldsFast(String str, String delimiter)">4</method>
			<method name="public static java.util.Collection getNgrams(java.util.List words, int minSize, int maxSize)">2</method>
			<method name="public static String padLeft(int i, int totalChars)">1</method>
			<method name="public static String joinMultipleFields(java.util.List l, Class[] fields)">1</method>
			<method name="public static java.util.Map argsToMap(String[] args, java.util.Map flagsToNumArgs)">12</method>
			<method name="public static boolean containsIgnoreCase(java.util.Collection c, String s)">2</method>
			<method name="public static String repeat(String s, int times)">3</method>
			<method name="public static java.util.Collection getNgramsString(String s, int minSize, int maxSize)">1</method>
			<method name="public static String searchAndReplace(String text, String from, String to)">1</method>
			<method name="public static Object columnStringToObject(Class objClass, String str, java.util.regex.Pattern delimiterPattern, String[] fieldNames)">1</method>
			<method name="public static String chomp(Object o)">1</method>
			<method name="public static java.util.Properties argsToPropertiesWithResolve(String[] args)">18</method>
			<method name="public static java.util.TreeMap propFileToTreeMap(String filename, java.util.Map existingArgs)">5</method>
			<method name="public static String makeHTMLTable(String[][] table, String[] rowLabels, String[] colLabels)">5</method>
			<method name="private static String makeAsciiTableCell(Object obj, int padLeft, int padRight, boolean tsv)">4</method>
			<method name="public static String capitalize(String s)">2</method>
			<method name="public static int editDistance(String s, String t)">8</method>
			<method name="public static java.util.Properties argsToProperties(String[] args, java.util.Map flagsToNumArgs)">22</method>
			<method name="public static void printErrInvocationString(String cls, String[] args)">1</method>
			<method name="public static String getShortClassName(Object o)">3</method>
			<method name="public static String joinFields(java.util.List l, Class field)">1</method>
			<method name="public static java.util.Collection getNgramsFromTokens(java.util.List words, int minSize, int maxSize)">3</method>
			<method name="public static String padLeftOrTrim(String str, int num)">5</method>
			<method name="public static void printToFileLn(String filename, String message, boolean append)">1</method>
			<method name="public static java.util.Map argsToMap(String[] args)">1</method>
			<method name="public static java.util.Properties stringToProperties(String str, java.util.Properties props)">3</method>
			<method name="public static void printToFile(java.io.File file, String message)">1</method>
			<method name="public static String pennPOSToWordnetPOS(String s)">5</method>
			<method name="public static String joinWithOriginalWhiteSpace(java.util.List tokens)">4</method>
			<method name="public static String escapeString(String s, char[] charsToEscape, char escapeChar)">5</method>
			<method name="public static java.util.List valueSplit(String str, String valueRegex, String separatorRegex)">4</method>
			<method name="public static java.util.List regexesToPatterns(Iterable regexes)">2</method>
			<method name="public static String truncate(int n, int smallestDigit, int biggestDigit)">3</method>
			<method name="public static boolean isNumeric(String s)">1</method>
			<method name="public static int longestCommonContiguousSubstring(String s, String t)">9</method>
			<method name="public static Object columnStringToObject(Class objClass, String str, String delimiterRegex, String[] fieldNames)">1</method>
			<method name="public static String fileNameClean(String s)">11</method>
			<method name="public static boolean lookingAt(String str, String regex)">1</method>
			<method name="public static boolean isCapitalized(String s)">1</method>
			<method name="public static String join(Object[] elements, String glue)">1</method>
			<method name="public static int nthIndex(String s, char ch, int n)">4</method>
			<method name="public static java.util.Properties argsToProperties(String[] args)">1</method>
			<method name="public static String[] mapStringToArray(String map)">4</method>
			<method name="public static String toAscii(String s)">44</method>
			<method name="public static java.util.Set stringToSet(String str, String delimiter)">3</method>
			<method name="public static String joinFields(java.util.List l, Class field, edu.stanford.nlp.util.Function toStringFunc)">1</method>
			<method name="public static String makeTextTable(Object[][] table, Object[] rowLabels, Object[] colLabels, int padLeft, int padRight, boolean tsv)">8</method>
			<method name="public static String join(Object[] elements)">1</method>
			<method name="public static java.util.List regexGroups(java.util.regex.Pattern regex, String str)">4</method>
			<method name="public static String[] splitOnCharWithQuoting(String s, char splitChar, char quoteChar, char escapeChar)">10</method>
			<method name="public static String repeat(char ch, int times)">3</method>
			<method name="public static String joinMultipleFields(java.util.List l, Class[] fields, edu.stanford.nlp.util.Function toStringFunc)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.HasCategory</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>2</rfc>
		<lcom>1</lcom>
		<ca>6</ca>
		<ce>0</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>2</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract void setCategory(String)">1</method>
			<method name="public abstract String category()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.CTBunkDictDetector</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>12</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>2</npm>
		<lcom3>0.888888888888889</lcom3>
		<loc>54</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.75</amc>
		<cc>
			<method name="String extract(edu.stanford.nlp.tagger.maxent.History h, edu.stanford.nlp.tagger.maxent.PairsHolder pH)">2</method>
			<method name="public boolean isLocal()">1</method>
			<method name="void _init_(String t2, int n2)">0</method>
			<method name="public boolean isDynamic()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.LabeledConstituent</name>
		<wmc>10</wmc>
		<dit>0</dit>
		<noc>1</noc>
		<cbo>12</cbo>
		<rfc>13</rfc>
		<lcom>25</lcom>
		<ca>5</ca>
		<ce>7</ce>
		<npm>10</npm>
		<lcom3>0.5555555555555556</lcom3>
		<loc>58</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.7</amc>
		<cc>
			<method name="public void setLabel(edu.stanford.nlp.ling.Label label)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public edu.stanford.nlp.ling.LabelFactory labelFactory()">1</method>
			<method name="public void _init_(int start, int end, String stringValue)">0</method>
			<method name="public void setFromString(String labelStr)">1</method>
			<method name="public edu.stanford.nlp.ling.Label label()">1</method>
			<method name="public void _init_(int start, int end)">0</method>
			<method name="public static edu.stanford.nlp.trees.ConstituentFactory factory()">1</method>
			<method name="public edu.stanford.nlp.trees.ConstituentFactory constituentFactory()">1</method>
			<method name="public void _init_(int start, int end, edu.stanford.nlp.ling.Label label)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$ParaPositionAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.concurrent.ThreadsafeProcessor</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>30</cbo>
		<rfc>2</rfc>
		<lcom>1</lcom>
		<ca>30</ca>
		<ce>0</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>2</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract edu.stanford.nlp.util.concurrent.ThreadsafeProcessor newInstance()">1</method>
			<method name="public abstract Object process(Object)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.RepeatedRecordHandler$ExactRepeatSemantics</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>13</rfc>
		<lcom>10</lcom>
		<ca>3</ca>
		<ce>2</ce>
		<npm>5</npm>
		<lcom3>2.0</lcom3>
		<loc>48</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4666666666666667</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>8.6</amc>
		<cc>
			<method name="public String message(int linesOmitted)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public int numToForcePrint()">1</method>
			<method name="public long maxWaitTimeInMillis()">1</method>
			<method name="public boolean equals(edu.stanford.nlp.util.logging.Redwood$Record lastRecord, edu.stanford.nlp.util.logging.Redwood$Record record)">6</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$ProjectedCategoryAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$ImmediatelyHeads</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>14</rfc>
		<lcom>0</lcom>
		<ca>4</ca>
		<ce>6</ce>
		<npm>2</npm>
		<lcom3>0.7</lcom3>
		<loc>103</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.3333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.833333333333334</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.trees.HeadFinder hf)">0</method>
			<method name="public boolean equals(Object o)">7</method>
			<method name="public int hashCode()">2</method>
			<method name="static edu.stanford.nlp.trees.HeadFinder access$800(edu.stanford.nlp.trees.tregex.Relation$ImmediatelyHeads x0)">1</method>
			<method name="java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">1</method>
			<method name="boolean satisfies(edu.stanford.nlp.trees.Tree t1, edu.stanford.nlp.trees.Tree t2, edu.stanford.nlp.trees.Tree root, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">4</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.PTBTokenizerAnnotator</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>8</rfc>
		<lcom>4</lcom>
		<ca>3</ca>
		<ce>6</ce>
		<npm>4</npm>
		<lcom3>0.8333333333333334</lcom3>
		<loc>31</loc>
		<dam>0.5</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.25</amc>
		<cc>
			<method name="public edu.stanford.nlp.process.Tokenizer getTokenizer(java.io.Reader r)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(boolean verbose, String options)">0</method>
			<method name="public void _init_(boolean verbose)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$NamedEntityTagAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.ExtractorUpperDigitDash</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>9</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>1.3333333333333333</lcom3>
		<loc>30</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.25</amc>
		<cc>
			<method name="String extract(edu.stanford.nlp.tagger.maxent.History h, edu.stanford.nlp.tagger.maxent.PairsHolder pH)">4</method>
			<method name="public boolean isLocal()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public boolean isDynamic()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchReplacement</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>4</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract void append(edu.stanford.nlp.ling.tokensregex.SequenceMatchResult, java.util.List)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.SMDMinimizer$setLam</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>0.5</lcom3>
		<loc>25</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.666666666666667</amc>
		<cc>
			<method name="public volatile void set(Object x0)">1</method>
			<method name="public void set(Double in)">1</method>
			<method name="public void _init_(edu.stanford.nlp.optimization.SMDMinimizer, edu.stanford.nlp.optimization.SMDMinimizer smd)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.HasEvaluators</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>7</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract void setEvaluators(int, edu.stanford.nlp.optimization.Evaluator[])">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.CompositeTreebank$CompositeTreebankIterator</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>9</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>5</npm>
		<lcom3>0.25</lcom3>
		<loc>53</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.2</amc>
		<cc>
			<method name="public void _init_(java.util.Collection c1, java.util.Collection c2)">0</method>
			<method name="public edu.stanford.nlp.trees.Tree next()">2</method>
			<method name="public boolean hasNext()">3</method>
			<method name="public void remove()">1</method>
			<method name="public volatile Object next()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.LabeledConstituent$ConstituentFactoryHolder$LabeledConstituentFactory</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>7</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>23</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.45</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.75</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public edu.stanford.nlp.trees.Constituent newConstituent(int start, int end, edu.stanford.nlp.ling.Label label, double score)">1</method>
			<method name="public edu.stanford.nlp.trees.Constituent newConstituent(int start, int end)">1</method>
			<method name="void _init_(edu.stanford.nlp.trees.LabeledConstituent$1 x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalRelations$ModalGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.ClassicCounter</name>
		<wmc>38</wmc>
		<dit>1</dit>
		<noc>2</noc>
		<cbo>91</cbo>
		<rfc>80</rfc>
		<lcom>463</lcom>
		<ca>84</ca>
		<ce>11</ce>
		<npm>34</npm>
		<lcom3>0.7297297297297297</lcom3>
		<loc>573</loc>
		<dam>0.8333333333333334</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.17105263157894737</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>13.921052631578947</amc>
		<cc>
			<method name="public void removeAll(java.util.Collection keys)">2</method>
			<method name="public void clear()">1</method>
			<method name="static double access$102(edu.stanford.nlp.stats.ClassicCounter x0, double x1)">1</method>
			<method name="public boolean equals(Object o)">6</method>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="public static edu.stanford.nlp.stats.ClassicCounter valueOfIgnoreComments(String s)">4</method>
			<method name="public void _init_(java.util.Collection collection)">0</method>
			<method name="public double getCount(Object key)">2</method>
			<method name="public edu.stanford.nlp.util.Factory getFactory()">1</method>
			<method name="public void prettyLog(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels channels, String description)">1</method>
			<method name="public boolean containsKey(Object key)">1</method>
			<method name="public java.util.Set entrySet()">1</method>
			<method name="private edu.stanford.nlp.util.MutableDouble mutableRemove(Object key)">2</method>
			<method name="public int size()">1</method>
			<method name="public void setCount(Object key, double count)">3</method>
			<method name="public void _init_(int initialCapacity)">0</method>
			<method name="public void addAll(edu.stanford.nlp.stats.Counter counter)">1</method>
			<method name="public double logIncrementCount(Object key, double count)">3</method>
			<method name="static double access$100(edu.stanford.nlp.stats.ClassicCounter x0)">1</method>
			<method name="public String toString()">1</method>
			<method name="public void _init_(edu.stanford.nlp.util.MapFactory mapFactory, int initialCapacity)">0</method>
			<method name="public double decrementCount(Object key)">1</method>
			<method name="public boolean isEmpty()">2</method>
			<method name="public void _init_()">0</method>
			<method name="public double remove(Object key)">2</method>
			<method name="public java.util.Set keySet()">1</method>
			<method name="public static edu.stanford.nlp.stats.ClassicCounter fromString(String s)">5</method>
			<method name="public double incrementCount(Object key, double count)">3</method>
			<method name="public double totalCount()">1</method>
			<method name="public double defaultReturnValue()">1</method>
			<method name="public final void setDefaultReturnValue(double rv)">1</method>
			<method name="public int hashCode()">1</method>
			<method name="public void _init_(edu.stanford.nlp.util.MapFactory mapFactory)">0</method>
			<method name="public final double incrementCount(Object key)">1</method>
			<method name="public void _init_(edu.stanford.nlp.stats.Counter c)">0</method>
			<method name="edu.stanford.nlp.util.MapFactory getMapFactory()">1</method>
			<method name="public double decrementCount(Object key, double count)">1</method>
			<method name="public java.util.Collection values()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.LabeledConstituent$ConstituentFactoryHolder</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>0</npm>
		<lcom3>1.0</lcom3>
		<loc>12</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.5</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.sequences.Clique</name>
		<wmc>20</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>33</rfc>
		<lcom>54</lcom>
		<ca>9</ca>
		<ce>3</ce>
		<npm>13</npm>
		<lcom3>0.6842105263157895</lcom3>
		<loc>313</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3026315789473684</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>14.45</amc>
		<cc>
			<method name="private static void checkSorted(int[] sorted)">3</method>
			<method name="static void _clinit_()">0</method>
			<method name="protected Object readResolve()">1</method>
			<method name="public static edu.stanford.nlp.sequences.Clique valueOf(edu.stanford.nlp.sequences.Clique c, int offset)">2</method>
			<method name="public int maxLeft()">1</method>
			<method name="static int[] access$000(edu.stanford.nlp.sequences.Clique x0)">1</method>
			<method name="public int size()">1</method>
			<method name="private void _init_()">0</method>
			<method name="public static edu.stanford.nlp.sequences.Clique valueOf(int[] relativeIndices)">1</method>
			<method name="public int hashCode()">2</method>
			<method name="private static edu.stanford.nlp.sequences.Clique valueOfHelper(int[] relativeIndices)">1</method>
			<method name="public int indexOfRelativeIndex(int relativeIndex)">3</method>
			<method name="public int maxRight()">1</method>
			<method name="public edu.stanford.nlp.sequences.Clique leftMessage()">1</method>
			<method name="private static edu.stanford.nlp.sequences.Clique intern(edu.stanford.nlp.sequences.Clique c)">2</method>
			<method name="public int relativeIndex(int i)">1</method>
			<method name="public String toString()">3</method>
			<method name="public edu.stanford.nlp.sequences.Clique rightMessage()">1</method>
			<method name="public edu.stanford.nlp.sequences.Clique shift(int shiftAmount)">3</method>
			<method name="public static edu.stanford.nlp.sequences.Clique valueOf(int maxLeft, int maxRight)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.Featurizable</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract java.util.Collection asFeatures()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.ChineseUnknownWordModel</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>12</cbo>
		<rfc>33</rfc>
		<lcom>13</lcom>
		<ca>1</ca>
		<ce>11</ce>
		<npm>5</npm>
		<lcom3>1.05</lcom3>
		<loc>338</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2564102564102564</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>54.0</amc>
		<cc>
			<method name="public float score(edu.stanford.nlp.parser.lexparser.IntTaggedWord itw, String word)">18</method>
			<method name="private static edu.stanford.nlp.ling.WordTag toWordTag(edu.stanford.nlp.ling.TaggedWord tw)">1</method>
			<method name="public static void main(String[] args)">6</method>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.Options op, edu.stanford.nlp.parser.lexparser.Lexicon lex, edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex)">0</method>
			<method name="public String getSignature(String word, int loc)">1</method>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.Options op, edu.stanford.nlp.parser.lexparser.Lexicon lex, edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex, edu.stanford.nlp.stats.ClassicCounter unSeenCounter, java.util.Map tagHash, java.util.Map unknownGT, boolean useGT, java.util.Set seenFirst)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.pascal.AcronymModel</name>
		<wmc>21</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>16</cbo>
		<rfc>67</rfc>
		<lcom>174</lcom>
		<ca>4</ca>
		<ce>15</ce>
		<npm>10</npm>
		<lcom3>0.9</lcom3>
		<loc>923</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.1625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>42.42857142857143</amc>
		<cc>
			<method name="private static String acronymNumber(String acronym)">1</method>
			<method name="private static String[] splitOnWhitespace(String words)">3</method>
			<method name="public double computeProb(edu.stanford.nlp.ie.pascal.PascalTemplate temp)">1</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public double computeProb(edu.stanford.nlp.ie.pascal.InfoTemplate temp)">1</method>
			<method name="public double similarity(String name, String acronym)">1</method>
			<method name="private static char[] allLetters(String[] acronym)">4</method>
			<method name="private double computeProb(String wsname, String wsacronym, String confname, String confacronym, String wsurl, String confurl)">36</method>
			<method name="static boolean access$000()">1</method>
			<method name="private static char[] sbToChars(StringBuffer sb)">1</method>
			<method name="public static double URLSimilarity(String URL, String acronym)">1</method>
			<method name="private static boolean firstLetterInOrderMatch(char[] nameFirstLetters, char[] acLetters)">5</method>
			<method name="public double naiveSimilarity(String name, String acronym)">3</method>
			<method name="public double RichSimilarity(String name, String acronym)">3</method>
			<method name="private static char[] firstLetters(String[] name)">3</method>
			<method name="public static char[] stripAcronym(String acronym)">6</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="public double HearstSimilarity(String name, String acronym)">9</method>
			<method name="private static boolean acronymMatchesURL(String ac, String url)">2</method>
			<method name="private static double dotproduct(double[] one, double[] two)">4</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.Expressions$OrExpression</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>8</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.0</amc>
		<cc>
			<method name="public void _init_(java.util.List children)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.maxent.Feature</name>
		<wmc>20</wmc>
		<dit>1</dit>
		<noc>1</noc>
		<cbo>10</cbo>
		<rfc>47</rfc>
		<lcom>54</lcom>
		<ca>6</ca>
		<ce>4</ce>
		<npm>16</npm>
		<lcom3>0.6578947368421053</lcom3>
		<loc>502</loc>
		<dam>0.6666666666666666</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.24444444444444444</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>23.8</amc>
		<cc>
			<method name="public int len()">2</method>
			<method name="int getXInstance(int index)">1</method>
			<method name="public void _init_()">0</method>
			<method name="int indexOf(int x, int y)">1</method>
			<method name="public void setValue(int index, int key, double value)">1</method>
			<method name="public void _init_(edu.stanford.nlp.maxent.Experiments e, int numElems, edu.stanford.nlp.util.Index instanceIndex)">0</method>
			<method name="public void _init_(edu.stanford.nlp.maxent.Experiments e, int[] indexes, double[] vals, edu.stanford.nlp.util.Index instanceIndex)">0</method>
			<method name="public void _init_(edu.stanford.nlp.maxent.Experiments e, double[][] vals, edu.stanford.nlp.util.Index instanceIndex)">0</method>
			<method name="public void setSum()">2</method>
			<method name="public void print()">1</method>
			<method name="public int getX(int index)">1</method>
			<method name="public void _init_(edu.stanford.nlp.maxent.Experiments e, double[] vals, edu.stanford.nlp.util.Index instanceIndex)">0</method>
			<method name="edu.stanford.nlp.util.IntPair getPair(int index)">1</method>
			<method name="public double ftilde()">2</method>
			<method name="public double getVal(int x, int y)">2</method>
			<method name="public void initHashVals()">2</method>
			<method name="public void print(java.io.PrintStream pf)">2</method>
			<method name="public int getY(int index)">1</method>
			<method name="public double getVal(int index)">1</method>
			<method name="int getYInstance(int index)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$NumericObjectAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.TimeFormatter$RelaxedNumericDateComponent</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>12</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>2</npm>
		<lcom3>0.5</lcom3>
		<loc>125</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4444444444444444</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>39.666666666666664</amc>
		<cc>
			<method name="protected StringBuilder appendRegex0(StringBuilder sb)">4</method>
			<method name="public void _init_(org.joda.time.DateTimeFieldType[] fieldTypes, int minDigits, int maxDigits)">0</method>
			<method name="public edu.stanford.nlp.time.SUTime$Temporal updateTemporal(edu.stanford.nlp.time.SUTime$Temporal t, String fieldValueStr)">4</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.CustomAnnotationSerializer$IntermediateSemanticGraph</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>16</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.0</amc>
		<cc>
			<method name="void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.QNMinimizer$Record</name>
		<wmc>14</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>50</rfc>
		<lcom>23</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>13</npm>
		<lcom3>0.7461538461538461</lcom3>
		<loc>707</loc>
		<dam>0.9</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.3392857142857143</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>48.07142857142857</amc>
		<cc>
			<method name="public void start(double val, double[] grad, double[] x)">2</method>
			<method name="public void monitorX(double[] x)">2</method>
			<method name="public void _init_(edu.stanford.nlp.optimization.QNMinimizer, boolean beQuiet, edu.stanford.nlp.optimization.Function monitor, double tolerance)">0</method>
			<method name="public void _init_(edu.stanford.nlp.optimization.QNMinimizer, boolean beQuiet, edu.stanford.nlp.optimization.Function monitor, double tolerance, java.io.PrintWriter output)">0</method>
			<method name="public void start(double val, double[] grad)">1</method>
			<method name="public void _init_(edu.stanford.nlp.optimization.QNMinimizer, boolean beQuiet, edu.stanford.nlp.optimization.Function monitor, double tolerance, double eps)">0</method>
			<method name="public void setEPS(double eps)">1</method>
			<method name="public void shutUp()">1</method>
			<method name="public double[] getBest()">1</method>
			<method name="public double howLong()">1</method>
			<method name="public void add(double val, double[] grad, double[] x, int fevals, double evalScore)">7</method>
			<method name="private void writeToFile(double fevals, double val, double gNorm, double time)">2</method>
			<method name="public edu.stanford.nlp.optimization.QNMinimizer$eState toContinue()">20</method>
			<method name="public void setTOL(double tolerance)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalRelations$NegationModifierGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.TreebankLangParserParams</name>
		<wmc>32</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>56</cbo>
		<rfc>32</rfc>
		<lcom>496</lcom>
		<ca>40</ca>
		<ce>18</ce>
		<npm>32</npm>
		<lcom3>2.0</lcom3>
		<loc>32</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.125</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract void setInputEncoding(String)">1</method>
			<method name="public abstract edu.stanford.nlp.trees.MemoryTreebank testMemoryTreebank()">1</method>
			<method name="public abstract edu.stanford.nlp.trees.GrammaticalStructure getGrammaticalStructure(edu.stanford.nlp.trees.Tree, edu.stanford.nlp.util.Filter, edu.stanford.nlp.trees.HeadFinder)">1</method>
			<method name="public abstract boolean supportsBasicDependencies()">1</method>
			<method name="public abstract edu.stanford.nlp.trees.TreeTransformer subcategoryStripper()">1</method>
			<method name="public abstract void display()">1</method>
			<method name="public abstract edu.stanford.nlp.parser.lexparser.Extractor dependencyGrammarExtractor(edu.stanford.nlp.parser.lexparser.Options, edu.stanford.nlp.util.Index, edu.stanford.nlp.util.Index)">1</method>
			<method name="public abstract java.util.List defaultTestSentence()">1</method>
			<method name="public abstract String getInputEncoding()">1</method>
			<method name="public abstract edu.stanford.nlp.trees.TreebankLanguagePack treebankLanguagePack()">1</method>
			<method name="public abstract edu.stanford.nlp.trees.TreeReaderFactory treeReaderFactory()">1</method>
			<method name="public abstract edu.stanford.nlp.trees.MemoryTreebank memoryTreebank()">1</method>
			<method name="public abstract edu.stanford.nlp.ling.Label processHeadWord(edu.stanford.nlp.ling.Label)">1</method>
			<method name="public abstract java.io.PrintWriter pw(java.io.OutputStream)">1</method>
			<method name="public abstract String[] sisterSplitters()">1</method>
			<method name="public abstract edu.stanford.nlp.parser.metrics.AbstractEval ppAttachmentEval()">1</method>
			<method name="public abstract edu.stanford.nlp.trees.TreeTransformer collinizer()">1</method>
			<method name="public abstract edu.stanford.nlp.trees.HeadFinder headFinder()">1</method>
			<method name="public abstract edu.stanford.nlp.trees.DiskTreebank diskTreebank()">1</method>
			<method name="public abstract int setOptionFlag(String[], int)">1</method>
			<method name="public abstract edu.stanford.nlp.process.TokenizerFactory treeTokenizerFactory()">1</method>
			<method name="public abstract edu.stanford.nlp.trees.Treebank treebank()">1</method>
			<method name="public abstract java.io.PrintWriter pw()">1</method>
			<method name="public abstract edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree, edu.stanford.nlp.trees.Tree)">1</method>
			<method name="public abstract edu.stanford.nlp.parser.lexparser.Lexicon lex(edu.stanford.nlp.parser.lexparser.Options, edu.stanford.nlp.util.Index, edu.stanford.nlp.util.Index)">1</method>
			<method name="public abstract void setOutputEncoding(String)">1</method>
			<method name="public abstract edu.stanford.nlp.trees.TreeTransformer collinizerEvalb()">1</method>
			<method name="public abstract java.util.List readGrammaticalStructureFromFile(String)">1</method>
			<method name="public abstract void setEvaluateGrammaticalFunctions(boolean)">1</method>
			<method name="public abstract String getOutputEncoding()">1</method>
			<method name="public abstract edu.stanford.nlp.trees.HeadFinder typedDependencyHeadFinder()">1</method>
			<method name="public abstract double[] MLEDependencyGrammarSmoothingParams()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.ExtractorFrames$ExtractorTwoTags</name>
		<wmc>7</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>18</rfc>
		<lcom>11</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>6</npm>
		<lcom3>0.8333333333333334</lcom3>
		<loc>88</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.35714285714285715</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.857142857142858</amc>
		<cc>
			<method name="String extract(edu.stanford.nlp.tagger.maxent.History h, edu.stanford.nlp.tagger.maxent.PairsHolder pH)">1</method>
			<method name="public void _init_(int position1, int position2)">0</method>
			<method name="public int leftContext()">1</method>
			<method name="public boolean isLocal()">1</method>
			<method name="public int rightContext()">1</method>
			<method name="public boolean isDynamic()">1</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.DeltaCollectionValuedMap$SimpleEntry</name>
		<wmc>9</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>19</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>8</npm>
		<lcom3>0.3125</lcom3>
		<loc>113</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.48148148148148145</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>11.333333333333334</amc>
		<cc>
			<method name="private static boolean eq(Object o1, Object o2)">3</method>
			<method name="public Object setValue(Object value)">1</method>
			<method name="public boolean equals(Object o)">4</method>
			<method name="public int hashCode()">3</method>
			<method name="public Object getKey()">1</method>
			<method name="public void _init_(java.util.Map$Entry e)">0</method>
			<method name="public void _init_(Object key, Object value)">0</method>
			<method name="public String toString()">1</method>
			<method name="public Object getValue()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.SystemUtils$ProcessOutputStream</name>
		<wmc>7</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>22</rfc>
		<lcom>9</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>7</npm>
		<lcom3>0.22222222222222218</lcom3>
		<loc>107</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.625</mfa>
		<cam>0.42857142857142855</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>13.857142857142858</amc>
		<cc>
			<method name="public void write(int b)">1</method>
			<method name="public void flush()">1</method>
			<method name="public void _init_(String[] cmd, java.io.Writer writer)">0</method>
			<method name="public void _init_(ProcessBuilder builder, java.io.Writer output, java.io.Writer error)">0</method>
			<method name="public void close()">1</method>
			<method name="public void _init_(String[] cmd)">0</method>
			<method name="public void _init_(String[] cmd, java.io.Writer output, java.io.Writer error)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.PennTreeReaderFactory</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>10</rfc>
		<lcom>8</lcom>
		<ca>1</ca>
		<ce>8</ce>
		<npm>5</npm>
		<lcom3>0.25</lcom3>
		<loc>49</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.4</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.trees.TreeNormalizer tn)">0</method>
			<method name="public edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader in)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(edu.stanford.nlp.trees.TreeFactory tf)">0</method>
			<method name="public void _init_(edu.stanford.nlp.trees.TreeFactory tf, edu.stanford.nlp.trees.TreeNormalizer tn)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$IthChildOf$1</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>8</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>0</npm>
		<lcom3>0.0</lcom3>
		<loc>81</loc>
		<dam>0.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>38.0</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.trees.tregex.Relation$IthChildOf, edu.stanford.nlp.trees.Tree, edu.stanford.nlp.trees.tregex.TregexMatcher)">0</method>
			<method name="void initialize()">8</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.TreeCoreAnnotations$TreeAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$TimeIndex</name>
		<wmc>17</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>33</rfc>
		<lcom>12</lcom>
		<ca>6</ca>
		<ce>6</ce>
		<npm>16</npm>
		<lcom3>0.75</lcom3>
		<loc>216</loc>
		<dam>0.2</dam>
		<moa>4</moa>
		<mfa>0.0</mfa>
		<cam>0.3125</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.411764705882353</amc>
		<cc>
			<method name="public void clear()">1</method>
			<method name="public int indexOfTemporalFunc(edu.stanford.nlp.time.SUTime$Temporal t, boolean add)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public edu.stanford.nlp.time.SUTime$Temporal getTemporal(int i)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public int indexOfTemporalExpr(edu.stanford.nlp.time.TimeExpression t, boolean add)">1</method>
			<method name="public boolean addTemporalExpr(edu.stanford.nlp.time.TimeExpression t)">2</method>
			<method name="public int indexOfTemporal(edu.stanford.nlp.time.SUTime$Temporal t, boolean add)">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Temporal getTemporalFunc(int i)">1</method>
			<method name="public int getNumberOfTemporals()">1</method>
			<method name="public boolean addTemporal(edu.stanford.nlp.time.SUTime$Temporal t)">1</method>
			<method name="public edu.stanford.nlp.time.TimeExpression getTemporalExpr(int i)">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Temporal getTemporal(String s)">5</method>
			<method name="public int getNumberOfTemporalFuncs()">1</method>
			<method name="public boolean addTemporalFunc(edu.stanford.nlp.time.SUTime$Temporal t)">1</method>
			<method name="public int getNumberOfTemporalExprs()">1</method>
			<method name="public edu.stanford.nlp.time.TimeExpression getTemporalExpr(String s)">4</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.Document</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>2</rfc>
		<lcom>1</lcom>
		<ca>6</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>2</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract edu.stanford.nlp.ling.Document blankDocument()">1</method>
			<method name="public abstract String title()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Factory</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>27</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>27</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract Object create()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.ExtractorFrames$ExtractorCWordCapCase</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>8</rfc>
		<lcom>6</lcom>
		<ca>0</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>1.3333333333333333</lcom3>
		<loc>29</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="String extract(edu.stanford.nlp.tagger.maxent.History h, edu.stanford.nlp.tagger.maxent.PairsHolder pH)">2</method>
			<method name="void _init_()">0</method>
			<method name="public boolean isLocal()">1</method>
			<method name="public boolean isDynamic()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Pair</name>
		<wmc>18</wmc>
		<dit>1</dit>
		<noc>2</noc>
		<cbo>151</cbo>
		<rfc>35</rfc>
		<lcom>51</lcom>
		<ca>147</ca>
		<ce>6</ce>
		<npm>18</npm>
		<lcom3>0.5490196078431373</lcom3>
		<loc>244</loc>
		<dam>0.3333333333333333</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.21428571428571427</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>12.38888888888889</amc>
		<cc>
			<method name="public java.util.List asList()">1</method>
			<method name="public boolean equals(Object o)">8</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(Object first, Object second)">0</method>
			<method name="public Object first()">1</method>
			<method name="public void setFirst(Object o)">1</method>
			<method name="public static edu.stanford.nlp.util.Pair readStringPair(java.io.DataInputStream in)">1</method>
			<method name="public int compareTo(edu.stanford.nlp.util.Pair another)">6</method>
			<method name="public void prettyLog(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels channels, String description)">1</method>
			<method name="public static edu.stanford.nlp.util.Pair stringIntern(edu.stanford.nlp.util.Pair p)">1</method>
			<method name="public volatile int compareTo(Object x0)">1</method>
			<method name="public static edu.stanford.nlp.util.Pair internedStringPair(String first, String second)">1</method>
			<method name="public void setSecond(Object o)">1</method>
			<method name="public int hashCode()">3</method>
			<method name="public static edu.stanford.nlp.util.Pair makePair(Object x, Object y)">1</method>
			<method name="public void save(java.io.DataOutputStream out)">1</method>
			<method name="public Object second()">1</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.QNMinimizer$MaxEvaluationsExceeded</name>
		<wmc>1</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>6</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>1.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.0</amc>
		<cc>
			<method name="public void _init_(String s)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.process.PTBLexer</name>
		<wmc>37</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>84</rfc>
		<lcom>542</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>10</npm>
		<lcom3>0.9473379629629629</lcom3>
		<loc>3501</loc>
		<dam>0.875</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.17901234567901234</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>91.02702702702703</amc>
		<cc>
			<method name="private static int[] zzUnpackTrans()">1</method>
			<method name="private Object getNext(String txt, String originalText)">2</method>
			<method name="static void _clinit_()">0</method>
			<method name="public final int yystate()">1</method>
			<method name="private static char[] zzUnpackCMap(String packed)">3</method>
			<method name="private Object handleQuotes(String tok, boolean probablyLeft)">4</method>
			<method name="private static String unicodeQuotes(String in, boolean probablyLeft)">2</method>
			<method name="private static String normalizeCurrency(String in)">1</method>
			<method name="private Object getNext()">1</method>
			<method name="private static int zzUnpackTrans(String packed, int offset, int[] result)">3</method>
			<method name="void _init_(java.io.InputStream in)">0</method>
			<method name="private static int zzUnpackAttribute(String packed, int offset, int[] result)">3</method>
			<method name="private static int[] zzUnpackRowMap()">1</method>
			<method name="public void yypushback(int number)">2</method>
			<method name="private Object getNormalizedAmpNext()">2</method>
			<method name="void _init_(java.io.Reader in)">0</method>
			<method name="private Object normalizeFractions(String in)">3</method>
			<method name="private static int zzUnpackRowMap(String packed, int offset, int[] result)">2</method>
			<method name="private static String asciiQuotes(String in)">1</method>
			<method name="public final String yytext()">1</method>
			<method name="private Object handleEllipsis(String tok)">3</method>
			<method name="public final void yybegin(int newState)">1</method>
			<method name="public final void yyclose()">1</method>
			<method name="public final void yyreset(java.io.Reader reader)">1</method>
			<method name="public final int yylength()">1</method>
			<method name="public final char yycharat(int pos)">1</method>
			<method name="private static int zzUnpackAction(String packed, int offset, int[] result)">3</method>
			<method name="private static String normalizeAmp(String in)">1</method>
			<method name="public void _init_(java.io.Reader r, edu.stanford.nlp.process.LexedTokenFactory tf, String options)">0</method>
			<method name="public Object next()">1</method>
			<method name="private static String removeSoftHyphens(String in)">5</method>
			<method name="private static int[] zzUnpackAttribute()">1</method>
			<method name="private static int[] zzUnpackAction()">1</method>
			<method name="private static String latexQuotes(String in, boolean probablyLeft)">2</method>
			<method name="private static String delimit(String s, char c)">4</method>
			<method name="private boolean zzRefill()">1</method>
			<method name="private void zzScanError(int errorCode)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.sequences.ColumnDocumentReaderAndWriter$ColumnDocParser</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>22</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>2</npm>
		<lcom3>0.3333333333333333</lcom3>
		<loc>131</loc>
		<dam>0.5</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.45</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>30.75</amc>
		<cc>
			<method name="private void _init_(edu.stanford.nlp.sequences.ColumnDocumentReaderAndWriter)">0</method>
			<method name="void _init_(edu.stanford.nlp.sequences.ColumnDocumentReaderAndWriter x0, edu.stanford.nlp.sequences.ColumnDocumentReaderAndWriter$1 x1)">0</method>
			<method name="public volatile Object apply(Object x0)">1</method>
			<method name="public java.util.List apply(String doc)">5</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.CoreMapSequenceMatchAction$AnnotateAction</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>7</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>44</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>20.5</amc>
		<cc>
			<method name="public void _init_(java.util.Map attributes)">0</method>
			<method name="public transient edu.stanford.nlp.ling.tokensregex.SequenceMatchResult apply(edu.stanford.nlp.ling.tokensregex.SequenceMatchResult matchResult, int[] groups)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.HashIndex</name>
		<wmc>33</wmc>
		<dit>2</dit>
		<noc>1</noc>
		<cbo>34</cbo>
		<rfc>89</rfc>
		<lcom>312</lcom>
		<ca>33</ca>
		<ce>4</ce>
		<npm>33</npm>
		<lcom3>0.65</lcom3>
		<loc>744</loc>
		<dam>0.4</dam>
		<moa>0</moa>
		<mfa>0.35555555555555557</mfa>
		<cam>0.15757575757575756</cam>
		<ic>1</ic>
		<cbm>6</cbm>
		<amc>21.393939393939394</amc>
		<cc>
			<method name="public void clear()">1</method>
			<method name="public int indexOf(Object o, boolean add)">5</method>
			<method name="public boolean equals(Object o)">5</method>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="public edu.stanford.nlp.util.HashIndex unmodifiableView()">1</method>
			<method name="public int[] indices(java.util.Collection elems)">2</method>
			<method name="public void _init_(int capacity)">0</method>
			<method name="public String toString(int n)">5</method>
			<method name="public void _init_(java.util.Collection c)">0</method>
			<method name="public int size()">1</method>
			<method name="public java.util.Collection objects(int[] indices)">1</method>
			<method name="public static edu.stanford.nlp.util.Index loadFromReader(java.io.BufferedReader br)">1</method>
			<method name="public String toStringOneEntryPerLine(int n)">5</method>
			<method name="public java.util.List objectsList()">1</method>
			<method name="public static edu.stanford.nlp.util.Index loadFromFilename(String file)">7</method>
			<method name="public int indexOf(Object o)">1</method>
			<method name="public String toString()">1</method>
			<method name="public String toStringOneEntryPerLine()">1</method>
			<method name="public boolean contains(Object o)">1</method>
			<method name="public static edu.stanford.nlp.util.Index loadFromFileWithList(String file)">5</method>
			<method name="public void _init_()">0</method>
			<method name="public boolean removeAll(java.util.Collection e)">1</method>
			<method name="public boolean add(Object o)">3</method>
			<method name="public void saveToFilename(String file)">5</method>
			<method name="public Object get(int i)">3</method>
			<method name="public void saveToWriter(java.io.Writer bw)">1</method>
			<method name="public boolean addAll(java.util.Collection c)">2</method>
			<method name="public int hashCode()">1</method>
			<method name="public void lock()">1</method>
			<method name="public void unlock()">1</method>
			<method name="public void _init_(edu.stanford.nlp.util.Index index)">0</method>
			<method name="public boolean remove(Object o)">1</method>
			<method name="public boolean isLocked()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.SystemUtils$ProcessException</name>
		<wmc>2</wmc>
		<dit>4</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>3</ca>
		<ce>0</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>11</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>1.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.0</amc>
		<cc>
			<method name="public void _init_(Throwable cause)">0</method>
			<method name="public void _init_(String string)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$10$1</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>11</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>0.625</lcom3>
		<loc>95</loc>
		<dam>0.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>29.333333333333332</amc>
		<cc>
			<method name="public void initialize()">3</method>
			<method name="void _init_(edu.stanford.nlp.trees.tregex.Relation$10, edu.stanford.nlp.trees.Tree, edu.stanford.nlp.trees.tregex.TregexMatcher)">0</method>
			<method name="void advance()">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.CoreMapNodePattern$NotNilAnnotationPattern</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>14</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.6666666666666665</amc>
		<cc>
			<method name="public boolean match(Object obj)">2</method>
			<method name="public void _init_()">0</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.io.NumberRangesFileFilter</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>32</rfc>
		<lcom>0</lcom>
		<ca>9</ca>
		<ce>1</ce>
		<npm>4</npm>
		<lcom3>0.16666666666666666</lcom3>
		<loc>267</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>65.25</amc>
		<cc>
			<method name="public void _init_(String ranges, boolean recurse)">0</method>
			<method name="public String toString()">4</method>
			<method name="public boolean accept(String str)">9</method>
			<method name="public boolean accept(java.io.File file)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.NamedDependency$DependencyFactoryHolder</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>0</npm>
		<lcom3>0.5</lcom3>
		<loc>15</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.6666666666666665</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="static edu.stanford.nlp.trees.DependencyFactory access$000()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.CorefChain$CorefMention</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>14</cbo>
		<rfc>21</rfc>
		<lcom>0</lcom>
		<ca>7</ca>
		<ce>7</ce>
		<npm>5</npm>
		<lcom3>0.5512820512820512</lcom3>
		<loc>389</loc>
		<dam>0.07692307692307693</dam>
		<moa>5</moa>
		<mfa>0.0</mfa>
		<cam>0.23376623376623376</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>52.714285714285715</amc>
		<cc>
			<method name="static boolean access$000(edu.stanford.nlp.dcoref.CorefChain$CorefMention x0, edu.stanford.nlp.dcoref.CorefChain$CorefMention x1)">1</method>
			<method name="public boolean equals(Object aThat)">14</method>
			<method name="public int hashCode()">1</method>
			<method name="public void _init_(edu.stanford.nlp.dcoref.Mention m, edu.stanford.nlp.util.IntTuple pos)">0</method>
			<method name="private boolean moreRepresentativeThan(edu.stanford.nlp.dcoref.CorefChain$CorefMention m)">16</method>
			<method name="public void _init_(edu.stanford.nlp.dcoref.Dictionaries$MentionType mentionType, edu.stanford.nlp.dcoref.Dictionaries$Number number, edu.stanford.nlp.dcoref.Dictionaries$Gender gender, edu.stanford.nlp.dcoref.Dictionaries$Animacy animacy, int startIndex, int endIndex, int headIndex, int corefClusterID, int mentionID, int sentNum, edu.stanford.nlp.util.IntTuple position, String mentionSpan)">0</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.neural.rnn.RNNCoreAnnotations$PredictedClass</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequencePattern$BackRefState</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>20</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>1</npm>
		<lcom3>0.25</lcom3>
		<loc>131</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5714285714285714</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>42.0</amc>
		<cc>
			<method name="protected boolean match(int bid, edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates matchedStates, edu.stanford.nlp.ling.tokensregex.BasicSequenceMatchResult$MatchedGroup matchedGroup, int matchedNodes)">3</method>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.SequencePattern$NodesMatchChecker matcher, int captureGroupId)">0</method>
			<method name="protected boolean match(int bid, edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates matchedStates, boolean consume, edu.stanford.nlp.ling.tokensregex.SequencePattern$State prevState)">5</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.TreeCoreAnnotations$HeadWordAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$14$1</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>6</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>0.5</lcom3>
		<loc>47</loc>
		<dam>0.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.666666666666666</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.trees.tregex.Relation$14, edu.stanford.nlp.trees.Tree, edu.stanford.nlp.trees.tregex.TregexMatcher)">0</method>
			<method name="public void advance()">3</method>
			<method name="void initialize()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.MemoryTreebank$1</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>10</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.0</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="public edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader in)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.TimeFormatter$TimeZoneComponent</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>31</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>10</ce>
		<npm>3</npm>
		<lcom3>0.4</lcom3>
		<loc>201</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.44</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>31.833333333333332</amc>
		<cc>
			<method name="protected StringBuilder appendRegex0(StringBuilder sb)">1</method>
			<method name="public org.joda.time.DateTimeZone parseDateTimeZone(String str)">3</method>
			<method name="static void _clinit_()">0</method>
			<method name="public edu.stanford.nlp.time.SUTime$Temporal updateTemporal(edu.stanford.nlp.time.SUTime$Temporal t, String fieldValueStr)">2</method>
			<method name="public void _init_(java.util.Locale locale)">0</method>
			<method name="private void updateTimeZoneNames(java.util.Locale locale)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.arabic.ArabicTreebankLanguagePack</name>
		<wmc>17</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>17</cbo>
		<rfc>32</rfc>
		<lcom>120</lcom>
		<ca>7</ca>
		<ce>11</ce>
		<npm>16</npm>
		<lcom3>0.9513888888888888</lcom3>
		<loc>341</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.529411764705884</amc>
		<cc>
			<method name="public String treebankFileExtension()">1</method>
			<method name="public char[] labelAnnotationIntroducingCharacters()">1</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public String[] startSymbols()">1</method>
			<method name="public String[] punctuationWords()">1</method>
			<method name="public edu.stanford.nlp.trees.HeadFinder typedDependencyHeadFinder()">1</method>
			<method name="public String[] evalBIgnoredPunctuationTags()">1</method>
			<method name="public edu.stanford.nlp.trees.TreeReaderFactory treeReaderFactory()">1</method>
			<method name="public String[] sentenceFinalPunctuationTags()">1</method>
			<method name="public String[] punctuationTags()">1</method>
			<method name="public edu.stanford.nlp.trees.HeadFinder headFinder()">1</method>
			<method name="public edu.stanford.nlp.process.TokenizerFactory getTokenizerFactory()">1</method>
			<method name="public static void main(String[] args)">2</method>
			<method name="public String[] sentenceFinalPunctuationWords()">1</method>
			<method name="public edu.stanford.nlp.international.morph.MorphoFeatureSpecification morphFeatureSpec()">1</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$PercentAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.process.WordTokenFactory</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>4</rfc>
		<lcom>3</lcom>
		<ca>5</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>21</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.7777777777777778</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="public volatile Object makeToken(String x0, int x1, int x2)">1</method>
			<method name="public edu.stanford.nlp.ling.Word makeToken(String str, int begin, int length)">1</method>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.fsm.TransducerGraph$NormalizingGraphProcessor</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>15</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>89</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>43.0</amc>
		<cc>
			<method name="public void _init_(boolean forwardNormalization)">0</method>
			<method name="public edu.stanford.nlp.fsm.TransducerGraph processGraph(edu.stanford.nlp.fsm.TransducerGraph g)">4</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.TreeAnnotator</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>19</cbo>
		<rfc>56</rfc>
		<lcom>7</lcom>
		<ca>4</ca>
		<ce>15</ce>
		<npm>2</npm>
		<lcom3>0.6</lcom3>
		<loc>743</loc>
		<dam>1.0</dam>
		<moa>4</moa>
		<mfa>0.0</mfa>
		<cam>0.3333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>122.16666666666667</amc>
		<cc>
			<method name="private edu.stanford.nlp.trees.Tree transformTreeHelper(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.Tree root)">57</method>
			<method name="private static boolean leftRec(edu.stanford.nlp.trees.Tree t, String baseCat)">2</method>
			<method name="private java.util.List listBasicCategories(java.util.List l)">2</method>
			<method name="public edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree t)">1</method>
			<method name="public void _init_(edu.stanford.nlp.trees.HeadFinder hf, edu.stanford.nlp.parser.lexparser.TreebankLangParserParams tlpp, edu.stanford.nlp.parser.lexparser.Options op)">0</method>
			<method name="private static boolean rightRec(edu.stanford.nlp.trees.Tree t, String baseCat)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.RepeatedRecordHandler$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.NERFeatureFactory$Bin1Annotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Filters$ConjFilter</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>13</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>4</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>52</loc>
		<dam>0.5</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.5</amc>
		<cc>
			<method name="public void _init_(java.util.List filters)">0</method>
			<method name="public void addFilter(edu.stanford.nlp.util.Filter filter)">1</method>
			<method name="public boolean accept(Object obj)">2</method>
			<method name="public transient void _init_(edu.stanford.nlp.util.Filter[] filters)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalRelations$AppositionalModifierGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.MultiClassChunkEvalStats</name>
		<wmc>13</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>51</rfc>
		<lcom>24</lcom>
		<ca>1</ca>
		<ce>10</ce>
		<npm>7</npm>
		<lcom3>0.3333333333333333</lcom3>
		<loc>458</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.2222222222222222</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>33.84615384615385</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.classify.Classifier classifier, edu.stanford.nlp.classify.GeneralDataset data, String negLabel)">0</method>
			<method name="public edu.stanford.nlp.pipeline.LabeledChunkIdentifier getChunker()">1</method>
			<method name="protected void markBoundary()">2</method>
			<method name="public void _init_(edu.stanford.nlp.util.Index dataLabelIndex, String negLabel)">0</method>
			<method name="protected void addGuess(edu.stanford.nlp.pipeline.LabeledChunkIdentifier$LabelTagType guess, edu.stanford.nlp.pipeline.LabeledChunkIdentifier$LabelTagType correct, boolean addUnknownLabels)">17</method>
			<method name="public String getConllEvalString()">1</method>
			<method name="protected void finalizeCounts()">1</method>
			<method name="protected void addGuess(String guess, String trueLabel, boolean addUnknownLabels)">1</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="protected volatile void addGuess(Object x0, Object x1, boolean x2)">1</method>
			<method name="public void _init_(String negLabel)">0</method>
			<method name="public void clearCounts()">1</method>
			<method name="private String getTypeLabel(edu.stanford.nlp.pipeline.LabeledChunkIdentifier$LabelTagType tagType)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.CTBErrorCorrectingTreeNormalizer$ChineseEmptyFilter</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>16</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>2</npm>
		<lcom3>1.3333333333333333</lcom3>
		<loc>68</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.75</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public boolean accept(edu.stanford.nlp.trees.Tree t)">8</method>
			<method name="void _init_(edu.stanford.nlp.trees.international.pennchinese.CTBErrorCorrectingTreeNormalizer$1 x0)">0</method>
			<method name="public volatile boolean accept(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.FilteredIterator</name>
		<wmc>10</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>22</rfc>
		<lcom>33</lcom>
		<ca>2</ca>
		<ce>2</ce>
		<npm>5</npm>
		<lcom3>0.4444444444444444</lcom3>
		<loc>147</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.3</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.3</amc>
		<cc>
			<method name="public static void main(String[] args)">2</method>
			<method name="public void _init_(java.util.Iterator iterator, edu.stanford.nlp.util.Filter filter)">0</method>
			<method name="Object currentCandidate()">1</method>
			<method name="public boolean hasNext()">1</method>
			<method name="void advanceCandidate()">2</method>
			<method name="public void remove()">1</method>
			<method name="boolean hasCurrentCandidate()">1</method>
			<method name="void skipUnacceptableCandidates()">3</method>
			<method name="public Object next()">1</method>
			<method name="boolean currentCandidateIsAcceptable()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.TypesafeMap</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>7</rfc>
		<lcom>21</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>7</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6190476190476191</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract int size()">1</method>
			<method name="public abstract java.util.Set keySet()">1</method>
			<method name="public abstract Object get(Class)">1</method>
			<method name="public abstract Object set(Class, Object)">1</method>
			<method name="public abstract boolean containsKey(Class)">1</method>
			<method name="public abstract Object remove(Class)">1</method>
			<method name="public abstract boolean has(Class)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.QNMinimizer$QNInfo$NegativeCurvature</name>
		<wmc>1</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>9</loc>
		<dam>0.5</dam>
		<moa>1</moa>
		<mfa>1.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.optimization.QNMinimizer$QNInfo)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.CorefScorer</name>
		<wmc>10</wmc>
		<dit>1</dit>
		<noc>3</noc>
		<cbo>8</cbo>
		<rfc>21</rfc>
		<lcom>35</lcom>
		<ca>4</ca>
		<ce>4</ce>
		<npm>7</npm>
		<lcom3>0.5111111111111111</lcom3>
		<loc>275</loc>
		<dam>0.2</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.3</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>26.0</amc>
		<cc>
			<method name="protected abstract void calculateRecall(edu.stanford.nlp.dcoref.Document)">1</method>
			<method name="public double getPrecision()">2</method>
			<method name="protected abstract void calculatePrecision(edu.stanford.nlp.dcoref.Document)">1</method>
			<method name="void _init_(edu.stanford.nlp.dcoref.CorefScorer$ScoreType st)">0</method>
			<method name="public void printF1(java.util.logging.Logger logger)">1</method>
			<method name="public void printF1(java.util.logging.Logger logger, boolean printF1First)">4</method>
			<method name="public double getScore(edu.stanford.nlp.dcoref.CorefScorer$SubScoreType subScoreType)">2</method>
			<method name="public double getF1()">2</method>
			<method name="public void calculateScore(edu.stanford.nlp.dcoref.Document doc)">1</method>
			<method name="public double getRecall()">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.TagProjection</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>4</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract String project(String)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.LambdaSolveTagger</name>
		<wmc>7</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>32</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>500</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.26785714285714285</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>70.42857142857143</amc>
		<cc>
			<method name="void initCondsZlambdaEtc()">6</method>
			<method name="public boolean checkCorrectness()">9</method>
			<method name="double g(double lambdaP, int index)">2</method>
			<method name="void _init_(double[] lambda)">0</method>
			<method name="void _init_(java.io.DataInputStream dataStream)">0</method>
			<method name="double fExpected(edu.stanford.nlp.maxent.Feature f)">2</method>
			<method name="void _init_(edu.stanford.nlp.maxent.Problem p1, double eps1, byte[][] fnumArr)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.IntCounter$NaturalComparator</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>20</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.666666666666667</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public int compare(Object o1, Object o2)">2</method>
			<method name="void _init_(edu.stanford.nlp.stats.IntCounter$1 x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.structure.MachineReadingAnnotations$DocumentIdAnnotation</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.NPTmpRetainingTreeNormalizer</name>
		<wmc>20</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>17</cbo>
		<rfc>59</rfc>
		<lcom>138</lcom>
		<ca>7</ca>
		<ce>14</ce>
		<npm>5</npm>
		<lcom3>0.9588100686498857</lcom3>
		<loc>593</loc>
		<dam>0.5652173913043478</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.17105263157894737</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>27.5</amc>
		<cc>
			<method name="public edu.stanford.nlp.trees.Tree normalizeWholeTree(edu.stanford.nlp.trees.Tree tree, edu.stanford.nlp.trees.TreeFactory tf)">6</method>
			<method name="public void _init_(int temporalAnnotation, boolean doSGappedStuff, int leaveItAll, boolean doAdverbialNP)">0</method>
			<method name="static java.util.regex.Pattern access$300()">1</method>
			<method name="static java.util.regex.Pattern access$500()">1</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="static boolean access$900(edu.stanford.nlp.trees.NPTmpRetainingTreeNormalizer x0)">1</method>
			<method name="private void addTMP9(edu.stanford.nlp.trees.Tree tree)">16</method>
			<method name="static void access$800(edu.stanford.nlp.trees.NPTmpRetainingTreeNormalizer x0, edu.stanford.nlp.trees.Tree x1)">1</method>
			<method name="public void _init_(int temporalAnnotation, boolean doSGappedStuff)">0</method>
			<method name="static boolean access$100(edu.stanford.nlp.trees.Tree x0)">1</method>
			<method name="static java.util.regex.Pattern access$700()">1</method>
			<method name="static java.util.regex.Pattern access$1000()">1</method>
			<method name="static boolean access$000(edu.stanford.nlp.trees.NPTmpRetainingTreeNormalizer x0)">1</method>
			<method name="static java.util.regex.Pattern access$600()">1</method>
			<method name="static edu.stanford.nlp.trees.HeadFinder access$400(edu.stanford.nlp.trees.NPTmpRetainingTreeNormalizer x0)">1</method>
			<method name="public void _init_(int temporalAnnotation, boolean doSGappedStuff, int leaveItAll, boolean doAdverbialNP, edu.stanford.nlp.trees.HeadFinder headFinder)">0</method>
			<method name="protected String cleanUpLabel(String label)">21</method>
			<method name="static int access$200(edu.stanford.nlp.trees.NPTmpRetainingTreeNormalizer x0)">1</method>
			<method name="private static boolean includesEmptyNPSubj(edu.stanford.nlp.trees.Tree t)">8</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.MapFactory$LinkedHashMapFactory</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>8</rfc>
		<lcom>15</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>4</npm>
		<lcom3>1.2</lcom3>
		<loc>32</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4583333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.166666666666667</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public java.util.Map setMap(java.util.Map map)">1</method>
			<method name="public java.util.Map newMap()">1</method>
			<method name="void _init_(edu.stanford.nlp.util.MapFactory$1 x0)">0</method>
			<method name="public java.util.Map newMap(int initCapacity)">1</method>
			<method name="public java.util.Map setMap(java.util.Map map, int initCapacity)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequencePattern$SequencePatternExpr</name>
		<wmc>8</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>24</rfc>
		<lcom>0</lcom>
		<ca>4</ca>
		<ce>4</ce>
		<npm>4</npm>
		<lcom3>0.0</lcom3>
		<loc>159</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.75</amc>
		<cc>
			<method name="public transient void _init_(edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr[] patterns)">0</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr optimize()">2</method>
			<method name="protected void updateBindings(edu.stanford.nlp.ling.tokensregex.SequencePattern$VarGroupBindings bindings)">2</method>
			<method name="protected int assignGroupIds(int start)">2</method>
			<method name="public void _init_(java.util.List patterns)">0</method>
			<method name="protected edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr copy()">2</method>
			<method name="protected edu.stanford.nlp.ling.tokensregex.SequencePattern$Frag build()">3</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.Scorer</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>5</rfc>
		<lcom>10</lcom>
		<ca>9</ca>
		<ce>2</ce>
		<npm>5</npm>
		<lcom3>2.0</lcom3>
		<loc>5</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract boolean iPossible(edu.stanford.nlp.parser.lexparser.Hook)">1</method>
			<method name="public abstract double oScore(edu.stanford.nlp.parser.lexparser.Edge)">1</method>
			<method name="public abstract boolean oPossible(edu.stanford.nlp.parser.lexparser.Hook)">1</method>
			<method name="public abstract double iScore(edu.stanford.nlp.parser.lexparser.Edge)">1</method>
			<method name="public abstract boolean parse(java.util.List)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.IntTriple</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>7</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>6</npm>
		<lcom3>1.2</lcom3>
		<loc>63</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.333333333333334</amc>
		<cc>
			<method name="public void _init_(int src, int mid, int trgt)">0</method>
			<method name="public edu.stanford.nlp.util.IntTuple getCopy()">1</method>
			<method name="public int getTarget()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public int getSource()">1</method>
			<method name="public int getMiddle()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.TypesafeMap$Key</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunctionNoisyLabel</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>18</rfc>
		<lcom>11</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>3</npm>
		<lcom3>0.6</lcom3>
		<loc>143</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2916666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>22.666666666666668</amc>
		<cc>
			<method name="void _init_(int[][][][] data, int[][] labels, int window, edu.stanford.nlp.util.Index classIndex, java.util.List labelIndices, int[] map, String priorType, String backgroundSymbol, double sigma, double[][][][] featureVal, int multiThreadGrad, double[][] errorMatrix)">0</method>
			<method name="protected double regularGradientAndValue()">2</method>
			<method name="public void calculate(double[] x)">1</method>
			<method name="protected double expectedAndEmpiricalCountsAndValueForADoc(double[][] E, double[][] Ehat, int docIndex)">2</method>
			<method name="public edu.stanford.nlp.ie.crf.CliquePotentialFunction getFunc(int docIndex)">1</method>
			<method name="public void setWeights(double[][] weights)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.MultiNodePattern$IntersectMultiNodePattern</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>9</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>0.0</lcom3>
		<loc>51</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.8333333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>24.0</amc>
		<cc>
			<method name="protected void _init_(java.util.List nodePatterns)">0</method>
			<method name="protected java.util.Collection match(java.util.List nodes, int start)">5</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$SpanAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$SentencePositionAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.fsm.FastExactAutomatonMinimizer$Split</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>5</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>4</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>28</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.25</amc>
		<cc>
			<method name="public Object getSymbol()">1</method>
			<method name="public edu.stanford.nlp.fsm.FastExactAutomatonMinimizer$Block getBlock()">1</method>
			<method name="public void _init_(java.util.Collection members, Object symbol, edu.stanford.nlp.fsm.FastExactAutomatonMinimizer$Block block)">0</method>
			<method name="public java.util.Collection getMembers()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequenceMatcher$NamedGroupMatchReplacement</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>5</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>17</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.0</amc>
		<cc>
			<method name="public void _init_(String groupName)">0</method>
			<method name="public void append(edu.stanford.nlp.ling.tokensregex.SequenceMatchResult match, java.util.List list)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.neural.SimpleTensor$SimpleMatrixIteratorWrapper</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>11</rfc>
		<lcom>7</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>5</npm>
		<lcom3>0.2</lcom3>
		<loc>97</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>14.833333333333334</amc>
		<cc>
			<method name="private void advanceIterator()">5</method>
			<method name="public void _init_(java.util.Iterator tensors)">0</method>
			<method name="public org.ejml.simple.SimpleMatrix next()">4</method>
			<method name="public boolean hasNext()">4</method>
			<method name="public void remove()">1</method>
			<method name="public volatile Object next()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.AccuracyStats</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>37</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>9</ce>
		<npm>5</npm>
		<lcom3>0.64</lcom3>
		<loc>315</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.37142857142857144</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>49.833333333333336</amc>
		<cc>
			<method name="public String getDescription(int numDigits)">2</method>
			<method name="public double score(edu.stanford.nlp.classify.ProbabilisticClassifier classifier, edu.stanford.nlp.classify.GeneralDataset data)">3</method>
			<method name="public void _init_(edu.stanford.nlp.classify.ProbabilisticClassifier classifier, edu.stanford.nlp.classify.GeneralDataset data, Object posLabel)">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void _init_(Object posLabel, String saveFile)">0</method>
			<method name="public static String toStringArr(int[] acc)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.CtbSufDetector</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>16</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>3</npm>
		<lcom3>0.875</lcom3>
		<loc>76</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.36</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.8</amc>
		<cc>
			<method name="String extract(edu.stanford.nlp.tagger.maxent.History h, edu.stanford.nlp.tagger.maxent.PairsHolder pH)">3</method>
			<method name="public boolean isLocal()">1</method>
			<method name="void _init_(String t2, int n2)">0</method>
			<method name="public boolean isDynamic()">1</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.tsurgeon.FetchNode</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>10</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>38</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.0</amc>
		<cc>
			<method name="public edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.tregex.TregexMatcher m)">3</method>
			<method name="public void _init_(String nodeName)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.CollectionUtils$1</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>5</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>17</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.666666666666667</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="void _init_()">0</method>
			<method name="public int compare(java.util.List list1, java.util.List list2)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.pascal.AcronymModel$AfterAligned</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>4</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>41</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.666666666666666</amc>
		<cc>
			<method name="public double value(edu.stanford.nlp.ie.pascal.Alignment alignment)">3</method>
			<method name="public void _init_()">0</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.RegexNERAnnotator</name>
		<wmc>12</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>37</rfc>
		<lcom>60</lcom>
		<ca>0</ca>
		<ce>8</ce>
		<npm>8</npm>
		<lcom3>0.8181818181818182</lcom3>
		<loc>393</loc>
		<dam>0.6666666666666666</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.3116883116883117</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>31.5</amc>
		<cc>
			<method name="private static int findEndOfNERAnnotation(java.util.List tokens, int start)">3</method>
			<method name="public void _init_(String name, java.util.Properties properties)">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void annotate(edu.stanford.nlp.pipeline.Annotation annotation)">13</method>
			<method name="public void _init_(String mapping, boolean ignoreCase, String validPosPattern)">0</method>
			<method name="public void _init_(String mapping, boolean ignoreCase)">0</method>
			<method name="public java.util.Set requires()">1</method>
			<method name="private static int findEndOfAnswerAnnotation(java.util.List tokens, int start)">3</method>
			<method name="public java.util.Set requirementsSatisfied()">1</method>
			<method name="public void _init_(String mapping, boolean ignoreCase, boolean overwriteMyLabels, String validPosPattern, boolean verbose)">0</method>
			<method name="private static int findStartOfNERAnnotation(java.util.List tokens, int start)">3</method>
			<method name="public void _init_(String mapping)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalRelations$AuxModifierGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$UnaryAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.TregexMatcher</name>
		<wmc>18</wmc>
		<dit>1</dit>
		<noc>2</noc>
		<cbo>107</cbo>
		<rfc>33</rfc>
		<lcom>113</lcom>
		<ca>103</ca>
		<ce>4</ce>
		<npm>11</npm>
		<lcom3>0.8455882352941176</lcom3>
		<loc>227</loc>
		<dam>0.0</dam>
		<moa>5</moa>
		<mfa>0.0</mfa>
		<cam>0.23809523809523808</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.166666666666666</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.trees.Tree root, edu.stanford.nlp.trees.Tree tree, java.util.IdentityHashMap nodesToParents, java.util.Map namesToNodes, edu.stanford.nlp.trees.tregex.VariableStrings variableStrings, edu.stanford.nlp.trees.HeadFinder headFinder)">0</method>
			<method name="public abstract boolean matches()">1</method>
			<method name="public String getVariableString(String var)">1</method>
			<method name="abstract boolean getChangesVariables()">1</method>
			<method name="public boolean find()">6</method>
			<method name="public void reset()">1</method>
			<method name="public boolean matchesAt(edu.stanford.nlp.trees.Tree node)">1</method>
			<method name="public boolean findAt(edu.stanford.nlp.trees.Tree node)">4</method>
			<method name="public java.util.Set getNodeNames()">1</method>
			<method name="edu.stanford.nlp.trees.Tree getParent(edu.stanford.nlp.trees.Tree node)">4</method>
			<method name="void resetChildIter(edu.stanford.nlp.trees.Tree tree)">1</method>
			<method name="private void fillNodesToParents(edu.stanford.nlp.trees.Tree node, edu.stanford.nlp.trees.Tree parent)">2</method>
			<method name="public edu.stanford.nlp.trees.Tree getNode(String name)">1</method>
			<method name="void resetChildIter()">1</method>
			<method name="public abstract edu.stanford.nlp.trees.Tree getMatch()">1</method>
			<method name="public boolean findNextMatchingNode()">3</method>
			<method name="edu.stanford.nlp.trees.Tree getRoot()">1</method>
			<method name="public edu.stanford.nlp.trees.HeadFinder getHeadFinder()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Pair$BySecondReversePairComparator</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>21</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="public int compare(edu.stanford.nlp.util.Pair pair1, edu.stanford.nlp.util.Pair pair2)">1</method>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser</name>
		<wmc>48</wmc>
		<dit>1</dit>
		<noc>1</noc>
		<cbo>50</cbo>
		<rfc>202</rfc>
		<lcom>474</lcom>
		<ca>7</ca>
		<ce>43</ce>
		<npm>24</npm>
		<lcom3>0.8474422815753735</lcom3>
		<loc>6685</loc>
		<dam>0.9361702127659575</dam>
		<moa>13</moa>
		<mfa>0.0</mfa>
		<cam>0.1111111111111111</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>137.29166666666666</amc>
		<cc>
			<method name="protected java.util.List extractBestParses(int goal, int start, int end)">10</method>
			<method name="public double getBestScore(String stateName)">7</method>
			<method name="protected void buildOFilter()">3</method>
			<method name="public double iScore(edu.stanford.nlp.parser.lexparser.Edge edge)">1</method>
			<method name="public boolean iPossibleR(int state, int end)">1</method>
			<method name="public double oScore(edu.stanford.nlp.parser.lexparser.Edge edge)">1</method>
			<method name="private edu.stanford.nlp.ling.CoreLabel getCoreLabel(int labelIndex)">5</method>
			<method name="private void initializeChart(java.util.List sentence)">53</method>
			<method name="static void _clinit_()">0</method>
			<method name="public java.util.List getKSampledParses(int k)">1</method>
			<method name="public edu.stanford.nlp.trees.Tree getBestParse()">2</method>
			<method name="protected void tick(String str)">1</method>
			<method name="private void clearArrays()">1</method>
			<method name="private edu.stanford.nlp.trees.Tree getTree(edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser$Vertex v, int k, int kPrime)">12</method>
			<method name="private void doInsideChartCell(int diff, int start)">95</method>
			<method name="protected java.util.List getConstraints()">1</method>
			<method name="private void doOutsideScores()">39</method>
			<method name="private void lazyNext(edu.stanford.nlp.util.PriorityQueue candV, edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser$Derivation derivation, int kPrime)">5</method>
			<method name="protected void initializePossibles()">8</method>
			<method name="public java.util.List getKBestParses(int k)">3</method>
			<method name="protected static boolean matches(double x, double y)">2</method>
			<method name="public boolean hasParse()">2</method>
			<method name="public edu.stanford.nlp.trees.Tree scoreNonBinarizedTree(edu.stanford.nlp.trees.Tree tree)">2</method>
			<method name="void doInsideScores()">5</method>
			<method name="void setConstraints(java.util.List constraints)">2</method>
			<method name="public boolean iPossible(edu.stanford.nlp.parser.lexparser.Hook hook)">2</method>
			<method name="public void nudgeDownArraySize()">1</method>
			<method name="public double getBestScore()">1</method>
			<method name="public boolean oPossibleR(int state, int end)">1</method>
			<method name="public double validateBinarizedTree(edu.stanford.nlp.trees.Tree tree, int start)">7</method>
			<method name="private void initializeChart(edu.stanford.nlp.parser.lexparser.Lattice lr)">13</method>
			<method name="public boolean parse(java.util.List sentence)">37</method>
			<method name="private void considerCreatingArrays(int length)">5</method>
			<method name="public java.util.List getBestParses()">2</method>
			<method name="public boolean parse(edu.stanford.nlp.parser.lexparser.Lattice lr)">16</method>
			<method name="protected void createArrays(int length)">12</method>
			<method name="public java.util.List getKGoodParses(int k)">1</method>
			<method name="protected edu.stanford.nlp.trees.Tree extractBestParse(String goalStr, int start, int end)">1</method>
			<method name="public boolean iPossibleL(int state, int start)">1</method>
			<method name="public double scoreBinarizedTree(edu.stanford.nlp.trees.Tree tree, int start)">4</method>
			<method name="private void lazyKthBest(edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser$Vertex v, int k, int kPrime)">5</method>
			<method name="private edu.stanford.nlp.trees.Tree extractBestParse(int goal, int start, int end)">22</method>
			<method name="public boolean oPossibleL(int state, int start)">1</method>
			<method name="private edu.stanford.nlp.util.PriorityQueue getCandidates(edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser$Vertex v, int k)">8</method>
			<method name="private java.util.List getBackwardsStar(edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser$Vertex v)">6</method>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.BinaryGrammar bg, edu.stanford.nlp.parser.lexparser.UnaryGrammar ug, edu.stanford.nlp.parser.lexparser.Lexicon lex, edu.stanford.nlp.parser.lexparser.Options op, edu.stanford.nlp.util.Index stateIndex, edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex)">0</method>
			<method name="public boolean parse(edu.stanford.nlp.parser.lexparser.HTKLatticeReader lr)">1</method>
			<method name="public boolean oPossible(edu.stanford.nlp.parser.lexparser.Hook hook)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.Span$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.Edge</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>12</rfc>
		<lcom>9</lcom>
		<ca>8</ca>
		<ce>2</ce>
		<npm>6</npm>
		<lcom3>1.0</lcom3>
		<loc>118</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.5</amc>
		<cc>
			<method name="public boolean equals(Object o)">8</method>
			<method name="public int hashCode()">1</method>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.Edge e)">0</method>
			<method name="public boolean isEdge()">1</method>
			<method name="public void _init_(boolean exhaustiveTest)">0</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$ParagraphAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.classify.SVMLightClassifierFactory$3</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>8</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>49</loc>
		<dam>0.0</dam>
		<moa>4</moa>
		<mfa>0.0</mfa>
		<cam>0.4444444444444444</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>14.0</amc>
		<cc>
			<method name="public Double apply(Double cToTry)">1</method>
			<method name="void _init_(edu.stanford.nlp.classify.SVMLightClassifierFactory, edu.stanford.nlp.classify.GeneralDataset, edu.stanford.nlp.stats.Scorer, edu.stanford.nlp.classify.GeneralDataset)">0</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.classify.SVMLightClassifierFactory$2</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>13</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>70</loc>
		<dam>0.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.4444444444444444</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>21.333333333333332</amc>
		<cc>
			<method name="public Double apply(Double cToTry)">3</method>
			<method name="void _init_(edu.stanford.nlp.classify.SVMLightClassifierFactory, edu.stanford.nlp.classify.CrossValidator, edu.stanford.nlp.util.Function)">0</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$UnknownAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.classify.SVMLightClassifierFactory$1</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>10</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>8</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>54</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.4666666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.333333333333332</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.classify.SVMLightClassifierFactory, edu.stanford.nlp.stats.Scorer)">0</method>
			<method name="public Double apply(edu.stanford.nlp.util.Triple fold)">1</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Iterables$3$1</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>10</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>3</npm>
		<lcom3>0.3333333333333333</lcom3>
		<loc>34</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.0</amc>
		<cc>
			<method name="public boolean hasNext()">1</method>
			<method name="void _init_(edu.stanford.nlp.util.Iterables$3)">0</method>
			<method name="public void remove()">1</method>
			<method name="public Object next()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.neural.NeuralUtils</name>
		<wmc>17</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>62</rfc>
		<lcom>136</lcom>
		<ca>4</ca>
		<ce>6</ce>
		<npm>16</npm>
		<lcom3>2.0</lcom3>
		<loc>640</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.12941176470588237</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>36.64705882352941</amc>
		<cc>
			<method name="public static org.ejml.simple.SimpleMatrix elementwiseApplyTanh(org.ejml.simple.SimpleMatrix input)">3</method>
			<method name="public static transient double[] paramsToVector(double scale, int totalSize, java.util.Iterator[] matrices)">4</method>
			<method name="public static org.ejml.simple.SimpleMatrix elementwiseApplyLog(org.ejml.simple.SimpleMatrix input)">3</method>
			<method name="public static transient void vectorToParams(double[] theta, java.util.Iterator[] matrices)">4</method>
			<method name="public static org.ejml.simple.SimpleMatrix loadTextMatrix(String path)">1</method>
			<method name="public static org.ejml.simple.SimpleMatrix convertTextMatrix(String text)">4</method>
			<method name="public static org.ejml.simple.SimpleMatrix softmax(org.ejml.simple.SimpleMatrix input)">3</method>
			<method name="public static transient org.ejml.simple.SimpleMatrix concatenate(org.ejml.simple.SimpleMatrix[] vectors)">3</method>
			<method name="public static transient org.ejml.simple.SimpleMatrix concatenateWithBias(org.ejml.simple.SimpleMatrix[] vectors)">3</method>
			<method name="public static double cosine(org.ejml.simple.SimpleMatrix vector1, org.ejml.simple.SimpleMatrix vector2)">1</method>
			<method name="public static org.ejml.simple.SimpleMatrix randomGaussian(int numRows, int numCols, java.util.Random rand)">3</method>
			<method name="private void _init_()">0</method>
			<method name="public static transient double[] paramsToVector(int totalSize, java.util.Iterator[] matrices)">4</method>
			<method name="public static org.ejml.simple.SimpleMatrix loadTextMatrix(java.io.File file)">1</method>
			<method name="public static double dot(org.ejml.simple.SimpleMatrix vector1, org.ejml.simple.SimpleMatrix vector2)">3</method>
			<method name="public static double sigmoid(double x)">1</method>
			<method name="public static org.ejml.simple.SimpleMatrix elementwiseApplyTanhDerivative(org.ejml.simple.SimpleMatrix input)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.concurrent.MulticoreWrapper$JobResult</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>16</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.0</amc>
		<cc>
			<method name="public void _init_(Object result, int inputItemId, int processorId)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.tsurgeon.CoindexationGenerator</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>16</rfc>
		<lcom>2</lcom>
		<ca>2</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>65</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>14.75</amc>
		<cc>
			<method name="public int generateIndex()">1</method>
			<method name="void _init_()">0</method>
			<method name="public void setLastIndex(edu.stanford.nlp.trees.Tree t)">2</method>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.tsurgeon.AuxiliaryTree</name>
		<wmc>11</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>15</cbo>
		<rfc>55</rfc>
		<lcom>21</lcom>
		<ca>7</ca>
		<ce>8</ce>
		<npm>4</npm>
		<lcom3>0.7555555555555555</lcom3>
		<loc>409</loc>
		<dam>0.6666666666666666</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.31666666666666665</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>35.36363636363637</amc>
		<cc>
			<method name="private void _init_(edu.stanford.nlp.trees.Tree tree, edu.stanford.nlp.trees.Tree foot, java.util.Map namesToNodes, String originalTreeString)">0</method>
			<method name="public void _init_(edu.stanford.nlp.trees.Tree tree, boolean mustHaveFoot)">0</method>
			<method name="private static edu.stanford.nlp.trees.Tree findFootNode(edu.stanford.nlp.trees.Tree t)">2</method>
			<method name="public edu.stanford.nlp.trees.tregex.tsurgeon.AuxiliaryTree copy(edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern p)">1</method>
			<method name="public java.util.Map namesToNodes()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private edu.stanford.nlp.util.Pair copyHelper(edu.stanford.nlp.trees.Tree node, java.util.Map newNamesToNodes)">7</method>
			<method name="static String unescape(String input)">1</method>
			<method name="private void initializeNamesNodesMaps(edu.stanford.nlp.trees.Tree t)">3</method>
			<method name="private static edu.stanford.nlp.trees.Tree findFootNodeHelper(edu.stanford.nlp.trees.Tree t)">6</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$DoAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.CustomAnnotationSerializer$IntermediateEdge</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>20</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.0</amc>
		<cc>
			<method name="void _init_(String dep, int source, int target, boolean isExtra)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.ClassicCounter$2$1$1</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>17</rfc>
		<lcom>16</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>7</npm>
		<lcom3>0.2857142857142857</lcom3>
		<loc>80</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.3</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.75</amc>
		<cc>
			<method name="public volatile Object setValue(Object x0)">1</method>
			<method name="public Double setValue(Double value)">1</method>
			<method name="public volatile Object getValue()">1</method>
			<method name="public double setValue(double value)">1</method>
			<method name="public Double getValue()">1</method>
			<method name="public Object getKey()">1</method>
			<method name="public double getDoubleValue()">1</method>
			<method name="void _init_(edu.stanford.nlp.stats.ClassicCounter$2$1)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.LabeledScoredTreeFactory</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>58</cbo>
		<rfc>12</rfc>
		<lcom>0</lcom>
		<ca>53</ca>
		<ce>6</ce>
		<npm>6</npm>
		<lcom3>0.0</lcom3>
		<loc>51</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.43333333333333335</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.333333333333333</amc>
		<cc>
			<method name="public edu.stanford.nlp.trees.Tree newTreeNode(edu.stanford.nlp.ling.Label parentLabel, java.util.List children)">1</method>
			<method name="public void _init_(edu.stanford.nlp.ling.LabelFactory lf)">0</method>
			<method name="public void _init_()">0</method>
			<method name="public edu.stanford.nlp.trees.Tree newLeaf(edu.stanford.nlp.ling.Label label)">1</method>
			<method name="public edu.stanford.nlp.trees.Tree newTreeNode(String parent, java.util.List children)">1</method>
			<method name="public edu.stanford.nlp.trees.Tree newLeaf(String word)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.tsurgeon.Token</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>8</rfc>
		<lcom>19</lcom>
		<ca>4</ca>
		<ce>0</ce>
		<npm>7</npm>
		<lcom3>1.0</lcom3>
		<loc>50</loc>
		<dam>0.1111111111111111</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.5238095238095238</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.857142857142857</amc>
		<cc>
			<method name="public static edu.stanford.nlp.trees.tregex.tsurgeon.Token newToken(int ofKind)">1</method>
			<method name="public static edu.stanford.nlp.trees.tregex.tsurgeon.Token newToken(int ofKind, String image)">2</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(int kind, String image)">0</method>
			<method name="public String toString()">1</method>
			<method name="public void _init_(int kind)">0</method>
			<method name="public Object getValue()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.sequences.CoNLLDocumentReaderAndWriter$CoNLLIterator</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>8</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>4</npm>
		<lcom3>0.16666666666666666</lcom3>
		<loc>31</loc>
		<dam>0.5</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.25</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.sequences.CoNLLDocumentReaderAndWriter, java.io.Reader r)">0</method>
			<method name="public java.util.List next()">1</method>
			<method name="public boolean hasNext()">1</method>
			<method name="public volatile Object next()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.QPTreeTransformer</name>
		<wmc>9</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>12</cbo>
		<rfc>51</rfc>
		<lcom>36</lcom>
		<ca>1</ca>
		<ce>11</ce>
		<npm>4</npm>
		<lcom3>2.0</lcom3>
		<loc>430</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>46.77777777777778</amc>
		<cc>
			<method name="public static edu.stanford.nlp.trees.Tree QPtransform(edu.stanford.nlp.trees.Tree t)">1</method>
			<method name="public static void main(String[] args)">3</method>
			<method name="public void _init_()">0</method>
			<method name="private static void transformQP(edu.stanford.nlp.trees.Tree t)">3</method>
			<method name="private static void doTransform(edu.stanford.nlp.trees.Tree t)">19</method>
			<method name="private static void transformMoney(edu.stanford.nlp.trees.Tree t, java.util.List children)">1</method>
			<method name="private static boolean isFlat(java.util.List children)">3</method>
			<method name="public edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree t)">1</method>
			<method name="private static void transformCC(edu.stanford.nlp.trees.Tree t, java.util.List left, edu.stanford.nlp.trees.Tree conj, java.util.List right)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.structure.ExtractionObject</name>
		<wmc>25</wmc>
		<dit>1</dit>
		<noc>2</noc>
		<cbo>18</cbo>
		<rfc>58</rfc>
		<lcom>194</lcom>
		<ca>10</ca>
		<ce>9</ce>
		<npm>23</npm>
		<lcom3>0.9041666666666667</lcom3>
		<loc>521</loc>
		<dam>0.9</dam>
		<moa>4</moa>
		<mfa>0.0</mfa>
		<cam>0.1574074074074074</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.44</amc>
		<cc>
			<method name="public String getObjectId()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public int getExtentTokenStart()">1</method>
			<method name="public static void sortByExtent(java.util.List objects)">1</method>
			<method name="public static String concatenateTypes(String t1, String t2)">5</method>
			<method name="public String getSubType()">1</method>
			<method name="public static transient edu.stanford.nlp.ie.machinereading.structure.Span getSpan(edu.stanford.nlp.ie.machinereading.structure.ExtractionObject[] objs)">8</method>
			<method name="public String getValue()">1</method>
			<method name="public edu.stanford.nlp.util.CoreMap attributeMap()">2</method>
			<method name="public int getExtentTokenEnd()">1</method>
			<method name="public edu.stanford.nlp.stats.Counter getTypeProbabilities()">1</method>
			<method name="public void _init_(String objectId, edu.stanford.nlp.util.CoreMap sentence, edu.stanford.nlp.ie.machinereading.structure.Span span, String type, String subtype)">0</method>
			<method name="public void setTypeProbabilities(edu.stanford.nlp.stats.Counter probs)">1</method>
			<method name="public final String getFullValue()">5</method>
			<method name="public boolean printableObject(double beam, String nilLabel)">8</method>
			<method name="public String getExtentString()">3</method>
			<method name="public String getType()">1</method>
			<method name="public void setSentence(edu.stanford.nlp.util.CoreMap sent)">1</method>
			<method name="public boolean equals(Object other)">4</method>
			<method name="public edu.stanford.nlp.ie.machinereading.structure.Span getExtent()">1</method>
			<method name="public String getDocumentId()">1</method>
			<method name="public void setExtent(edu.stanford.nlp.ie.machinereading.structure.Span s)">1</method>
			<method name="String probsToString()">3</method>
			<method name="public edu.stanford.nlp.util.CoreMap getSentence()">1</method>
			<method name="public void setType(String t)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.domains.ace.reader.MatchException</name>
		<wmc>1</wmc>
		<dit>4</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>6</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>1.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.0</amc>
		<cc>
			<method name="public void _init_(String m)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.metrics.TaggingEval</name>
		<wmc>9</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>17</cbo>
		<rfc>87</rfc>
		<lcom>8</lcom>
		<ca>2</ca>
		<ce>15</ce>
		<npm>5</npm>
		<lcom3>0.575</lcom3>
		<loc>1224</loc>
		<dam>0.8666666666666667</dam>
		<moa>10</moa>
		<mfa>0.0</mfa>
		<cam>0.32142857142857145</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>133.33333333333334</amc>
		<cc>
			<method name="private void measureOOV(edu.stanford.nlp.trees.Tree guess, edu.stanford.nlp.trees.Tree gold)">6</method>
			<method name="public static void main(String[] args)">19</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void display(boolean verbose, java.io.PrintWriter pw)">12</method>
			<method name="protected java.util.Set makeObjects(edu.stanford.nlp.trees.Tree tree)">2</method>
			<method name="public void evaluate(edu.stanford.nlp.trees.Tree guess, edu.stanford.nlp.trees.Tree gold, java.io.PrintWriter pw)">12</method>
			<method name="public void _init_(String str)">0</method>
			<method name="private static java.util.Map makeObjectsByCat(edu.stanford.nlp.trees.Tree t)">3</method>
			<method name="public void _init_(String str, boolean runningAverages, edu.stanford.nlp.parser.lexparser.Lexicon lex)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.NegraPennTreebankParserParams</name>
		<wmc>18</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>24</cbo>
		<rfc>71</rfc>
		<lcom>129</lcom>
		<ca>1</ca>
		<ce>23</ce>
		<npm>14</npm>
		<lcom3>0.8823529411764706</lcom3>
		<loc>783</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.20634920634920634</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>41.611111111111114</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public edu.stanford.nlp.trees.MemoryTreebank memoryTreebank()">1</method>
			<method name="public int setOptionFlag(String[] args, int i)">16</method>
			<method name="public edu.stanford.nlp.trees.HeadFinder typedDependencyHeadFinder()">1</method>
			<method name="public edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.Tree root)">24</method>
			<method name="public edu.stanford.nlp.trees.TreeReaderFactory treeReaderFactory()">2</method>
			<method name="private static boolean leftPhrasal(edu.stanford.nlp.trees.Tree t)">7</method>
			<method name="public java.util.List defaultTestSentence()">1</method>
			<method name="private boolean containsVP(edu.stanford.nlp.trees.Tree t)">4</method>
			<method name="public String[] sisterSplitters()">1</method>
			<method name="private java.util.List childBasicCats(edu.stanford.nlp.trees.Tree t)">2</method>
			<method name="private String basicCat(String str)">1</method>
			<method name="public edu.stanford.nlp.trees.HeadFinder headFinder()">1</method>
			<method name="public edu.stanford.nlp.trees.TreeTransformer collinizer()">1</method>
			<method name="public edu.stanford.nlp.trees.TreeTransformer collinizerEvalb()">1</method>
			<method name="public edu.stanford.nlp.parser.lexparser.Lexicon lex(edu.stanford.nlp.parser.lexparser.Options op, edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex)">2</method>
			<method name="public edu.stanford.nlp.trees.DiskTreebank diskTreebank()">1</method>
			<method name="public void display()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.pascal.DefaultTeXHyphenData</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>5</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$SentencesAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>9</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.StreamGobbler</name>
		<wmc>2</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>18</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>0</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>67</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.9846153846153847</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>31.5</amc>
		<cc>
			<method name="public void _init_(java.io.InputStream is, java.io.Writer outputFileHandle)">0</method>
			<method name="public void run()">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonParser</name>
		<wmc>57</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>32</cbo>
		<rfc>119</rfc>
		<lcom>834</lcom>
		<ca>2</ca>
		<ce>31</ce>
		<npm>23</npm>
		<lcom3>0.6948051948051948</lcom3>
		<loc>3447</loc>
		<dam>0.8181818181818182</dam>
		<moa>10</moa>
		<mfa>0.0</mfa>
		<cam>0.16071428571428573</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>59.08771929824562</amc>
		<cc>
			<method name="private boolean jj_3R_11()">2</method>
			<method name="private void jj_save(int index, int xla)">3</method>
			<method name="private void jj_rescan_token()">5</method>
			<method name="private boolean jj_2_4(int xla)">2</method>
			<method name="static void _clinit_()">0</method>
			<method name="private boolean jj_3R_9()">3</method>
			<method name="private boolean jj_2_2(int xla)">2</method>
			<method name="private boolean jj_2_3(int xla)">2</method>
			<method name="public final edu.stanford.nlp.trees.tregex.tsurgeon.AuxiliaryTree TreeRoot(boolean requiresFoot)">1</method>
			<method name="private static void jj_la1_init_0()">1</method>
			<method name="private boolean jj_3R_10()">2</method>
			<method name="private boolean jj_3_6()">4</method>
			<method name="private edu.stanford.nlp.trees.tregex.tsurgeon.Token jj_consume_token(int kind)">1</method>
			<method name="public final edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern NodeName()">1</method>
			<method name="public final edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern Root()">1</method>
			<method name="private boolean jj_3R_4()">2</method>
			<method name="private boolean jj_3R_3()">2</method>
			<method name="private boolean jj_3R_6()">3</method>
			<method name="private boolean jj_3R_2()">2</method>
			<method name="private boolean jj_3R_7()">3</method>
			<method name="public void ReInit(java.io.InputStream stream, String encoding)">3</method>
			<method name="private boolean jj_3R_8()">3</method>
			<method name="private boolean jj_scan_token(int kind)">10</method>
			<method name="private boolean jj_2_1(int xla)">2</method>
			<method name="public final java.util.List NodeSelectionList(java.util.List l)">1</method>
			<method name="private boolean jj_2_8(int xla)">2</method>
			<method name="public void _init_(java.io.InputStream stream, String encoding)">0</method>
			<method name="public final edu.stanford.nlp.trees.tregex.tsurgeon.Token getNextToken()">2</method>
			<method name="private void jj_add_error_token(int kind, int pos)">9</method>
			<method name="public final edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern Operation()">1</method>
			<method name="public final edu.stanford.nlp.trees.tregex.tsurgeon.TreeLocation Location()">1</method>
			<method name="public final edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern NodeSelection()">1</method>
			<method name="public final void disable_tracing()">1</method>
			<method name="public void ReInit(java.io.Reader stream)">3</method>
			<method name="public edu.stanford.nlp.trees.tregex.tsurgeon.ParseException generateParseException()">9</method>
			<method name="public void ReInit(edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonParserTokenManager tm)">3</method>
			<method name="public final edu.stanford.nlp.trees.tregex.tsurgeon.Token getToken(int index)">3</method>
			<method name="private boolean jj_2_6(int xla)">2</method>
			<method name="private boolean jj_3_1()">4</method>
			<method name="public void _init_(java.io.InputStream stream)">0</method>
			<method name="private boolean jj_3R_5()">2</method>
			<method name="private int jj_ntk_f()">2</method>
			<method name="private boolean jj_3_7()">4</method>
			<method name="public final java.util.List TreeDtrs(java.util.List dtrs)">1</method>
			<method name="private boolean jj_3_5()">4</method>
			<method name="private boolean jj_3_8()">4</method>
			<method name="public final edu.stanford.nlp.trees.Tree TreeNode()">1</method>
			<method name="private boolean jj_3_4()">4</method>
			<method name="public void _init_(edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonParserTokenManager tm)">0</method>
			<method name="public void _init_(java.io.Reader stream)">0</method>
			<method name="private boolean jj_3_2()">4</method>
			<method name="public final void enable_tracing()">1</method>
			<method name="public void ReInit(java.io.InputStream stream)">1</method>
			<method name="private boolean jj_2_7(int xla)">2</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="private boolean jj_2_5(int xla)">2</method>
			<method name="private boolean jj_3_3()">4</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.domains.ace.reader.RobustTokenizer$WordToken</name>
		<wmc>11</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>16</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>11</npm>
		<lcom3>0.625</lcom3>
		<loc>111</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5757575757575758</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.727272727272727</amc>
		<cc>
			<method name="public void setWord(String w)">1</method>
			<method name="public int getNewLineCount()">1</method>
			<method name="public void setEnd(int i)">1</method>
			<method name="public void setNewLineCount(int i)">1</method>
			<method name="public int getEnd()">1</method>
			<method name="public void _init_(String w, int s, int e)">0</method>
			<method name="public void _init_(String w, int s, int e, int nl)">0</method>
			<method name="public int getStart()">1</method>
			<method name="public String getWord()">1</method>
			<method name="public void setStart(int i)">1</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$LabelAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.dvparser.UnknownWordPrinter</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>22</rfc>
		<lcom>9</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>6</npm>
		<lcom3>0.4666666666666667</lcom3>
		<loc>145</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4444444444444444</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>22.666666666666668</amc>
		<cc>
			<method name="public void evaluate(edu.stanford.nlp.trees.Tree guess, edu.stanford.nlp.trees.Tree gold, java.io.PrintWriter pw, double weight)">3</method>
			<method name="public void display(boolean verbose, java.io.PrintWriter pw)">3</method>
			<method name="public void evaluate(edu.stanford.nlp.trees.Tree guess, edu.stanford.nlp.trees.Tree gold, java.io.PrintWriter pw)">1</method>
			<method name="public void _init_(edu.stanford.nlp.parser.dvparser.DVModel model)">0</method>
			<method name="public void evaluate(edu.stanford.nlp.trees.Tree guess, edu.stanford.nlp.trees.Tree gold)">1</method>
			<method name="public void display(boolean verbose)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.TreeTokenizerFactory</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>8</rfc>
		<lcom>13</lcom>
		<ca>3</ca>
		<ce>4</ce>
		<npm>5</npm>
		<lcom3>0.8</lcom3>
		<loc>29</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.6666666666666665</amc>
		<cc>
			<method name="public void setOptions(String options)">1</method>
			<method name="public edu.stanford.nlp.process.Tokenizer getTokenizer(java.io.Reader r)">1</method>
			<method name="static edu.stanford.nlp.trees.TreeReaderFactory access$000(edu.stanford.nlp.trees.TreeTokenizerFactory x0)">1</method>
			<method name="public void _init_(edu.stanford.nlp.trees.TreeReaderFactory trf)">0</method>
			<method name="public java.util.Iterator getIterator(java.io.Reader r)">1</method>
			<method name="public edu.stanford.nlp.process.Tokenizer getTokenizer(java.io.Reader r, String extraOptions)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.FrenchUnknownWordModel</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>32</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>8</ce>
		<npm>5</npm>
		<lcom3>0.75</lcom3>
		<loc>291</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4444444444444444</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>56.4</amc>
		<cc>
			<method name="public float score(edu.stanford.nlp.parser.lexparser.IntTaggedWord iTW, int loc, double c_Tseen, double total, double smooth, String word)">2</method>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.Options op, edu.stanford.nlp.parser.lexparser.Lexicon lex, edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex)">0</method>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.Options op, edu.stanford.nlp.parser.lexparser.Lexicon lex, edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex, edu.stanford.nlp.stats.ClassicCounter unSeenCounter)">0</method>
			<method name="public String getSignature(String word, int loc)">13</method>
			<method name="public int getSignatureIndex(int index, int sentencePosition, String word)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.sequences.ViterbiSearchGraphBuilder</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>21</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>2</npm>
		<lcom3>0.5</lcom3>
		<loc>484</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>160.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static edu.stanford.nlp.fsm.DFSA getGraph(edu.stanford.nlp.sequences.SequenceModel ts, edu.stanford.nlp.util.Index classIndex)">21</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.EnglishTreebankParserParams$EnglishTrain</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>9</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>0.08000000000000007</lcom3>
		<loc>446</loc>
		<dam>0.02</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>197.0</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="public void display()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.Dictionaries$Person</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>5</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.9629629629629629</lcom3>
		<loc>111</loc>
		<dam>0.1111111111111111</dam>
		<moa>9</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>24.5</amc>
		<cc>
			<method name="public static edu.stanford.nlp.dcoref.Dictionaries$Person valueOf(String name)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static edu.stanford.nlp.dcoref.Dictionaries$Person[] values()">1</method>
			<method name="private void _init_(String, int)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.DeltaCollectionValuedMap$1</name>
		<wmc>3</wmc>
		<dit>3</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>16</rfc>
		<lcom>1</lcom>
		<ca>3</ca>
		<ce>8</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>64</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.9047619047619048</mfa>
		<cam>0.6666666666666666</cam>
		<ic>2</ic>
		<cbm>7</cbm>
		<amc>20.0</amc>
		<cc>
			<method name="public int size()">2</method>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="void _init_(edu.stanford.nlp.util.DeltaCollectionValuedMap)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor$CompositeMatchState</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>16</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.0</amc>
		<cc>
			<method name="private void _init_(java.util.List merged, java.util.List matched, int iters)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequencePattern$Frag</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>13</cbo>
		<rfc>16</rfc>
		<lcom>0</lcom>
		<ca>12</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>0.4166666666666667</lcom3>
		<loc>110</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>14.428571428571429</amc>
		<cc>
			<method name="protected void connect(edu.stanford.nlp.ling.tokensregex.SequencePattern$State state)">2</method>
			<method name="protected void add(edu.stanford.nlp.ling.tokensregex.SequencePattern$State outState)">2</method>
			<method name="protected void _init_()">0</method>
			<method name="protected void add(java.util.Collection outStates)">2</method>
			<method name="protected void _init_(edu.stanford.nlp.ling.tokensregex.SequencePattern$State start)">0</method>
			<method name="protected void connect(edu.stanford.nlp.ling.tokensregex.SequencePattern$Frag f)">2</method>
			<method name="protected void _init_(edu.stanford.nlp.ling.tokensregex.SequencePattern$State start, java.util.Set out)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.QNMinimizer$eScaling</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>3</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.888888888888889</lcom3>
		<loc>45</loc>
		<dam>0.3333333333333333</dam>
		<moa>3</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>9.5</amc>
		<cc>
			<method name="public static edu.stanford.nlp.optimization.QNMinimizer$eScaling[] values()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static edu.stanford.nlp.optimization.QNMinimizer$eScaling valueOf(String name)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.ArrayHeap$HeapEntry</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>10</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="void _init_(edu.stanford.nlp.util.ArrayHeap$1 x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.RVFDatum</name>
		<wmc>15</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>19</cbo>
		<rfc>32</rfc>
		<lcom>29</lcom>
		<ca>16</ca>
		<ce>3</ce>
		<npm>15</npm>
		<lcom3>0.6785714285714286</lcom3>
		<loc>147</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.30666666666666664</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>8.533333333333333</amc>
		<cc>
			<method name="public boolean equals(Object o)">3</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(edu.stanford.nlp.stats.Counter features)">0</method>
			<method name="public edu.stanford.nlp.stats.Counter asFeaturesCounter()">1</method>
			<method name="public double getFeatureCount(Object feature)">1</method>
			<method name="public void setLabel(Object label)">1</method>
			<method name="public java.util.Collection asFeatures()">1</method>
			<method name="public void _init_(edu.stanford.nlp.stats.Counter features, Object label)">0</method>
			<method name="public java.util.Collection labels()">1</method>
			<method name="public int hashCode()">1</method>
			<method name="public String id()">1</method>
			<method name="public void setID(String id)">1</method>
			<method name="public Object label()">1</method>
			<method name="public String toString()">1</method>
			<method name="public void _init_(edu.stanford.nlp.ling.Datum m)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$PartOfSpeechAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.HookChart$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequencePattern$GroupStartState</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>7</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>32</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.8</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>14.5</amc>
		<cc>
			<method name="public void _init_(int captureGroupId, edu.stanford.nlp.ling.tokensregex.SequencePattern$State startState)">0</method>
			<method name="protected boolean match(int bid, edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates matchedStates, boolean consume, edu.stanford.nlp.ling.tokensregex.SequencePattern$State prevState)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$CovertIDAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>9</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.TrainOptions$TransformMatrixType</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>4</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.9333333333333332</lcom3>
		<loc>67</loc>
		<dam>0.2</dam>
		<moa>5</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>14.5</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="public static edu.stanford.nlp.parser.lexparser.TrainOptions$TransformMatrixType[] values()">1</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static edu.stanford.nlp.parser.lexparser.TrainOptions$TransformMatrixType valueOf(String name)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$LengthAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$Heads$1</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>7</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>1</npm>
		<lcom3>0.16666666666666674</lcom3>
		<loc>58</loc>
		<dam>0.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>17.333333333333332</amc>
		<cc>
			<method name="public void advance()">4</method>
			<method name="void initialize()">1</method>
			<method name="void _init_(edu.stanford.nlp.trees.tregex.Relation$Heads, edu.stanford.nlp.trees.Tree, edu.stanford.nlp.trees.tregex.TregexMatcher)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.domains.ace.reader.RobustTokenizer$AbbreviationMap</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>13</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.5</lcom3>
		<loc>1783</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>593.0</amc>
		<cc>
			<method name="private static java.util.List normalizeCase(boolean caseInsensitive, java.util.List words)">3</method>
			<method name="public boolean contains(String s)">1</method>
			<method name="public void _init_(boolean caseInsensitive)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalRelations$DvpMarkerGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.StanfordCoreNLP</name>
		<wmc>39</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>57</cbo>
		<rfc>178</rfc>
		<lcom>687</lcom>
		<ca>18</ca>
		<ce>41</ce>
		<npm>25</npm>
		<lcom3>0.9330143540669856</lcom3>
		<loc>1832</loc>
		<dam>0.5454545454545454</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.12406015037593984</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>45.69230769230769</amc>
		<cc>
			<method name="private static java.util.Collection readFileList(String fileName)">1</method>
			<method name="private static synchronized edu.stanford.nlp.pipeline.AnnotatorPool getDefaultAnnotatorPool(java.util.Properties inputProps)">4</method>
			<method name="public void _init_(String propsFileNamePrefix, boolean enforceRequirements)">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public String getEncoding()">1</method>
			<method name="public edu.stanford.nlp.pipeline.Annotation process(String text)">1</method>
			<method name="private static void shell(edu.stanford.nlp.pipeline.StanfordCoreNLP pipeline)">1</method>
			<method name="public void _init_(java.util.Properties props)">0</method>
			<method name="public void processFiles(String base, java.util.Collection files, int numThreads)">1</method>
			<method name="public double getBeamPrintingOption()">1</method>
			<method name="public edu.stanford.nlp.trees.TreePrint getConstituentTreePrinter()">1</method>
			<method name="public static synchronized edu.stanford.nlp.pipeline.Annotator getExistingAnnotator(String name)">2</method>
			<method name="public void processFiles(java.util.Collection files)">1</method>
			<method name="public java.util.Properties getProperties()">1</method>
			<method name="public void annotate(edu.stanford.nlp.pipeline.Annotation annotation)">2</method>
			<method name="private static java.util.Properties loadProperties(String name)">1</method>
			<method name="public static synchronized void clearAnnotatorPool()">1</method>
			<method name="private static void printHelp(java.io.PrintStream os, String helpTopic)">3</method>
			<method name="public void prettyPrint(edu.stanford.nlp.pipeline.Annotation annotation, java.io.OutputStream os)">1</method>
			<method name="private static void printRequiredProperties(java.io.PrintStream os)">1</method>
			<method name="private void construct(java.util.Properties props, boolean enforceRequirements)">8</method>
			<method name="public String timingInformation()">2</method>
			<method name="public void xmlPrint(edu.stanford.nlp.pipeline.Annotation annotation, java.io.Writer w)">1</method>
			<method name="static edu.stanford.nlp.pipeline.AnnotationSerializer access$100(edu.stanford.nlp.pipeline.StanfordCoreNLP x0, String x1, String x2, java.util.Properties x3)">1</method>
			<method name="private static String getRequiredProperty(java.util.Properties props, String name)">2</method>
			<method name="private edu.stanford.nlp.pipeline.AnnotationSerializer loadSerializer(String serializerClass, String name, java.util.Properties properties)">1</method>
			<method name="public void _init_(String propsFileNamePrefix)">0</method>
			<method name="public void _init_()">0</method>
			<method name="private static java.util.Properties loadPropertiesFromClasspath()">2</method>
			<method name="public void xmlPrint(edu.stanford.nlp.pipeline.Annotation annotation, java.io.OutputStream os)">1</method>
			<method name="public void prettyPrint(edu.stanford.nlp.pipeline.Annotation annotation, java.io.PrintWriter os)">1</method>
			<method name="private static java.util.Properties loadProperties(String name, ClassLoader loader)">3</method>
			<method name="public static boolean isXMLOutputPresent()">1</method>
			<method name="static java.util.Properties access$000(edu.stanford.nlp.pipeline.StanfordCoreNLP x0)">1</method>
			<method name="public edu.stanford.nlp.trees.TreePrint getDependencyTreePrinter()">1</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="public void _init_(java.util.Properties props, boolean enforceRequirements)">0</method>
			<method name="public void processFiles(java.util.Collection files, int numThreads)">1</method>
			<method name="public static boolean usesBinaryTrees(java.util.Properties props)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats$MultiClassStringLabelStats</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>1</noc>
		<cbo>7</cbo>
		<rfc>7</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>30</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.0</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.classify.Classifier classifier, edu.stanford.nlp.classify.GeneralDataset data, String negLabel)">0</method>
			<method name="public void _init_(String negLabel)">0</method>
			<method name="public void _init_(edu.stanford.nlp.util.Index dataLabelIndex, String negLabel)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.process.TransformXML$SAXInterface</name>
		<wmc>7</wmc>
		<dit>2</dit>
		<noc>1</noc>
		<cbo>5</cbo>
		<rfc>28</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>2</ce>
		<npm>6</npm>
		<lcom3>0.5277777777777778</lcom3>
		<loc>223</loc>
		<dam>0.8333333333333334</dam>
		<moa>1</moa>
		<mfa>0.7391304347826086</mfa>
		<cam>0.38095238095238093</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>30.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public void endElement(String uri, String localName, String qName)">1</method>
			<method name="private void outputTextAndTag(String qName, org.xml.sax.Attributes attributes, boolean close)">4</method>
			<method name="public void processText(String text)">2</method>
			<method name="public void endDocument()">1</method>
			<method name="public void characters(char[] buf, int offset, int len)">1</method>
			<method name="public void startElement(String uri, String localName, String qName, org.xml.sax.Attributes attributes)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.objectbank.ResettableReaderIteratorFactory</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>27</rfc>
		<lcom>15</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>6</npm>
		<lcom3>2.0</lcom3>
		<loc>95</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>14.833333333333334</amc>
		<cc>
			<method name="public java.util.Iterator iterator()">3</method>
			<method name="public void _init_(Object o, String encoding)">0</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(java.util.Collection c)">0</method>
			<method name="public void _init_(java.util.Collection c, String encoding)">0</method>
			<method name="public void _init_(Object o)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.process.TokenizerFactory</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>40</cbo>
		<rfc>3</rfc>
		<lcom>3</lcom>
		<ca>38</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>3</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.7777777777777778</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract edu.stanford.nlp.process.Tokenizer getTokenizer(java.io.Reader)">1</method>
			<method name="public abstract void setOptions(String)">1</method>
			<method name="public abstract edu.stanford.nlp.process.Tokenizer getTokenizer(java.io.Reader, String)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.process.PTBTokenizer</name>
		<wmc>21</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>26</cbo>
		<rfc>95</rfc>
		<lcom>204</lcom>
		<ca>11</ca>
		<ce>16</ce>
		<npm>14</npm>
		<lcom3>0.7</lcom3>
		<loc>833</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.1619047619047619</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>38.61904761904762</amc>
		<cc>
			<method name="private void _init_(java.io.Reader r, boolean tokenizeNLs, boolean invertible, boolean suppressEscaping, edu.stanford.nlp.process.LexedTokenFactory tokenFactory)">0</method>
			<method name="public static int ptb2Text(java.io.Reader ptbText, java.io.Writer w)">1</method>
			<method name="protected edu.stanford.nlp.ling.HasWord getNext()">1</method>
			<method name="private static void tok(java.util.List inputFileList, java.util.List outputFileList, String charset, java.util.regex.Pattern parseInsidePattern, String options, boolean preserveLines, boolean dump, boolean lowerCase)">1</method>
			<method name="public static edu.stanford.nlp.process.PTBTokenizer newPTBTokenizer(java.io.Reader r, boolean tokenizeNLs, boolean invertible)">1</method>
			<method name="public static String ptb2Text(java.util.List ptbWords)">1</method>
			<method name="public static edu.stanford.nlp.process.TokenizerFactory coreLabelFactory()">1</method>
			<method name="private static java.util.Map optionArgDefs()">1</method>
			<method name="public static String getNewlineToken()">1</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="private static int tokReader(java.io.Reader r, java.io.BufferedWriter writer, java.util.regex.Pattern parseInsidePattern, String options, boolean preserveLines, boolean dump, boolean lowerCase)">1</method>
			<method name="public static String ptbToken2Text(String ptbText)">1</method>
			<method name="public static edu.stanford.nlp.process.TokenizerFactory factory(boolean tokenizeNLs, boolean invertible)">1</method>
			<method name="public static edu.stanford.nlp.process.PTBTokenizer newPTBTokenizer(java.io.Reader r)">1</method>
			<method name="public static String ptb2Text(String ptbText)">1</method>
			<method name="protected volatile Object getNext()">1</method>
			<method name="public static edu.stanford.nlp.process.TokenizerFactory factory(edu.stanford.nlp.process.LexedTokenFactory factory, String options)">1</method>
			<method name="public void _init_(java.io.Reader r, edu.stanford.nlp.process.LexedTokenFactory tokenFactory, String options)">0</method>
			<method name="public static edu.stanford.nlp.process.TokenizerFactory factory()">1</method>
			<method name="private static void untok(java.util.List inputFileList, java.util.List outputFileList, String charset)">1</method>
			<method name="public static String labelList2Text(java.util.List ptbWords)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.classify.LogPrior</name>
		<wmc>20</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>15</cbo>
		<rfc>39</rfc>
		<lcom>12</lcom>
		<ca>11</ca>
		<ce>4</ce>
		<npm>19</npm>
		<lcom3>0.6608187134502924</lcom3>
		<loc>786</loc>
		<dam>0.8888888888888888</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.25</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>37.85</amc>
		<cc>
			<method name="public void setSigmaSquared(double sigmaSq)">2</method>
			<method name="public void setEpsilon(double epsilon)">2</method>
			<method name="public void setSigmaSquaredM(double[] sigmaSq)">4</method>
			<method name="public static edu.stanford.nlp.classify.LogPrior$LogPriorType getType(String name)">6</method>
			<method name="public static edu.stanford.nlp.classify.LogPrior getAdaptationPrior(double[] means, edu.stanford.nlp.classify.LogPrior otherPrior)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void setSigma(double sigma)">2</method>
			<method name="public void _init_(edu.stanford.nlp.classify.LogPrior$LogPriorType type, double sigma, double epsilon)">0</method>
			<method name="public void _init_(int intPrior)">0</method>
			<method name="public double computeStochastic(double[] x, double[] grad, double fractionOfData)">4</method>
			<method name="public edu.stanford.nlp.classify.LogPrior$LogPriorType getType()">1</method>
			<method name="public void _init_(double[] C)">0</method>
			<method name="public double compute(double[] x, double[] grad)">10</method>
			<method name="public void _init_(edu.stanford.nlp.classify.LogPrior$LogPriorType type)">0</method>
			<method name="public double getSigmaSquared()">2</method>
			<method name="private static edu.stanford.nlp.classify.LogPrior$LogPriorType intToType(int intPrior)">3</method>
			<method name="public void _init_(int intPrior, double sigma, double epsilon)">0</method>
			<method name="public double[] getSigmaSquaredM()">2</method>
			<method name="public double getSigma()">2</method>
			<method name="public double getEpsilon()">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.semgraph.SemanticGraphEdge$SemanticGraphEdgeTargetComparator</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>11</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>45</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.25</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="private void _init_()">0</method>
			<method name="void _init_(edu.stanford.nlp.semgraph.SemanticGraphEdge$1 x0)">0</method>
			<method name="public int compare(edu.stanford.nlp.semgraph.SemanticGraphEdge o1, edu.stanford.nlp.semgraph.SemanticGraphEdge o2)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.RadicalMap</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>36</rfc>
		<lcom>2</lcom>
		<ca>4</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>0.625</lcom3>
		<loc>1309</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>260.4</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static java.util.Set getChars(char ch)">1</method>
			<method name="public static char getRadical(char ch)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.common.NoPunctuationHeadFinder$1</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>6</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>18</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.5</amc>
		<cc>
			<method name="public void visitTree(edu.stanford.nlp.trees.Tree pt)">1</method>
			<method name="void _init_(edu.stanford.nlp.trees.HeadFinder)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequencePattern$MultiNodePatternState</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>18</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>0</npm>
		<lcom3>0.0</lcom3>
		<loc>116</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>56.5</amc>
		<cc>
			<method name="protected boolean match(int bid, edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates matchedStates, boolean consume, edu.stanford.nlp.ling.tokensregex.SequencePattern$State prevState)">8</method>
			<method name="protected void _init_(edu.stanford.nlp.ling.tokensregex.MultiNodePattern p)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.CoNLL2011DocumentReader$DocumentIterator</name>
		<wmc>16</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>20</cbo>
		<rfc>101</rfc>
		<lcom>88</lcom>
		<ca>1</ca>
		<ce>20</ce>
		<npm>8</npm>
		<lcom3>0.7952380952380953</lcom3>
		<loc>1393</loc>
		<dam>0.5714285714285714</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.21666666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>85.1875</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="public edu.stanford.nlp.dcoref.CoNLL2011DocumentReader$Document next()">2</method>
			<method name="public static edu.stanford.nlp.pipeline.Annotation sentencesToDocument(String documentID, java.util.List sentences)">4</method>
			<method name="public void close()">1</method>
			<method name="public boolean hasNext()">2</method>
			<method name="private static edu.stanford.nlp.trees.Tree getLowestCommonAncestor(edu.stanford.nlp.trees.Tree root, int startToken, int endToken)">1</method>
			<method name="public edu.stanford.nlp.dcoref.CoNLL2011DocumentReader$Document readNextDocument()">16</method>
			<method name="private static java.util.List getNerSpans(java.util.List sentWords)">1</method>
			<method name="public volatile Object next()">1</method>
			<method name="private static java.util.List getCorefSpans(java.util.List sentWords)">1</method>
			<method name="private static edu.stanford.nlp.trees.Tree getTreeNonTerminal(edu.stanford.nlp.trees.Tree root, int startToken, int endToken, boolean acceptPreTerminals)">4</method>
			<method name="public void _init_(String filename, edu.stanford.nlp.dcoref.CoNLL2011DocumentReader$Options options)">0</method>
			<method name="private static java.util.List getLabelledSpans(java.util.List sentWords, int fieldIndex, String defaultMarker, boolean checkEndLabel)">22</method>
			<method name="private edu.stanford.nlp.util.CoreMap wordsToSentence(java.util.List sentWords)">21</method>
			<method name="public void annotateDocument(edu.stanford.nlp.dcoref.CoNLL2011DocumentReader$Document document)">5</method>
			<method name="private static edu.stanford.nlp.trees.Tree wordsToParse(java.util.List sentWords)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.SimpleConstituent$SimpleConstituentLabelFactory</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>8</rfc>
		<lcom>15</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>4</npm>
		<lcom3>2.0</lcom3>
		<loc>32</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.333333333333333</amc>
		<cc>
			<method name="public edu.stanford.nlp.ling.Label newLabel(String labelStr, int options)">1</method>
			<method name="private void _init_()">0</method>
			<method name="public edu.stanford.nlp.ling.Label newLabel(String labelStr)">1</method>
			<method name="public edu.stanford.nlp.ling.Label newLabel(edu.stanford.nlp.ling.Label oldLabel)">1</method>
			<method name="public edu.stanford.nlp.ling.Label newLabelFromString(String labelStr)">1</method>
			<method name="void _init_(edu.stanford.nlp.trees.SimpleConstituent$1 x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.structure.Span$1</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>10</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>4</npm>
		<lcom3>0.25</lcom3>
		<loc>54</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.4</amc>
		<cc>
			<method name="public Integer next()">2</method>
			<method name="void _init_(edu.stanford.nlp.ie.machinereading.structure.Span)">0</method>
			<method name="public boolean hasNext()">2</method>
			<method name="public void remove()">1</method>
			<method name="public volatile Object next()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.TrainOptions</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>32</cbo>
		<rfc>19</rfc>
		<lcom>3</lcom>
		<ca>28</ca>
		<ce>4</ce>
		<npm>6</npm>
		<lcom3>0.7626373626373627</lcom3>
		<loc>703</loc>
		<dam>0.01098901098901099</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.3333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>101.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public static void printTrainTree(java.io.PrintWriter pw, String message, edu.stanford.nlp.trees.Tree t)">4</method>
			<method name="public void display()">1</method>
			<method name="public int compactGrammar()">2</method>
			<method name="public String toString()">2</method>
			<method name="public boolean outsideFactor()">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$SimpleTime</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>6</rfc>
		<lcom>1</lcom>
		<ca>2</ca>
		<ce>5</ce>
		<npm>3</npm>
		<lcom3>1.0</lcom3>
		<loc>35</loc>
		<dam>0.5</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.0</amc>
		<cc>
			<method name="public edu.stanford.nlp.time.SUTime$Time add(edu.stanford.nlp.time.SUTime$Duration offset)">1</method>
			<method name="public void _init_(String label)">0</method>
			<method name="public String toFormattedString(int flags)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.QNMinimizer$1</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>7</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>80</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>76.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.InefficientSGDMinimizer</name>
		<wmc>13</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>26</rfc>
		<lcom>58</lcom>
		<ca>2</ca>
		<ce>5</ce>
		<npm>11</npm>
		<lcom3>2.0</lcom3>
		<loc>224</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3076923076923077</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.23076923076923</amc>
		<cc>
			<method name="public void _init_(double SGDGain, int batchSize, int passes, long maxTime, boolean outputToFile)">0</method>
			<method name="public void _init_(double SGDGain, int batchSize, int passes, boolean outputToFile)">0</method>
			<method name="public void _init_(double SGDGain, int batchSize, int passes)">0</method>
			<method name="protected String getName()">1</method>
			<method name="public void setBatchSize(int batchSize)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public edu.stanford.nlp.util.Pair tune(edu.stanford.nlp.optimization.Function function, double[] initial, long msPerTest)">1</method>
			<method name="protected void takeStep(edu.stanford.nlp.optimization.AbstractStochasticCachingDiffFunction dfunction)">2</method>
			<method name="public void _init_(double SGDGain, int batchSize)">0</method>
			<method name="public void shutUp()">1</method>
			<method name="public edu.stanford.nlp.util.Pair tune(edu.stanford.nlp.optimization.Function function, double[] initial, long msPerTest, double gainLow, double gainHigh)">1</method>
			<method name="public void _init_(double SGDGain, int batchSize, int passes, long maxTime)">0</method>
			<method name="public static void main(String[] args)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.RedwoodConfiguration$8$1</name>
		<wmc>2</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>1.0</lcom3>
		<loc>11</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.9846153846153847</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.0</amc>
		<cc>
			<method name="public void run()">1</method>
			<method name="void _init_(edu.stanford.nlp.util.logging.RedwoodConfiguration$8)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.QNMinimizer</name>
		<wmc>62</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>32</cbo>
		<rfc>133</rfc>
		<lcom>1493</lcom>
		<ca>15</ca>
		<ce>19</ce>
		<npm>33</npm>
		<lcom3>0.8886971527178602</lcom3>
		<loc>3389</loc>
		<dam>0.8947368421052632</dam>
		<moa>6</moa>
		<mfa>0.0</mfa>
		<cam>0.1362704918032787</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>53.04838709677419</amc>
		<cc>
			<method name="private double[] lineSearchMinPack(edu.stanford.nlp.optimization.DiffFunction dfunc, double[] dir, double[] x, double[] newX, double[] grad, double f0, double tol)">1</method>
			<method name="public void terminateOnEvalImprovement(boolean toTerminate)">1</method>
			<method name="private double doEvaluation(double[] x)">4</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void _init_(edu.stanford.nlp.optimization.Function monitor, int m)">0</method>
			<method name="public volatile double[] minimize(edu.stanford.nlp.optimization.Function x0, double x1, double[] x2)">1</method>
			<method name="public void _init_(int m, boolean useRobustOptions)">0</method>
			<method name="public void _init_(edu.stanford.nlp.optimization.Function monitor)">0</method>
			<method name="private static void copy(double[] src, double[] dest)">1</method>
			<method name="public void terminateOnNumericalZero(boolean toTerminate)">1</method>
			<method name="private double evaluateFunction(edu.stanford.nlp.optimization.DiffFunction dfunc, double[] x, double[] grad)">1</method>
			<method name="public void useScalarScaling()">1</method>
			<method name="private int getStep(double[] newPt, double[] bestPt, double[] endPt, double stpMin, double stpMax)">1</method>
			<method name="public void terminateOnRelativeNorm(boolean toTerminate)">1</method>
			<method name="private double[] lineSearchBacktrackOWL(edu.stanford.nlp.optimization.Function func, double[] dir, double[] x, double[] newX, double[] grad, double lastValue)">1</method>
			<method name="private void say(String s)">2</method>
			<method name="public volatile double[] minimize(edu.stanford.nlp.optimization.Function x0, double x1, double[] x2, int x3)">1</method>
			<method name="public boolean wasSuccessful()">1</method>
			<method name="public void useMinPackSearch()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public final void setRobustOptions()">1</method>
			<method name="private static double[] projectOWL(double[] x, double[] orthant, edu.stanford.nlp.optimization.Function func)">2</method>
			<method name="private void sayln()">2</method>
			<method name="public void shutUp()">1</method>
			<method name="public void useDiagonalScaling()">1</method>
			<method name="public void terminateOnMaxItr(int maxItr)">2</method>
			<method name="private static java.util.Set initializeParamRange(edu.stanford.nlp.optimization.Function func, double[] x)">3</method>
			<method name="public void _init_(edu.stanford.nlp.optimization.FloatFunction monitor)">0</method>
			<method name="private void computeDir(double[] dir, double[] fg, double[] x, edu.stanford.nlp.optimization.QNMinimizer$QNInfo qn, edu.stanford.nlp.optimization.Function func)">1</method>
			<method name="public void setTerminateOnEvalImprovementNumOfEpoch(int terminateOnEvalImprovementNumOfEpoch)">1</method>
			<method name="public double[] minimize(edu.stanford.nlp.optimization.DiffFunction function, double functionTolerance, double[] initial)">1</method>
			<method name="private double[] lineSearchBacktrack(edu.stanford.nlp.optimization.Function func, double[] dir, double[] x, double[] newX, double[] grad, double lastValue)">1</method>
			<method name="public double[] minimize(edu.stanford.nlp.optimization.DiffFunction dfunction, double functionTolerance, double[] initial, int maxFunctionEvaluations, edu.stanford.nlp.optimization.QNMinimizer$QNInfo qn)">31</method>
			<method name="static boolean access$300(edu.stanford.nlp.optimization.QNMinimizer x0)">1</method>
			<method name="public void _init_(edu.stanford.nlp.optimization.Function monitor, int m, boolean useRobustOptions)">0</method>
			<method name="public void setEvaluators(int iters, edu.stanford.nlp.optimization.Evaluator[] evaluators)">1</method>
			<method name="private static double l1NormOWL(double[] x, edu.stanford.nlp.optimization.Function func)">2</method>
			<method name="public void useBacktracking()">1</method>
			<method name="public void suppressTestPrompt(boolean suppressTestPrompt)">1</method>
			<method name="public float[] minimize(edu.stanford.nlp.optimization.DiffFloatFunction function, float functionTolerance, float[] initial)">1</method>
			<method name="static boolean access$800(edu.stanford.nlp.optimization.QNMinimizer x0)">1</method>
			<method name="public void terminateOnAverageImprovement(boolean toTerminate)">1</method>
			<method name="public void setM(int m)">1</method>
			<method name="public void setOldOptions()">1</method>
			<method name="private static double[] plusAndConstMult(double[] a, double[] b, double c, double[] d)">2</method>
			<method name="private void sayln(String s)">2</method>
			<method name="static boolean access$600(edu.stanford.nlp.optimization.QNMinimizer x0)">1</method>
			<method name="static java.text.NumberFormat access$000()">1</method>
			<method name="static java.text.NumberFormat access$100()">1</method>
			<method name="public void useOWLQN(boolean use, double lambda)">1</method>
			<method name="public void _init_(int m)">0</method>
			<method name="static int access$400(edu.stanford.nlp.optimization.QNMinimizer x0)">1</method>
			<method name="private double[] pseudoGradientOWL(double[] x, double[] grad, edu.stanford.nlp.optimization.Function func)">7</method>
			<method name="public double[] minimize(edu.stanford.nlp.optimization.DiffFunction dfunction, double functionTolerance, double[] initial, int maxFunctionEvaluations)">1</method>
			<method name="static void access$200(edu.stanford.nlp.optimization.QNMinimizer x0, String x1)">1</method>
			<method name="public void setEvaluators(int iters, int startEvaluateIters, edu.stanford.nlp.optimization.Evaluator[] evaluators)">1</method>
			<method name="private static void constrainSearchDir(double[] dir, double[] fg, double[] x, edu.stanford.nlp.optimization.Function func)">2</method>
			<method name="static boolean access$1000(edu.stanford.nlp.optimization.QNMinimizer x0)">1</method>
			<method name="static int access$700(edu.stanford.nlp.optimization.QNMinimizer x0)">1</method>
			<method name="static int access$500(edu.stanford.nlp.optimization.QNMinimizer x0)">1</method>
			<method name="public void setHistory(java.util.List s, java.util.List y)">1</method>
			<method name="static boolean access$900(edu.stanford.nlp.optimization.QNMinimizer x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.PennTreebankTokenizer$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.TimeFormatter$JodaDateTimeFormatExtractor</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>11</rfc>
		<lcom>2</lcom>
		<ca>1</ca>
		<ce>9</ce>
		<npm>4</npm>
		<lcom3>0.375</lcom3>
		<loc>52</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="public void _init_(String pattern)">0</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.util.CoreMap m)">1</method>
			<method name="public void _init_(org.joda.time.format.DateTimeFormatter formatter)">0</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.GenericTimeExpressionPatterns</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>32</cbo>
		<rfc>39</rfc>
		<lcom>0</lcom>
		<ca>6</ca>
		<ce>31</ce>
		<npm>3</npm>
		<lcom3>0.3333333333333333</lcom3>
		<loc>452</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.4375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>111.5</amc>
		<cc>
			<method name="public edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor createExtractor()">1</method>
			<method name="public int determineRelFlags(edu.stanford.nlp.util.CoreMap annotation, edu.stanford.nlp.time.TimeExpression te)">6</method>
			<method name="public void _init_(edu.stanford.nlp.time.Options options)">0</method>
			<method name="private void initEnv()">5</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.treebank.Mapper</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>3</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>3</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract String map(String, String)">1</method>
			<method name="public abstract boolean canChangeEncoding(String, String)">1</method>
			<method name="public transient abstract void setup(java.io.File, String[])">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.MetaClass$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>4</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$StateAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.tsurgeon.RelabelNode$RelabelMode</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.888888888888889</lcom3>
		<loc>45</loc>
		<dam>0.3333333333333333</dam>
		<moa>3</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>9.5</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="public static edu.stanford.nlp.trees.tregex.tsurgeon.RelabelNode$RelabelMode[] values()">1</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static edu.stanford.nlp.trees.tregex.tsurgeon.RelabelNode$RelabelMode valueOf(String name)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalRelations$NounCompoundModifierGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.process.CoreLabelTokenFactory</name>
		<wmc>11</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>21</cbo>
		<rfc>18</rfc>
		<lcom>53</lcom>
		<ca>17</ca>
		<ce>4</ce>
		<npm>11</npm>
		<lcom3>0.85</lcom3>
		<loc>110</loc>
		<dam>0.5</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2857142857142857</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.818181818181818</amc>
		<cc>
			<method name="public volatile edu.stanford.nlp.util.CoreMap makeToken(edu.stanford.nlp.util.CoreMap x0)">1</method>
			<method name="public edu.stanford.nlp.ling.CoreLabel makeToken(edu.stanford.nlp.ling.CoreLabel labelToBeCopied)">1</method>
			<method name="public void _init_(boolean addIndices)">0</method>
			<method name="public volatile Object makeToken(String x0, int x1, int x2)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public edu.stanford.nlp.ling.CoreLabel makeToken(String tokenText, int begin, int length)">1</method>
			<method name="public volatile edu.stanford.nlp.util.CoreMap makeToken()">1</method>
			<method name="public edu.stanford.nlp.ling.CoreLabel makeToken(String[] keys, String[] values)">1</method>
			<method name="public volatile edu.stanford.nlp.util.CoreMap makeToken(String[] x0, String[] x1)">1</method>
			<method name="public edu.stanford.nlp.ling.CoreLabel makeToken()">1</method>
			<method name="public edu.stanford.nlp.ling.CoreLabel makeToken(String tokenText, String originalText, int begin, int length)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Iterables$10</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>15</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="public int compare(Object a, Object b)">1</method>
			<method name="void _init_(java.util.Comparator)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.sievepasses.RelaxedHeadMatch</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>20</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Iterables$12</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>5</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>25</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.333333333333333</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="public edu.stanford.nlp.util.Triple apply(edu.stanford.nlp.util.Pair in)">1</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Iterables$11</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>23</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.333333333333333</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="void _init_(edu.stanford.nlp.util.Iterables$IncrementComparator)">0</method>
			<method name="public int compare(edu.stanford.nlp.util.Pair a, Object b)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.IntUni</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>7</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>6</npm>
		<lcom3>1.2</lcom3>
		<loc>50</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.166666666666667</amc>
		<cc>
			<method name="public edu.stanford.nlp.util.IntTuple getCopy()">1</method>
			<method name="public void add(int val)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void setSource(int src)">1</method>
			<method name="public int getSource()">1</method>
			<method name="public void _init_(int src)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.process.ListProcessor</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract java.util.List process(java.util.List)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.TreebankAnnotator$1</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>7</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>9</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>19</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.5</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="public edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader in)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.POSTaggerAnnotator</name>
		<wmc>13</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>15</cbo>
		<rfc>46</rfc>
		<lcom>68</lcom>
		<ca>3</ca>
		<ce>13</ce>
		<npm>10</npm>
		<lcom3>0.5416666666666666</lcom3>
		<loc>307</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.23931623931623933</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>22.307692307692307</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public java.util.Set requires()">1</method>
			<method name="public java.util.Set requirementsSatisfied()">1</method>
			<method name="private edu.stanford.nlp.util.CoreMap doOneSentence(edu.stanford.nlp.util.CoreMap sentence)">3</method>
			<method name="public void annotate(edu.stanford.nlp.pipeline.Annotation annotation)">4</method>
			<method name="private static edu.stanford.nlp.tagger.maxent.MaxentTagger loadModel(String loc, boolean verbose)">3</method>
			<method name="static edu.stanford.nlp.util.CoreMap access$100(edu.stanford.nlp.pipeline.POSTaggerAnnotator x0, edu.stanford.nlp.util.CoreMap x1)">1</method>
			<method name="public void _init_(boolean verbose)">0</method>
			<method name="public void _init_(String annotatorName, java.util.Properties props)">0</method>
			<method name="public void _init_(String posLoc, boolean verbose)">0</method>
			<method name="public void _init_(edu.stanford.nlp.tagger.maxent.MaxentTagger model, int maxSentenceLength, int numThreads)">0</method>
			<method name="public void _init_(edu.stanford.nlp.tagger.maxent.MaxentTagger model)">0</method>
			<method name="public void _init_(String posLoc, boolean verbose, int maxSentenceLength, int numThreads)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.GrammaticalStructure$LazyLoadTreesByParsing</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>9</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>0.19999999999999996</lcom3>
		<loc>81</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>24.333333333333332</amc>
		<cc>
			<method name="public java.util.Iterator iterator()">2</method>
			<method name="public void _init_(java.io.Reader reader, boolean tokenized, edu.stanford.nlp.util.Function lp)">0</method>
			<method name="public void _init_(String filename, String encoding, boolean tokenized, edu.stanford.nlp.util.Function lp)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.AbstractStochasticCachingDiffUpdateFunction</name>
		<wmc>8</wmc>
		<dit>0</dit>
		<noc>2</noc>
		<cbo>5</cbo>
		<rfc>12</rfc>
		<lcom>22</lcom>
		<ca>4</ca>
		<ce>1</ce>
		<npm>8</npm>
		<lcom3>1.0</lcom3>
		<loc>65</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.0</amc>
		<cc>
			<method name="public void calculateStochasticGradient(double[] x, int batchSize)">1</method>
			<method name="public double valueAt(double[] x, double xScale, int batchSize)">1</method>
			<method name="public abstract void calculateStochasticGradient(double[], int[])">1</method>
			<method name="public abstract double valueAt(double[], double, int[])">1</method>
			<method name="public abstract double calculateStochasticUpdate(double[], double, int[], double)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public double calculateStochasticUpdate(double[] x, double xScale, int batchSize, double gain)">1</method>
			<method name="public int[] getSample(int sampleSize)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.ProbabilityDistribution</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>3</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract Object drawSample(java.util.Random)">1</method>
			<method name="public abstract double probabilityOf(Object)">1</method>
			<method name="public abstract double logProbabilityOf(Object)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.wordseg.NonDict2</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>12</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>0.5</lcom3>
		<loc>110</loc>
		<dam>0.5</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.8333333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>35.0</amc>
		<cc>
			<method name="public String checkDic(String c2, edu.stanford.nlp.sequences.SeqClassifierFlags flags)">2</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void _init_(edu.stanford.nlp.sequences.SeqClassifierFlags flags)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.TimeExpressionExtractorImpl</name>
		<wmc>15</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>21</cbo>
		<rfc>76</rfc>
		<lcom>81</lcom>
		<ca>1</ca>
		<ce>20</ce>
		<npm>10</npm>
		<lcom3>0.6285714285714287</lcom3>
		<loc>740</loc>
		<dam>0.2</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.3333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>48.0</amc>
		<cc>
			<method name="public void init(edu.stanford.nlp.time.Options options)">3</method>
			<method name="public void _init_()">0</method>
			<method name="public void init(String name, java.util.Properties props)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public java.util.List extractTimeExpressions(edu.stanford.nlp.util.CoreMap annotation, edu.stanford.nlp.time.SUTime$Time refDate, edu.stanford.nlp.time.SUTime$TimeIndex timeIndex)">14</method>
			<method name="public java.util.List extractTimeExpressionCoreMaps(edu.stanford.nlp.util.CoreMap annotation, String docDate)">1</method>
			<method name="private void resolveTimeExpressions(edu.stanford.nlp.util.CoreMap annotation, java.util.List timeExpressions, edu.stanford.nlp.time.SUTime$Time docDate)">2</method>
			<method name="private edu.stanford.nlp.time.SUTime$Time findReferenceDate(java.util.List timeExpressions)">4</method>
			<method name="public void finalize(edu.stanford.nlp.util.CoreMap docAnnotation)">1</method>
			<method name="private void resolveTimeExpression(edu.stanford.nlp.util.CoreMap annotation, edu.stanford.nlp.time.TimeExpression te, edu.stanford.nlp.time.SUTime$Time docDate)">3</method>
			<method name="public java.util.List extractTimeExpressions(edu.stanford.nlp.util.CoreMap annotation, String refDateStr, edu.stanford.nlp.time.SUTime$TimeIndex timeIndex)">2</method>
			<method name="public java.util.List extractTimeExpressionCoreMaps(edu.stanford.nlp.util.CoreMap annotation, edu.stanford.nlp.util.CoreMap docAnnotation)">9</method>
			<method name="private java.util.List toCoreMaps(edu.stanford.nlp.util.CoreMap annotation, java.util.List timeExpressions, edu.stanford.nlp.time.SUTime$TimeIndex timeIndex)">6</method>
			<method name="public void _init_(String name, java.util.Properties props)">0</method>
			<method name="public java.util.List extractTimeExpressionCoreMaps(edu.stanford.nlp.util.CoreMap annotation, String docDate, edu.stanford.nlp.time.SUTime$TimeIndex timeIndex)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.MultiClassPrecisionRecallExtendedStats$StringStringConverter</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>13</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.3333333333333335</amc>
		<cc>
			<method name="public String apply(String str)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.classify.Classifier</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>17</cbo>
		<rfc>3</rfc>
		<lcom>3</lcom>
		<ca>15</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>3</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.8333333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract Object classOf(edu.stanford.nlp.ling.Datum)">1</method>
			<method name="public abstract edu.stanford.nlp.stats.Counter scoresOf(edu.stanford.nlp.ling.Datum)">1</method>
			<method name="public abstract java.util.Collection labels()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Iterables$14</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>3</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>1.0</lcom3>
		<loc>18</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.0</amc>
		<cc>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="void _init_(Iterable, java.util.Comparator)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$AnswerObjectAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Iterables$13</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>15</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="public int compare(Object a, Object b)">1</method>
			<method name="void _init_(java.util.Comparator)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$DocTitleAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Iterables$15</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>6</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>32</loc>
		<dam>0.5</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.0</amc>
		<cc>
			<method name="public Boolean apply(Object item)">1</method>
			<method name="void _init_(java.util.Set)">0</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$21$1</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>6</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>0</npm>
		<lcom3>0.33333333333333326</lcom3>
		<loc>39</loc>
		<dam>0.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>17.0</amc>
		<cc>
			<method name="void initialize()">3</method>
			<method name="void _init_(edu.stanford.nlp.trees.tregex.Relation$21, edu.stanford.nlp.trees.Tree, edu.stanford.nlp.trees.tregex.TregexMatcher)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.PennTreeReader</name>
		<wmc>9</wmc>
		<dit>1</dit>
		<noc>1</noc>
		<cbo>41</cbo>
		<rfc>50</rfc>
		<lcom>26</lcom>
		<ca>31</ca>
		<ce>10</ce>
		<npm>7</npm>
		<lcom3>0.75</lcom3>
		<loc>392</loc>
		<dam>1.0</dam>
		<moa>4</moa>
		<mfa>0.0</mfa>
		<cam>0.375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>41.333333333333336</amc>
		<cc>
			<method name="public void _init_(java.io.Reader in)">0</method>
			<method name="public static void main(String[] args)">2</method>
			<method name="public void _init_(java.io.Reader in, edu.stanford.nlp.trees.TreeFactory tf, edu.stanford.nlp.trees.TreeNormalizer tn)">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void _init_(java.io.Reader in, edu.stanford.nlp.trees.TreeFactory tf)">0</method>
			<method name="public void close()">1</method>
			<method name="public void _init_(java.io.Reader in, edu.stanford.nlp.trees.TreeFactory tf, edu.stanford.nlp.trees.TreeNormalizer tn, edu.stanford.nlp.process.Tokenizer st)">0</method>
			<method name="public edu.stanford.nlp.trees.Tree readTree()">1</method>
			<method name="private edu.stanford.nlp.trees.Tree getTreeFromInputStream()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.ThreeDimensionalMap</name>
		<wmc>15</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>43</rfc>
		<lcom>15</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>15</npm>
		<lcom3>0.6071428571428571</lcom3>
		<loc>248</loc>
		<dam>0.5</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.7333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.4</amc>
		<cc>
			<method name="public java.util.Set thirdKeySet()">2</method>
			<method name="public void _init_()">0</method>
			<method name="public boolean isEmpty()">2</method>
			<method name="public Object get(Object key1, Object key2, Object key3)">1</method>
			<method name="public java.util.Set secondKeySet()">2</method>
			<method name="public boolean contains(Object key1, Object key2, Object key3)">4</method>
			<method name="public Object put(Object key1, Object key2, Object key3, Object value)">1</method>
			<method name="public edu.stanford.nlp.util.TwoDimensionalMap getTwoDimensionalMap(Object key1)">2</method>
			<method name="public void remove(Object key1, Object key2, Object key3)">1</method>
			<method name="public int size()">2</method>
			<method name="public edu.stanford.nlp.util.TwoDimensionalMap get(Object key1)">1</method>
			<method name="public String toString()">1</method>
			<method name="public java.util.Set firstKeySet()">1</method>
			<method name="public java.util.Map get(Object key1, Object key2)">1</method>
			<method name="public java.util.Collection values()">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.IntTaggedWord</name>
		<wmc>19</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>30</cbo>
		<rfc>33</rfc>
		<lcom>67</lcom>
		<ca>27</ca>
		<ce>3</ce>
		<npm>16</npm>
		<lcom3>0.8888888888888888</lcom3>
		<loc>341</loc>
		<dam>0.2</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2857142857142857</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>16.42105263157895</amc>
		<cc>
			<method name="public int word()">1</method>
			<method name="public int compareTo(edu.stanford.nlp.parser.lexparser.IntTaggedWord that)">2</method>
			<method name="public String toLexicalEntry(edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex)">1</method>
			<method name="private static String extractWord(String s, char splitChar)">1</method>
			<method name="public void _init_(String s, char splitChar, edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex)">0</method>
			<method name="public boolean equals(Object o)">5</method>
			<method name="static void _clinit_()">0</method>
			<method name="public edu.stanford.nlp.ling.TaggedWord toTaggedWord(edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex)">1</method>
			<method name="private static String extractTag(String s, char splitChar)">1</method>
			<method name="public volatile int compareTo(Object x0)">1</method>
			<method name="public String wordString(edu.stanford.nlp.util.Index wordIndex)">3</method>
			<method name="public String toString(edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex)">1</method>
			<method name="public String toString(String arg, edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex)">2</method>
			<method name="public void _init_(int word, int tag)">0</method>
			<method name="public String tagString(edu.stanford.nlp.util.Index tagIndex)">3</method>
			<method name="public int hashCode()">1</method>
			<method name="public int tag()">1</method>
			<method name="public String toString()">1</method>
			<method name="public void _init_(String wordString, String tagString, edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$SectionAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.classify.BiasedLogConditionalObjectiveFunction</name>
		<wmc>11</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>22</rfc>
		<lcom>9</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>7</npm>
		<lcom3>0.5833333333333333</lcom3>
		<loc>361</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.3522727272727273</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>31.272727272727273</amc>
		<cc>
			<method name="public void _init_(int numFeatures, int numClasses, int[][] data, int[] labels, double[][] confusionMatrix, edu.stanford.nlp.classify.LogPrior prior)">0</method>
			<method name="public void _init_(edu.stanford.nlp.classify.GeneralDataset dataset, double[][] confusionMatrix)">0</method>
			<method name="public void setPrior(edu.stanford.nlp.classify.LogPrior prior)">1</method>
			<method name="public int domainDimension()">1</method>
			<method name="protected void calculate(double[] x)">9</method>
			<method name="public double[][] to2D(double[] x)">3</method>
			<method name="public void _init_(int numFeatures, int numClasses, int[][] data, int[] labels, double[][] confusionMatrix)">0</method>
			<method name="protected int indexOf(int f, int c)">1</method>
			<method name="int classOf(int index)">1</method>
			<method name="public void _init_(edu.stanford.nlp.classify.GeneralDataset dataset, double[][] confusionMatrix, edu.stanford.nlp.classify.LogPrior prior)">0</method>
			<method name="int featureOf(int index)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.DeltaMap$1</name>
		<wmc>3</wmc>
		<dit>3</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>16</rfc>
		<lcom>1</lcom>
		<ca>4</ca>
		<ce>8</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>68</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.9047619047619048</mfa>
		<cam>0.6666666666666666</cam>
		<ic>2</ic>
		<cbm>7</cbm>
		<amc>21.333333333333332</amc>
		<cc>
			<method name="public int size()">2</method>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="void _init_(edu.stanford.nlp.util.DeltaMap)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$Time</name>
		<wmc>31</wmc>
		<dit>0</dit>
		<noc>9</noc>
		<cbo>57</cbo>
		<rfc>60</rfc>
		<lcom>465</lcom>
		<ca>41</ca>
		<ce>24</ce>
		<npm>29</npm>
		<lcom3>1.0333333333333334</lcom3>
		<loc>422</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.20161290322580644</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.580645161290322</amc>
		<cc>
			<method name="public edu.stanford.nlp.time.SUTime$Time reduceGranularityTo(edu.stanford.nlp.time.SUTime$Duration d)">1</method>
			<method name="public edu.stanford.nlp.util.Interval getInterval()">2</method>
			<method name="protected static edu.stanford.nlp.time.SUTime$Time intersect(edu.stanford.nlp.time.SUTime$Time t1, edu.stanford.nlp.time.SUTime$Time t2)">3</method>
			<method name="protected edu.stanford.nlp.time.SUTime$Time intersect(edu.stanford.nlp.time.SUTime$Time t)">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Range getRange(int flags, edu.stanford.nlp.time.SUTime$Duration granularity)">1</method>
			<method name="public abstract edu.stanford.nlp.time.SUTime$Time add(edu.stanford.nlp.time.SUTime$Duration)">1</method>
			<method name="public static edu.stanford.nlp.time.SUTime$Duration distance(edu.stanford.nlp.time.SUTime$Time t1, edu.stanford.nlp.time.SUTime$Time t2)">2</method>
			<method name="public static transient edu.stanford.nlp.time.SUTime$Time closest(edu.stanford.nlp.time.SUTime$Time ref, edu.stanford.nlp.time.SUTime$Time[] times)">4</method>
			<method name="public edu.stanford.nlp.time.SUTime$Time getTime()">1</method>
			<method name="public org.joda.time.Partial getJodaTimePartial()">1</method>
			<method name="public boolean isComparable(edu.stanford.nlp.time.SUTime$Time t)">3</method>
			<method name="public void _init_()">0</method>
			<method name="public edu.stanford.nlp.time.SUTime$Time subtract(edu.stanford.nlp.time.SUTime$Duration offset)">1</method>
			<method name="public boolean hasTime()">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Duration getDuration()">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time t, int flags)">1</method>
			<method name="public boolean isGrounded()">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Duration getGranularity()">2</method>
			<method name="public static edu.stanford.nlp.time.SUTime$Time max(edu.stanford.nlp.time.SUTime$Time t1, edu.stanford.nlp.time.SUTime$Time t2)">5</method>
			<method name="public void _init_(edu.stanford.nlp.time.SUTime$Time t)">0</method>
			<method name="public volatile int compareTo(Object x0)">1</method>
			<method name="public static edu.stanford.nlp.time.SUTime$Time min(edu.stanford.nlp.time.SUTime$Time t1, edu.stanford.nlp.time.SUTime$Time t2)">5</method>
			<method name="public static edu.stanford.nlp.time.SUTime$CompositePartialTime makeComposite(edu.stanford.nlp.time.SUTime$PartialTime pt, edu.stanford.nlp.time.SUTime$Time t)">3</method>
			<method name="public boolean contains(edu.stanford.nlp.time.SUTime$Time t)">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Temporal intersect(edu.stanford.nlp.time.SUTime$Temporal t)">7</method>
			<method name="public edu.stanford.nlp.time.SUTime$TimexType getTimexType()">3</method>
			<method name="public edu.stanford.nlp.time.SUTime$Time offset(edu.stanford.nlp.time.SUTime$Duration offset, int flags)">2</method>
			<method name="public volatile boolean isComparable(Object x0)">1</method>
			<method name="public static edu.stanford.nlp.time.SUTime$Duration difference(edu.stanford.nlp.time.SUTime$Time t1, edu.stanford.nlp.time.SUTime$Time t2)">6</method>
			<method name="public org.joda.time.Instant getJodaTimeInstant()">1</method>
			<method name="public int compareTo(edu.stanford.nlp.time.SUTime$Time t)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonParser$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.AbstractDependencyGrammar</name>
		<wmc>22</wmc>
		<dit>1</dit>
		<noc>1</noc>
		<cbo>12</cbo>
		<rfc>42</rfc>
		<lcom>187</lcom>
		<ca>1</ca>
		<ce>11</ce>
		<npm>15</npm>
		<lcom3>0.9476190476190476</lcom3>
		<loc>438</loc>
		<dam>0.95</dam>
		<moa>9</moa>
		<mfa>0.0</mfa>
		<cam>0.13988095238095238</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.0</amc>
		<cc>
			<method name="public double score(int headWord, int headTag, int argWord, int argTag, boolean leftHeaded, int dist)">1</method>
			<method name="public short coarseDistanceBin(int distance)">3</method>
			<method name="public void tune(java.util.Collection trees)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="protected short valenceBin(int distance)">4</method>
			<method name="void setRegDistanceBins(int[] bins)">3</method>
			<method name="public boolean rootTW(edu.stanford.nlp.parser.lexparser.IntTaggedWord rTW)">2</method>
			<method name="public short regDistanceBin(int distance)">3</method>
			<method name="public void _init_(edu.stanford.nlp.trees.TreebankLanguagePack tlp, edu.stanford.nlp.parser.lexparser.TagProjection tagProjection, boolean directional, boolean useDistance, boolean useCoarseDistance, edu.stanford.nlp.parser.lexparser.Options op, edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex)">0</method>
			<method name="protected void initTagBins()">3</method>
			<method name="protected edu.stanford.nlp.parser.lexparser.IntDependency intern(edu.stanford.nlp.parser.lexparser.IntTaggedWord headTW, edu.stanford.nlp.parser.lexparser.IntTaggedWord argTW, boolean leftHeaded, short dist)">3</method>
			<method name="public void writeData(java.io.PrintWriter out)">1</method>
			<method name="public double score(edu.stanford.nlp.parser.lexparser.IntDependency dependency)">1</method>
			<method name="public short distanceBin(int distance)">3</method>
			<method name="public double scoreTB(int headWord, int headTag, int argWord, int argTag, boolean leftHeaded, int dist)">1</method>
			<method name="public int tagBin(int tag)">2</method>
			<method name="private void readObject(java.io.ObjectInputStream ois)">1</method>
			<method name="public void readData(java.io.BufferedReader in)">1</method>
			<method name="public int numTagBins()">1</method>
			<method name="public int numDistBins()">2</method>
			<method name="void setCoarseDistanceBins(int[] bins)">3</method>
			<method name="public void setLexicon(edu.stanford.nlp.parser.lexparser.Lexicon lexicon)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.sievepasses.AliasMatch</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>24</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>23.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.EnglishUnknownWordModel</name>
		<wmc>14</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>44</rfc>
		<lcom>83</lcom>
		<ca>1</ca>
		<ce>8</ce>
		<npm>6</npm>
		<lcom3>0.9743589743589743</lcom3>
		<loc>1328</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.36428571428571427</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>93.21428571428571</amc>
		<cc>
			<method name="private static void getSignature7(String word, int loc, StringBuilder sb)">16</method>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.Options op, edu.stanford.nlp.parser.lexparser.Lexicon lex, edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex)">0</method>
			<method name="public float score(edu.stanford.nlp.parser.lexparser.IntTaggedWord iTW, int loc, double c_Tseen, double total, double smooth, String word)">2</method>
			<method name="private void getSignature5(String word, int loc, StringBuilder sb)">32</method>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.Options op, edu.stanford.nlp.parser.lexparser.Lexicon lex, edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex, edu.stanford.nlp.stats.ClassicCounter unSeenCounter)">0</method>
			<method name="private void getSignature6(String word, int loc, StringBuilder sb)">29</method>
			<method name="public double scoreProbTagGivenWordSignature(edu.stanford.nlp.parser.lexparser.IntTaggedWord iTW, int loc, double smooth, String word)">2</method>
			<method name="private static void getSignature4(String word, int loc, StringBuilder sb)">23</method>
			<method name="private static void getSignature3(String word, int loc, StringBuilder sb)">12</method>
			<method name="private void getSignature8(String word, StringBuilder sb)">11</method>
			<method name="private static void getSignature1(String word, int loc, StringBuilder sb)">4</method>
			<method name="public int getSignatureIndex(int index, int sentencePosition, String word)">1</method>
			<method name="public String getSignature(String word, int loc)">2</method>
			<method name="private static void getSignature2(String word, int loc, StringBuilder sb)">16</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$TagLabelAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$GenericTokensAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>9</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.GenericDataSetReader</name>
		<wmc>25</wmc>
		<dit>1</dit>
		<noc>2</noc>
		<cbo>16</cbo>
		<rfc>97</rfc>
		<lcom>202</lcom>
		<ca>4</ca>
		<ce>12</ce>
		<npm>14</npm>
		<lcom3>0.8148148148148149</lcom3>
		<loc>1296</loc>
		<dam>0.8888888888888888</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.21666666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>50.48</amc>
		<cc>
			<method name="public void setProcessor(edu.stanford.nlp.pipeline.StanfordCoreNLP p)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void _init_(edu.stanford.nlp.pipeline.StanfordCoreNLP processor, boolean preProcessSentences, boolean calculateHeadSpan, boolean forceGenerationOfIndexSpans)">0</method>
			<method name="public java.util.logging.Level getLoggerLevel()">1</method>
			<method name="private edu.stanford.nlp.trees.Tree findPartialSpan(edu.stanford.nlp.trees.Tree current, int start)">5</method>
			<method name="public final edu.stanford.nlp.pipeline.Annotation parse(String path)">1</method>
			<method name="public static void convertToCoreLabels(edu.stanford.nlp.trees.Tree tree)">3</method>
			<method name="protected edu.stanford.nlp.trees.Tree parse(java.util.List tokens, java.util.List constraints)">1</method>
			<method name="public edu.stanford.nlp.trees.Tree findSyntacticHead(edu.stanford.nlp.ie.machinereading.structure.EntityMention ent, edu.stanford.nlp.trees.Tree root, java.util.List tokens)">8</method>
			<method name="private edu.stanford.nlp.trees.Tree safeHead(edu.stanford.nlp.trees.Tree top)">3</method>
			<method name="public void setUseNewHeadFinder(boolean useNewHeadFinder)">1</method>
			<method name="private static String sentenceToString(java.util.List tokens)">4</method>
			<method name="protected edu.stanford.nlp.trees.Tree parse(java.util.List tokens)">1</method>
			<method name="public void preProcessSentences(edu.stanford.nlp.pipeline.Annotation dataset)">13</method>
			<method name="public edu.stanford.nlp.pipeline.Annotation read(String path)">1</method>
			<method name="public void setLoggerLevel(java.util.logging.Level level)">1</method>
			<method name="private static edu.stanford.nlp.trees.Tree findTreeWithSpan(edu.stanford.nlp.trees.Tree tree, int start, int end)">11</method>
			<method name="public void _init_()">0</method>
			<method name="public edu.stanford.nlp.trees.Tree originalFindSyntacticHead(edu.stanford.nlp.ie.machinereading.structure.EntityMention ent, edu.stanford.nlp.trees.Tree root, java.util.List tokens)">7</method>
			<method name="public edu.stanford.nlp.pipeline.Annotator getParser()">4</method>
			<method name="protected edu.stanford.nlp.trees.Tree parseStrings(java.util.List tokens)">2</method>
			<method name="public int assignSyntacticHead(edu.stanford.nlp.ie.machinereading.structure.EntityMention ent, edu.stanford.nlp.trees.Tree tree, java.util.List tokens, boolean setHeadSpan)">4</method>
			<method name="private edu.stanford.nlp.trees.Tree funkyFindLeafWithApproximateSpan(edu.stanford.nlp.trees.Tree root, String token, int index, int approximateness)">2</method>
			<method name="private static edu.stanford.nlp.ling.CoreLabel initCoreLabel(String token)">1</method>
			<method name="private static String printTree(edu.stanford.nlp.trees.Tree tree)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.DataFilePaths</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>11</rfc>
		<lcom>1</lcom>
		<ca>3</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>1.1666666666666667</lcom3>
		<loc>63</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.0</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static String convert(String path)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.semgraph.SemanticGraphEdge$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.RepeatedRecordHandler$RepeatedRecordInfo</name>
		<wmc>20</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>21</rfc>
		<lcom>120</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>0</npm>
		<lcom3>0.81203007518797</lcom3>
		<loc>142</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.2</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.75</amc>
		<cc>
			<method name="static int access$212(edu.stanford.nlp.util.logging.RepeatedRecordHandler$RepeatedRecordInfo x0, int x1)">1</method>
			<method name="void _init_(edu.stanford.nlp.util.logging.RepeatedRecordHandler$1 x0)">0</method>
			<method name="static int access$220(edu.stanford.nlp.util.logging.RepeatedRecordHandler$RepeatedRecordInfo x0, int x1)">1</method>
			<method name="static boolean access$602(edu.stanford.nlp.util.logging.RepeatedRecordHandler$RepeatedRecordInfo x0, boolean x1)">1</method>
			<method name="static long access$502(edu.stanford.nlp.util.logging.RepeatedRecordHandler$RepeatedRecordInfo x0, long x1)">1</method>
			<method name="static long access$500(edu.stanford.nlp.util.logging.RepeatedRecordHandler$RepeatedRecordInfo x0)">1</method>
			<method name="static int access$312(edu.stanford.nlp.util.logging.RepeatedRecordHandler$RepeatedRecordInfo x0, int x1)">1</method>
			<method name="static edu.stanford.nlp.util.logging.RepeatedRecordHandler$PendingType access$700(edu.stanford.nlp.util.logging.RepeatedRecordHandler$RepeatedRecordInfo x0)">1</method>
			<method name="static int access$300(edu.stanford.nlp.util.logging.RepeatedRecordHandler$RepeatedRecordInfo x0)">1</method>
			<method name="static int access$302(edu.stanford.nlp.util.logging.RepeatedRecordHandler$RepeatedRecordInfo x0, int x1)">1</method>
			<method name="static edu.stanford.nlp.util.logging.Redwood$Record access$402(edu.stanford.nlp.util.logging.RepeatedRecordHandler$RepeatedRecordInfo x0, edu.stanford.nlp.util.logging.Redwood$Record x1)">1</method>
			<method name="static edu.stanford.nlp.util.logging.RepeatedRecordHandler$PendingType access$702(edu.stanford.nlp.util.logging.RepeatedRecordHandler$RepeatedRecordInfo x0, edu.stanford.nlp.util.logging.RepeatedRecordHandler$PendingType x1)">1</method>
			<method name="static int access$202(edu.stanford.nlp.util.logging.RepeatedRecordHandler$RepeatedRecordInfo x0, int x1)">1</method>
			<method name="private void _init_()">0</method>
			<method name="static edu.stanford.nlp.util.logging.Redwood$Record access$400(edu.stanford.nlp.util.logging.RepeatedRecordHandler$RepeatedRecordInfo x0)">1</method>
			<method name="static int access$200(edu.stanford.nlp.util.logging.RepeatedRecordHandler$RepeatedRecordInfo x0)">1</method>
			<method name="static boolean access$600(edu.stanford.nlp.util.logging.RepeatedRecordHandler$RepeatedRecordInfo x0)">1</method>
			<method name="static int access$320(edu.stanford.nlp.util.logging.RepeatedRecordHandler$RepeatedRecordInfo x0, int x1)">1</method>
			<method name="static boolean access$100(edu.stanford.nlp.util.logging.RepeatedRecordHandler$RepeatedRecordInfo x0)">1</method>
			<method name="static boolean access$102(edu.stanford.nlp.util.logging.RepeatedRecordHandler$RepeatedRecordInfo x0, boolean x1)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.StochasticDiffFunctionTester</name>
		<wmc>13</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>58</rfc>
		<lcom>48</lcom>
		<ca>2</ca>
		<ce>5</ce>
		<npm>9</npm>
		<lcom3>0.9166666666666666</lcom3>
		<loc>1539</loc>
		<dam>0.2727272727272727</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.28125</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>115.6923076923077</amc>
		<cc>
			<method name="public double[] getVariance(double[] x, int batchSize)">2</method>
			<method name="public void testVariance(double[] x)">2</method>
			<method name="static void _clinit_()">0</method>
			<method name="public boolean testDerivatives(double[] x, double functionTolerance)">6</method>
			<method name="public void _init_(edu.stanford.nlp.optimization.Function function)">0</method>
			<method name="private static long[] primeFactors(long N)">8</method>
			<method name="private static long getTestBatchSize(long size)">4</method>
			<method name="private void sayln(String s)">2</method>
			<method name="public boolean testSumOfBatches(double[] x, double functionTolerance)">5</method>
			<method name="public void listToFile(java.util.List thisList, String fileName)">3</method>
			<method name="public void arrayToFile(double[] thisArray, String fileName)">2</method>
			<method name="public double testConditionNumber(int samples)">9</method>
			<method name="public double[] getVariance(double[] x)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.ScaledSGDMinimizer</name>
		<wmc>22</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>13</cbo>
		<rfc>62</rfc>
		<lcom>149</lcom>
		<ca>3</ca>
		<ce>11</ce>
		<npm>15</npm>
		<lcom3>0.8306878306878306</lcom3>
		<loc>1007</loc>
		<dam>0.6666666666666666</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.19444444444444445</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>44.36363636363637</amc>
		<cc>
			<method name="public void _init_(double SGDGain, int batchSize, int sgdPasses)">0</method>
			<method name="public void setBatchSize(int batchSize)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void _init_(double SGDGain, int batchSize, int sgdPasses, int method, boolean outputToFile)">0</method>
			<method name="public edu.stanford.nlp.util.Pair tune(edu.stanford.nlp.optimization.Function function, double[] initial, long msPerTest)">2</method>
			<method name="public String getName()">1</method>
			<method name="protected void takeStep(edu.stanford.nlp.optimization.AbstractStochasticCachingDiffFunction dfunction)">5</method>
			<method name="public static double[] getDiag(String loadPath)">1</method>
			<method name="private void updateDiag(double[] diag, double[] s, double[] y)">3</method>
			<method name="public void _init_(double SGDGain, int batchSize)">0</method>
			<method name="public void setMaxTime(Long max)">1</method>
			<method name="public void shutUp()">1</method>
			<method name="public static double[] getWeights(String loadPath)">1</method>
			<method name="protected void init(edu.stanford.nlp.optimization.AbstractStochasticCachingDiffFunction func)">2</method>
			<method name="public static void serializeWeights(String serializePath, double[] weights)">1</method>
			<method name="public static void serializeWeights(String serializePath, double[] weights, double[] diag)">1</method>
			<method name="public double tuneFixedGain(edu.stanford.nlp.optimization.Function function, double[] initial, long msPerTest, double fixedStart)">7</method>
			<method name="private double getRoot(edu.stanford.nlp.util.Function func, double lower, double upper)">7</method>
			<method name="private void updateDiagMinErr(double[] diag, double[] s, double[] y)">5</method>
			<method name="public void updateDiagBFGS(double[] diag, double[] s, double[] y)">5</method>
			<method name="public void _init_(double SGDGain, int batchSize, int sgdPasses, int method)">0</method>
			<method name="static double access$002(edu.stanford.nlp.optimization.ScaledSGDMinimizer x0, double x1)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.io.EncodingPrintWriter$out</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>23</rfc>
		<lcom>15</lcom>
		<ca>4</ca>
		<ce>1</ce>
		<npm>4</npm>
		<lcom3>2.0</lcom3>
		<loc>83</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.833333333333334</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public static void println(String o)">1</method>
			<method name="private static void setupOutWriter(String encoding)">4</method>
			<method name="public static void print(String o, String encoding)">1</method>
			<method name="public static void println(String o, String encoding)">1</method>
			<method name="public static void print(String o)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.international.morph.MorphoFeatures</name>
		<wmc>12</wmc>
		<dit>1</dit>
		<noc>1</noc>
		<cbo>10</cbo>
		<rfc>37</rfc>
		<lcom>4</lcom>
		<ca>8</ca>
		<ce>2</ce>
		<npm>12</npm>
		<lcom3>0.7954545454545454</lcom3>
		<loc>224</loc>
		<dam>0.75</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>17.333333333333332</amc>
		<cc>
			<method name="public edu.stanford.nlp.international.morph.MorphoFeatures fromTagString(String str)">3</method>
			<method name="public int numFeatureMatches(edu.stanford.nlp.international.morph.MorphoFeatures other)">2</method>
			<method name="public void _init_()">0</method>
			<method name="public void addFeature(edu.stanford.nlp.international.morph.MorphoFeatureSpecification$MorphoFeatureType feat, String val)">1</method>
			<method name="public int numActiveFeatures()">1</method>
			<method name="public String getValue(edu.stanford.nlp.international.morph.MorphoFeatureSpecification$MorphoFeatureType feat)">2</method>
			<method name="public void _init_(edu.stanford.nlp.international.morph.MorphoFeatures other)">0</method>
			<method name="public String toString()">3</method>
			<method name="public String getTag(String baseTag)">1</method>
			<method name="public String getAltTag()">1</method>
			<method name="public void setAltTag(String tag)">1</method>
			<method name="public boolean hasFeature(edu.stanford.nlp.international.morph.MorphoFeatureSpecification$MorphoFeatureType feat)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.international.french.FrenchUnknownWordSignatures</name>
		<wmc>18</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>28</rfc>
		<lcom>133</lcom>
		<ca>6</ca>
		<ce>0</ce>
		<npm>16</npm>
		<lcom3>0.9117647058823529</lcom3>
		<loc>185</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.722222222222221</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="public static String hasPunc(String s)">2</method>
			<method name="public static String hasDigit(String s)">2</method>
			<method name="public static String verbSuffix(String s)">2</method>
			<method name="public static String possiblePlural(String s)">2</method>
			<method name="public static String adjSuffix(String s)">2</method>
			<method name="public static boolean hasAdvSuffix(String s)">1</method>
			<method name="private void _init_()">0</method>
			<method name="public static String advSuffix(String s)">2</method>
			<method name="public static String isDigit(String s)">2</method>
			<method name="public static String isCapitalized(String s)">3</method>
			<method name="public static boolean hasPossiblePlural(String s)">1</method>
			<method name="public static String isAllCaps(String s)">2</method>
			<method name="public static boolean hasNounSuffix(String s)">1</method>
			<method name="public static boolean hasAdjSuffix(String s)">1</method>
			<method name="public static boolean hasVerbSuffix(String s)">1</method>
			<method name="public static String isPunc(String s)">2</method>
			<method name="public static String nounSuffix(String s)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$IDFAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation</name>
		<wmc>16</wmc>
		<dit>1</dit>
		<noc>34</noc>
		<cbo>44</cbo>
		<rfc>67</rfc>
		<lcom>86</lcom>
		<ca>37</ca>
		<ce>41</ce>
		<npm>3</npm>
		<lcom3>0.9644444444444444</lcom3>
		<loc>580</loc>
		<dam>0.9666666666666667</dam>
		<moa>25</moa>
		<mfa>0.0</mfa>
		<cam>0.175</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>33.375</amc>
		<cc>
			<method name="abstract boolean satisfies(edu.stanford.nlp.trees.Tree, edu.stanford.nlp.trees.Tree, edu.stanford.nlp.trees.Tree, edu.stanford.nlp.trees.tregex.TregexMatcher)">1</method>
			<method name="static edu.stanford.nlp.trees.tregex.Relation getRelation(String s, edu.stanford.nlp.util.Function basicCatFunction, edu.stanford.nlp.trees.HeadFinder headFinder)">1</method>
			<method name="static edu.stanford.nlp.trees.tregex.Relation access$300()">1</method>
			<method name="public boolean equals(Object o)">3</method>
			<method name="static void _clinit_()">0</method>
			<method name="abstract java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree, edu.stanford.nlp.trees.tregex.TregexMatcher)">1</method>
			<method name="static edu.stanford.nlp.trees.tregex.Relation access$600()">1</method>
			<method name="static edu.stanford.nlp.trees.tregex.Relation access$400()">1</method>
			<method name="void _init_(String x0, edu.stanford.nlp.trees.tregex.Relation$1 x1)">0</method>
			<method name="static edu.stanford.nlp.trees.tregex.Relation getRelation(String s, String arg, edu.stanford.nlp.util.Function basicCatFunction, edu.stanford.nlp.trees.HeadFinder headFinder)">1</method>
			<method name="static edu.stanford.nlp.trees.tregex.Relation access$500()">1</method>
			<method name="private void _init_(String symbol)">0</method>
			<method name="public int hashCode()">1</method>
			<method name="static edu.stanford.nlp.trees.tregex.Relation access$100()">1</method>
			<method name="static edu.stanford.nlp.trees.tregex.Relation access$200()">1</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$HeadedBy$1</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>8</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>1</npm>
		<lcom3>0.16666666666666674</lcom3>
		<loc>56</loc>
		<dam>0.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.666666666666668</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.trees.tregex.Relation$HeadedBy, edu.stanford.nlp.trees.Tree, edu.stanford.nlp.trees.tregex.TregexMatcher)">0</method>
			<method name="public void advance()">3</method>
			<method name="void initialize()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.InefficientSGDMinimizer$1</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>3</npm>
		<lcom3>0.5</lcom3>
		<loc>86</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.8</amc>
		<cc>
			<method name="public double[] derivativeAt(double[] x)">2</method>
			<method name="void _init_(double[], double[])">0</method>
			<method name="private double valuePow(double[] x, double pow)">2</method>
			<method name="public int domainDimension()">1</method>
			<method name="public double valueAt(double[] x)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.ExtractorWordShapeConjunction</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>14</rfc>
		<lcom>6</lcom>
		<ca>2</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>0.85</lcom3>
		<loc>86</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.36</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.2</amc>
		<cc>
			<method name="String extract(edu.stanford.nlp.tagger.maxent.History h, edu.stanford.nlp.tagger.maxent.PairsHolder pH)">3</method>
			<method name="public boolean isLocal()">1</method>
			<method name="public boolean isDynamic()">1</method>
			<method name="void _init_(int left, int right, String wsc)">0</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.BaseUnknownWordModelTrainer</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>1</noc>
		<cbo>16</cbo>
		<rfc>38</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>15</ce>
		<npm>4</npm>
		<lcom3>0.5961538461538461</lcom3>
		<loc>365</loc>
		<dam>0.0</dam>
		<moa>5</moa>
		<mfa>0.0</mfa>
		<cam>0.34285714285714286</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>69.4</amc>
		<cc>
			<method name="public void train(edu.stanford.nlp.ling.TaggedWord tw, int loc, double weight)">5</method>
			<method name="public void _init_()">0</method>
			<method name="public edu.stanford.nlp.parser.lexparser.UnknownWordModel finishTraining()">4</method>
			<method name="protected edu.stanford.nlp.parser.lexparser.UnknownWordModel buildUWM()">2</method>
			<method name="public void initializeTraining(edu.stanford.nlp.parser.lexparser.Options op, edu.stanford.nlp.parser.lexparser.Lexicon lex, edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex, double totalTrees)">10</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.neural.rnn.RNNCoreAnnotations</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>17</rfc>
		<lcom>28</lcom>
		<ca>7</ca>
		<ce>4</ce>
		<npm>7</npm>
		<lcom3>2.0</lcom3>
		<loc>137</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3125</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.125</amc>
		<cc>
			<method name="public static void setPredictionError(edu.stanford.nlp.trees.Tree tree, double error)">2</method>
			<method name="public static int getPredictedClass(edu.stanford.nlp.trees.Tree tree)">2</method>
			<method name="private void _init_()">0</method>
			<method name="public static double getPredictionError(edu.stanford.nlp.trees.Tree tree)">2</method>
			<method name="public static int getGoldClass(edu.stanford.nlp.trees.Tree tree)">2</method>
			<method name="public static void setGoldClass(edu.stanford.nlp.trees.Tree tree, int goldClass)">2</method>
			<method name="public static org.ejml.simple.SimpleMatrix getPredictions(edu.stanford.nlp.trees.Tree tree)">2</method>
			<method name="public static org.ejml.simple.SimpleMatrix getNodeVector(edu.stanford.nlp.trees.Tree tree)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.DateTreeTransformer</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>9</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>2</npm>
		<lcom3>0.8333333333333334</lcom3>
		<loc>112</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>35.333333333333336</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree t)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.PhraseTable</name>
		<wmc>52</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>24</cbo>
		<rfc>133</rfc>
		<lcom>1236</lcom>
		<ca>5</ca>
		<ce>21</ce>
		<npm>44</npm>
		<lcom3>0.8968008255933952</lcom3>
		<loc>2289</loc>
		<dam>0.42105263157894735</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.23885918003565063</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>42.65384615384615</amc>
		<cc>
			<method name="public boolean addPhrase(java.util.List tokens, String tag)">1</method>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public java.util.List findAllMatches(edu.stanford.nlp.ling.tokensregex.PhraseTable$WordList tokens, int tokenStart, int tokenEnd, boolean needNormalization)">1</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.PhraseTable$Phrase lookup(edu.stanford.nlp.ling.tokensregex.PhraseTable$WordList wordList)">14</method>
			<method name="public boolean addPhrase(String phraseText, String tag, Object phraseData)">1</method>
			<method name="public void _init_(boolean normalize, boolean caseInsensitive, boolean ignorePunctuation)">0</method>
			<method name="public boolean containsKey(Object key)">2</method>
			<method name="public java.util.List findAllMatches(java.util.List acceptablePhrases, String text)">1</method>
			<method name="protected java.util.List findMatchesNormalized(java.util.Collection acceptablePhrases, edu.stanford.nlp.ling.tokensregex.PhraseTable$WordList tokens, int tokenStart, int tokenEnd, boolean findAll, boolean matchEnd)">19</method>
			<method name="private synchronized void addPhrase(java.util.Map tree, edu.stanford.nlp.ling.tokensregex.PhraseTable$Phrase phrase, int wordIndex)">6</method>
			<method name="public void addPhrases(java.util.Map taggedPhraseTexts)">2</method>
			<method name="private String createNormalizedForm(String word)">6</method>
			<method name="public java.util.List findNonOverlappingPhrases(java.util.List phraseMatches)">2</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.PhraseTable$Phrase lookup(String phrase)">1</method>
			<method name="public void readPhrases(String filename, int phraseColIndex, int tagColIndex)">1</method>
			<method name="public void readPhrases(String filename, boolean checkTag, String delimiterRegex)">1</method>
			<method name="public static edu.stanford.nlp.ling.tokensregex.PhraseTable$Phrase getLongestPhrase(java.util.List phrases)">3</method>
			<method name="public String getNormalizedForm(String word)">2</method>
			<method name="public void _init_()">0</method>
			<method name="public boolean isEmpty()">2</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.PhraseTable$WordList toNormalizedWordList(String phraseText)">3</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.PhraseTable$Phrase get(Object key)">3</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.PhraseTable$WordList toWordList(String phraseText)">1</method>
			<method name="public void readPhrasesWithTagScores(String filename, String fieldDelimiterRegex, String countDelimiterRegex)">1</method>
			<method name="private synchronized boolean addPhrase(java.util.Map tree, String phraseText, String tag, edu.stanford.nlp.ling.tokensregex.PhraseTable$WordList wordList, Object phraseData, int wordIndex)">21</method>
			<method name="public java.util.List findAllMatches(java.util.List acceptablePhrases, edu.stanford.nlp.ling.tokensregex.PhraseTable$WordList tokens)">1</method>
			<method name="public java.util.List findAllMatches(String text)">1</method>
			<method name="public String[] splitText(String phraseText)">2</method>
			<method name="public void readPhrases(String filename, boolean checkTag)">1</method>
			<method name="public void clear()">1</method>
			<method name="public void addPhrases(java.util.Collection phraseTexts)">2</method>
			<method name="public void readPhrasesWithTagScores(String filename)">1</method>
			<method name="public boolean addPhrase(String phraseText)">1</method>
			<method name="public void _init_(int initSize)">0</method>
			<method name="private synchronized boolean addPhrase(String phraseText, String tag, edu.stanford.nlp.ling.tokensregex.PhraseTable$WordList wordList, Object phraseData)">2</method>
			<method name="public boolean addPhrase(java.util.List tokens, String tag, Object phraseData)">1</method>
			<method name="public void readPhrases(String filename, boolean checkTag, java.util.regex.Pattern delimiterPattern)">1</method>
			<method name="public java.util.List findMatches(String text, int tokenStart, int tokenEnd, boolean needNormalization)">1</method>
			<method name="public java.util.List findAllMatches(edu.stanford.nlp.ling.tokensregex.PhraseTable$WordList tokens)">1</method>
			<method name="public java.util.List findMatches(String text)">1</method>
			<method name="public static String toString(edu.stanford.nlp.ling.tokensregex.PhraseTable$WordList wordList)">3</method>
			<method name="public boolean addPhrase(String phraseText, String tag)">1</method>
			<method name="protected java.util.List findMatches(java.util.Collection acceptablePhrases, edu.stanford.nlp.ling.tokensregex.PhraseTable$WordList tokens, int tokenStart, int tokenEnd, boolean needNormalization, boolean findAll, boolean matchEnd)">19</method>
			<method name="public boolean addPhrase(java.util.List tokens)">1</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.PhraseTable$Phrase lookupNormalized(String phrase)">1</method>
			<method name="public java.util.List findAllMatches(java.util.List acceptablePhrases, edu.stanford.nlp.ling.tokensregex.PhraseTable$WordList tokens, int tokenStart, int tokenEnd, boolean needNormalization)">1</method>
			<method name="public void setNormalizationCacheSize(int cacheSize)">1</method>
			<method name="protected int checkWordListMatch(edu.stanford.nlp.ling.tokensregex.PhraseTable$Phrase phrase, edu.stanford.nlp.ling.tokensregex.PhraseTable$WordList tokens, int tokenStart, int tokenEnd, int checkStart, boolean matchEnd)">8</method>
			<method name="public java.util.List findMatches(edu.stanford.nlp.ling.tokensregex.PhraseTable$WordList tokens)">1</method>
			<method name="public void readPhrasesWithTagScores(String filename, java.util.regex.Pattern fieldDelimiterPattern, java.util.regex.Pattern countDelimiterPattern)">1</method>
			<method name="public java.util.List findMatches(edu.stanford.nlp.ling.tokensregex.PhraseTable$WordList tokens, int tokenStart, int tokenEnd, boolean needNormalization)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$NERIDAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.io.ReaderInputStream</name>
		<wmc>9</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>23</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>9</npm>
		<lcom3>0.5</lcom3>
		<loc>249</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.5625</mfa>
		<cam>0.3333333333333333</cam>
		<ic>1</ic>
		<cbm>2</cbm>
		<amc>26.22222222222222</amc>
		<cc>
			<method name="public synchronized int read(byte[] b, int off, int len)">1</method>
			<method name="public void _init_(java.io.Reader reader, String encoding)">0</method>
			<method name="public boolean markSupported()">1</method>
			<method name="public synchronized int read()">1</method>
			<method name="public synchronized int available()">1</method>
			<method name="public synchronized void close()">1</method>
			<method name="public synchronized void mark(int limit)">1</method>
			<method name="public void _init_(java.io.Reader reader)">0</method>
			<method name="public synchronized void reset()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.fsm.TransducerGraph$SetToStringNodeProcessor</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>15</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>86</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>41.5</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.trees.TreebankLanguagePack tlp)">0</method>
			<method name="public Object processNode(Object node)">7</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.EvaluateTreebank</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>47</cbo>
		<rfc>160</rfc>
		<lcom>4</lcom>
		<ca>2</ca>
		<ce>46</ce>
		<npm>6</npm>
		<lcom3>0.5714285714285714</lcom3>
		<loc>2355</loc>
		<dam>0.40540540540540543</dam>
		<moa>29</moa>
		<mfa>0.0</mfa>
		<cam>0.25</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>288.75</amc>
		<cc>
			<method name="public double getLBScore()">3</method>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.LexicalizedParser parser)">0</method>
			<method name="public double getTagScore()">3</method>
			<method name="public void processResults(edu.stanford.nlp.parser.lexparser.ParserQuery pq, edu.stanford.nlp.trees.Tree goldTree, java.io.PrintWriter pwErr, java.io.PrintWriter pwOut, java.io.PrintWriter pwFileOut, java.io.PrintWriter pwStats, edu.stanford.nlp.trees.TreePrint treePrint)">56</method>
			<method name="private java.util.List getInputSentence(edu.stanford.nlp.trees.Tree t)">6</method>
			<method name="public double testOnTreebank(edu.stanford.nlp.trees.Treebank testTreebank)">52</method>
			<method name="private static void nanScores(edu.stanford.nlp.trees.Tree tree)">2</method>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.Options op, edu.stanford.nlp.parser.lexparser.Lexicon lex, edu.stanford.nlp.parser.lexparser.LexicalizedParser pqFactory)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.sentiment.RNNOptions</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>23</rfc>
		<lcom>0</lcom>
		<ca>5</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>0.5079365079365079</lcom3>
		<loc>808</loc>
		<dam>0.047619047619047616</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>195.75</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public String toString()">7</method>
			<method name="public int setOption(String[] args, int argIndex)">24</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.sievepasses.ExactStringMatch</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>8</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.wordseg.CorpusDictionary</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>25</rfc>
		<lcom>13</lcom>
		<ca>3</ca>
		<ce>5</ce>
		<npm>5</npm>
		<lcom3>0.2</lcom3>
		<loc>154</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>24.5</amc>
		<cc>
			<method name="private static java.util.Set readDict(String filename, boolean normalize)">6</method>
			<method name="public void _init_(String filename, boolean normalize)">0</method>
			<method name="public String getW(String a1)">2</method>
			<method name="public void _init_(String filename)">0</method>
			<method name="public java.util.Set getTable()">1</method>
			<method name="public boolean contains(String word)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.sequences.TrueCasingForNISTDocumentReaderAndWriter</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>44</rfc>
		<lcom>9</lcom>
		<ca>1</ca>
		<ce>8</ce>
		<npm>6</npm>
		<lcom3>0.8571428571428571</lcom3>
		<loc>258</loc>
		<dam>0.5714285714285714</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.23809523809523808</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>34.857142857142854</amc>
		<cc>
			<method name="public void printAnswers(java.util.List doc, java.io.PrintWriter out)">10</method>
			<method name="public static boolean known(String s)">1</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void init(edu.stanford.nlp.sequences.SeqClassifierFlags flags)">1</method>
			<method name="public java.util.Iterator getIterator(java.io.Reader r)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$NumericCompositeObjectAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.ArraySet</name>
		<wmc>6</wmc>
		<dit>3</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>12</rfc>
		<lcom>3</lcom>
		<ca>6</ca>
		<ce>0</ce>
		<npm>6</npm>
		<lcom3>0.0</lcom3>
		<loc>65</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.8636363636363636</mfa>
		<cam>0.375</cam>
		<ic>2</ic>
		<cbm>9</cbm>
		<amc>9.666666666666666</amc>
		<cc>
			<method name="public int size()">1</method>
			<method name="public void _init_(int initialSize)">0</method>
			<method name="public boolean add(Object e)">2</method>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public transient void _init_(Object[] elements)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.french.FrenchTreeReaderFactory</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>9</rfc>
		<lcom>1</lcom>
		<ca>2</ca>
		<ce>10</ce>
		<npm>3</npm>
		<lcom3>0.75</lcom3>
		<loc>38</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.0</amc>
		<cc>
			<method name="public edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader in)">2</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(boolean pennFormat)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.TregexPattern$TRegexTreeReaderFactory$1</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>12</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.5</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="public String normalizeNonterminal(String str)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.sentiment.SentimentModel</name>
		<wmc>27</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>22</cbo>
		<rfc>97</rfc>
		<lcom>39</lcom>
		<ca>5</ca>
		<ce>17</ce>
		<npm>17</npm>
		<lcom3>0.767094017094017</lcom3>
		<loc>1503</loc>
		<dam>0.05555555555555555</dam>
		<moa>4</moa>
		<mfa>0.0</mfa>
		<cam>0.15432098765432098</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>54.0</amc>
		<cc>
			<method name="org.ejml.simple.SimpleMatrix randomTransformMatrix()">1</method>
			<method name="public void _init_(edu.stanford.nlp.sentiment.RNNOptions op, java.util.List trainingTrees)">0</method>
			<method name="static edu.stanford.nlp.sentiment.SentimentModel modelFromMatrices(org.ejml.simple.SimpleMatrix W, org.ejml.simple.SimpleMatrix Wcat, edu.stanford.nlp.neural.SimpleTensor Wt, java.util.Map wordVectors, edu.stanford.nlp.sentiment.RNNOptions op)">3</method>
			<method name="org.ejml.simple.SimpleMatrix randomWordVector()">1</method>
			<method name="void readWordVectors()">3</method>
			<method name="public org.ejml.simple.SimpleMatrix getUnaryClassification(String category)">1</method>
			<method name="public org.ejml.simple.SimpleMatrix getBinaryTransform(String left, String right)">1</method>
			<method name="public org.ejml.simple.SimpleMatrix getBinaryClassification(String left, String right)">2</method>
			<method name="public void vectorToParams(double[] theta)">1</method>
			<method name="public String basicCategory(String category)">4</method>
			<method name="public edu.stanford.nlp.neural.SimpleTensor getBinaryTensor(String left, String right)">1</method>
			<method name="private void _init_(edu.stanford.nlp.util.TwoDimensionalMap binaryTransform, edu.stanford.nlp.util.TwoDimensionalMap binaryTensors, edu.stanford.nlp.util.TwoDimensionalMap binaryClassification, java.util.Map unaryClassification, java.util.Map wordVectors, edu.stanford.nlp.sentiment.RNNOptions op)">0</method>
			<method name="public String getVocabWord(String word)">3</method>
			<method name="void initRandomWordVectors(java.util.List trainingTrees)">5</method>
			<method name="public void saveSerialized(String path)">1</method>
			<method name="public edu.stanford.nlp.neural.SimpleTensor getTensorForNode(edu.stanford.nlp.trees.Tree node)">4</method>
			<method name="public org.ejml.simple.SimpleMatrix getWForNode(edu.stanford.nlp.trees.Tree node)">3</method>
			<method name="public static edu.stanford.nlp.sentiment.SentimentModel loadSerialized(String path)">1</method>
			<method name="public org.ejml.simple.SimpleMatrix getWordVector(String word)">1</method>
			<method name="public void printParamInformation(int index)">16</method>
			<method name="edu.stanford.nlp.neural.SimpleTensor randomBinaryTensor()">1</method>
			<method name="org.ejml.simple.SimpleMatrix randomClassificationMatrix()">1</method>
			<method name="public org.ejml.simple.SimpleMatrix getClassWForNode(edu.stanford.nlp.trees.Tree node)">4</method>
			<method name="static org.ejml.simple.SimpleMatrix randomWordVector(int size, java.util.Random rand)">1</method>
			<method name="public int totalParamSize()">1</method>
			<method name="public double[] paramsToVector()">1</method>
			<method name="org.ejml.simple.SimpleMatrix randomTransformBlock()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.ClassifierCombiner</name>
		<wmc>19</wmc>
		<dit>0</dit>
		<noc>1</noc>
		<cbo>12</cbo>
		<rfc>67</rfc>
		<lcom>119</lcom>
		<ca>1</ca>
		<ce>11</ce>
		<npm>15</npm>
		<lcom3>0.8680555555555556</lcom3>
		<loc>723</loc>
		<dam>0.5</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.16666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>36.63157894736842</amc>
		<cc>
			<method name="public java.util.List classifyWithGlobalInformation(java.util.List tokenSeq, edu.stanford.nlp.util.CoreMap doc, edu.stanford.nlp.util.CoreMap sent)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static edu.stanford.nlp.ie.ClassifierCombiner$CombinationMode extractCombinationMode(java.util.Properties p)">2</method>
			<method name="public java.util.Set labels()">2</method>
			<method name="public transient void _init_(String[] loadPaths)">0</method>
			<method name="public void printProbsDocument(java.util.List document)">1</method>
			<method name="private java.util.List mergeDocuments(java.util.List baseDocuments)">10</method>
			<method name="private void loadClassifiers(java.util.List paths)">1</method>
			<method name="public transient void _init_(edu.stanford.nlp.ie.ClassifierCombiner$CombinationMode combinationMode, String[] loadPaths)">0</method>
			<method name="public void loadClassifier(java.io.ObjectInputStream in, java.util.Properties props)">1</method>
			<method name="public transient void _init_(edu.stanford.nlp.ie.AbstractSequenceClassifier[] classifiers)">0</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="public static edu.stanford.nlp.ie.ClassifierCombiner$CombinationMode extractCombinationModeSafe(java.util.Properties p)">2</method>
			<method name="static void mergeTwoDocuments(java.util.List mainDocument, java.util.List auxDocument, java.util.Set auxLabels, String background)">14</method>
			<method name="public java.util.List classify(java.util.List tokens)">6</method>
			<method name="public void _init_(java.util.Properties p)">0</method>
			<method name="public void serializeClassifier(String serializePath)">1</method>
			<method name="public static edu.stanford.nlp.ie.AbstractSequenceClassifier loadClassifierFromPath(String path)">1</method>
			<method name="public void train(java.util.Collection docs, edu.stanford.nlp.sequences.DocumentReaderAndWriter readerAndWriter)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.objectbank.LineIterator</name>
		<wmc>9</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>22</rfc>
		<lcom>22</lcom>
		<ca>5</ca>
		<ce>5</ce>
		<npm>8</npm>
		<lcom3>0.45833333333333337</lcom3>
		<loc>119</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.3055555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.88888888888889</amc>
		<cc>
			<method name="public void _init_(java.io.Reader r)">0</method>
			<method name="public static void main(String[] args)">2</method>
			<method name="public static edu.stanford.nlp.objectbank.IteratorFromReaderFactory getFactory()">1</method>
			<method name="public boolean hasNext()">2</method>
			<method name="public static edu.stanford.nlp.objectbank.IteratorFromReaderFactory getFactory(edu.stanford.nlp.util.Function op)">1</method>
			<method name="public void _init_(java.io.Reader r, edu.stanford.nlp.util.Function op)">0</method>
			<method name="private void setNext()">2</method>
			<method name="public Object next()">2</method>
			<method name="public Object peek()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.ExhaustiveDependencyParser</name>
		<wmc>21</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>27</cbo>
		<rfc>82</rfc>
		<lcom>116</lcom>
		<ca>4</ca>
		<ce>23</ce>
		<npm>14</npm>
		<lcom3>0.876923076923077</lcom3>
		<loc>2678</loc>
		<dam>0.8846153846153846</dam>
		<moa>7</moa>
		<mfa>0.0</mfa>
		<cam>0.16883116883116883</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>125.28571428571429</amc>
		<cc>
			<method name="public double iScore(edu.stanford.nlp.parser.lexparser.Edge edge)">1</method>
			<method name="public double oScore(edu.stanford.nlp.parser.lexparser.Edge edge)">1</method>
			<method name="public boolean iPossible(edu.stanford.nlp.parser.lexparser.Hook hook)">2</method>
			<method name="private edu.stanford.nlp.trees.Tree flatten(edu.stanford.nlp.trees.Tree tree)">6</method>
			<method name="float iScoreTotal(int start, int end, int head, int tag)">1</method>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.DependencyGrammar dg, edu.stanford.nlp.parser.lexparser.Lexicon lex, edu.stanford.nlp.parser.lexparser.Options op, edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex)">0</method>
			<method name="public double getBestScore()">2</method>
			<method name="public void displayHeadScores()">9</method>
			<method name="public java.util.List getKSampledParses(int k)">1</method>
			<method name="public edu.stanford.nlp.trees.Tree getBestParse()">2</method>
			<method name="public boolean parse(java.util.List sentence)">102</method>
			<method name="public java.util.List getBestParses()">1</method>
			<method name="private void createArrays(int length)">1</method>
			<method name="private static boolean matches(double x, double y)">2</method>
			<method name="public java.util.List getKGoodParses(int k)">1</method>
			<method name="private edu.stanford.nlp.trees.Tree extractBestParse(int start, int end, int hWord, int hTag)">9</method>
			<method name="public java.util.List getKBestParses(int k)">1</method>
			<method name="float oScore(int start, int end, int head, int tag)">1</method>
			<method name="public boolean hasParse()">2</method>
			<method name="float iScore(int start, int end, int head, int tag)">1</method>
			<method name="public boolean oPossible(edu.stanford.nlp.parser.lexparser.Hook hook)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.process.ChineseDocumentToSentenceProcessor$MyHTMLParser</name>
		<wmc>8</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>24</rfc>
		<lcom>10</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>8</npm>
		<lcom3>0.6326530612244898</lcom3>
		<loc>181</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.5333333333333333</mfa>
		<cam>0.28125</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>20.75</amc>
		<cc>
			<method name="public java.util.List parse(java.net.URL url)">1</method>
			<method name="public void handleStartTag(javax.swing.text.html.HTML$Tag tag, javax.swing.text.MutableAttributeSet attrSet, int pos)">4</method>
			<method name="public void _init_()">0</method>
			<method name="public String title()">1</method>
			<method name="public java.util.List parse(java.io.Reader r)">1</method>
			<method name="public void handleEndTag(javax.swing.text.html.HTML$Tag tag, int pos)">4</method>
			<method name="public void handleText(char[] data, int pos)">6</method>
			<method name="public java.util.List parse(String text)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.common.StringDictionary</name>
		<wmc>13</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>41</rfc>
		<lcom>0</lcom>
		<ca>4</ca>
		<ce>4</ce>
		<npm>13</npm>
		<lcom3>0.5499999999999999</lcom3>
		<loc>454</loc>
		<dam>0.8</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.46153846153846156</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>33.53846153846154</amc>
		<cc>
			<method name="public int getCount(int idx)">3</method>
			<method name="public void save(String path, String prefix, int threshold)">1</method>
			<method name="public void clear()">1</method>
			<method name="public java.util.Set keySet()">1</method>
			<method name="public java.util.Set keys()">1</method>
			<method name="public void setMode(boolean mode)">1</method>
			<method name="public int get(String s)">1</method>
			<method name="public int get(String s, boolean shouldThrow)">5</method>
			<method name="public int size()">1</method>
			<method name="public void load(String path, String prefix)">1</method>
			<method name="public edu.stanford.nlp.ie.machinereading.common.StringDictionary$IndexAndCount getIndexAndCount(String s)">3</method>
			<method name="public String get(int idx)">3</method>
			<method name="public void _init_(String name)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.sequences.BeamBestSequenceFinder$TagSeq$TagList</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>0.0</lcom3>
		<loc>16</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="void _init_(edu.stanford.nlp.sequences.BeamBestSequenceFinder$1 x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.Expressions$SimpleExpression</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>4</noc>
		<cbo>5</cbo>
		<rfc>15</rfc>
		<lcom>0</lcom>
		<ca>4</ca>
		<ce>1</ce>
		<npm>4</npm>
		<lcom3>0.0</lcom3>
		<loc>86</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.45</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.0</amc>
		<cc>
			<method name="public boolean equals(Object o)">7</method>
			<method name="public int hashCode()">2</method>
			<method name="protected transient void _init_(String typename, Object value, String[] tags)">0</method>
			<method name="public String toString()">1</method>
			<method name="public Object get()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$TimexType</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>20</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>19</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.9333333333333332</lcom3>
		<loc>67</loc>
		<dam>0.2</dam>
		<moa>5</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>14.5</amc>
		<cc>
			<method name="public static edu.stanford.nlp.time.SUTime$TimexType valueOf(String name)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static edu.stanford.nlp.time.SUTime$TimexType[] values()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.IntervalTree</name>
		<wmc>54</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>13</cbo>
		<rfc>100</rfc>
		<lcom>1221</lcom>
		<ca>3</ca>
		<ce>10</ce>
		<npm>49</npm>
		<lcom3>0.8490566037735849</lcom3>
		<loc>1697</loc>
		<dam>0.6666666666666666</dam>
		<moa>1</moa>
		<mfa>0.2318840579710145</mfa>
		<cam>0.14947089947089948</cam>
		<ic>2</ic>
		<cbm>6</cbm>
		<amc>30.37037037037037</amc>
		<cc>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="public boolean addNonNested(edu.stanford.nlp.util.HasInterval target)">2</method>
			<method name="public boolean remove(edu.stanford.nlp.util.IntervalTree$TreeNode node, edu.stanford.nlp.util.HasInterval target)">21</method>
			<method name="public static boolean containsValue(edu.stanford.nlp.util.IntervalTree node, edu.stanford.nlp.util.HasInterval target)">1</method>
			<method name="public boolean add(edu.stanford.nlp.util.IntervalTree$TreeNode node, edu.stanford.nlp.util.HasInterval target, double alpha)">13</method>
			<method name="public int size()">1</method>
			<method name="public boolean add(edu.stanford.nlp.util.HasInterval target)">1</method>
			<method name="public volatile boolean add(Object x0)">1</method>
			<method name="public void balance()">1</method>
			<method name="public int height(edu.stanford.nlp.util.IntervalTree$TreeNode node)">4</method>
			<method name="public edu.stanford.nlp.util.IntervalTree$TreeNode getRightmostNode(edu.stanford.nlp.util.IntervalTree$TreeNode node)">2</method>
			<method name="public static java.util.List getOverlapping(edu.stanford.nlp.util.IntervalTree$TreeNode n, edu.stanford.nlp.util.Interval target)">1</method>
			<method name="public boolean contains(Object o)">1</method>
			<method name="public static java.util.List getNonOverlapping(java.util.List items, java.util.Comparator compareFunc)">1</method>
			<method name="public edu.stanford.nlp.util.IntervalTree$TreeNode getNode(edu.stanford.nlp.util.IntervalTree$TreeNode node, int nodeIndex)">7</method>
			<method name="public void _init_()">0</method>
			<method name="public boolean isEmpty()">1</method>
			<method name="public boolean addNonOverlapping(edu.stanford.nlp.util.HasInterval target)">2</method>
			<method name="public boolean containsInterval(edu.stanford.nlp.util.HasInterval target, boolean exact)">1</method>
			<method name="public boolean add(edu.stanford.nlp.util.IntervalTree$TreeNode node, edu.stanford.nlp.util.HasInterval target)">1</method>
			<method name="private void adjustUpwards(edu.stanford.nlp.util.IntervalTree$TreeNode node)">1</method>
			<method name="public boolean isAlphaBalanced(edu.stanford.nlp.util.IntervalTree$TreeNode node, double alpha)">5</method>
			<method name="public void check()">1</method>
			<method name="public boolean retainAll(java.util.Collection c)">1</method>
			<method name="public boolean remove(edu.stanford.nlp.util.HasInterval target)">1</method>
			<method name="public edu.stanford.nlp.util.IntervalTree$TreeNode getLeftmostNode(edu.stanford.nlp.util.IntervalTree$TreeNode node)">2</method>
			<method name="public void clear()">1</method>
			<method name="public static boolean overlaps(edu.stanford.nlp.util.IntervalTree$TreeNode n, Comparable p)">1</method>
			<method name="public static boolean containsInterval(edu.stanford.nlp.util.IntervalTree node, edu.stanford.nlp.util.Interval target, boolean exact)">1</method>
			<method name="public edu.stanford.nlp.util.IntervalTree$TreeNode rightRotate(edu.stanford.nlp.util.IntervalTree$TreeNode oldRoot)">8</method>
			<method name="public static void getOverlapping(edu.stanford.nlp.util.IntervalTree$TreeNode n, Comparable p, java.util.List result)">1</method>
			<method name="private static boolean contains(edu.stanford.nlp.util.IntervalTree$TreeNode node, edu.stanford.nlp.util.Interval target, edu.stanford.nlp.util.Function containsTargetFunction)">8</method>
			<method name="public static java.util.List getOverlapping(edu.stanford.nlp.util.IntervalTree$TreeNode n, Comparable p)">1</method>
			<method name="public String toString()">1</method>
			<method name="public static void getOverlapping(edu.stanford.nlp.util.IntervalTree$TreeNode node, edu.stanford.nlp.util.Interval target, java.util.List result)">8</method>
			<method name="public edu.stanford.nlp.util.IntervalTree$TreeNode balance(edu.stanford.nlp.util.IntervalTree$TreeNode node)">7</method>
			<method name="private static boolean contains(edu.stanford.nlp.util.IntervalTree tree, edu.stanford.nlp.util.Interval target, edu.stanford.nlp.util.Function containsTargetFunction)">1</method>
			<method name="public void rotateUp(edu.stanford.nlp.util.IntervalTree$TreeNode node, edu.stanford.nlp.util.IntervalTree$TreeNode target)">7</method>
			<method name="public static java.util.List getNonOverlapping(java.util.List items, edu.stanford.nlp.util.Function toIntervalFunc)">2</method>
			<method name="public int height()">1</method>
			<method name="public static boolean containsInterval(edu.stanford.nlp.util.IntervalTree n, Comparable p, boolean exact)">1</method>
			<method name="private void adjust(edu.stanford.nlp.util.IntervalTree$TreeNode node)">1</method>
			<method name="public boolean removeAll(java.util.Collection c)">2</method>
			<method name="public static java.util.List getNonNested(java.util.List items, edu.stanford.nlp.util.Function toIntervalFunc, java.util.Comparator compareFunc)">2</method>
			<method name="private void adjustUpwards(edu.stanford.nlp.util.IntervalTree$TreeNode node, edu.stanford.nlp.util.IntervalTree$TreeNode stopAt)">8</method>
			<method name="public static boolean overlaps(edu.stanford.nlp.util.IntervalTree$TreeNode node, edu.stanford.nlp.util.Interval target)">8</method>
			<method name="public boolean contains(edu.stanford.nlp.util.HasInterval target)">1</method>
			<method name="public java.util.List getOverlapping(edu.stanford.nlp.util.HasInterval target)">1</method>
			<method name="public edu.stanford.nlp.util.IntervalTree$TreeNode leftRotate(edu.stanford.nlp.util.IntervalTree$TreeNode oldRoot)">8</method>
			<method name="public static java.util.List getNonOverlapping(java.util.List items, edu.stanford.nlp.util.Function toIntervalFunc, java.util.Comparator compareFunc)">1</method>
			<method name="public boolean remove(Object o)">1</method>
			<method name="public boolean overlaps(edu.stanford.nlp.util.HasInterval target)">1</method>
			<method name="public static java.util.List getNonOverlapping(java.util.List items)">1</method>
			<method name="public void check(edu.stanford.nlp.util.IntervalTree$TreeNode treeNode)">29</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.Dictionaries</name>
		<wmc>20</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>22</cbo>
		<rfc>65</rfc>
		<lcom>158</lcom>
		<ca>15</ca>
		<ce>7</ce>
		<npm>8</npm>
		<lcom3>0.8703007518796992</lcom3>
		<loc>5786</loc>
		<dam>0.03571428571428571</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.2222222222222222</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>285.5</amc>
		<cc>
			<method name="public void loadStateAbbreviation(String statesFile)">2</method>
			<method name="public String lookupCanonicalAmericanStateName(String name)">1</method>
			<method name="private static void loadSignatures(String file, java.util.Map sigs)">2</method>
			<method name="private void setPronouns()">2</method>
			<method name="public void _init_()">0</method>
			<method name="private void loadAnimacyLists(String animateWordsFile, String inanimateWordsFile)">1</method>
			<method name="public void _init_(java.util.Properties props)">0</method>
			<method name="private static void loadCorefDictPMI(String file, edu.stanford.nlp.stats.Counter dict)">2</method>
			<method name="private static void loadCorefDict(String[] file, java.util.ArrayList dict)">3</method>
			<method name="private void loadCountriesLists(String file)">2</method>
			<method name="private void loadStatesLists(String file)">1</method>
			<method name="public java.util.Set getDemonyms(String name)">2</method>
			<method name="private void loadNumberLists(String pluralWordsFile, String singularWordsFile)">1</method>
			<method name="private void loadDemonymLists(String demonymFile)">4</method>
			<method name="public boolean isAdjectivalDemonym(String token)">1</method>
			<method name="public static String signature(java.util.Properties props)">6</method>
			<method name="private void loadGenderLists(String maleWordsFile, String neutralWordsFile, String femaleWordsFile)">1</method>
			<method name="private static void getWordsFromFile(String filename, java.util.Set resultSet, boolean lowercase)">1</method>
			<method name="private void loadGenderNumber(String file, String neutralWordsFile)">2</method>
			<method name="public void _init_(String demonymWords, String animateWords, String inanimateWords, String maleWords, String neutralWords, String femaleWords, String pluralWords, String singularWords, String statesWords, String genderNumber, String countries, String states, boolean loadCorefDict, String[] corefDictFiles, String corefDictPMIFile, String signaturesFile)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.SMDMinimizer$setMu</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>0.5</lcom3>
		<loc>25</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.666666666666667</amc>
		<cc>
			<method name="public volatile void set(Object x0)">1</method>
			<method name="public void set(Double in)">1</method>
			<method name="public void _init_(edu.stanford.nlp.optimization.SMDMinimizer, edu.stanford.nlp.optimization.SMDMinimizer smd)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.GrammaticalStructure$NoPunctTypedDependencyFilter</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>8</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>2</npm>
		<lcom3>0.75</lcom3>
		<loc>40</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.666666666666666</amc>
		<cc>
			<method name="public boolean accept(edu.stanford.nlp.trees.TypedDependency d)">4</method>
			<method name="void _init_(edu.stanford.nlp.util.Filter f)">0</method>
			<method name="public volatile boolean accept(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.GermanUnknownWordModel</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>11</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>3</npm>
		<lcom3>1.5</lcom3>
		<loc>51</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5185185185185185</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.333333333333334</amc>
		<cc>
			<method name="public float score(edu.stanford.nlp.parser.lexparser.IntTaggedWord itw, String word)">3</method>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.Options op, edu.stanford.nlp.parser.lexparser.Lexicon lex, edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex)">0</method>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.Options op, edu.stanford.nlp.parser.lexparser.Lexicon lex, edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex, edu.stanford.nlp.stats.ClassicCounter unSeenCounter, java.util.Map tagHash, java.util.Map unknownGT, java.util.Set seenEnd)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.Dependency</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>13</cbo>
		<rfc>6</rfc>
		<lcom>15</lcom>
		<ca>12</ca>
		<ce>2</ce>
		<npm>6</npm>
		<lcom3>2.0</lcom3>
		<loc>6</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4444444444444444</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract edu.stanford.nlp.trees.DependencyFactory dependencyFactory()">1</method>
			<method name="public abstract edu.stanford.nlp.ling.Label governor()">1</method>
			<method name="public abstract Object name()">1</method>
			<method name="public abstract edu.stanford.nlp.ling.Label dependent()">1</method>
			<method name="public abstract String toString(String)">1</method>
			<method name="public abstract boolean equalsIgnoreName(Object)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.PhraseTable$WordList</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>2</rfc>
		<lcom>1</lcom>
		<ca>5</ca>
		<ce>0</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>2</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract int size()">1</method>
			<method name="public abstract String getWord(int)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalRelations$OrdNumberGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.io.EncodingFileReader</name>
		<wmc>5</wmc>
		<dit>3</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>10</rfc>
		<lcom>10</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>5</npm>
		<lcom3>1.25</lcom3>
		<loc>53</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>1.0</mfa>
		<cam>0.55</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.4</amc>
		<cc>
			<method name="public void _init_(java.io.File file)">0</method>
			<method name="public void _init_(java.io.FileDescriptor fd)">0</method>
			<method name="public void _init_(String fileName)">0</method>
			<method name="public void _init_(java.io.File file, String encoding)">0</method>
			<method name="public void _init_(String fileName, String encoding)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.RedwoodConfiguration$Handlers$1$1</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>18</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.0</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.util.logging.RedwoodConfiguration$Handlers$1, String x0, edu.stanford.nlp.util.logging.RedwoodConfiguration)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.dvparser.DVModelReranker</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>10</rfc>
		<lcom>7</lcom>
		<ca>2</ca>
		<ce>6</ce>
		<npm>4</npm>
		<lcom3>0.8333333333333334</lcom3>
		<loc>47</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.35714285714285715</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.285714285714286</amc>
		<cc>
			<method name="public edu.stanford.nlp.parser.dvparser.DVModelReranker$Query process(java.util.List sentence)">1</method>
			<method name="public java.util.List getEvals()">1</method>
			<method name="public volatile edu.stanford.nlp.parser.lexparser.RerankerQuery process(java.util.List x0)">1</method>
			<method name="public void _init_(edu.stanford.nlp.parser.dvparser.DVModel model)">0</method>
			<method name="edu.stanford.nlp.parser.dvparser.DVModel getModel()">1</method>
			<method name="static edu.stanford.nlp.parser.dvparser.DVModel access$100(edu.stanford.nlp.parser.dvparser.DVModelReranker x0)">1</method>
			<method name="static edu.stanford.nlp.parser.lexparser.Options access$000(edu.stanford.nlp.parser.dvparser.DVModelReranker x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalRelations$CoordinationGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalRelations$AuxPassiveGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.TTags</name>
		<wmc>18</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>12</cbo>
		<rfc>60</rfc>
		<lcom>21</lcom>
		<ca>7</ca>
		<ce>5</ce>
		<npm>8</npm>
		<lcom3>0.6911764705882353</lcom3>
		<loc>1187</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.2361111111111111</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>64.5</amc>
		<cc>
			<method name="public java.util.Set getOpenTags()">3</method>
			<method name="protected void save(java.io.DataOutputStream file, java.util.Map tagTokens)">3</method>
			<method name="void _init_(String language)">0</method>
			<method name="public void setLearnClosedTags(boolean learn)">1</method>
			<method name="protected void save(String filename, java.util.Map tagTokens)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public int getSize()">1</method>
			<method name="protected void read(String filename)">1</method>
			<method name="protected void read(java.io.DataInputStream file)">2</method>
			<method name="void markClosed(String tag)">1</method>
			<method name="protected int add(String tag)">1</method>
			<method name="String[] deterministicallyExpandTags(String[] tags)">19</method>
			<method name="public void setClosedClassTags(String[] closedClassTags)">2</method>
			<method name="public void setOpenClassTags(String[] openClassTags)">2</method>
			<method name="public String getTag(int i)">1</method>
			<method name="public String toString()">2</method>
			<method name="int getIndex(String tag)">1</method>
			<method name="protected boolean isClosed(String tag)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequencePattern$ConjEndState</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>9</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>58</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>27.0</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.SequencePattern$ConjStartState startState, int childIndex)">0</method>
			<method name="protected boolean match(int bid, edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates matchedStates, boolean consume, edu.stanford.nlp.ling.tokensregex.SequencePattern$State prevState)">4</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.IntervalTree$TreeNodeIterator</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>9</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>4</npm>
		<lcom3>0.1875</lcom3>
		<loc>132</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>24.6</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.util.IntervalTree$TreeNode node)">0</method>
			<method name="private edu.stanford.nlp.util.HasInterval getNext()">9</method>
			<method name="public boolean hasNext()">3</method>
			<method name="public edu.stanford.nlp.util.HasInterval next()">2</method>
			<method name="public volatile Object next()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.pascal.ISODateInstance</name>
		<wmc>45</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>112</rfc>
		<lcom>302</lcom>
		<ca>1</ca>
		<ce>9</ce>
		<npm>25</npm>
		<lcom3>0.9150717703349283</lcom3>
		<loc>2812</loc>
		<dam>0.47368421052631576</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2765151515151515</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>61.06666666666667</amc>
		<cc>
			<method name="public boolean isAfter(String dateString)">3</method>
			<method name="static void _clinit_()">0</method>
			<method name="public String getStartDate()">3</method>
			<method name="public boolean isYearCompatible(edu.stanford.nlp.ie.pascal.ISODateInstance other)">3</method>
			<method name="public boolean extractYear(String inputDate)">11</method>
			<method name="public boolean contains(edu.stanford.nlp.ie.pascal.ISODateInstance other)">9</method>
			<method name="public void _init_(edu.stanford.nlp.ie.pascal.ISODateInstance start, edu.stanford.nlp.ie.pascal.ISODateInstance end)">0</method>
			<method name="private boolean addExtraRanges(String inputDate)">9</method>
			<method name="private void incrementYear(edu.stanford.nlp.ie.pascal.ISODateInstance referenceDate, edu.stanford.nlp.util.Pair relation)">2</method>
			<method name="public void _init_(String date)">0</method>
			<method name="private static boolean isDateFormat(String txt)">1</method>
			<method name="public boolean extractDay(String inputDate)">8</method>
			<method name="private static boolean isDayCompatible(String date1, String date2)">8</method>
			<method name="public void _init_(edu.stanford.nlp.ie.pascal.ISODateInstance referenceDate, String relativeDate)">0</method>
			<method name="private static boolean isMonthCompatible(String date1, String date2)">8</method>
			<method name="private void incrementDay(edu.stanford.nlp.ie.pascal.ISODateInstance referenceDate, edu.stanford.nlp.util.Pair relation)">15</method>
			<method name="public String toString()">1</method>
			<method name="public boolean isDayCompatible(edu.stanford.nlp.ie.pascal.ISODateInstance other)">3</method>
			<method name="private static boolean checkWildcardCompatibility(String txt1, String txt2)">6</method>
			<method name="private boolean extractMMDDYY(String inputDate)">6</method>
			<method name="private static boolean checkWildcardAfterCompatibility(String txt1, String txt2)">6</method>
			<method name="private void incrementMonth(edu.stanford.nlp.ie.pascal.ISODateInstance referenceDate, edu.stanford.nlp.util.Pair relation)">7</method>
			<method name="public boolean isMonthCompatible(edu.stanford.nlp.ie.pascal.ISODateInstance other)">3</method>
			<method name="private boolean extractYYYYMMDD(String inputDate)">4</method>
			<method name="public void _init_()">0</method>
			<method name="private static edu.stanford.nlp.util.Pair getRangeDates(String inputDate)">3</method>
			<method name="public boolean isRange()">2</method>
			<method name="public boolean extractWeekday(String inputDate)">3</method>
			<method name="public boolean isCompatibleDate(edu.stanford.nlp.ie.pascal.ISODateInstance other)">5</method>
			<method name="private static boolean isYearCompatible(String date1, String date2)">8</method>
			<method name="public void _init_(String date, String openRangeMarker)">0</method>
			<method name="private void tokenizeDate(String inputDate)">3</method>
			<method name="public boolean isUnparseable()">1</method>
			<method name="static boolean isAfter(String date1, String date2)">33</method>
			<method name="private static String makeStringMonthChange(String origDate, int newMonth)">2</method>
			<method name="public boolean extractFields(String inputDate)">21</method>
			<method name="public static void main(String[] args)">2</method>
			<method name="public static boolean isCompatible(String date1, String date2)">7</method>
			<method name="public boolean extractMonth(String inputDate)">7</method>
			<method name="public static edu.stanford.nlp.ie.pascal.ISODateInstance fromDateString(String date)">1</method>
			<method name="private static String makeStringYearChange(String origDate, int newYear)">2</method>
			<method name="public String getEndDate()">3</method>
			<method name="private static String foundMiscYearPattern(String inputDate)">10</method>
			<method name="private static String makeStringDayChange(String origDate, int newDay)">2</method>
			<method name="public String getDateString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.ExtractorFrames$ExtractorTwoWords</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>14</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>4</npm>
		<lcom3>0.5833333333333334</lcom3>
		<loc>78</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.45</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>14.0</amc>
		<cc>
			<method name="String extract(edu.stanford.nlp.tagger.maxent.History h, edu.stanford.nlp.tagger.maxent.PairsHolder pH)">1</method>
			<method name="public void _init_(int position1, int position2)">0</method>
			<method name="public void _init_(int leftPosition)">0</method>
			<method name="public boolean isLocal()">1</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.CharniakParserAnnotator</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>27</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>8</ce>
		<npm>5</npm>
		<lcom3>0.6875</lcom3>
		<loc>128</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.36</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>23.8</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public void annotate(edu.stanford.nlp.pipeline.Annotation annotation)">5</method>
			<method name="public void _init_(String parserModel, String parserExecutable, boolean verbose, int maxSentenceLength)">0</method>
			<method name="public java.util.Set requires()">1</method>
			<method name="public java.util.Set requirementsSatisfied()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalRelations$AdjectivalModifierGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$PolarityAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.MemoryMonitor</name>
		<wmc>17</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>51</rfc>
		<lcom>70</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>16</npm>
		<lcom3>0.4821428571428571</lcom3>
		<loc>545</loc>
		<dam>0.8571428571428571</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2184873949579832</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>30.647058823529413</amc>
		<cc>
			<method name="public void pollVMstat(boolean force)">6</method>
			<method name="public int getSystemFreeMemory(boolean accurate)">2</method>
			<method name="public int getSystemUsedSwap()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public int getUsedMemory()">1</method>
			<method name="public int getMaxAvailableMemory(boolean accurate)">2</method>
			<method name="public int getMaxAvailableMemory()">1</method>
			<method name="public void pollFree(boolean force)">6</method>
			<method name="public int getMaxMemory()">1</method>
			<method name="public int getUsedMemory(boolean accurate)">2</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="protected static java.util.ArrayList parseFields(java.io.BufferedReader br, String splitStr, int[] lineNums, int[] positions)">1</method>
			<method name="public void pollAtMostEvery(long millis)">1</method>
			<method name="public double getSystemSwapsPerSec()">1</method>
			<method name="public String toString()">1</method>
			<method name="public boolean systemIsSwapping()">2</method>
			<method name="public void _init_(long millis)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.CustomAnnotationSerializer</name>
		<wmc>21</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>30</cbo>
		<rfc>142</rfc>
		<lcom>202</lcom>
		<ca>0</ca>
		<ce>30</ce>
		<npm>6</npm>
		<lcom3>0.8699999999999999</lcom3>
		<loc>1887</loc>
		<dam>0.8</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.1</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>88.61904761904762</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void _init_(boolean compress, boolean haveAnte)">0</method>
			<method name="public edu.stanford.nlp.util.Pair read(java.io.InputStream is)">1</method>
			<method name="private static void saveDependencyGraph(edu.stanford.nlp.semgraph.SemanticGraph graph, java.io.PrintWriter pw)">9</method>
			<method name="private static String escapeSpace(String s)">1</method>
			<method name="private static String unescapeSpace(String s)">1</method>
			<method name="public java.io.OutputStream write(edu.stanford.nlp.pipeline.Annotation corpus, java.io.OutputStream os)">1</method>
			<method name="private static void saveToken(edu.stanford.nlp.ling.CoreLabel token, boolean haveExplicitAntecedent, java.io.PrintWriter pw)">10</method>
			<method name="private static edu.stanford.nlp.dcoref.Dictionaries$Gender parseGender(String s)">1</method>
			<method name="private static void saveCorefChains(java.util.Map chains, java.io.PrintWriter pw)">3</method>
			<method name="private static edu.stanford.nlp.dcoref.Dictionaries$Number parseNumber(String s)">1</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="private static edu.stanford.nlp.pipeline.CustomAnnotationSerializer$IntermediateSemanticGraph loadDependencyGraph(java.io.BufferedReader reader)">1</method>
			<method name="public static void saveCorefChain(java.io.PrintWriter pw, int cid, edu.stanford.nlp.dcoref.CorefChain cluster)">4</method>
			<method name="private static java.util.Map loadCorefChains(java.io.BufferedReader reader)">1</method>
			<method name="static edu.stanford.nlp.semgraph.SemanticGraph convertIntermediateGraph(edu.stanford.nlp.pipeline.CustomAnnotationSerializer$IntermediateSemanticGraph ig, java.util.List sentence)">10</method>
			<method name="private static edu.stanford.nlp.dcoref.Dictionaries$Animacy parseAnimacy(String s)">1</method>
			<method name="private static edu.stanford.nlp.dcoref.Dictionaries$MentionType parseMentionType(String s)">1</method>
			<method name="private static edu.stanford.nlp.ling.CoreLabel loadToken(String line, boolean haveExplicitAntecedent)">12</method>
			<method name="private static int countMentions(edu.stanford.nlp.dcoref.CorefChain cluster)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.ArrayCoreMap$1</name>
		<wmc>3</wmc>
		<dit>3</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>6</rfc>
		<lcom>1</lcom>
		<ca>2</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>0.5</lcom3>
		<loc>19</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.9047619047619048</mfa>
		<cam>0.6666666666666666</cam>
		<ic>2</ic>
		<cbm>7</cbm>
		<amc>5.0</amc>
		<cc>
			<method name="public int size()">1</method>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="void _init_(edu.stanford.nlp.util.ArrayCoreMap)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$TimeUnit</name>
		<wmc>8</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>16</cbo>
		<rfc>12</rfc>
		<lcom>6</lcom>
		<ca>12</ca>
		<ce>4</ce>
		<npm>6</npm>
		<lcom3>0.9464285714285714</lcom3>
		<loc>213</loc>
		<dam>0.125</dam>
		<moa>16</moa>
		<mfa>0.6842105263157895</mfa>
		<cam>0.35714285714285715</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>23.625</amc>
		<cc>
			<method name="public edu.stanford.nlp.time.SUTime$Temporal createTemporal(int n)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static edu.stanford.nlp.time.SUTime$TimeUnit valueOf(String name)">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Duration getPeriod()">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Duration getDuration()">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Duration getGranularity()">1</method>
			<method name="private void _init_(String, int, edu.stanford.nlp.time.SUTime$Duration d)">0</method>
			<method name="public static edu.stanford.nlp.time.SUTime$TimeUnit[] values()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.ArrayCoreMap$2</name>
		<wmc>3</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>13</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.8461538461538461</mfa>
		<cam>1.0</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>3.3333333333333335</amc>
		<cc>
			<method name="protected volatile Object initialValue()">1</method>
			<method name="void _init_()">0</method>
			<method name="protected edu.stanford.nlp.util.IdentityHashSet initialValue()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.ArrayCoreMap$3</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>1.0</lcom3>
		<loc>23</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.333333333333333</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="void _init_(edu.stanford.nlp.util.ArrayCoreMap)">0</method>
			<method name="public int compare(Class a, Class b)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.math.ADMath</name>
		<wmc>13</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>23</rfc>
		<lcom>78</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>12</npm>
		<lcom3>2.0</lcom3>
		<loc>369</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.27692307692307694</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>27.384615384615383</amc>
		<cc>
			<method name="public static edu.stanford.nlp.math.DoubleAD minusConst(edu.stanford.nlp.math.DoubleAD a, double b)">1</method>
			<method name="public static edu.stanford.nlp.math.DoubleAD plus(edu.stanford.nlp.math.DoubleAD a, edu.stanford.nlp.math.DoubleAD b)">1</method>
			<method name="public static edu.stanford.nlp.math.DoubleAD divideConst(edu.stanford.nlp.math.DoubleAD a, double b)">1</method>
			<method name="private void _init_()">0</method>
			<method name="public static edu.stanford.nlp.math.DoubleAD logSum(edu.stanford.nlp.math.DoubleAD[] logInputs, int fromIndex, int toIndex)">11</method>
			<method name="public static edu.stanford.nlp.math.DoubleAD minus(edu.stanford.nlp.math.DoubleAD a, edu.stanford.nlp.math.DoubleAD b)">1</method>
			<method name="public static edu.stanford.nlp.math.DoubleAD mult(edu.stanford.nlp.math.DoubleAD a, edu.stanford.nlp.math.DoubleAD b)">1</method>
			<method name="public static edu.stanford.nlp.math.DoubleAD exp(edu.stanford.nlp.math.DoubleAD a)">1</method>
			<method name="public static edu.stanford.nlp.math.DoubleAD plusConst(edu.stanford.nlp.math.DoubleAD a, double b)">1</method>
			<method name="public static edu.stanford.nlp.math.DoubleAD multConst(edu.stanford.nlp.math.DoubleAD a, double b)">1</method>
			<method name="public static edu.stanford.nlp.math.DoubleAD logSum(edu.stanford.nlp.math.DoubleAD[] logInputs)">1</method>
			<method name="public static edu.stanford.nlp.math.DoubleAD log(edu.stanford.nlp.math.DoubleAD a)">1</method>
			<method name="public static edu.stanford.nlp.math.DoubleAD divide(edu.stanford.nlp.math.DoubleAD a, edu.stanford.nlp.math.DoubleAD b)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$OriginalTextAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.french.DybroFrenchHeadFinder</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>12</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>10</ce>
		<npm>3</npm>
		<lcom3>1.5</lcom3>
		<loc>1039</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4444444444444444</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>345.0</amc>
		<cc>
			<method name="public static void main(String[] args)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(edu.stanford.nlp.trees.TreebankLanguagePack tlp)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.SisterAnnotationStats</name>
		<wmc>11</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>15</cbo>
		<rfc>72</rfc>
		<lcom>47</lcom>
		<ca>4</ca>
		<ce>13</ce>
		<npm>8</npm>
		<lcom3>0.8</lcom3>
		<loc>904</loc>
		<dam>0.5</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.26666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>80.63636363636364</amc>
		<cc>
			<method name="protected void sisterCounters(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.Tree p)">4</method>
			<method name="public void printStats()">17</method>
			<method name="public static java.util.List rightSisterLabels(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.Tree p)">4</method>
			<method name="public static void main(String[] args)">3</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void recurse(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.Tree p)">6</method>
			<method name="public static java.util.List kidLabels(edu.stanford.nlp.trees.Tree t)">2</method>
			<method name="public void visitTree(edu.stanford.nlp.trees.Tree t)">1</method>
			<method name="public static java.util.List leftSisterLabels(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.Tree p)">4</method>
			<method name="protected void sideCounters(String label, java.util.List rewrite, java.util.List sideSisters, java.util.Map sideRules)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.math.SloppyMath</name>
		<wmc>35</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>13</cbo>
		<rfc>67</rfc>
		<lcom>593</lcom>
		<ca>13</ca>
		<ce>0</ce>
		<npm>33</npm>
		<lcom3>1.0098039215686274</lcom3>
		<loc>1747</loc>
		<dam>0.3333333333333333</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.19117647058823528</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>48.82857142857143</amc>
		<cc>
			<method name="public static float logAdd(float lx, float ly)">4</method>
			<method name="public static int max(int a, int b)">2</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static int min(int a, int b, int c)">3</method>
			<method name="public static int nChooseK(int n, int k)">3</method>
			<method name="public static float max(float a, float b)">2</method>
			<method name="public static double hypergeometric(int k, int n, int r, int m)">26</method>
			<method name="public static double acos(double cosValue)">5</method>
			<method name="public static double oneTailedFishersExact(int k, int n, int r, int m)">18</method>
			<method name="private void _init_()">0</method>
			<method name="public static double round(double x)">1</method>
			<method name="public static float min(float a, float b)">2</method>
			<method name="public static double log(double num, double base)">1</method>
			<method name="public static double sigmoid(double x)">2</method>
			<method name="public static double gamma(double n)">1</method>
			<method name="public static int max(java.util.Collection vals)">3</method>
			<method name="public static double poisson(int x, double lambda)">5</method>
			<method name="public static double max(double a, double b)">2</method>
			<method name="public static int pythonMod(int num, int modulus)">1</method>
			<method name="public static double round(double x, int precision)">1</method>
			<method name="public static boolean isCloseTo(double a, double b)">4</method>
			<method name="public static double factorial(int x)">2</method>
			<method name="public static boolean isVeryDangerous(double d)">3</method>
			<method name="public static double min(double a, double b)">2</method>
			<method name="public static int intPow(int b, int e)">4</method>
			<method name="public static double logAdd(double lx, double ly)">4</method>
			<method name="public static double intPow(double b, int e)">3</method>
			<method name="public static double exactBinomial(int k, int n, double p)">3</method>
			<method name="public static double pow(double a, double b)">1</method>
			<method name="public static double lgamma(double x)">2</method>
			<method name="public static float intPow(float b, int e)">3</method>
			<method name="public static void main(String[] args)">5</method>
			<method name="public static int max(int a, int b, int c)">3</method>
			<method name="public static boolean isDangerous(double d)">4</method>
			<method name="public static double chiSquare2by2(int k, int n, int r, int m)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalRelations$ParticipialModifierGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$TokenEndAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.JodaTimeUtils$ConversionOptions</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>17</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.HasLemma</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>2</rfc>
		<lcom>1</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>2</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract void setLemma(String)">1</method>
			<method name="public abstract String lemma()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.LabeledScoredTreeNode</name>
		<wmc>15</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>27</rfc>
		<lcom>59</lcom>
		<ca>3</ca>
		<ce>7</ce>
		<npm>14</npm>
		<lcom3>0.7999999999999999</lcom3>
		<loc>137</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.25</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.8</amc>
		<cc>
			<method name="public void setLabel(edu.stanford.nlp.ling.Label label)">1</method>
			<method name="public static edu.stanford.nlp.trees.TreeFactory factory()">1</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public edu.stanford.nlp.ling.Label label()">1</method>
			<method name="public edu.stanford.nlp.trees.Tree[] children()">1</method>
			<method name="public void _init_(edu.stanford.nlp.ling.Label label, java.util.List daughterTreesList)">0</method>
			<method name="public void _init_(edu.stanford.nlp.ling.Label label, double score)">0</method>
			<method name="public void setScore(double score)">1</method>
			<method name="public double score()">1</method>
			<method name="public static edu.stanford.nlp.trees.TreeFactory factory(edu.stanford.nlp.ling.LabelFactory lf)">1</method>
			<method name="public edu.stanford.nlp.trees.TreeFactory treeFactory()">2</method>
			<method name="public String nodeString()">2</method>
			<method name="public void _init_(edu.stanford.nlp.ling.Label label)">0</method>
			<method name="public void setChildren(edu.stanford.nlp.trees.Tree[] children)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$EntityTypeAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.structure.MachineReadingAnnotations$DependencyAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.LabeledScoredConstituent$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.process.WordToSentenceProcessor</name>
		<wmc>18</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>13</cbo>
		<rfc>63</rfc>
		<lcom>129</lcom>
		<ca>4</ca>
		<ce>9</ce>
		<npm>11</npm>
		<lcom3>0.6627450980392157</lcom3>
		<loc>791</loc>
		<dam>0.8</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.28104575163398693</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>42.111111111111114</amc>
		<cc>
			<method name="public edu.stanford.nlp.ling.Document processDocument(edu.stanford.nlp.ling.Document in)">1</method>
			<method name="public void _init_(edu.stanford.nlp.process.WordToSentenceProcessor$NewlineIsSentenceBreak newlineIsSentenceBreak)">0</method>
			<method name="private boolean matchesTokenPatternsToDiscard(String word)">1</method>
			<method name="public java.util.List process(java.util.List words)">2</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void _init_(boolean isOneSentence)">0</method>
			<method name="public void _init_(java.util.Set boundaryToDiscard)">0</method>
			<method name="private void _init_(String boundaryTokenRegex, edu.stanford.nlp.process.WordToSentenceProcessor$NewlineIsSentenceBreak newlineIsSentenceBreak, boolean isOneSentence)">0</method>
			<method name="private String getString(Object o)">4</method>
			<method name="public static edu.stanford.nlp.process.WordToSentenceProcessor$NewlineIsSentenceBreak stringToNewlineIsSentenceBreak(String name)">5</method>
			<method name="private static boolean matches(java.util.List patterns, String word)">2</method>
			<method name="public void _init_(String boundaryTokenRegex, java.util.Set boundaryToDiscard, java.util.Set xmlBreakElementsToDiscard, edu.stanford.nlp.process.WordToSentenceProcessor$NewlineIsSentenceBreak newlineIsSentenceBreak, edu.stanford.nlp.ling.tokensregex.SequencePattern sentenceBoundaryMultiTokenPattern, java.util.Set tokenRegexesToDiscard)">0</method>
			<method name="public void _init_(String boundaryTokenRegex, java.util.Set boundaryFollowers, java.util.Set boundariesToDiscard, java.util.Set xmlBreakElementsToDiscard, String regionElementRegex, edu.stanford.nlp.process.WordToSentenceProcessor$NewlineIsSentenceBreak newlineIsSentenceBreak, edu.stanford.nlp.ling.tokensregex.SequencePattern sentenceBoundaryMultiTokenPattern, java.util.Set tokenRegexesToDiscard, boolean isOneSentence, boolean allowEmptySentences)">0</method>
			<method name="public java.util.List wordsToSentences(java.util.List words)">43</method>
			<method name="private boolean isForcedEndToken(Object o)">4</method>
			<method name="private boolean matchesXmlBreakElementToDiscard(String word)">1</method>
			<method name="public void _init_(String boundaryTokenRegex, java.util.Set boundaryToDiscard, java.util.Set xmlBreakElementsToDiscard, edu.stanford.nlp.process.WordToSentenceProcessor$NewlineIsSentenceBreak newlineIsSentenceBreak)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.DeltaMap$1$1</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>7</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>0.75</lcom3>
		<loc>30</loc>
		<dam>0.5</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.333333333333334</amc>
		<cc>
			<method name="public boolean accept(java.util.Map$Entry e)">2</method>
			<method name="void _init_(edu.stanford.nlp.util.DeltaMap$1)">0</method>
			<method name="public volatile boolean accept(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.CoreMapAttributeAggregator$ConcatCoreMapListAggregator</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>11</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>67</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>21.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Object aggregate(Class key, java.util.List in)">5</method>
			<method name="public void _init_(boolean concatSelf)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.DeltaMap$1$2</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>1.25</lcom3>
		<loc>26</loc>
		<dam>0.5</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.0</amc>
		<cc>
			<method name="public boolean accept(java.util.Map$Entry e)">2</method>
			<method name="void _init_(edu.stanford.nlp.util.DeltaMap$1)">0</method>
			<method name="public volatile boolean accept(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.SisterAnnotationStats$3</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>7</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>9</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>19</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.5</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="public edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader in)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceSentenceSegmenter</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>34</rfc>
		<lcom>8</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>4</npm>
		<lcom3>0.75</lcom3>
		<loc>242</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.25</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>47.0</amc>
		<cc>
			<method name="public static void main(String[] args)">1</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceToken wordTokenToAceToken(edu.stanford.nlp.ie.machinereading.domains.ace.reader.RobustTokenizer$WordToken wordToken, int sentence)">1</method>
			<method name="public static java.util.List tokenizeAndSegmentSentences(String filenamePrefix)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.SisterAnnotationStats$2</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>1.0</lcom3>
		<loc>27</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.0</amc>
		<cc>
			<method name="public int compare(Object o1, Object o2)">1</method>
			<method name="void _init_(edu.stanford.nlp.parser.lexparser.SisterAnnotationStats)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.SisterAnnotationStats$1</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>1.0</lcom3>
		<loc>27</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.0</amc>
		<cc>
			<method name="public int compare(Object o1, Object o2)">1</method>
			<method name="void _init_(edu.stanford.nlp.parser.lexparser.SisterAnnotationStats)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequencePattern</name>
		<wmc>16</wmc>
		<dit>1</dit>
		<noc>1</noc>
		<cbo>36</cbo>
		<rfc>49</rfc>
		<lcom>98</lcom>
		<ca>19</ca>
		<ce>19</ce>
		<npm>10</npm>
		<lcom3>0.8555555555555556</lcom3>
		<loc>258</loc>
		<dam>0.3333333333333333</dam>
		<moa>9</moa>
		<mfa>0.0</mfa>
		<cam>0.21666666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>14.375</amc>
		<cc>
			<method name="protected void _init_(edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr nodeSequencePattern)">0</method>
			<method name="protected void _init_(String patternStr, edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr nodeSequencePattern, edu.stanford.nlp.ling.tokensregex.SequenceMatchAction action)">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="protected void _init_(String patternStr, edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr nodeSequencePattern)">0</method>
			<method name="public Object findNodePattern(edu.stanford.nlp.util.Function filter)">4</method>
			<method name="public String pattern()">1</method>
			<method name="public double getPriority()">1</method>
			<method name="public void setAction(edu.stanford.nlp.ling.tokensregex.SequenceMatchAction action)">1</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.SequenceMatchAction getAction()">1</method>
			<method name="protected edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr getPatternExpr()">1</method>
			<method name="public void setPriority(double priority)">1</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.SequenceMatcher getMatcher(java.util.List tokens)">1</method>
			<method name="public int getTotalGroups()">1</method>
			<method name="public static edu.stanford.nlp.ling.tokensregex.SequencePattern compile(edu.stanford.nlp.ling.tokensregex.Env env, String string)">1</method>
			<method name="protected static edu.stanford.nlp.ling.tokensregex.SequencePattern compile(edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr nodeSequencePattern)">1</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.AbstractCachingDiffFloatFunction</name>
		<wmc>9</wmc>
		<dit>1</dit>
		<noc>1</noc>
		<cbo>3</cbo>
		<rfc>14</rfc>
		<lcom>28</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>5</npm>
		<lcom3>0.7083333333333333</lcom3>
		<loc>109</loc>
		<dam>0.6666666666666666</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.8333333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.777777777777779</amc>
		<cc>
			<method name="float norm2(float[] x)">2</method>
			<method name="void ensure(float[] x)">4</method>
			<method name="public void _init_()">0</method>
			<method name="protected abstract void calculate(float[])">1</method>
			<method name="protected void copy(float[] y, float[] x)">1</method>
			<method name="public abstract int domainDimension()">1</method>
			<method name="public float[] derivativeAt(float[] x)">1</method>
			<method name="public float valueAt(float[] x)">1</method>
			<method name="public float[] initial()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$ContextsAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>9</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$AbstrAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.DeltaMap$SimpleEntry</name>
		<wmc>9</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>18</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>8</npm>
		<lcom3>0.3125</lcom3>
		<loc>112</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.48148148148148145</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>11.222222222222221</amc>
		<cc>
			<method name="private static boolean eq(Object o1, Object o2)">3</method>
			<method name="public Object setValue(Object value)">1</method>
			<method name="public boolean equals(Object o)">4</method>
			<method name="public int hashCode()">3</method>
			<method name="public Object getKey()">1</method>
			<method name="public void _init_(java.util.Map$Entry e)">0</method>
			<method name="public void _init_(Object key, Object value)">0</method>
			<method name="public String toString()">1</method>
			<method name="public Object getValue()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.Counters$7$4$1</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>12</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>4</npm>
		<lcom3>0.625</lcom3>
		<loc>40</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.6</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.stats.Counters$7$4)">0</method>
			<method name="public Double next()">1</method>
			<method name="public boolean hasNext()">1</method>
			<method name="public void remove()">1</method>
			<method name="public volatile Object next()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.sequences.BeamBestSequenceFinder$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.RepeatedRecordHandler$RepeatSemantics</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>4</rfc>
		<lcom>6</lcom>
		<ca>5</ca>
		<ce>1</ce>
		<npm>4</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract boolean equals(edu.stanford.nlp.util.logging.Redwood$Record, edu.stanford.nlp.util.logging.Redwood$Record)">1</method>
			<method name="public abstract String message(int)">1</method>
			<method name="public abstract long maxWaitTimeInMillis()">1</method>
			<method name="public abstract int numToForcePrint()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.sequences.TrueCasingForNISTDocumentReaderAndWriter$LineToTrueCasesParser</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>22</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>0.3333333333333333</lcom3>
		<loc>164</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>39.25</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public java.util.List apply(String line)">8</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.TreeBinarizer$1</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>7</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>9</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>19</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.5</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="public edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader in)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.GenderAnnotator</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>26</rfc>
		<lcom>8</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>5</npm>
		<lcom3>0.5</lcom3>
		<loc>115</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>21.4</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public void annotate(edu.stanford.nlp.pipeline.Annotation annotation)">5</method>
			<method name="public java.util.Set requires()">1</method>
			<method name="public void _init_(boolean verbose, String mapping)">0</method>
			<method name="public java.util.Set requirementsSatisfied()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$IsoTime</name>
		<wmc>8</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>18</rfc>
		<lcom>16</lcom>
		<ca>2</ca>
		<ce>4</ce>
		<npm>7</npm>
		<lcom3>0.3095238095238096</lcom3>
		<loc>247</loc>
		<dam>0.16666666666666666</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>29.125</amc>
		<cc>
			<method name="private void initBase()">7</method>
			<method name="public void _init_(String h, String m, String s, String ms)">0</method>
			<method name="public void _init_(Number h, Number m, Number s)">0</method>
			<method name="public void _init_(int h, int m, int s)">0</method>
			<method name="public void _init_(String h, String m, String s)">0</method>
			<method name="public void _init_(Number h, Number m, Number s, Number ms, Number halfday)">0</method>
			<method name="public boolean hasTime()">1</method>
			<method name="public void _init_(int h, int m, int s, int ms, int halfday)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$StandardTemporalType$8</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>5</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>11</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>25</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.333333333333333</amc>
		<cc>
			<method name="protected volatile edu.stanford.nlp.time.SUTime$Temporal _createTemporal(int x0)">1</method>
			<method name="void _init_(String, int, edu.stanford.nlp.time.SUTime$TimexType x0, edu.stanford.nlp.time.SUTime$TimeUnit x1, edu.stanford.nlp.time.SUTime$Duration x2)">0</method>
			<method name="protected edu.stanford.nlp.time.SUTime$Time _createTemporal(int n)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$StandardTemporalType$9</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>5</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>11</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>25</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.333333333333333</amc>
		<cc>
			<method name="protected volatile edu.stanford.nlp.time.SUTime$Temporal _createTemporal(int x0)">1</method>
			<method name="void _init_(String, int, edu.stanford.nlp.time.SUTime$TimexType x0, edu.stanford.nlp.time.SUTime$TimeUnit x1, edu.stanford.nlp.time.SUTime$Duration x2)">0</method>
			<method name="protected edu.stanford.nlp.time.SUTime$Time _createTemporal(int n)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$StandardTemporalType$6</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>4</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>8</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>23</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.666666666666667</amc>
		<cc>
			<method name="protected volatile edu.stanford.nlp.time.SUTime$Temporal _createTemporal(int x0)">1</method>
			<method name="void _init_(String, int, edu.stanford.nlp.time.SUTime$TimexType x0, edu.stanford.nlp.time.SUTime$TimeUnit x1, edu.stanford.nlp.time.SUTime$Duration x2)">0</method>
			<method name="protected edu.stanford.nlp.time.SUTime$Time _createTemporal(int n)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$StandardTemporalType$7</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>14</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="void _init_(String, int, edu.stanford.nlp.time.SUTime$TimexType x0, edu.stanford.nlp.time.SUTime$TimeUnit x1, edu.stanford.nlp.time.SUTime$Duration x2)">0</method>
			<method name="public edu.stanford.nlp.time.SUTime$Duration getDuration()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$StandardTemporalType$4</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>14</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="void _init_(String, int, edu.stanford.nlp.time.SUTime$TimexType x0, edu.stanford.nlp.time.SUTime$TimeUnit x1, edu.stanford.nlp.time.SUTime$Duration x2)">0</method>
			<method name="public edu.stanford.nlp.time.SUTime$Duration getDuration()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.Function</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>24</cbo>
		<rfc>2</rfc>
		<lcom>1</lcom>
		<ca>24</ca>
		<ce>0</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>2</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract double valueAt(double[])">1</method>
			<method name="public abstract int domainDimension()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$StandardTemporalType$5</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>10</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>25</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.333333333333333</amc>
		<cc>
			<method name="protected volatile edu.stanford.nlp.time.SUTime$Temporal _createTemporal(int x0)">1</method>
			<method name="void _init_(String, int, edu.stanford.nlp.time.SUTime$TimexType x0, edu.stanford.nlp.time.SUTime$TimeUnit x1, edu.stanford.nlp.time.SUTime$Duration x2)">0</method>
			<method name="protected edu.stanford.nlp.time.SUTime$Time _createTemporal(int n)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$StandardTemporalType$2</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>10</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>25</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.333333333333333</amc>
		<cc>
			<method name="protected volatile edu.stanford.nlp.time.SUTime$Temporal _createTemporal(int x0)">1</method>
			<method name="void _init_(String, int, edu.stanford.nlp.time.SUTime$TimexType x0, edu.stanford.nlp.time.SUTime$TimeUnit x1, edu.stanford.nlp.time.SUTime$Duration x2)">0</method>
			<method name="protected edu.stanford.nlp.time.SUTime$Time _createTemporal(int n)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$StandardTemporalType$3</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>10</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>25</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.333333333333333</amc>
		<cc>
			<method name="protected volatile edu.stanford.nlp.time.SUTime$Temporal _createTemporal(int x0)">1</method>
			<method name="void _init_(String, int, edu.stanford.nlp.time.SUTime$TimexType x0, edu.stanford.nlp.time.SUTime$TimeUnit x1, edu.stanford.nlp.time.SUTime$Duration x2)">0</method>
			<method name="protected edu.stanford.nlp.time.SUTime$Time _createTemporal(int n)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$StandardTemporalType$1</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>14</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="void _init_(String, int, edu.stanford.nlp.time.SUTime$TimexType x0, edu.stanford.nlp.time.SUTime$TimeUnit x1, edu.stanford.nlp.time.SUTime$Duration x2)">0</method>
			<method name="public edu.stanford.nlp.time.SUTime$Duration getDuration()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.sentiment.SentimentUtils$1</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>5</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>21</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="public volatile boolean accept(Object x0)">1</method>
			<method name="public boolean accept(edu.stanford.nlp.trees.Tree tree)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.UnaryRule</name>
		<wmc>13</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>13</cbo>
		<rfc>25</rfc>
		<lcom>0</lcom>
		<ca>10</ca>
		<ce>3</ce>
		<npm>12</npm>
		<lcom3>0.6527777777777778</lcom3>
		<loc>239</loc>
		<dam>0.5</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2619047619047619</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>16.923076923076923</amc>
		<cc>
			<method name="public volatile int compareTo(Object x0)">1</method>
			<method name="public int parent()">1</method>
			<method name="public void _init_(int parent, int child, double score)">0</method>
			<method name="public boolean equals(Object o)">5</method>
			<method name="public void _init_(int parent, int child)">0</method>
			<method name="public int hashCode()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public String toStringNoScore(edu.stanford.nlp.util.Index index)">2</method>
			<method name="public int compareTo(edu.stanford.nlp.parser.lexparser.UnaryRule ur)">5</method>
			<method name="public float score()">1</method>
			<method name="public void _init_(String s, edu.stanford.nlp.util.Index index)">0</method>
			<method name="public String toString()">1</method>
			<method name="public String toString(edu.stanford.nlp.util.Index index)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.ParserAnnotator$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.concurrent.MulticoreWrapper$QueueItem</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>6</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>5</npm>
		<lcom3>0.5</lcom3>
		<loc>52</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>9.0</amc>
		<cc>
			<method name="public volatile int compareTo(Object x0)">1</method>
			<method name="public int hashCode()">1</method>
			<method name="public int compareTo(edu.stanford.nlp.util.concurrent.MulticoreWrapper$QueueItem other)">1</method>
			<method name="public boolean equals(Object other)">4</method>
			<method name="public void _init_(Object item, int id)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.TwoDimensionalCounterInterface</name>
		<wmc>21</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>21</rfc>
		<lcom>210</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>21</npm>
		<lcom3>2.0</lcom3>
		<loc>21</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.30952380952380953</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract int size()">1</method>
			<method name="public abstract void incrementCount(Object, Object)">1</method>
			<method name="public abstract double remove(Object, Object)">1</method>
			<method name="public abstract void setCount(Object, Object, double)">1</method>
			<method name="public abstract void remove(Object)">1</method>
			<method name="public abstract String toMatrixString(int)">1</method>
			<method name="public abstract boolean isEmpty()">1</method>
			<method name="public abstract double totalCount(Object)">1</method>
			<method name="public abstract boolean containsKey(Object, Object)">1</method>
			<method name="public abstract double defaultReturnValue()">1</method>
			<method name="public abstract void defaultReturnValue(double)">1</method>
			<method name="public abstract void decrementCount(Object, Object)">1</method>
			<method name="public abstract void decrementCount(Object, Object, double)">1</method>
			<method name="public abstract double totalCount()">1</method>
			<method name="public abstract double[][] toMatrix(java.util.List, java.util.List)">1</method>
			<method name="public abstract double getCount(Object, Object)">1</method>
			<method name="public abstract void incrementCount(Object, Object, double)">1</method>
			<method name="public abstract edu.stanford.nlp.stats.Counter getCounter(Object)">1</method>
			<method name="public abstract java.util.Set secondKeySet()">1</method>
			<method name="public abstract String toCSVString(java.text.NumberFormat)">1</method>
			<method name="public abstract java.util.Set firstKeySet()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.process.Morpha</name>
		<wmc>37</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>74</rfc>
		<lcom>574</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>9</npm>
		<lcom3>0.9800995024875623</lcom3>
		<loc>8870</loc>
		<dam>0.9104477611940298</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2013888888888889</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>236.9189189189189</amc>
		<cc>
			<method name="String condub_stem(int del, String add, String affix)">5</method>
			<method name="private static int[] zzUnpackTrans()">1</method>
			<method name="void setOptions(int opts)">3</method>
			<method name="static void _clinit_()">0</method>
			<method name="public final int yystate()">1</method>
			<method name="private static char[] zzUnpackCMap(String packed)">3</method>
			<method name="public String next()">1</method>
			<method name="private static int zzUnpackTrans(String packed, int offset, int[] result)">3</method>
			<method name="private String common_noun_stem()">2</method>
			<method name="private java.util.Set loadVerbStemSet(String[] verbStems)">2</method>
			<method name="void _init_(java.io.InputStream in)">0</method>
			<method name="private static int zzUnpackAttribute(String packed, int offset, int[] result)">3</method>
			<method name="String null_stem()">1</method>
			<method name="private static int[] zzUnpackRowMap()">1</method>
			<method name="private static String capitalise(String s)">5</method>
			<method name="public void yypushback(int number)">2</method>
			<method name="private String proper_name_stem()">1</method>
			<method name="private String semi_reg_stem(int del, String add)">9</method>
			<method name="String ynull_stem()">1</method>
			<method name="void _init_(java.io.Reader in)">0</method>
			<method name="private static int zzUnpackRowMap(String packed, int offset, int[] result)">2</method>
			<method name="void setOption(int i, boolean b)">1</method>
			<method name="public final String yytext()">1</method>
			<method name="public final void yybegin(int newState)">1</method>
			<method name="public final void yyclose()">1</method>
			<method name="public final void yyreset(java.io.Reader reader)">1</method>
			<method name="public final int yylength()">1</method>
			<method name="String xnull_stem()">1</method>
			<method name="public final char yycharat(int pos)">1</method>
			<method name="private static int zzUnpackAction(String packed, int offset, int[] result)">3</method>
			<method name="boolean option(int i)">1</method>
			<method name="private static int[] zzUnpackAttribute()">1</method>
			<method name="private String stem(int del, String add, String affix)">4</method>
			<method name="private static int[] zzUnpackAction()">1</method>
			<method name="private boolean zzRefill()">1</method>
			<method name="String cnull_stem()">1</method>
			<method name="private void zzScanError(int errorCode)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.io.FileSequentialCollection</name>
		<wmc>13</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>25</rfc>
		<lcom>72</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>10</npm>
		<lcom3>0.5833333333333334</lcom3>
		<loc>258</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.7272727272727273</mfa>
		<cam>0.25961538461538464</cam>
		<ic>1</ic>
		<cbm>4</cbm>
		<amc>18.615384615384617</amc>
		<cc>
			<method name="public int size()">2</method>
			<method name="static java.util.Collection access$000(edu.stanford.nlp.io.FileSequentialCollection x0)">1</method>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="public static void main(String[] args)">7</method>
			<method name="public void _init_(java.util.Collection c, java.io.FileFilter filt)">0</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(java.util.Collection c, String suffix, boolean recursively)">0</method>
			<method name="public void _init_(java.util.Collection c)">0</method>
			<method name="static java.io.FileFilter access$100(edu.stanford.nlp.io.FileSequentialCollection x0)">1</method>
			<method name="public void _init_(String filename, java.io.FileFilter filt)">0</method>
			<method name="static boolean access$200(edu.stanford.nlp.io.FileSequentialCollection x0)">1</method>
			<method name="public void _init_(java.util.Collection c, java.io.FileFilter filt, boolean includeDirs)">0</method>
			<method name="public void _init_(java.io.File path, String suffix, boolean recursively)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.MemoryTreebank</name>
		<wmc>36</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>46</cbo>
		<rfc>112</rfc>
		<lcom>188</lcom>
		<ca>25</ca>
		<ce>21</ce>
		<npm>35</npm>
		<lcom3>0.5904761904761904</lcom3>
		<loc>697</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.14444444444444443</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.27777777777778</amc>
		<cc>
			<method name="public void clear()">1</method>
			<method name="public void loadPath(java.io.File path, java.io.FileFilter filt)">1</method>
			<method name="public edu.stanford.nlp.trees.Treebank transform(edu.stanford.nlp.trees.TreeTransformer treeTrans)">2</method>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="public void _init_(edu.stanford.nlp.trees.TreeReaderFactory trf, String encoding)">0</method>
			<method name="public void apply(edu.stanford.nlp.trees.TreeVisitor tp)">2</method>
			<method name="public java.util.ListIterator listIterator(int index)">1</method>
			<method name="public void load(java.io.Reader r)">1</method>
			<method name="public void _init_(int initialCapacity, edu.stanford.nlp.trees.TreeReaderFactory trf)">0</method>
			<method name="public int size()">1</method>
			<method name="public volatile boolean add(Object x0)">1</method>
			<method name="public void _init_(int initialCapacity)">0</method>
			<method name="private void readSRLFile(String srlFile)">3</method>
			<method name="public void _init_(String encoding)">0</method>
			<method name="public volatile Object get(int x0)">1</method>
			<method name="public void _init_(java.util.List trees, edu.stanford.nlp.trees.TreeReaderFactory trf, String encoding)">0</method>
			<method name="public void load(java.io.Reader r, String id)">3</method>
			<method name="public int indexOf(Object o)">1</method>
			<method name="public edu.stanford.nlp.trees.Tree remove(int index)">1</method>
			<method name="public int lastIndexOf(Object o)">1</method>
			<method name="public java.util.ListIterator listIterator()">1</method>
			<method name="public void processFile(java.io.File file)">14</method>
			<method name="public boolean add(edu.stanford.nlp.trees.Tree element)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(edu.stanford.nlp.trees.TreeReaderFactory trf)">0</method>
			<method name="public void loadPath(String path, java.io.FileFilter filt, String srlFile)">1</method>
			<method name="public volatile void add(int x0, Object x1)">1</method>
			<method name="public volatile Object set(int x0, Object x1)">1</method>
			<method name="public void add(int index, edu.stanford.nlp.trees.Tree element)">1</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="public java.util.List subList(int fromIndex, int toIndex)">1</method>
			<method name="public boolean addAll(int index, java.util.Collection c)">1</method>
			<method name="public void _init_(edu.stanford.nlp.trees.TreeNormalizer tm)">0</method>
			<method name="public edu.stanford.nlp.trees.Tree set(int index, edu.stanford.nlp.trees.Tree element)">1</method>
			<method name="public volatile Object remove(int x0)">1</method>
			<method name="public edu.stanford.nlp.trees.Tree get(int i)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalStructureFactory</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>8</rfc>
		<lcom>8</lcom>
		<ca>2</ca>
		<ce>6</ce>
		<npm>5</npm>
		<lcom3>0.0</lcom3>
		<loc>60</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.6</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public edu.stanford.nlp.trees.EnglishGrammaticalStructure newGrammaticalStructure(edu.stanford.nlp.trees.Tree t)">4</method>
			<method name="public void _init_(edu.stanford.nlp.util.Filter puncFilter, edu.stanford.nlp.trees.HeadFinder hf)">0</method>
			<method name="public void _init_(edu.stanford.nlp.util.Filter puncFilter)">0</method>
			<method name="public volatile edu.stanford.nlp.trees.GrammaticalStructure newGrammaticalStructure(edu.stanford.nlp.trees.Tree x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$DictAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.AbstractTreeExtractor</name>
		<wmc>15</wmc>
		<dit>1</dit>
		<noc>2</noc>
		<cbo>8</cbo>
		<rfc>25</rfc>
		<lcom>103</lcom>
		<ca>3</ca>
		<ce>5</ce>
		<npm>7</npm>
		<lcom3>0.7857142857142857</lcom3>
		<loc>148</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.3904761904761905</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.8</amc>
		<cc>
			<method name="public Object extract(java.util.Iterator iterator, edu.stanford.nlp.util.Function f)">1</method>
			<method name="public Object extract(java.util.Iterator treeIterator, edu.stanford.nlp.util.Function f, double weight)">1</method>
			<method name="protected void tallyInternalNode(edu.stanford.nlp.trees.Tree lt, double weight)">1</method>
			<method name="protected void tallyRoot(edu.stanford.nlp.trees.Tree lt, double weight)">1</method>
			<method name="protected void _init_(edu.stanford.nlp.parser.lexparser.Options op)">0</method>
			<method name="protected void tallyPreTerminal(edu.stanford.nlp.trees.Tree lt, double weight)">1</method>
			<method name="protected void tallyTreeIterator(java.util.Iterator treeIterator, edu.stanford.nlp.util.Function f, double weight)">3</method>
			<method name="protected void tallyLeaf(edu.stanford.nlp.trees.Tree lt, double weight)">1</method>
			<method name="protected void tallyTrees(java.util.Collection trees, double weight)">2</method>
			<method name="public Object extract()">1</method>
			<method name="public Object extract(java.util.Collection trees1, double weight1, java.util.Collection trees2, double weight2)">1</method>
			<method name="public Object extract(java.util.Collection treeList)">1</method>
			<method name="public Object formResult()">1</method>
			<method name="public void tallyTree(edu.stanford.nlp.trees.Tree t, double weight)">2</method>
			<method name="protected void tallyLocalTree(edu.stanford.nlp.trees.Tree lt, double weight)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.UnknownWordModelTrainer</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>9</rfc>
		<lcom>28</lcom>
		<ca>3</ca>
		<ce>7</ce>
		<npm>7</npm>
		<lcom3>1.1071428571428572</lcom3>
		<loc>19</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.31746031746031744</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.875</amc>
		<cc>
			<method name="public abstract void initializeTraining(edu.stanford.nlp.parser.lexparser.Options, edu.stanford.nlp.parser.lexparser.Lexicon, edu.stanford.nlp.util.Index, edu.stanford.nlp.util.Index, double)">1</method>
			<method name="public abstract edu.stanford.nlp.parser.lexparser.UnknownWordModel finishTraining()">1</method>
			<method name="public abstract void train(java.util.Collection, double)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public abstract void train(edu.stanford.nlp.trees.Tree, double)">1</method>
			<method name="public abstract void incrementTreesRead(double)">1</method>
			<method name="public abstract void train(edu.stanford.nlp.ling.TaggedWord, int, double)">1</method>
			<method name="public abstract void train(java.util.Collection)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.BikelChineseHeadFinder</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>6</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>1063</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>530.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(edu.stanford.nlp.trees.TreebankLanguagePack tlp)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Pair$MutableInternedPair</name>
		<wmc>7</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>10</rfc>
		<lcom>21</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>1.1666666666666667</lcom3>
		<loc>61</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.571428571428571</amc>
		<cc>
			<method name="public volatile int compareTo(Object x0)">1</method>
			<method name="private void internStrings()">3</method>
			<method name="void _init_(String x0, String x1, edu.stanford.nlp.util.Pair$1 x2)">0</method>
			<method name="protected Object readResolve()">1</method>
			<method name="private void _init_(edu.stanford.nlp.util.Pair p)">0</method>
			<method name="void _init_(edu.stanford.nlp.util.Pair x0, edu.stanford.nlp.util.Pair$1 x1)">0</method>
			<method name="private void _init_(String first, String second)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.MaxentTagger$TaggerWrapper</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>41</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>11</ce>
		<npm>2</npm>
		<lcom3>0.25</lcom3>
		<loc>268</loc>
		<dam>1.0</dam>
		<moa>5</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>85.0</amc>
		<cc>
			<method name="public String apply(String o)">6</method>
			<method name="public volatile Object apply(Object x0)">1</method>
			<method name="protected void _init_(edu.stanford.nlp.tagger.maxent.MaxentTagger tagger)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.AbstractStochasticCachingDiffFunction</name>
		<wmc>21</wmc>
		<dit>0</dit>
		<noc>1</noc>
		<cbo>12</cbo>
		<rfc>46</rfc>
		<lcom>110</lcom>
		<ca>8</ca>
		<ce>4</ce>
		<npm>17</npm>
		<lcom3>0.6075</lcom3>
		<loc>810</loc>
		<dam>0.75</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.41904761904761906</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>36.61904761904762</amc>
		<cc>
			<method name="public double valueAt(double[] x, double[] v, int batchSize)">1</method>
			<method name="public double[] HdotVAt(double[] x, double[] v)">2</method>
			<method name="public void _init_()">0</method>
			<method name="public abstract void calculateStochastic(double[], double[], int[])">1</method>
			<method name="public abstract int dataDimension()">1</method>
			<method name="private void getHdotVFiniteDifference(double[] x, double[] v, double[] curDerivative)">6</method>
			<method name="public double[] derivativeAt(double[] x, int batchSize)">1</method>
			<method name="void stochasticEnsure(double[] x, double[] v, int batchSize)">19</method>
			<method name="public double[] lastDerivative()">1</method>
			<method name="public double valueAt(double[] x, int batchSize)">1</method>
			<method name="public void incrementBatch(int batchSize)">1</method>
			<method name="public void incrementRandom(int numTimes)">2</method>
			<method name="public double[] HdotVAt(double[] x, double[] v, double[] curDerivative, int batchSize)">2</method>
			<method name="public void scaleUp(boolean toScaleUp)">1</method>
			<method name="protected void getBatch(int batchSize)">15</method>
			<method name="public double lastValue()">1</method>
			<method name="public double[] derivativeAt(double[] x, double[] v, int batchSize)">1</method>
			<method name="public void decrementBatch(int batchSize)">2</method>
			<method name="protected void clearCache()">4</method>
			<method name="public double[] initial()">1</method>
			<method name="public double[] HdotVAt(double[] x, double[] v, int batchSize)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.Redwood$7</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>35</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>33.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.Redwood$6</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>15</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>87</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>42.0</amc>
		<cc>
			<method name="void _init_(int)">0</method>
			<method name="public void run()">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.Redwood$5</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>14</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>230</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>113.5</amc>
		<cc>
			<method name="void _init_(int)">0</method>
			<method name="public void run()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.process.WordShapeClassifier$DistributionalClusters</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>18</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>1.0</lcom3>
		<loc>96</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>30.666666666666668</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static java.util.Map loadWordClusters(String file, String format)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.Redwood$4</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>13</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.0</amc>
		<cc>
			<method name="public void run()">1</method>
			<method name="void _init_(long)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.Redwood$3</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>20</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>0.5</lcom3>
		<loc>84</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>26.0</amc>
		<cc>
			<method name="void _init_(String, long)">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void run()">9</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.Redwood$2</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>17</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>0.5</lcom3>
		<loc>94</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>28.333333333333332</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="public void run()">8</method>
			<method name="void _init_(Object, Object[], long, Object[], int)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.Redwood$1</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>13</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>0.5</lcom3>
		<loc>68</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>20.333333333333332</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="public void run()">7</method>
			<method name="void _init_(Object, Object[], long)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.TemplateHash</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>25</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>8</ce>
		<npm>1</npm>
		<lcom3>0.3333333333333333</lcom3>
		<loc>201</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.38095238095238093</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>27.428571428571427</amc>
		<cc>
			<method name="protected int[] getXValues(edu.stanford.nlp.util.Pair key)">2</method>
			<method name="protected void addPositions(int start, int end, edu.stanford.nlp.tagger.maxent.FeatureKey fK)">1</method>
			<method name="protected int[] getPositions(edu.stanford.nlp.tagger.maxent.FeatureKey s)">1</method>
			<method name="protected void release()">1</method>
			<method name="protected void addPrev(int nFeatFrame, edu.stanford.nlp.tagger.maxent.History history)">3</method>
			<method name="public void _init_(edu.stanford.nlp.tagger.maxent.MaxentTagger maxentTagger)">0</method>
			<method name="protected void add(int nFeatFrame, edu.stanford.nlp.tagger.maxent.History history, int number)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.tsurgeon.CoindexNodes</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>12</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>52</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>24.5</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern[] children)">0</method>
			<method name="public edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.tregex.TregexMatcher m)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$ValueAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.sequences.BeamBestSequenceFinder$TagSeq</name>
		<wmc>11</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>18</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>7</npm>
		<lcom3>0.3666666666666667</lcom3>
		<loc>179</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.25757575757575757</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.0</amc>
		<cc>
			<method name="public int size()">1</method>
			<method name="public int[] tmpTags(int count, int s)">5</method>
			<method name="private void _init_()">0</method>
			<method name="public double score()">1</method>
			<method name="static double access$300(edu.stanford.nlp.sequences.BeamBestSequenceFinder$TagSeq x0)">1</method>
			<method name="public edu.stanford.nlp.sequences.BeamBestSequenceFinder$TagSeq tclone()">1</method>
			<method name="public void extendWith(int tag)">1</method>
			<method name="static double access$326(edu.stanford.nlp.sequences.BeamBestSequenceFinder$TagSeq x0, double x1)">1</method>
			<method name="public int[] tags()">2</method>
			<method name="void _init_(edu.stanford.nlp.sequences.BeamBestSequenceFinder$1 x0)">0</method>
			<method name="public void extendWith(int tag, edu.stanford.nlp.sequences.SequenceModel ts, int s)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$TypeCheckedFunction</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>7</noc>
		<cbo>10</cbo>
		<rfc>21</rfc>
		<lcom>0</lcom>
		<ca>7</ca>
		<ce>3</ce>
		<npm>4</npm>
		<lcom3>0.16666666666666666</lcom3>
		<loc>139</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>33.25</amc>
		<cc>
			<method name="public String getParamDesc()">4</method>
			<method name="public void _init_(String name, java.util.List paramInfos)">0</method>
			<method name="public transient void _init_(String name, edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$ParamInfo[] paramInfos)">0</method>
			<method name="public boolean checkArgs(java.util.List in)">10</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.ParentAnnotationStats$1</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>1.0</lcom3>
		<loc>25</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.0</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="void _init_(edu.stanford.nlp.parser.lexparser.ParentAnnotationStats)">0</method>
			<method name="public int compare(edu.stanford.nlp.util.Pair o1, edu.stanford.nlp.util.Pair o2)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.ParentAnnotationStats$3</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>21</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="void _init_()">0</method>
			<method name="public int compare(edu.stanford.nlp.util.Pair o1, edu.stanford.nlp.util.Pair o2)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.ParentAnnotationStats$2</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>1.0</lcom3>
		<loc>25</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.0</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="void _init_(edu.stanford.nlp.parser.lexparser.ParentAnnotationStats)">0</method>
			<method name="public int compare(edu.stanford.nlp.util.Pair o1, edu.stanford.nlp.util.Pair o2)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.TaggerConfig</name>
		<wmc>59</wmc>
		<dit>4</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>108</rfc>
		<lcom>1707</lcom>
		<ca>6</ca>
		<ce>5</ce>
		<npm>54</npm>
		<lcom3>1.014367816091954</lcom3>
		<loc>2217</loc>
		<dam>0.05555555555555555</dam>
		<moa>0</moa>
		<mfa>0.5423728813559322</mfa>
		<cam>0.12452107279693486</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>35.96610169491525</amc>
		<cc>
			<method name="public boolean useStdin()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public edu.stanford.nlp.tagger.maxent.TaggerConfig$Mode getMode()">2</method>
			<method name="public void _init_(java.util.Properties props)">0</method>
			<method name="private static void printGenProps(java.io.PrintStream out)">1</method>
			<method name="private void _init_()">0</method>
			<method name="private static String[] wsvStringToStringArray(String str)">3</method>
			<method name="public double getRegL1()">1</method>
			<method name="public boolean getOutputOptionsContains(String sought)">3</method>
			<method name="public void dump()">1</method>
			<method name="public static edu.stanford.nlp.tagger.maxent.TaggerConfig readConfig(java.io.DataInputStream stream)">1</method>
			<method name="public String[] getOutputOptions()">1</method>
			<method name="public boolean getOutputVerbosity()">1</method>
			<method name="public String getTagInside()">2</method>
			<method name="public void saveConfig(java.io.OutputStream os)">1</method>
			<method name="public double getDefaultScore()">3</method>
			<method name="public String getSentenceDelimiter()">3</method>
			<method name="public int getMinFeatureThresh()">1</method>
			<method name="public transient void _init_(String[] args)">0</method>
			<method name="public void setProperties(java.util.Properties props)">19</method>
			<method name="public String getOutputFile()">1</method>
			<method name="public int getVeryCommonWordThresh()">1</method>
			<method name="public String getWordFunction()">1</method>
			<method name="public String getModel()">1</method>
			<method name="public void dump(java.io.PrintStream stream)">1</method>
			<method name="public int getRareWordThresh()">1</method>
			<method name="public double getSigmaSquared()">1</method>
			<method name="public boolean getTokenizerInvertible()">5</method>
			<method name="public String getArch()">1</method>
			<method name="public boolean getDebug()">1</method>
			<method name="public int getCurWordMinFeatureThresh()">1</method>
			<method name="public boolean getLearnClosedClassTags()">1</method>
			<method name="public boolean getVerboseResults()">1</method>
			<method name="public String getEncoding()">1</method>
			<method name="public String getLang()">1</method>
			<method name="public final String getTagSeparator()">1</method>
			<method name="public String[] getXMLInput()">1</method>
			<method name="private void dump(java.io.PrintWriter pw)">5</method>
			<method name="public int getNThreads()">1</method>
			<method name="public String getDebugPrefix()">1</method>
			<method name="public String[] getOpenClassTags()">1</method>
			<method name="public String[] getClosedClassTags()">1</method>
			<method name="public boolean getVerbose()">1</method>
			<method name="public String getTokenizerFactory()">1</method>
			<method name="public static String getDefaultTagSeparator()">1</method>
			<method name="public int getIterations()">1</method>
			<method name="public String toString()">1</method>
			<method name="public String getSearch()">1</method>
			<method name="public void _init_(edu.stanford.nlp.tagger.maxent.TaggerConfig old)">0</method>
			<method name="public boolean possibleTagsOnly()">1</method>
			<method name="public int getClosedTagThreshold()">1</method>
			<method name="public boolean getSGML()">1</method>
			<method name="public int getRareWordMinFeatureThresh()">1</method>
			<method name="public String getOutputFormat()">1</method>
			<method name="public boolean getTokenize()">1</method>
			<method name="public boolean occurringTagsOnly()">1</method>
			<method name="public boolean getOutputLemmas()">1</method>
			<method name="public String getTokenizerOptions()">1</method>
			<method name="public String getFile()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.BasicCategoryTagProjection</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>1.0</lcom3>
		<loc>17</loc>
		<dam>0.5</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.5</amc>
		<cc>
			<method name="public String project(String tagStr)">1</method>
			<method name="public void _init_(edu.stanford.nlp.trees.TreebankLanguagePack tlp)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Heap</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>7</rfc>
		<lcom>21</lcom>
		<ca>3</ca>
		<ce>0</ce>
		<npm>7</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6428571428571429</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract int size()">1</method>
			<method name="public abstract Object min()">1</method>
			<method name="public abstract int decreaseKey(Object)">1</method>
			<method name="public abstract Object extractMin()">1</method>
			<method name="public abstract java.util.Iterator iterator()">1</method>
			<method name="public abstract boolean isEmpty()">1</method>
			<method name="public abstract boolean add(Object)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.GenericTimeExpressionPatterns$MatchedExpressionValueTypeMatchNodePattern</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>7</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>32</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.333333333333334</amc>
		<cc>
			<method name="public void _init_(String valueType)">0</method>
			<method name="public volatile boolean match(Object x0)">1</method>
			<method name="public boolean match(edu.stanford.nlp.ling.tokensregex.MatchedExpression me)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.metrics.Eval</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>5</rfc>
		<lcom>10</lcom>
		<ca>3</ca>
		<ce>1</ce>
		<npm>5</npm>
		<lcom3>2.0</lcom3>
		<loc>5</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.56</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract void display(boolean)">1</method>
			<method name="public abstract void evaluate(edu.stanford.nlp.trees.Tree, edu.stanford.nlp.trees.Tree, java.io.PrintWriter, double)">1</method>
			<method name="public abstract void display(boolean, java.io.PrintWriter)">1</method>
			<method name="public abstract void evaluate(edu.stanford.nlp.trees.Tree, edu.stanford.nlp.trees.Tree)">1</method>
			<method name="public abstract void evaluate(edu.stanford.nlp.trees.Tree, edu.stanford.nlp.trees.Tree, java.io.PrintWriter)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.sequences.SequenceGibbsSampler</name>
		<wmc>24</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>14</cbo>
		<rfc>83</rfc>
		<lcom>232</lcom>
		<ca>2</ca>
		<ce>13</ce>
		<npm>21</npm>
		<lcom3>0.7853260869565217</lcom3>
		<loc>931</loc>
		<dam>0.75</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.2809364548494983</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>37.125</amc>
		<cc>
			<method name="public double sampleSequenceForward(edu.stanford.nlp.sequences.SequenceModel model, int[] sequence, double temperature, java.util.Set onlySampleThesePositions)">10</method>
			<method name="public double sampleSequenceRepeatedly(edu.stanford.nlp.sequences.SequenceModel model, int numSamples)">1</method>
			<method name="public double sampleSequenceBackward(edu.stanford.nlp.sequences.SequenceModel model, int[] sequence)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public java.util.List collectSamples(edu.stanford.nlp.sequences.SequenceModel model, int numSamples, int sampleInterval)">1</method>
			<method name="public double sampleSequenceRepeatedly(edu.stanford.nlp.sequences.SequenceModel model, int[] sequence, int numSamples)">2</method>
			<method name="public void _init_(int numSamples, int sampleInterval, edu.stanford.nlp.sequences.SequenceListener listener, int samplingStyle, int chromaticSize, java.util.List partition, int speedUpThreshold, edu.stanford.nlp.ie.EmpiricalNERPriorBIO priorEn, edu.stanford.nlp.ie.EmpiricalNERPriorBIO priorCh)">0</method>
			<method name="public int[] findBestUsingSampling(edu.stanford.nlp.sequences.SequenceModel model, int numSamples, int sampleInterval, int[] initialSequence)">3</method>
			<method name="public int[] findBestUsingAnnealing(edu.stanford.nlp.sequences.SequenceModel model, edu.stanford.nlp.sequences.CoolingSchedule schedule)">1</method>
			<method name="public void _init_(int numSamples, int sampleInterval, edu.stanford.nlp.sequences.SequenceListener listener, java.util.List document)">0</method>
			<method name="public void _init_(int numSamples, int sampleInterval, edu.stanford.nlp.sequences.SequenceListener listener, java.util.List document, boolean returnLastFoundSequence, int samplingStyle, int chromaticSize, java.util.List partition, int speedUpThreshold, edu.stanford.nlp.ie.EmpiricalNERPriorBIO priorEn, edu.stanford.nlp.ie.EmpiricalNERPriorBIO priorCh)">0</method>
			<method name="public static int[] copy(int[] a)">1</method>
			<method name="public java.util.List collectSamples(edu.stanford.nlp.sequences.SequenceModel model, int numSamples, int sampleInterval, int[] initialSequence)">6</method>
			<method name="public void printSamples(java.util.List samples, java.io.PrintStream out)">4</method>
			<method name="static edu.stanford.nlp.util.Pair access$000(edu.stanford.nlp.sequences.SequenceGibbsSampler x0, edu.stanford.nlp.sequences.SequenceModel x1, int[] x2, int x3, double x4)">1</method>
			<method name="private edu.stanford.nlp.util.Pair samplePositionHelper(edu.stanford.nlp.sequences.SequenceModel model, int[] sequence, int pos, double temperature)">3</method>
			<method name="public double samplePosition(edu.stanford.nlp.sequences.SequenceModel model, int[] sequence, int pos)">1</method>
			<method name="public double sampleSequenceBackward(edu.stanford.nlp.sequences.SequenceModel model, int[] sequence, double temperature)">2</method>
			<method name="public int[] bestSequence(edu.stanford.nlp.sequences.SequenceModel model)">1</method>
			<method name="public double samplePosition(edu.stanford.nlp.sequences.SequenceModel model, int[] sequence, int pos, double temperature)">1</method>
			<method name="public int[] findBestUsingAnnealing(edu.stanford.nlp.sequences.SequenceModel model, edu.stanford.nlp.sequences.CoolingSchedule schedule, int[] initialSequence)">14</method>
			<method name="public void _init_(int numSamples, int sampleInterval, edu.stanford.nlp.sequences.SequenceListener listener)">0</method>
			<method name="public double sampleSequenceForward(edu.stanford.nlp.sequences.SequenceModel model, int[] sequence)">1</method>
			<method name="public static int[] getRandomSequence(edu.stanford.nlp.sequences.SequenceModel model)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.io.TextTaggedFileReader</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>31</rfc>
		<lcom>16</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>7</npm>
		<lcom3>0.5142857142857142</lcom3>
		<loc>185</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>21.5</amc>
		<cc>
			<method name="void primeNext()">4</method>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="public java.util.List next()">2</method>
			<method name="public boolean hasNext()">2</method>
			<method name="public String filename()">1</method>
			<method name="public void remove()">1</method>
			<method name="public volatile Object next()">1</method>
			<method name="public void _init_(edu.stanford.nlp.tagger.io.TaggedFileRecord record)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalRelations$NominalSubjectGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEventMention</name>
		<wmc>12</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>31</rfc>
		<lcom>14</lcom>
		<ca>5</ca>
		<ce>6</ce>
		<npm>12</npm>
		<lcom3>0.6363636363636364</lcom3>
		<loc>178</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.31666666666666665</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.583333333333334</amc>
		<cc>
			<method name="public edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEvent getParent()">1</method>
			<method name="public edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceCharSeq getAnchor()">1</method>
			<method name="public java.util.Set getRoles()">1</method>
			<method name="public java.util.Collection getArgs()">1</method>
			<method name="public void setAnchor(edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceCharSeq anchor)">1</method>
			<method name="public void setParent(edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEvent e)">1</method>
			<method name="public edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEntityMention getArg(String role)">1</method>
			<method name="public void addArg(edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEntityMention em, String role)">1</method>
			<method name="public String toString()">1</method>
			<method name="public int getMaxTokenEnd()">4</method>
			<method name="public int getMinTokenStart()">4</method>
			<method name="public void _init_(String id, edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceCharSeq extent, edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceCharSeq anchor)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.Tree</name>
		<wmc>148</wmc>
		<dit>2</dit>
		<noc>3</noc>
		<cbo>376</cbo>
		<rfc>261</rfc>
		<lcom>10872</lcom>
		<ca>348</ca>
		<ce>33</ce>
		<npm>127</npm>
		<lcom3>1.0</lcom3>
		<loc>4042</loc>
		<dam>0.6</dam>
		<moa>1</moa>
		<mfa>0.09876543209876543</mfa>
		<cam>0.07936507936507936</cam>
		<ic>1</ic>
		<cbm>5</cbm>
		<amc>26.277027027027028</amc>
		<cc>
			<method name="public void indexLeaves()">1</method>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private int constituents(java.util.Set constituentsSet, int left, edu.stanford.nlp.trees.ConstituentFactory cf, boolean charLevel, edu.stanford.nlp.util.Filter filter)">6</method>
			<method name="public int numChildren()">1</method>
			<method name="public java.util.ArrayList yield()">1</method>
			<method name="public java.util.Set subTrees()">1</method>
			<method name="public java.util.Set dependencies(edu.stanford.nlp.util.Filter f, boolean isConcrete, boolean copyLabel, boolean copyPosTag)">16</method>
			<method name="public java.util.ArrayList yieldHasWord()">1</method>
			<method name="public edu.stanford.nlp.trees.Tree deepCopy(edu.stanford.nlp.trees.TreeFactory tf, edu.stanford.nlp.ling.LabelFactory lf)">3</method>
			<method name="public String nodeString()">2</method>
			<method name="public edu.stanford.nlp.trees.Tree upperMostUnary(edu.stanford.nlp.trees.Tree root)">3</method>
			<method name="private static String makeIndentString(int indent)">2</method>
			<method name="public edu.stanford.nlp.trees.Tree setChild(int i, edu.stanford.nlp.trees.Tree t)">1</method>
			<method name="public java.util.List preOrderNodeList()">1</method>
			<method name="private boolean rightCharEdge(edu.stanford.nlp.trees.Tree node, edu.stanford.nlp.util.MutableInteger i)">5</method>
			<method name="public edu.stanford.nlp.util.IntPair getSpan()">3</method>
			<method name="public edu.stanford.nlp.trees.Tree deepCopy()">1</method>
			<method name="public edu.stanford.nlp.trees.Tree prune(edu.stanford.nlp.util.Filter filter, edu.stanford.nlp.trees.TreeFactory tf)">7</method>
			<method name="public void indexLeaves(boolean overWrite)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void percolateHeads(edu.stanford.nlp.trees.HeadFinder hf)">14</method>
			<method name="public void printLocalTree(java.io.PrintWriter pw)">2</method>
			<method name="public void percolateHeadIndices()">7</method>
			<method name="public boolean isPhrasal()">5</method>
			<method name="public java.util.ArrayList yieldHasWord(java.util.ArrayList y)">6</method>
			<method name="public edu.stanford.nlp.trees.Tree flatten()">1</method>
			<method name="public java.util.Set constituents()">1</method>
			<method name="private boolean nodeNumberHelper(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.util.MutableInteger i)">4</method>
			<method name="public void indentedXMLPrint(java.io.PrintWriter pw, boolean printScores)">1</method>
			<method name="public java.util.Set mapDependencies(edu.stanford.nlp.util.Filter f, edu.stanford.nlp.trees.HeadFinder hf, String rootName)">2</method>
			<method name="public void setFromString(String labelStr)">2</method>
			<method name="public void setChildren(edu.stanford.nlp.trees.Tree[] children)">1</method>
			<method name="public java.util.Set dependencies(edu.stanford.nlp.util.Filter f)">1</method>
			<method name="public java.util.List labeledYield()">1</method>
			<method name="public java.util.List getLeaves(java.util.List list)">3</method>
			<method name="public java.util.List dominationPath(edu.stanford.nlp.trees.Tree t)">2</method>
			<method name="public edu.stanford.nlp.trees.Tree spliceOut(edu.stanford.nlp.util.Filter nodeFilter, edu.stanford.nlp.trees.TreeFactory tf)">3</method>
			<method name="public java.util.Set constituents(edu.stanford.nlp.trees.ConstituentFactory cf, boolean charLevel)">1</method>
			<method name="private edu.stanford.nlp.trees.Tree getNodeNumberHelper(edu.stanford.nlp.util.MutableInteger i, int target)">5</method>
			<method name="private int constituentsNodes(int left)">5</method>
			<method name="private void indentedListPrint(String indent, String pad, java.io.PrintWriter pw, boolean printScores)">4</method>
			<method name="public java.util.List subTreeList()">1</method>
			<method name="public edu.stanford.nlp.trees.Tree headTerminal(edu.stanford.nlp.trees.HeadFinder hf)">1</method>
			<method name="public static edu.stanford.nlp.trees.Tree valueOf(String str)">1</method>
			<method name="public java.util.List yield(java.util.List y)">4</method>
			<method name="public edu.stanford.nlp.trees.Tree prune(edu.stanford.nlp.util.Filter filter)">1</method>
			<method name="public int rightCharEdge(edu.stanford.nlp.trees.Tree node)">3</method>
			<method name="public void pennPrint(java.io.PrintStream ps)">1</method>
			<method name="public java.util.Set constituents(edu.stanford.nlp.trees.ConstituentFactory cf)">1</method>
			<method name="public int leftCharEdge(edu.stanford.nlp.trees.Tree node)">2</method>
			<method name="private static void preOrderRecurse(edu.stanford.nlp.trees.Tree t, java.util.List nodes)">2</method>
			<method name="private java.util.List spliceOutHelper(edu.stanford.nlp.util.Filter nodeFilter, edu.stanford.nlp.trees.TreeFactory tf)">4</method>
			<method name="public void addChild(int i, edu.stanford.nlp.trees.Tree t)">3</method>
			<method name="public void setScore(double score)">1</method>
			<method name="public void setSpans()">1</method>
			<method name="public edu.stanford.nlp.trees.Tree joinNode(edu.stanford.nlp.trees.Tree t1, edu.stanford.nlp.trees.Tree t2)">10</method>
			<method name="private edu.stanford.nlp.trees.Tree[] dominationPath(edu.stanford.nlp.trees.Tree t, int depth)">2</method>
			<method name="public boolean isPrePreTerminal()">4</method>
			<method name="public int depth(edu.stanford.nlp.trees.Tree node)">4</method>
			<method name="public int nodeNumber(edu.stanford.nlp.trees.Tree root)">2</method>
			<method name="public java.util.Set constituents(edu.stanford.nlp.trees.ConstituentFactory cf, boolean charLevel, edu.stanford.nlp.util.Filter filter)">1</method>
			<method name="public void setLabel(edu.stanford.nlp.ling.Label label)">1</method>
			<method name="public String value()">2</method>
			<method name="public edu.stanford.nlp.trees.Tree firstChild()">2</method>
			<method name="public String pennString()">1</method>
			<method name="private static void displayChildren(edu.stanford.nlp.trees.Tree[] trChildren, int indent, boolean parentLabelNull, boolean onlyLabelValue, java.io.PrintWriter pw)">4</method>
			<method name="public edu.stanford.nlp.trees.Tree getChild(int i)">1</method>
			<method name="public abstract edu.stanford.nlp.trees.Tree[] children()">1</method>
			<method name="public void pennPrint(java.io.PrintWriter pw, boolean printOnlyLabelValue)">1</method>
			<method name="public java.util.ArrayList yield(java.util.ArrayList y)">3</method>
			<method name="public java.util.ArrayList yieldWords(java.util.ArrayList y)">3</method>
			<method name="private int indexLeaves(int startIndex, boolean overWrite)">6</method>
			<method name="public int hashCode()">4</method>
			<method name="public void indentedXMLPrint()">1</method>
			<method name="public java.util.List taggedLabeledYield()">1</method>
			<method name="public void indentedListPrint(java.io.PrintWriter pw, boolean printScores)">1</method>
			<method name="public void pennPrint(java.io.PrintStream ps, boolean printOnlyLabelValue)">1</method>
			<method name="public edu.stanford.nlp.trees.Tree parent()">1</method>
			<method name="public java.util.ArrayList yieldWords()">1</method>
			<method name="public static edu.stanford.nlp.trees.Tree valueOf(String str, edu.stanford.nlp.trees.TreeReaderFactory trf)">1</method>
			<method name="public boolean equals(Object o)">11</method>
			<method name="public java.util.List getChildrenAsList()">1</method>
			<method name="public edu.stanford.nlp.trees.Tree headTerminal(edu.stanford.nlp.trees.HeadFinder hf, edu.stanford.nlp.trees.Tree parent)">3</method>
			<method name="public void setValue(String value)">2</method>
			<method name="public abstract edu.stanford.nlp.trees.TreeFactory treeFactory()">1</method>
			<method name="public java.util.List labeledYield(java.util.List ty)">4</method>
			<method name="public edu.stanford.nlp.util.Pair indexSpans(edu.stanford.nlp.util.MutableInteger startIndex)">6</method>
			<method name="private boolean leftCharEdge(edu.stanford.nlp.trees.Tree node, edu.stanford.nlp.util.MutableInteger i)">5</method>
			<method name="private static edu.stanford.nlp.ling.Label makeDependencyLabel(edu.stanford.nlp.ling.Label oldLabel, boolean copyLabel, boolean copyIndex, boolean copyPosTag)">10</method>
			<method name="public edu.stanford.nlp.trees.Tree ancestor(int height, edu.stanford.nlp.trees.Tree root)">4</method>
			<method name="public int size()">2</method>
			<method name="public void setChildren(java.util.List childTreesList)">3</method>
			<method name="public edu.stanford.nlp.trees.Tree treeSkeletonCopy()">1</method>
			<method name="public java.util.Collection labels()">2</method>
			<method name="public edu.stanford.nlp.trees.Tree flatten(edu.stanford.nlp.trees.TreeFactory tf)">7</method>
			<method name="private void display(int indent, boolean parentLabelNull, boolean firstSibling, boolean leftSiblingPreTerminal, boolean topLevel, boolean onlyLabelValue, java.io.PrintWriter pw)">16</method>
			<method name="public java.util.List preTerminalYield(java.util.List y)">3</method>
			<method name="public void indexSpans(int startIndex)">1</method>
			<method name="public void setLabels(java.util.Collection c)">1</method>
			<method name="public boolean dominates(edu.stanford.nlp.trees.Tree t)">3</method>
			<method name="public boolean cCommands(edu.stanford.nlp.trees.Tree t1, edu.stanford.nlp.trees.Tree t2)">4</method>
			<method name="public void printLocalTree()">1</method>
			<method name="public int objectIndexOf(edu.stanford.nlp.trees.Tree tree)">3</method>
			<method name="public StringBuilder toStringBuilder(StringBuilder sb)">1</method>
			<method name="public edu.stanford.nlp.trees.Tree transform(edu.stanford.nlp.trees.TreeTransformer transformer)">1</method>
			<method name="public edu.stanford.nlp.trees.Tree spliceOut(edu.stanford.nlp.util.Filter nodeFilter)">1</method>
			<method name="private edu.stanford.nlp.trees.Tree[] dominationPathHelper(edu.stanford.nlp.trees.Tree t, int depth)">4</method>
			<method name="public java.util.Collection subTrees(java.util.Collection n)">2</method>
			<method name="private void indentedXMLPrint(String indent, String pad, java.io.PrintWriter pw, boolean printScores)">7</method>
			<method name="public java.util.List taggedYield(java.util.List ty)">4</method>
			<method name="public edu.stanford.nlp.ling.LabelFactory labelFactory()">2</method>
			<method name="public edu.stanford.nlp.trees.Tree headPreTerminal(edu.stanford.nlp.trees.HeadFinder hf)">4</method>
			<method name="public edu.stanford.nlp.trees.Tree transform(edu.stanford.nlp.trees.TreeTransformer transformer, edu.stanford.nlp.trees.TreeFactory tf)">3</method>
			<method name="private static void postOrderRecurse(edu.stanford.nlp.trees.Tree t, java.util.List nodes)">2</method>
			<method name="public java.util.List postOrderNodeList()">1</method>
			<method name="public edu.stanford.nlp.ling.Label label()">1</method>
			<method name="public edu.stanford.nlp.trees.Tree getNodeNumber(int i)">1</method>
			<method name="public edu.stanford.nlp.trees.Tree removeChild(int i)">3</method>
			<method name="public edu.stanford.nlp.trees.Tree treeSkeletonCopy(edu.stanford.nlp.trees.TreeFactory tf)">3</method>
			<method name="public void indentedListPrint()">1</method>
			<method name="public void indexSpans()">1</method>
			<method name="public java.util.List siblings(edu.stanford.nlp.trees.Tree root)">2</method>
			<method name="public edu.stanford.nlp.trees.Tree lastChild()">2</method>
			<method name="public int depth()">4</method>
			<method name="public java.util.List preTerminalYield()">1</method>
			<method name="public double score()">1</method>
			<method name="public edu.stanford.nlp.trees.Tree localTree()">2</method>
			<method name="public boolean isUnaryRewrite()">2</method>
			<method name="public void pennPrint(java.io.PrintWriter pw)">1</method>
			<method name="public edu.stanford.nlp.trees.Tree skipRoot()">5</method>
			<method name="public void addChild(edu.stanford.nlp.trees.Tree t)">1</method>
			<method name="public String toString()">1</method>
			<method name="public StringBuilder toStringBuilder(StringBuilder sb, boolean printOnlyLabelValue)">9</method>
			<method name="public java.util.Set dependencies()">1</method>
			<method name="public java.util.ArrayList taggedYield()">1</method>
			<method name="public void insertDtr(edu.stanford.nlp.trees.Tree dtr, int position)">4</method>
			<method name="public java.util.Set localTrees()">2</method>
			<method name="public void pennPrint()">1</method>
			<method name="public boolean isPreTerminal()">3</method>
			<method name="private static edu.stanford.nlp.trees.Tree parentHelper(edu.stanford.nlp.trees.Tree parent, edu.stanford.nlp.trees.Tree[] kids, edu.stanford.nlp.trees.Tree node)">4</method>
			<method name="public edu.stanford.nlp.trees.Tree deepCopy(edu.stanford.nlp.trees.TreeFactory tf)">1</method>
			<method name="public java.util.Set mapDependencies(edu.stanford.nlp.util.Filter f, edu.stanford.nlp.trees.HeadFinder hf)">9</method>
			<method name="public boolean isLeaf()">2</method>
			<method name="private int taggedLabeledYield(java.util.List ty, int termIdx)">4</method>
			<method name="public java.util.List getLeaves()">1</method>
			<method name="public edu.stanford.nlp.trees.Tree parent(edu.stanford.nlp.trees.Tree root)">1</method>
			<method name="public java.util.List pathNodeToNode(edu.stanford.nlp.trees.Tree t1, edu.stanford.nlp.trees.Tree t2)">9</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.EnglishUnknownWordModelTrainer</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>20</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>10</ce>
		<npm>4</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>189</loc>
		<dam>0.2</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.39285714285714285</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>45.0</amc>
		<cc>
			<method name="public void train(edu.stanford.nlp.ling.TaggedWord tw, int loc, double weight)">3</method>
			<method name="public void _init_()">0</method>
			<method name="public edu.stanford.nlp.parser.lexparser.UnknownWordModel finishTraining()">4</method>
			<method name="public void initializeTraining(edu.stanford.nlp.parser.lexparser.Options op, edu.stanford.nlp.parser.lexparser.Lexicon lex, edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex, double totalTrees)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$MarkingAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.Requirement</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>12</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>77</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>37.0</amc>
		<cc>
			<method name="public String getMissingRequirement(java.util.Set alreadyAdded)">3</method>
			<method name="public transient void _init_(String[] disjunctions)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.JodaTimeUtils$10</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>8</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>3</npm>
		<lcom3>1.3333333333333333</lcom3>
		<loc>21</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.0</amc>
		<cc>
			<method name="public org.joda.time.DateTimeField getField(org.joda.time.Chronology chronology)">1</method>
			<method name="public org.joda.time.DurationFieldType getRangeDurationType()">1</method>
			<method name="public org.joda.time.DurationFieldType getDurationType()">1</method>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.TreeGraphNode$TreeFactoryHolder</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>1.0</lcom3>
		<loc>11</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.0</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.JodaTimeUtils$11</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>8</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>3</npm>
		<lcom3>1.3333333333333333</lcom3>
		<loc>21</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.0</amc>
		<cc>
			<method name="public org.joda.time.DateTimeField getField(org.joda.time.Chronology chronology)">1</method>
			<method name="public org.joda.time.DurationFieldType getRangeDurationType()">1</method>
			<method name="public org.joda.time.DurationFieldType getDurationType()">1</method>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.BiLexPCFGParser$N5BiLexPCFGParser</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>16</cbo>
		<rfc>10</rfc>
		<lcom>3</lcom>
		<ca>2</ca>
		<ce>14</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>101</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>32.666666666666664</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.parser.lexparser.Scorer scorer, edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser fscorer, edu.stanford.nlp.parser.lexparser.ExhaustiveDependencyParser leach, edu.stanford.nlp.parser.lexparser.BinaryGrammar bg, edu.stanford.nlp.parser.lexparser.UnaryGrammar ug, edu.stanford.nlp.parser.lexparser.DependencyGrammar dg, edu.stanford.nlp.parser.lexparser.Lexicon lex, edu.stanford.nlp.parser.lexparser.Options op, edu.stanford.nlp.util.Index stateIndex, edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex)">0</method>
			<method name="void _init_(edu.stanford.nlp.parser.lexparser.Scorer scorer, edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser fscorer, edu.stanford.nlp.parser.lexparser.ExhaustiveDependencyParser leach, edu.stanford.nlp.parser.lexparser.BinaryGrammar bg, edu.stanford.nlp.parser.lexparser.UnaryGrammar ug, edu.stanford.nlp.parser.lexparser.DependencyGrammar dg, edu.stanford.nlp.parser.lexparser.Lexicon lex, edu.stanford.nlp.parser.lexparser.Options op, edu.stanford.nlp.parser.lexparser.GrammarProjection proj, edu.stanford.nlp.util.Index stateIndex, edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex)">0</method>
			<method name="protected void relaxTempHook()">4</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.ParentAnnotationStats$4</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>21</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="void _init_()">0</method>
			<method name="public int compare(edu.stanford.nlp.util.Pair o1, edu.stanford.nlp.util.Pair o2)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.Expressions$AndExpression</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>8</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.0</amc>
		<cc>
			<method name="public void _init_(java.util.List children)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.ParentAnnotationStats$5</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>7</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>9</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>19</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.5</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="public edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader in)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.AbstractTreebankParserParams$SubcategoryStripper</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>21</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>9</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>104</loc>
		<dam>0.5</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>50.0</amc>
		<cc>
			<method name="protected void _init_(edu.stanford.nlp.parser.lexparser.AbstractTreebankParserParams)">0</method>
			<method name="public edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree tree)">4</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.DeltaMap$1$1NullingIterator</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>12</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>5</npm>
		<lcom3>0.625</lcom3>
		<loc>47</loc>
		<dam>0.5</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4666666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.0</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.util.DeltaMap$1, java.util.Iterator i)">0</method>
			<method name="public boolean hasNext()">1</method>
			<method name="public void remove()">1</method>
			<method name="public java.util.Map$Entry next()">2</method>
			<method name="public volatile Object next()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.ParsingThreadsafeProcessor</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>9</rfc>
		<lcom>8</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>0.25</lcom3>
		<loc>48</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.2</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.parser.lexparser.LexicalizedParser pqFactory, java.io.PrintWriter pwErr)">0</method>
			<method name="void _init_(edu.stanford.nlp.parser.lexparser.LexicalizedParser pqFactory)">0</method>
			<method name="public edu.stanford.nlp.util.concurrent.ThreadsafeProcessor newInstance()">1</method>
			<method name="public volatile Object process(Object x0)">1</method>
			<method name="public edu.stanford.nlp.parser.lexparser.ParserQuery process(java.util.List sentence)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalRelations$ObjectGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.Expressions$FieldExpression</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>42</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.8333333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>20.0</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.types.Expression expr, String field)">0</method>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.types.Expression expr, edu.stanford.nlp.ling.tokensregex.types.Expression field)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$OriginalAnswerAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$AfterAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.LabeledConstituent$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>4</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.JodaTimeUtils</name>
		<wmc>42</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>47</cbo>
		<rfc>148</rfc>
		<lcom>829</lcom>
		<ca>28</ca>
		<ce>30</ce>
		<npm>27</npm>
		<lcom3>0.960088691796009</lcom3>
		<loc>2934</loc>
		<dam>0.22727272727272727</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.10975609756097561</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>68.33333333333333</amc>
		<cc>
			<method name="public static String timexDurationValue(org.joda.time.ReadablePeriod duration)">1</method>
			<method name="private static boolean consistentWithForced(String cand, String[] forcedList)">10</method>
			<method name="public static String timexDurationValue(org.joda.time.ReadableDateTime begin, org.joda.time.ReadableDateTime end)">1</method>
			<method name="public static boolean isMoreSpecific(org.joda.time.DateTimeFieldType df1, org.joda.time.DateTimeFieldType df2, org.joda.time.Chronology chronology)">4</method>
			<method name="public static boolean isMoreGeneral(org.joda.time.DateTimeFieldType df1, org.joda.time.DateTimeFieldType df2, org.joda.time.Chronology chronology)">4</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static org.joda.time.Partial resolveDowToDay(org.joda.time.Partial p1, org.joda.time.Partial p2)">7</method>
			<method name="public static java.util.Set getSupportedDurationFields(org.joda.time.Partial p)">2</method>
			<method name="protected static org.joda.time.Period getJodaTimePeriod(org.joda.time.Partial p)">4</method>
			<method name="public static org.joda.time.Partial discardMoreSpecificFields(org.joda.time.Partial p, org.joda.time.DateTimeFieldType d)">7</method>
			<method name="public static org.joda.time.Period discardMoreSpecificFields(org.joda.time.Period p, org.joda.time.DurationFieldType dft, org.joda.time.Chronology chronology)">3</method>
			<method name="protected static boolean hasField(org.joda.time.ReadablePeriod base, org.joda.time.DurationFieldType field)">2</method>
			<method name="public static org.joda.time.Partial addForce(org.joda.time.Partial p, org.joda.time.Period d, int scalar)">1</method>
			<method name="private void _init_()">0</method>
			<method name="public static String timexDateValue(org.joda.time.ReadableDateTime begin, org.joda.time.ReadableDateTime end)">1</method>
			<method name="public static org.joda.time.Period getUnsupportedDurationPeriod(org.joda.time.Partial p, org.joda.time.Period offset)">6</method>
			<method name="public static boolean isCompatible(org.joda.time.Partial p1, org.joda.time.Partial p2)">6</method>
			<method name="protected static org.joda.time.Partial setField(org.joda.time.Partial base, org.joda.time.DateTimeFieldType field, int value)">2</method>
			<method name="public static String timexTimeValue(org.joda.time.ReadableDateTime time)">1</method>
			<method name="public static int maximumValue(org.joda.time.DateTimeFieldType type, org.joda.time.ReadableDateTime reference)">1</method>
			<method name="public static int minimumValue(org.joda.time.DateTimeFieldType type, org.joda.time.ReadableDateTime reference)">1</method>
			<method name="public static org.joda.time.Partial combine(org.joda.time.Partial p1, org.joda.time.Partial p2)">27</method>
			<method name="public static org.joda.time.Partial resolveWeek(org.joda.time.Partial p1, org.joda.time.Partial p2)">6</method>
			<method name="public static org.joda.time.Partial combineMoreGeneralFields(org.joda.time.Partial p1, org.joda.time.Partial p2)">1</method>
			<method name="public static String timexDurationValue(org.joda.time.ReadablePeriod duration, edu.stanford.nlp.time.JodaTimeUtils$ConversionOptions opts)">31</method>
			<method name="public static String timexDateValue(org.joda.time.ReadableDateTime begin, org.joda.time.ReadableDateTime end, edu.stanford.nlp.time.JodaTimeUtils$ConversionOptions opts)">60</method>
			<method name="public static org.joda.time.Partial resolveDowToDay(org.joda.time.Partial p)">5</method>
			<method name="public static org.joda.time.Partial resolveWeek(org.joda.time.Partial p)">4</method>
			<method name="private static boolean noFurtherFields(org.joda.time.DateTimeFieldType smallestFieldSet, org.joda.time.ReadableDateTime begin, org.joda.time.ReadableDateTime end)">13</method>
			<method name="protected static org.joda.time.DurationFieldType getMostSpecific(org.joda.time.Period p)">3</method>
			<method name="public static org.joda.time.Partial discardMoreSpecificFields(org.joda.time.Partial p, org.joda.time.DurationFieldType dft)">3</method>
			<method name="public static org.joda.time.Instant getInstant(org.joda.time.Partial p)">15</method>
			<method name="public static org.joda.time.Partial padMoreSpecificFields(org.joda.time.Partial p, org.joda.time.Period granularity)">17</method>
			<method name="protected static org.joda.time.DateTimeFieldType getMostSpecific(org.joda.time.Partial p)">2</method>
			<method name="protected static boolean hasYYYYMMDD(org.joda.time.ReadablePartial base)">5</method>
			<method name="protected static boolean hasField(org.joda.time.ReadablePartial base, org.joda.time.DateTimeFieldType field)">2</method>
			<method name="protected static org.joda.time.DateTimeFieldType getMostGeneral(org.joda.time.Partial p)">2</method>
			<method name="public static org.joda.time.Partial combineMoreGeneralFields(org.joda.time.Partial p1, org.joda.time.Partial p2, org.joda.time.DateTimeFieldType mgf)">20</method>
			<method name="protected static boolean hasYYMMDD(org.joda.time.ReadablePartial base)">5</method>
			<method name="public static org.joda.time.Partial getPartial(org.joda.time.Instant t, org.joda.time.Partial p)">2</method>
			<method name="protected static org.joda.time.DurationFieldType getMostGeneral(org.joda.time.Period p)">3</method>
			<method name="private static String zeroPad(int value, int padding)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.classify.LogPrior$LogPriorType</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>13</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>12</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.9583333333333334</lcom3>
		<loc>100</loc>
		<dam>0.125</dam>
		<moa>8</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>22.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="public static edu.stanford.nlp.classify.LogPrior$LogPriorType valueOf(String name)">1</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static edu.stanford.nlp.classify.LogPrior$LogPriorType[] values()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.Parser</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract boolean parse(java.util.List)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.RedwoodConfiguration</name>
		<wmc>19</wmc>
		<dit>1</dit>
		<noc>1</noc>
		<cbo>32</cbo>
		<rfc>63</rfc>
		<lcom>93</lcom>
		<ca>21</ca>
		<ce>20</ce>
		<npm>13</npm>
		<lcom3>0.5416666666666666</lcom3>
		<loc>505</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.15789473684210525</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>25.36842105263158</amc>
		<cc>
			<method name="public transient edu.stanford.nlp.util.logging.RedwoodConfiguration handlers(edu.stanford.nlp.util.logging.RedwoodConfiguration$Thunk[] paths)">2</method>
			<method name="public static edu.stanford.nlp.util.logging.RedwoodConfiguration current()">1</method>
			<method name="public edu.stanford.nlp.util.logging.RedwoodConfiguration output(String method)">6</method>
			<method name="static int access$000(edu.stanford.nlp.util.logging.RedwoodConfiguration x0)">1</method>
			<method name="public static void apply(java.util.Properties props)">1</method>
			<method name="public edu.stanford.nlp.util.logging.RedwoodConfiguration restore(java.io.OutputStream stream)">3</method>
			<method name="public static edu.stanford.nlp.util.logging.RedwoodConfiguration standard()">1</method>
			<method name="public edu.stanford.nlp.util.logging.RedwoodConfiguration clear()">1</method>
			<method name="public edu.stanford.nlp.util.logging.RedwoodConfiguration channelWidth(int width)">1</method>
			<method name="public void apply()">2</method>
			<method name="public static edu.stanford.nlp.util.logging.RedwoodConfiguration parse(java.util.Properties props)">11</method>
			<method name="private static String get(java.util.Properties p, String key, String defaultValue, java.util.Set used)">2</method>
			<method name="public edu.stanford.nlp.util.logging.RedwoodConfiguration capture(java.io.OutputStream stream)">3</method>
			<method name="public static edu.stanford.nlp.util.logging.RedwoodConfiguration empty()">1</method>
			<method name="static edu.stanford.nlp.util.logging.OutputHandler access$200(edu.stanford.nlp.util.logging.RedwoodConfiguration x0)">1</method>
			<method name="static int access$002(edu.stanford.nlp.util.logging.RedwoodConfiguration x0, int x1)">1</method>
			<method name="protected void _init_()">0</method>
			<method name="public edu.stanford.nlp.util.logging.RedwoodConfiguration neatExit()">1</method>
			<method name="static java.io.File access$100(edu.stanford.nlp.util.logging.RedwoodConfiguration x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalRelations$ParataxisGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.ViterbiParserWithOptions</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public transient abstract void setOptionFlags(String[])">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$D2_LBeginAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$11$1</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>10</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>78</loc>
		<dam>0.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>24.0</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.trees.tregex.Relation$11, edu.stanford.nlp.trees.Tree, edu.stanford.nlp.trees.tregex.TregexMatcher)">0</method>
			<method name="public void advance()">2</method>
			<method name="void initialize()">5</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequencePattern$RepeatState</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>19</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>201</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.9</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>97.5</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.SequencePattern$State start, int minMatch, int maxMatch, boolean greedyMatch)">0</method>
			<method name="protected boolean match(int bid, edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates matchedStates, boolean consume, edu.stanford.nlp.ling.tokensregex.SequencePattern$State prevState)">15</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$CompareFunction</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>23</rfc>
		<lcom>2</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>5</npm>
		<lcom3>0.5</lcom3>
		<loc>221</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.325</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>42.6</amc>
		<cc>
			<method name="public String getParamDesc()">1</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.Env env, java.util.List in)">7</method>
			<method name="public void _init_(String name, java.util.Comparator comparator, edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$CompareType compType, Class clazz)">0</method>
			<method name="public Boolean compare(Object o1, Object o2)">8</method>
			<method name="public boolean checkArgs(java.util.List in)">9</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalStructure$ExtraTreeDepFilter</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>6</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>2</npm>
		<lcom3>1.3333333333333333</lcom3>
		<loc>26</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.25</amc>
		<cc>
			<method name="public boolean accept(edu.stanford.nlp.trees.TypedDependency d)">3</method>
			<method name="private void _init_()">0</method>
			<method name="void _init_(edu.stanford.nlp.trees.EnglishGrammaticalStructure$1 x0)">0</method>
			<method name="public volatile boolean accept(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.AbstractTreebankParserParams$RemoveGFSubcategoryStripper</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>22</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>9</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>116</loc>
		<dam>0.5</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>56.0</amc>
		<cc>
			<method name="protected void _init_(edu.stanford.nlp.parser.lexparser.AbstractTreebankParserParams)">0</method>
			<method name="public edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree tree)">4</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.ValueLabel</name>
		<wmc>10</wmc>
		<dit>1</dit>
		<noc>1</noc>
		<cbo>3</cbo>
		<rfc>16</rfc>
		<lcom>45</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>9</npm>
		<lcom3>1.1111111111111112</lcom3>
		<loc>74</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.375</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>6.3</amc>
		<cc>
			<method name="public volatile int compareTo(Object x0)">1</method>
			<method name="public String value()">1</method>
			<method name="public int hashCode()">2</method>
			<method name="protected void _init_()">0</method>
			<method name="public abstract edu.stanford.nlp.ling.LabelFactory labelFactory()">1</method>
			<method name="public void setFromString(String labelStr)">1</method>
			<method name="public void setValue(String value)">1</method>
			<method name="public int compareTo(edu.stanford.nlp.ling.ValueLabel valueLabel)">1</method>
			<method name="public boolean equals(Object obj)">5</method>
			<method name="public String toString()">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.CoreMapSequenceMatchAction$MergeAction</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>21</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>251</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>82.33333333333333</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(edu.stanford.nlp.pipeline.CoreMapAggregator aggregator)">0</method>
			<method name="public transient edu.stanford.nlp.ling.tokensregex.SequenceMatchResult apply(edu.stanford.nlp.ling.tokensregex.SequenceMatchResult matchResult, int[] groups)">11</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.DefaultPaths</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>30</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="private void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.maxent.iis.LambdaSolve</name>
		<wmc>44</wmc>
		<dit>1</dit>
		<noc>1</noc>
		<cbo>16</cbo>
		<rfc>102</rfc>
		<lcom>10</lcom>
		<ca>7</ca>
		<ce>9</ce>
		<npm>27</npm>
		<lcom3>0.8317373461012312</lcom3>
		<loc>3773</loc>
		<dam>0.8823529411764706</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.17768595041322313</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>84.36363636363636</amc>
		<cc>
			<method name="static double[] read_lambdas(String modelFilename)">1</method>
			<method name="double ZAlfa(double alfa, edu.stanford.nlp.maxent.Feature f, int x)">2</method>
			<method name="public double logLikelihood()">2</method>
			<method name="double g(double lambdaP, int index)">2</method>
			<method name="boolean iterate(int index, double err, edu.stanford.nlp.util.MutableDouble ret)">5</method>
			<method name="public void readL(String filename)">1</method>
			<method name="public void _init_(String filename)">0</method>
			<method name="double GSF(double alfa, edu.stanford.nlp.maxent.Feature f)">2</method>
			<method name="double pcondFAlfa(double alfa, int x, int y, edu.stanford.nlp.maxent.Feature f)">1</method>
			<method name="public void save_lambdas(String filename)">1</method>
			<method name="public void setBinary()">1</method>
			<method name="public double[] getDerivativesNeg()">4</method>
			<method name="public double[] getDerivativesLossDomination()">5</method>
			<method name="public void print()">3</method>
			<method name="public void improvedIterative()">6</method>
			<method name="public double expectedValue()">9</method>
			<method name="public double GainCompute(edu.stanford.nlp.maxent.Feature f, double errorGain)">4</method>
			<method name="public void _init_(edu.stanford.nlp.maxent.Problem p1, double eps1, double nerr1)">0</method>
			<method name="public void improvedIterative(int iters)">6</method>
			<method name="double GSF(double alfa, edu.stanford.nlp.maxent.Feature f, int index)">2</method>
			<method name="double GSFPrime(double alfa, edu.stanford.nlp.maxent.Feature f, int index)">2</method>
			<method name="public double[] getDerivatives()">4</method>
			<method name="double newton(double lambda0, int index, double err)">7</method>
			<method name="public double logLikelihoodScratch()">10</method>
			<method name="public double logLikelihoodNeg()">10</method>
			<method name="public boolean checkCorrectness()">9</method>
			<method name="public void transformValues()">9</method>
			<method name="public double lossDomination()">18</method>
			<method name="public void _init_()">0</method>
			<method name="double GSFSecond(double alfa, edu.stanford.nlp.maxent.Feature f)">4</method>
			<method name="protected double fnum(int x, int y)">1</method>
			<method name="public double pcond(int y, int x)">1</method>
			<method name="double GSFPrime(double alfa, edu.stanford.nlp.maxent.Feature f)">2</method>
			<method name="void initCondsZlambdaEtc()">9</method>
			<method name="public static double[] read_lambdas(java.io.DataInputStream rf)">2</method>
			<method name="public void setNonBinary()">1</method>
			<method name="double gprime(double lambdaP, int index)">2</method>
			<method name="public static void main(String[] args)">4</method>
			<method name="void save_problem(String filename)">5</method>
			<method name="void updateConds(int index, double deltaL)">4</method>
			<method name="double fExpected(edu.stanford.nlp.maxent.Feature f)">2</method>
			<method name="public double[] getDerivativesExpectedValue()">3</method>
			<method name="public static void save_lambdas(java.io.DataOutputStream rf, double[] lambdas)">1</method>
			<method name="public static double divide(double first, double second)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.Expressions$PrimitiveValue</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>35</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>34</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="public transient void _init_(String typename, Object value, String[] tags)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.io.TSVTaggedFileReader</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>27</rfc>
		<lcom>12</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>7</npm>
		<lcom3>0.6785714285714286</lcom3>
		<loc>220</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>25.5</amc>
		<cc>
			<method name="void primeNext()">7</method>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="public java.util.List next()">2</method>
			<method name="public boolean hasNext()">2</method>
			<method name="public String filename()">1</method>
			<method name="public void remove()">1</method>
			<method name="public volatile Object next()">1</method>
			<method name="public void _init_(edu.stanford.nlp.tagger.io.TaggedFileRecord record)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.EmpiricalNERPrior</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>8</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>0.3555555555555556</lcom3>
		<loc>1012</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>482.5</amc>
		<cc>
			<method name="public double scoreOf(int[] sequence)">68</method>
			<method name="public void _init_(String backgroundSymbol, edu.stanford.nlp.util.Index classIndex, java.util.List doc)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$VerbSenseAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.international.arabic.process.IOBUtils$TokenType</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.9333333333333332</lcom3>
		<loc>67</loc>
		<dam>0.2</dam>
		<moa>5</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>14.5</amc>
		<cc>
			<method name="public static edu.stanford.nlp.international.arabic.process.IOBUtils$TokenType[] values()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static edu.stanford.nlp.international.arabic.process.IOBUtils$TokenType valueOf(String name)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.classify.SemiSupervisedLogConditionalObjectiveFunction</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>11</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>4</npm>
		<lcom3>0.375</lcom3>
		<loc>134</loc>
		<dam>0.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.48</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>25.0</amc>
		<cc>
			<method name="public void setPrior(edu.stanford.nlp.classify.LogPrior prior)">1</method>
			<method name="public int domainDimension()">1</method>
			<method name="protected void calculate(double[] x)">4</method>
			<method name="public void _init_(edu.stanford.nlp.optimization.AbstractCachingDiffFunction objFunc, edu.stanford.nlp.optimization.AbstractCachingDiffFunction biasedObjFunc, edu.stanford.nlp.classify.LogPrior prior)">0</method>
			<method name="public void _init_(edu.stanford.nlp.optimization.AbstractCachingDiffFunction objFunc, edu.stanford.nlp.optimization.AbstractCachingDiffFunction biasedObjFunc, edu.stanford.nlp.classify.LogPrior prior, double convexComboFrac)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.math.DoubleAD</name>
		<wmc>19</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>25</rfc>
		<lcom>5</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>19</npm>
		<lcom3>0.537037037037037</lcom3>
		<loc>185</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.2608695652173913</mfa>
		<cam>0.5263157894736842</cam>
		<ic>1</ic>
		<cbm>2</cbm>
		<amc>8.578947368421053</amc>
		<cc>
			<method name="public void setval(double a)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void minusEqualsConst(double a)">1</method>
			<method name="public boolean equals(double valToCompare, double dotToCompare)">3</method>
			<method name="public void plusEquals(edu.stanford.nlp.math.DoubleAD a)">1</method>
			<method name="public double doubleValue()">1</method>
			<method name="public void setdot(double a)">1</method>
			<method name="public long longValue()">1</method>
			<method name="public double getval()">1</method>
			<method name="public float floatValue()">1</method>
			<method name="public void set(double value, double dotValue)">1</method>
			<method name="public int intValue()">1</method>
			<method name="public double getdot()">1</method>
			<method name="public void _init_(double initVal, double initDot)">0</method>
			<method name="public boolean equals(double valToCompare, double dotToCompare, double TOL)">3</method>
			<method name="public String toString()">1</method>
			<method name="public boolean equals(edu.stanford.nlp.math.DoubleAD b)">3</method>
			<method name="public void minusEquals(edu.stanford.nlp.math.DoubleAD a)">1</method>
			<method name="public void plusEqualsConst(double a)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.GrammaticalStructure$1</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.0</amc>
		<cc>
			<method name="void _init_(java.util.List x0, edu.stanford.nlp.trees.TreeGraphNode x1)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.AbstractSequenceClassifier</name>
		<wmc>89</wmc>
		<dit>1</dit>
		<noc>5</noc>
		<cbo>48</cbo>
		<rfc>231</rfc>
		<lcom>2918</lcom>
		<ca>10</ca>
		<ce>40</ce>
		<npm>79</npm>
		<lcom3>0.9050324675324675</lcom3>
		<loc>3473</loc>
		<dam>0.5714285714285714</dam>
		<moa>7</moa>
		<mfa>0.0</mfa>
		<cam>0.10721343873517787</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>37.86516853932584</amc>
		<cc>
			<method name="public boolean countResults(java.util.List doc, edu.stanford.nlp.stats.Counter entityTP, edu.stanford.nlp.stats.Counter entityFP, edu.stanford.nlp.stats.Counter entityFN)">4</method>
			<method name="public void loadClassifier(java.io.InputStream in, java.util.Properties props)">1</method>
			<method name="public void classifyAndWriteViterbiSearchGraph(String testFile, String searchGraphPrefix, edu.stanford.nlp.sequences.DocumentReaderAndWriter readerAndWriter)">1</method>
			<method name="public String apply(String in)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public java.util.Set labels()">1</method>
			<method name="public java.util.List segmentString(String sentence, edu.stanford.nlp.sequences.DocumentReaderAndWriter readerAndWriter)">2</method>
			<method name="public void _init_(java.util.Properties props)">0</method>
			<method name="public edu.stanford.nlp.sequences.SequenceModel getSequenceModel(java.util.List doc)">1</method>
			<method name="public void classifyFilesAndWriteAnswers(java.util.Collection testFiles)">1</method>
			<method name="public java.util.List classifyFile(String filename)">3</method>
			<method name="public edu.stanford.nlp.stats.Counter classifyKBest(java.util.List doc, Class answerField, int k)">4</method>
			<method name="public java.util.List classifyRaw(String str, edu.stanford.nlp.sequences.DocumentReaderAndWriter readerAndWriter)">3</method>
			<method name="public edu.stanford.nlp.sequences.DocumentReaderAndWriter makeReaderAndWriter()">1</method>
			<method name="public void writeAnswers(java.util.List doc, java.io.PrintWriter printWriter, edu.stanford.nlp.sequences.DocumentReaderAndWriter readerAndWriter)">1</method>
			<method name="public abstract java.util.List classifyWithGlobalInformation(java.util.List, edu.stanford.nlp.util.CoreMap, edu.stanford.nlp.util.CoreMap)">1</method>
			<method name="public edu.stanford.nlp.objectbank.ObjectBank makeObjectBankFromFile(String filename, edu.stanford.nlp.sequences.DocumentReaderAndWriter readerAndWriter)">1</method>
			<method name="public void train(String filename)">1</method>
			<method name="private static boolean printPRLine(String entity, double tp, double fp, double fn, boolean printedHeader)">7</method>
			<method name="public void classifyStdin()">1</method>
			<method name="public void train(java.util.Collection docs)">1</method>
			<method name="public static int tallyOneEntityIOB(java.util.List doc, int index, Class source, Class target, edu.stanford.nlp.stats.Counter positive, edu.stanford.nlp.stats.Counter negative, String background)">8</method>
			<method name="public edu.stanford.nlp.objectbank.ObjectBank makeObjectBankFromFiles(String[] trainFileList, edu.stanford.nlp.sequences.DocumentReaderAndWriter readerAndWriter)">2</method>
			<method name="public void loadClassifier(java.io.InputStream in)">1</method>
			<method name="public String classifyToString(String sentences, String outputFormat, boolean preserveSpacing)">3</method>
			<method name="public abstract void printProbsDocument(java.util.List)">1</method>
			<method name="public edu.stanford.nlp.objectbank.ObjectBank makeObjectBankFromFile(String filename)">1</method>
			<method name="public void loadClassifierNoExceptions(String loadPath)">1</method>
			<method name="public volatile Object apply(Object x0)">1</method>
			<method name="protected final void reinit()">8</method>
			<method name="public String classifyWithInlineXML(String sentences)">1</method>
			<method name="public void train(String[] trainFileList, edu.stanford.nlp.sequences.DocumentReaderAndWriter readerAndWriter)">1</method>
			<method name="static edu.stanford.nlp.process.CoreTokenFactory access$000(edu.stanford.nlp.ie.AbstractSequenceClassifier x0)">1</method>
			<method name="static java.util.concurrent.atomic.AtomicInteger access$100(edu.stanford.nlp.ie.AbstractSequenceClassifier x0)">1</method>
			<method name="public void train()">3</method>
			<method name="public void classifyAndWriteAnswers(String baseDir, String filePattern, edu.stanford.nlp.sequences.DocumentReaderAndWriter readerWriter)">1</method>
			<method name="public abstract void loadClassifier(java.io.ObjectInputStream, java.util.Properties)">1</method>
			<method name="public edu.stanford.nlp.objectbank.ObjectBank makeObjectBankFromReader(java.io.BufferedReader in, edu.stanford.nlp.sequences.DocumentReaderAndWriter readerAndWriter)">2</method>
			<method name="public void classifyStdin(edu.stanford.nlp.sequences.DocumentReaderAndWriter readerWriter)">1</method>
			<method name="public void _init_(edu.stanford.nlp.sequences.SeqClassifierFlags flags)">0</method>
			<method name="public java.util.List classifySentenceWithGlobalInformation(java.util.List tokenSequence, edu.stanford.nlp.util.CoreMap doc, edu.stanford.nlp.util.CoreMap sentence)">3</method>
			<method name="private java.io.InputStream loadStreamFromClasspath(String path)">3</method>
			<method name="public java.util.List classify(String str)">3</method>
			<method name="public edu.stanford.nlp.sequences.DocumentReaderAndWriter plainTextReaderAndWriter()">1</method>
			<method name="public static boolean countResults(java.util.List doc, edu.stanford.nlp.stats.Counter entityTP, edu.stanford.nlp.stats.Counter entityFP, edu.stanford.nlp.stats.Counter entityFN, String background)">29</method>
			<method name="public void classifyFilesAndWriteAnswers(java.util.Collection testFiles, edu.stanford.nlp.sequences.DocumentReaderAndWriter readerWriter)">1</method>
			<method name="public void loadClassifier(String loadPath, java.util.Properties props)">1</method>
			<method name="public static boolean countResultsIOB2(java.util.List doc, edu.stanford.nlp.stats.Counter entityTP, edu.stanford.nlp.stats.Counter entityFP, edu.stanford.nlp.stats.Counter entityFN, String background)">35</method>
			<method name="public void loadClassifierNoExceptions(java.io.File file, java.util.Properties props)">1</method>
			<method name="private void printFeatureListsHelper(edu.stanford.nlp.util.CoreMap wi, java.util.Collection features)">6</method>
			<method name="public void printProbsDocuments(edu.stanford.nlp.objectbank.ObjectBank documents)">2</method>
			<method name="public edu.stanford.nlp.stats.Sampler getSampler(java.util.List input)">1</method>
			<method name="public java.util.List classifySentence(java.util.List sentence)">3</method>
			<method name="public void printProbs(String filename, edu.stanford.nlp.sequences.DocumentReaderAndWriter readerAndWriter)">1</method>
			<method name="public String backgroundSymbol()">1</method>
			<method name="public void classifyAndWriteAnswersKBest(String testFile, int k, edu.stanford.nlp.sequences.DocumentReaderAndWriter readerAndWriter)">1</method>
			<method name="protected void printFeatures(edu.stanford.nlp.util.CoreMap wi, java.util.Collection features)">7</method>
			<method name="public java.util.List classifyToCharacterOffsets(String sentences)">9</method>
			<method name="public edu.stanford.nlp.sequences.DocumentReaderAndWriter defaultReaderAndWriter()">1</method>
			<method name="private void classifyAndWriteAnswers(java.util.Collection documents, edu.stanford.nlp.sequences.DocumentReaderAndWriter readerWriter)">1</method>
			<method name="public void classifyAndWriteAnswers(String testFile, java.io.OutputStream outStream, edu.stanford.nlp.sequences.DocumentReaderAndWriter readerWriter)">1</method>
			<method name="public void train(String baseTrainDir, String trainFiles, edu.stanford.nlp.sequences.DocumentReaderAndWriter readerAndWriter)">1</method>
			<method name="public edu.stanford.nlp.objectbank.ObjectBank makeObjectBankFromFiles(String baseDir, String filePattern, edu.stanford.nlp.sequences.DocumentReaderAndWriter readerAndWriter)">5</method>
			<method name="public abstract void serializeClassifier(String)">1</method>
			<method name="public void classifyAndWriteAnswersKBest(edu.stanford.nlp.objectbank.ObjectBank documents, int k, java.io.PrintWriter printWriter, edu.stanford.nlp.sequences.DocumentReaderAndWriter readerAndWriter)">1</method>
			<method name="public static void printResults(edu.stanford.nlp.stats.Counter entityTP, edu.stanford.nlp.stats.Counter entityFP, edu.stanford.nlp.stats.Counter entityFN)">2</method>
			<method name="public void classifyAndWriteAnswers(String testFile, edu.stanford.nlp.sequences.DocumentReaderAndWriter readerWriter)">1</method>
			<method name="public void train(String filename, edu.stanford.nlp.sequences.DocumentReaderAndWriter readerAndWriter)">1</method>
			<method name="public java.util.List segmentString(String sentence)">1</method>
			<method name="public void loadJarClassifier(String modelName, java.util.Properties props)">2</method>
			<method name="public void classifyAndWriteAnswers(String testFile)">1</method>
			<method name="public edu.stanford.nlp.objectbank.ObjectBank makeObjectBankFromFiles(java.util.Collection files, edu.stanford.nlp.sequences.DocumentReaderAndWriter readerAndWriter)">2</method>
			<method name="public static boolean countResultsIOB(java.util.List doc, edu.stanford.nlp.stats.Counter entityTP, edu.stanford.nlp.stats.Counter entityFP, edu.stanford.nlp.stats.Counter entityFN, String background)">9</method>
			<method name="public String classifyToString(String sentences)">1</method>
			<method name="public edu.stanford.nlp.fsm.DFSA getViterbiSearchGraph(java.util.List doc, Class answerField)">2</method>
			<method name="public void loadClassifier(String loadPath)">1</method>
			<method name="public abstract void train(java.util.Collection, edu.stanford.nlp.sequences.DocumentReaderAndWriter)">1</method>
			<method name="public void loadClassifierNoExceptions(java.io.File file)">1</method>
			<method name="public edu.stanford.nlp.objectbank.ObjectBank makeObjectBankFromString(String string, edu.stanford.nlp.sequences.DocumentReaderAndWriter readerAndWriter)">3</method>
			<method name="public void loadClassifier(java.io.File file)">1</method>
			<method name="public edu.stanford.nlp.sequences.DocumentReaderAndWriter makePlainTextReaderAndWriter()">2</method>
			<method name="public void loadClassifierNoExceptions(String loadPath, java.util.Properties props)">2</method>
			<method name="public int windowSize()">1</method>
			<method name="public void loadClassifierNoExceptions(java.io.InputStream in, java.util.Properties props)">1</method>
			<method name="public abstract java.util.List classify(java.util.List)">1</method>
			<method name="public void classifyAndWriteAnswers(java.util.Collection documents, java.io.PrintWriter printWriter, edu.stanford.nlp.sequences.DocumentReaderAndWriter readerWriter)">1</method>
			<method name="public void finalizeClassification(edu.stanford.nlp.util.CoreMap document)">1</method>
			<method name="protected void printFeatureLists(edu.stanford.nlp.util.CoreMap wi, java.util.Collection features)">3</method>
			<method name="public void loadClassifier(java.io.File file, java.util.Properties props)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.QuantifiableEntityNormalizer</name>
		<wmc>35</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>12</cbo>
		<rfc>131</rfc>
		<lcom>527</lcom>
		<ca>2</ca>
		<ce>11</ce>
		<npm>15</npm>
		<lcom3>0.9418158567774936</lcom3>
		<loc>3818</loc>
		<dam>0.8913043478260869</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.15240641711229946</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>106.77142857142857</amc>
		<cc>
			<method name="public static String normalizedNumberStringQuiet(String s, double multiplier, String nextWord, Number numberFromSUTime)">26</method>
			<method name="public static java.util.List collapseNERLabels(java.util.List l)">10</method>
			<method name="private static String getOneSubstitutionMatch(String word, java.util.Set set)">2</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static void addNormalizedQuantitiesToEntities(java.util.List l, boolean concatenate)">1</method>
			<method name="static boolean isYear(edu.stanford.nlp.util.CoreMap word)">6</method>
			<method name="private static String detectTimeOfDayModifier(java.util.List list, int beforeIndex, int afterIndex)">30</method>
			<method name="public static String singleEntityToString(java.util.List l)">4</method>
			<method name="private void _init_()">0</method>
			<method name="public static java.util.List normalizeClassifierOutput(java.util.List l)">2</method>
			<method name="private static String detectDateRangeModifier(edu.stanford.nlp.util.CoreMap prev)">4</method>
			<method name="public static String normalizedOrdinalString(String s, Number numberFromSUTime)">1</method>
			<method name="private static java.util.List processEntity(java.util.List l, String entityType, String compModifier, String nextWord)">25</method>
			<method name="public static void addNormalizedQuantitiesToEntities(java.util.List l)">1</method>
			<method name="private static boolean isOneSubstitutionMatch(String word, String match, edu.stanford.nlp.util.EditDistance ed)">4</method>
			<method name="public static java.util.List applySpecializedNER(java.util.List l)">7</method>
			<method name="private static String timeEntityToString(java.util.List l)">5</method>
			<method name="private static String detectDateRangeModifier(java.util.List date, java.util.List list, int beforeIndex, int afterIndex)">18</method>
			<method name="private static String convertToAmerican(String s)">5</method>
			<method name="public static String normalizedTimeString(String s, String ampm, edu.stanford.nlp.time.Timex timexFromSUTime)">25</method>
			<method name="public static void addNormalizedQuantitiesToEntities(java.util.List list, boolean concatenate, boolean usesSUTime)">24</method>
			<method name="static String normalizedMoneyString(String s, Number numberFromSUTime)">6</method>
			<method name="private static java.util.List detectTwoSidedRangeModifier(edu.stanford.nlp.util.CoreMap firstDate, java.util.List list, int beforeIndex, int afterIndex, boolean concatenate)">11</method>
			<method name="static String normalizedDateString(String s, String openRangeMarker, edu.stanford.nlp.time.Timex timexFromSUTime)">3</method>
			<method name="private static edu.stanford.nlp.time.Timex fetchTimexFromSUTime(java.util.List l)">2</method>
			<method name="public static String normalizedOrdinalStringQuiet(String s, Number numberFromSUTime)">6</method>
			<method name="private static String detectQuantityModifier(java.util.List list, int beforeIndex, int afterIndex)">21</method>
			<method name="public static String normalizedTimeString(String s, edu.stanford.nlp.time.Timex timexFromSUTime)">1</method>
			<method name="public static String normalizedNumberString(String s, String nextWord, Number numberFromSUTime)">1</method>
			<method name="public static String normalizedPercentString(String s, Number numberFromSUTime)">4</method>
			<method name="static String normalizedDurationString(String s, edu.stanford.nlp.time.Timex timexFromSUTime)">3</method>
			<method name="private static Number fetchNumberFromSUTime(java.util.List l)">2</method>
			<method name="static String normalizedDateString(String s, edu.stanford.nlp.time.Timex timexFromSUTime)">1</method>
			<method name="static void concatenateNumericString(java.util.List words, java.util.List toRemove)">8</method>
			<method name="public static void fixupNerBeforeNormalization(java.util.List list)">29</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$IndexAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.ParseException</name>
		<wmc>5</wmc>
		<dit>3</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>20</rfc>
		<lcom>4</lcom>
		<ca>3</ca>
		<ce>1</ce>
		<npm>3</npm>
		<lcom3>0.95</lcom3>
		<loc>381</loc>
		<dam>0.4</dam>
		<moa>1</moa>
		<mfa>0.9130434782608695</mfa>
		<cam>0.44</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>74.2</amc>
		<cc>
			<method name="static String add_escapes(String str)">14</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(edu.stanford.nlp.trees.tregex.Token currentTokenVal, int[][] expectedTokenSequencesVal, String[] tokenImageVal)">0</method>
			<method name="public void _init_(String message)">0</method>
			<method name="private static String initialise(edu.stanford.nlp.trees.tregex.Token currentToken, int[][] expectedTokenSequences, String[] tokenImage)">9</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTimeMain$InputType</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.9444444444444443</lcom3>
		<loc>78</loc>
		<dam>0.16666666666666666</dam>
		<moa>6</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>17.0</amc>
		<cc>
			<method name="public static edu.stanford.nlp.time.SUTimeMain$InputType valueOf(String name)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static edu.stanford.nlp.time.SUTimeMain$InputType[] values()">1</method>
			<method name="private void _init_(String, int)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.DeltaCollectionValuedMap</name>
		<wmc>22</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>44</rfc>
		<lcom>145</lcom>
		<ca>4</ca>
		<ce>5</ce>
		<npm>18</npm>
		<lcom3>0.6904761904761905</lcom3>
		<loc>272</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.2698412698412698</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.181818181818182</amc>
		<cc>
			<method name="public void clear()">2</method>
			<method name="public void addAll(java.util.Map m)">2</method>
			<method name="public boolean isEmpty()">2</method>
			<method name="static void _clinit_()">0</method>
			<method name="public java.util.Collection put(Object key, java.util.Collection value)">1</method>
			<method name="public java.util.Set entrySet()">1</method>
			<method name="public boolean containsKey(Object key)">3</method>
			<method name="public java.util.Collection get(Object key)">3</method>
			<method name="public void add(Object key, Object value)">3</method>
			<method name="public int size()">1</method>
			<method name="public java.util.Collection remove(Object key)">1</method>
			<method name="static Object access$200()">1</method>
			<method name="public void _init_(edu.stanford.nlp.util.CollectionValuedMap originalMap)">0</method>
			<method name="static java.util.Map access$000(edu.stanford.nlp.util.DeltaCollectionValuedMap x0)">1</method>
			<method name="public volatile Object remove(Object x0)">1</method>
			<method name="static edu.stanford.nlp.util.CollectionValuedMap access$100(edu.stanford.nlp.util.DeltaCollectionValuedMap x0)">1</method>
			<method name="public volatile Object get(Object x0)">1</method>
			<method name="public boolean containsValue(Object value)">1</method>
			<method name="public java.util.Collection values()">1</method>
			<method name="public void removeMapping(Object key, Object value)">5</method>
			<method name="public void putAll(java.util.Map m)">1</method>
			<method name="public volatile Object put(Object x0, Object x1)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.semgraph.SemanticGraph$SemanticGraphParsingTask</name>
		<wmc>14</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>46</rfc>
		<lcom>83</lcom>
		<ca>1</ca>
		<ce>8</ce>
		<npm>3</npm>
		<lcom3>0.8076923076923077</lcom3>
		<loc>318</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.3392857142857143</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>21.571428571428573</amc>
		<cc>
			<method name="private void readColon()">2</method>
			<method name="private edu.stanford.nlp.ling.IndexedWord makeVertex(String word)">3</method>
			<method name="public edu.stanford.nlp.semgraph.SemanticGraph parse()">2</method>
			<method name="private static edu.stanford.nlp.util.Pair readWordAndIndex(String word)">2</method>
			<method name="private void readLeftBracket()">2</method>
			<method name="private static boolean isColon(char ch)">2</method>
			<method name="public void _init_(String s)">0</method>
			<method name="private static boolean isRightBracket(char ch)">2</method>
			<method name="private void readDep(edu.stanford.nlp.ling.IndexedWord gov, String reln)">8</method>
			<method name="private void readRightBracket()">2</method>
			<method name="protected boolean isPunct(char ch)">4</method>
			<method name="public volatile Object parse()">1</method>
			<method name="private static boolean isLeftBracket(char ch)">2</method>
			<method name="private Integer getNextFreeIndex()">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.History</name>
		<wmc>12</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>45</cbo>
		<rfc>28</rfc>
		<lcom>16</lcom>
		<ca>45</ca>
		<ce>3</ce>
		<npm>5</npm>
		<lcom3>0.6363636363636364</lcom3>
		<loc>229</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.2857142857142857</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>17.666666666666668</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.tagger.maxent.PairsHolder pairs, edu.stanford.nlp.tagger.maxent.Extractors extractors)">0</method>
			<method name="private String getX(int index)">1</method>
			<method name="void print(java.io.PrintStream ps)">2</method>
			<method name="void _init_(int start, int end, int current, edu.stanford.nlp.tagger.maxent.PairsHolder pairs, edu.stanford.nlp.tagger.maxent.Extractors extractors)">0</method>
			<method name="public int hashCode()">2</method>
			<method name="public void printSent()">2</method>
			<method name="protected void setTag(int pos, String tag)">1</method>
			<method name="public String toString()">2</method>
			<method name="protected void set(int start, int end, int current)">1</method>
			<method name="public boolean equals(Object h1)">3</method>
			<method name="public String[] getX()">2</method>
			<method name="void init(int start, int end, int current)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.ScaledSGDMinimizer$setFixedGain</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>6</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>0.5</lcom3>
		<loc>29</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.0</amc>
		<cc>
			<method name="public volatile void set(Object x0)">1</method>
			<method name="public void set(Double in)">1</method>
			<method name="public void _init_(edu.stanford.nlp.optimization.ScaledSGDMinimizer, edu.stanford.nlp.optimization.ScaledSGDMinimizer min)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.CGMinimizer$OneDimDiffFunction</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>10</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>0.125</lcom3>
		<loc>96</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.44</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>17.4</amc>
		<cc>
			<method name="static double[] access$000(edu.stanford.nlp.optimization.CGMinimizer$OneDimDiffFunction x0, double x1)">1</method>
			<method name="double derivativeAt(double x)">2</method>
			<method name="void _init_(edu.stanford.nlp.optimization.DiffFunction function, double[] initial, double[] direction)">0</method>
			<method name="double valueAt(double x)">1</method>
			<method name="private double[] vectorOf(double x)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.charniak.CharniakScoredParsesReaderWriter$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$StandardTemporalType</name>
		<wmc>14</wmc>
		<dit>2</dit>
		<noc>9</noc>
		<cbo>29</cbo>
		<rfc>32</rfc>
		<lcom>57</lcom>
		<ca>24</ca>
		<ce>18</ce>
		<npm>8</npm>
		<lcom3>0.9182692307692307</lcom3>
		<loc>317</loc>
		<dam>0.0625</dam>
		<moa>16</moa>
		<mfa>0.5909090909090909</mfa>
		<cam>0.3173076923076923</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>20.5</amc>
		<cc>
			<method name="private void _init_(String, int, edu.stanford.nlp.time.SUTime$TimexType timexType, edu.stanford.nlp.time.SUTime$TimeUnit unit)">0</method>
			<method name="public edu.stanford.nlp.time.SUTime$Temporal createTemporal(int n)">2</method>
			<method name="void _init_(String x0, int x1, edu.stanford.nlp.time.SUTime$TimexType x2, edu.stanford.nlp.time.SUTime$TimeUnit x3, edu.stanford.nlp.time.SUTime$Duration x4, edu.stanford.nlp.time.SUTime$1 x5)">0</method>
			<method name="public edu.stanford.nlp.time.SUTime$TimexType getTimexType()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="protected edu.stanford.nlp.time.SUTime$Temporal _createTemporal(int n)">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Duration getPeriod()">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Duration getDuration()">1</method>
			<method name="public static edu.stanford.nlp.time.SUTime$StandardTemporalType[] values()">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Temporal create(edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue compositeValue)">2</method>
			<method name="public edu.stanford.nlp.time.SUTime$Duration getGranularity()">1</method>
			<method name="private void _init_(String, int, edu.stanford.nlp.time.SUTime$TimexType timexType, edu.stanford.nlp.time.SUTime$TimeUnit unit, edu.stanford.nlp.time.SUTime$Duration period)">0</method>
			<method name="private void _init_(String, int, edu.stanford.nlp.time.SUTime$TimexType timexType)">0</method>
			<method name="public static edu.stanford.nlp.time.SUTime$StandardTemporalType valueOf(String name)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.sentiment.SentimentUtils</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>14</cbo>
		<rfc>27</rfc>
		<lcom>13</lcom>
		<ca>4</ca>
		<ce>10</ce>
		<npm>4</npm>
		<lcom3>0.8</lcom3>
		<loc>102</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.2</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.833333333333334</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public static String sentimentString(edu.stanford.nlp.sentiment.SentimentModel model, int sentiment)">3</method>
			<method name="public static java.util.List readTreesWithGoldLabels(String path)">2</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static java.util.List filterUnknownRoots(java.util.List trees)">1</method>
			<method name="public static void attachGoldLabels(edu.stanford.nlp.trees.Tree tree)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.classify.BiasedLogisticObjectiveFunction</name>
		<wmc>10</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>17</rfc>
		<lcom>37</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>8</npm>
		<lcom3>0.5873015873015873</lcom3>
		<loc>415</loc>
		<dam>0.8571428571428571</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>39.8</amc>
		<cc>
			<method name="public void _init_(int numFeatures, int[][] data, double[][] values, int[] labels)">0</method>
			<method name="public void _init_(int numFeatures, int[][] data, int[] labels, float[] dataweights)">0</method>
			<method name="public void _init_(int numFeatures, int[][] data, double[][] values, int[] labels, edu.stanford.nlp.classify.LogPrior prior)">0</method>
			<method name="public void _init_(int numFeatures, int[][] data, int[] labels)">0</method>
			<method name="public void _init_(int numFeatures, int[][] data, int[] labels, edu.stanford.nlp.classify.LogPrior prior)">0</method>
			<method name="public int domainDimension()">1</method>
			<method name="protected void calculate(double[] x)">7</method>
			<method name="public void _init_(int numFeatures, int[][] data, double[][] values, int[] labels, edu.stanford.nlp.classify.LogPrior prior, float[] dataweights)">0</method>
			<method name="public void _init_(int numFeatures, int[][] data, int[] labels, edu.stanford.nlp.classify.LogPrior prior, float[] dataweights)">0</method>
			<method name="protected void calculateRVF(double[] x)">6</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequencePattern$MatchState</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>5</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>15</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4444444444444444</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.0</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="protected boolean match(int bid, edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates matchedStates, boolean consume, edu.stanford.nlp.ling.tokensregex.SequencePattern$State prevState)">1</method>
			<method name="void _init_(edu.stanford.nlp.ling.tokensregex.SequencePattern$1 x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.CollinsHeadFinder</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>1</noc>
		<cbo>16</cbo>
		<rfc>19</rfc>
		<lcom>13</lcom>
		<ca>5</ca>
		<ce>11</ce>
		<npm>4</npm>
		<lcom3>0.8</lcom3>
		<loc>1261</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>208.83333333333334</amc>
		<cc>
			<method name="public transient void _init_(edu.stanford.nlp.trees.TreebankLanguagePack tlp, String[] categoriesToAvoid)">0</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="protected int postOperationFix(int headIdx, edu.stanford.nlp.trees.Tree[] daughterTrees)">8</method>
			<method name="public void _init_(edu.stanford.nlp.trees.TreebankLanguagePack tlp)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.ExtractorCNumber</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>7</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>1.3333333333333333</lcom3>
		<loc>24</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.75</amc>
		<cc>
			<method name="String extract(edu.stanford.nlp.tagger.maxent.History h, edu.stanford.nlp.tagger.maxent.PairsHolder pH)">2</method>
			<method name="public boolean isLocal()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public boolean isDynamic()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.ChineseCoreAnnotations</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="private void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.io.TeeStream</name>
		<wmc>6</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>12</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>6</npm>
		<lcom3>0.0</lcom3>
		<loc>62</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.5</mfa>
		<cam>0.4583333333333333</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>9.0</amc>
		<cc>
			<method name="public void write(int b)">1</method>
			<method name="public void write(byte[] b)">1</method>
			<method name="public void write(byte[] b, int off, int len)">1</method>
			<method name="public void flush()">1</method>
			<method name="public void close()">1</method>
			<method name="public void _init_(java.io.OutputStream s1, java.io.OutputStream s2)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.GrammaticalStructureFactory</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>12</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>10</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract edu.stanford.nlp.trees.GrammaticalStructure newGrammaticalStructure(edu.stanford.nlp.trees.Tree)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.pascal.AcronymModel$WordsSkipped</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>11</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>111</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>36.0</amc>
		<cc>
			<method name="public double value(edu.stanford.nlp.ie.pascal.Alignment alignment)">12</method>
			<method name="public void _init_()">0</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalRelations$NominalSubjectGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$WordFormAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.charniak.CharniakParser</name>
		<wmc>16</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>47</rfc>
		<lcom>64</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>15</npm>
		<lcom3>0.8</lcom3>
		<loc>432</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>25.4375</amc>
		<cc>
			<method name="public void printSentence(java.util.List sentence, String filename)">1</method>
			<method name="public int getMaxSentenceLength()">1</method>
			<method name="public void _init_(String parserExecutable, String parserModel)">0</method>
			<method name="public void setMaxSentenceLength(int maxSentenceLength)">1</method>
			<method name="public int getBeamSize()">1</method>
			<method name="public void printSentences(Iterable sentences, String filename)">3</method>
			<method name="public edu.stanford.nlp.util.ScoredObject getBestScoredParse(java.util.List sentence)">2</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public Iterable getKBestParses(Iterable sentences, int k)">1</method>
			<method name="public void runCharniak(int n, String infile, String outfile, String errfile)">3</method>
			<method name="public java.util.List getKBestParses(java.util.List sentence, int k)">1</method>
			<method name="public edu.stanford.nlp.trees.Tree getBestParse(java.util.List sentence)">2</method>
			<method name="public Iterable getKBestParses(Iterable sentences, int k, boolean deleteTempFiles)">5</method>
			<method name="public void setBeamSize(int beamSize)">1</method>
			<method name="public java.util.List getKBestParses(java.util.List sentence, int k, boolean deleteTempFiles)">5</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.CEDict</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>7</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>46</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>20.5</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public static String path()">4</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.Options$LexOptions</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>18</cbo>
		<rfc>18</rfc>
		<lcom>0</lcom>
		<ca>18</ca>
		<ce>0</ce>
		<npm>3</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>287</loc>
		<dam>0.13333333333333333</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>67.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void readData(java.io.BufferedReader in)">1</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.Dependencies$ComparatorHolder</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>0.5</lcom3>
		<loc>15</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.6666666666666665</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="static java.util.Comparator access$100()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.GenericTimeExpressionPatterns$TimexTypeMatchNodePattern</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>7</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>30</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.666666666666666</amc>
		<cc>
			<method name="public volatile boolean match(Object x0)">1</method>
			<method name="public void _init_(edu.stanford.nlp.time.SUTime$TimexType type)">0</method>
			<method name="public boolean match(edu.stanford.nlp.time.TimeExpression te)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.io.PrintFile</name>
		<wmc>2</wmc>
		<dit>4</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>6</rfc>
		<lcom>1</lcom>
		<ca>6</ca>
		<ce>0</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>17</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>1.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.5</amc>
		<cc>
			<method name="public void _init_(java.io.File file)">0</method>
			<method name="public void _init_(String filename)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.MemoryEvaluator</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>13</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>0.5</lcom3>
		<loc>53</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.333333333333332</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public double evaluate(double[] x)">1</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.WordStemmer</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>19</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>89</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>21.25</amc>
		<cc>
			<method name="public static void main(String[] args)">2</method>
			<method name="private void processTree(edu.stanford.nlp.trees.Tree t, String tag, edu.stanford.nlp.process.Morphology morpha)">4</method>
			<method name="public void _init_()">0</method>
			<method name="public void visitTree(edu.stanford.nlp.trees.Tree t)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalRelations$ObjectGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTimeMain$1</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>4</rfc>
		<lcom>3</lcom>
		<ca>4</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>29</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.666666666666666</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="void _init_()">0</method>
			<method name="public int compare(edu.stanford.nlp.time.SUTimeMain$TimebankTimex o1, edu.stanford.nlp.time.SUTimeMain$TimebankTimex o2)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.CTBTreeReaderFactory</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>1</noc>
		<cbo>12</cbo>
		<rfc>10</rfc>
		<lcom>4</lcom>
		<ca>3</ca>
		<ce>9</ce>
		<npm>4</npm>
		<lcom3>0.3333333333333333</lcom3>
		<loc>57</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.75</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.trees.TreeNormalizer tn)">0</method>
			<method name="public void _init_(edu.stanford.nlp.trees.TreeNormalizer tn, boolean discardFrags)">0</method>
			<method name="public edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader in)">2</method>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.JollyDayHolidays$JollyHoliday</name>
		<wmc>12</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>17</cbo>
		<rfc>31</rfc>
		<lcom>54</lcom>
		<ca>1</ca>
		<ce>16</ce>
		<npm>11</npm>
		<lcom3>0.7272727272727273</lcom3>
		<loc>143</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.25</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.666666666666666</amc>
		<cc>
			<method name="public void _init_(String label, de.jollyday.HolidayManager holidayManager, de.jollyday.config.Holiday base)">0</method>
			<method name="public edu.stanford.nlp.time.SUTime$Time add(edu.stanford.nlp.time.SUTime$Duration offset)">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Time getTime()">1</method>
			<method name="public String toISOString()">1</method>
			<method name="public volatile edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time x0, int x1)">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Time intersect(edu.stanford.nlp.time.SUTime$Time t)">2</method>
			<method name="public edu.stanford.nlp.time.SUTime$Range getRange(int flags, edu.stanford.nlp.time.SUTime$Duration granularity)">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Duration getDuration()">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Time resolve(edu.stanford.nlp.time.SUTime$Time t, int flags)">5</method>
			<method name="public boolean isGrounded()">1</method>
			<method name="static String access$000(edu.stanford.nlp.time.JollyDayHolidays$JollyHoliday x0)">1</method>
			<method name="public String toFormattedString(int flags)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.TregexPattern$TRegexTreeReaderFactory</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>8</rfc>
		<lcom>1</lcom>
		<ca>2</ca>
		<ce>7</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>29</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.333333333333334</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.trees.TreeNormalizer tn)">0</method>
			<method name="public edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader in)">1</method>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTimeMain$3</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>42</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>40.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTimeMain$2</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>8</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>28</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.333333333333334</amc>
		<cc>
			<method name="public String apply(edu.stanford.nlp.util.CoreMap in)">1</method>
			<method name="void _init_()">0</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalRelations$PredicateGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.arabic.ArabicHeadFinder</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>23</rfc>
		<lcom>13</lcom>
		<ca>2</ca>
		<ce>6</ce>
		<npm>4</npm>
		<lcom3>0.7333333333333333</lcom3>
		<loc>2947</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>489.6666666666667</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.trees.international.arabic.ArabicHeadFinder$TagSet tagSet)">0</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(String tagSet)">0</method>
			<method name="protected void _init_(edu.stanford.nlp.trees.TreebankLanguagePack tlp, edu.stanford.nlp.trees.international.arabic.ArabicHeadFinder$TagSet tagSet)">0</method>
			<method name="protected edu.stanford.nlp.trees.Tree findMarkedHead(edu.stanford.nlp.trees.Tree t)">4</method>
			<method name="public void _init_(edu.stanford.nlp.trees.TreebankLanguagePack tlp)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.XMLUtils$SAXErrorHandler</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>21</rfc>
		<lcom>15</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>4</npm>
		<lcom3>2.0</lcom3>
		<loc>113</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4583333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>17.833333333333332</amc>
		<cc>
			<method name="public void error(org.xml.sax.SAXParseException exception)">1</method>
			<method name="private void _init_()">0</method>
			<method name="public static String makeBetterErrorString(String msg, org.xml.sax.SAXParseException ex)">4</method>
			<method name="public void fatalError(org.xml.sax.SAXParseException ex)">1</method>
			<method name="void _init_(edu.stanford.nlp.util.XMLUtils$1 x0)">0</method>
			<method name="public void warning(org.xml.sax.SAXParseException exception)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.objectbank.ObjectBank$OBIterator</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>12</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>0.2666666666666666</lcom3>
		<loc>102</loc>
		<dam>0.8</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>23.25</amc>
		<cc>
			<method name="public boolean hasNext()">2</method>
			<method name="private void setNextObject()">5</method>
			<method name="public Object next()">2</method>
			<method name="public void _init_(edu.stanford.nlp.objectbank.ObjectBank)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.BasicRelationExtractor</name>
		<wmc>24</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>24</cbo>
		<rfc>99</rfc>
		<lcom>174</lcom>
		<ca>3</ca>
		<ce>21</ce>
		<npm>14</npm>
		<lcom3>0.7865612648221344</lcom3>
		<loc>854</loc>
		<dam>0.5454545454545454</dam>
		<moa>4</moa>
		<mfa>0.0</mfa>
		<cam>0.12560386473429952</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>34.125</amc>
		<cc>
			<method name="public void setFeatureCountThreshold(int i)">1</method>
			<method name="public void setLoggerLevel(java.util.logging.Level level)">1</method>
			<method name="private static void reportWeights(edu.stanford.nlp.classify.LinearClassifier classifier, String classLabel)">4</method>
			<method name="private void justificationOf(edu.stanford.nlp.ling.Datum testDatum, java.io.PrintWriter pw, String label)">1</method>
			<method name="protected edu.stanford.nlp.ling.Datum createDatum(edu.stanford.nlp.ie.machinereading.structure.RelationMention rel)">3</method>
			<method name="public void annotate(edu.stanford.nlp.pipeline.Annotation dataset)">2</method>
			<method name="static void _clinit_()">0</method>
			<method name="private boolean compatibleLabel(String label, edu.stanford.nlp.ie.machinereading.structure.ExtractionObject rel)">3</method>
			<method name="public static edu.stanford.nlp.ie.machinereading.BasicRelationExtractor load(String modelPath)">1</method>
			<method name="public void train(edu.stanford.nlp.pipeline.Annotation sentences)">1</method>
			<method name="public void trainMulticlass(edu.stanford.nlp.classify.GeneralDataset trainSet)">4</method>
			<method name="private String classOf(edu.stanford.nlp.ling.Datum datum, edu.stanford.nlp.ie.machinereading.structure.ExtractionObject rel)">4</method>
			<method name="public void annotateSentence(edu.stanford.nlp.util.CoreMap sentence)">3</method>
			<method name="private java.util.List extractAllRelations(edu.stanford.nlp.util.CoreMap sentence)">6</method>
			<method name="public void setSigma(double d)">1</method>
			<method name="protected edu.stanford.nlp.ling.Datum createDatum(edu.stanford.nlp.ie.machinereading.structure.RelationMention rel, String label)">3</method>
			<method name="public void save(String modelpath)">1</method>
			<method name="private edu.stanford.nlp.classify.GeneralDataset createDataset(edu.stanford.nlp.pipeline.Annotation corpus)">2</method>
			<method name="public void setValidator(edu.stanford.nlp.ie.machinereading.LabelValidator lv)">1</method>
			<method name="public void _init_(edu.stanford.nlp.ie.machinereading.RelationFeatureFactory featureFac, boolean createUnrelatedRelations, edu.stanford.nlp.ie.machinereading.structure.RelationMentionFactory factory)">0</method>
			<method name="public java.util.List annotateMulticlass(java.util.List testDatums)">4</method>
			<method name="public void setRelationExtractorClassifierType(String s)">1</method>
			<method name="public void setCreateUnrelatedRelations(boolean b)">1</method>
			<method name="private edu.stanford.nlp.stats.Counter probabilityOf(edu.stanford.nlp.ling.Datum testDatum)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.ArrayStringFilter$Mode</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>3</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.9166666666666666</lcom3>
		<loc>56</loc>
		<dam>0.25</dam>
		<moa>4</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>12.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="public static edu.stanford.nlp.util.ArrayStringFilter$Mode valueOf(String name)">1</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static edu.stanford.nlp.util.ArrayStringFilter$Mode[] values()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.Expressions$IndexedExpression</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>5</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>25</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>24.0</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.types.Expression expr, int index)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.XMLUtils</name>
		<wmc>21</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>17</cbo>
		<rfc>76</rfc>
		<lcom>202</lcom>
		<ca>13</ca>
		<ce>5</ce>
		<npm>18</npm>
		<lcom3>0.9</lcom3>
		<loc>2397</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.12222222222222222</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>113.04761904761905</amc>
		<cc>
			<method name="public static String escapeAttributeXML(String in)">4</method>
			<method name="public static String stripTags(java.io.Reader r, java.util.List mapBack, boolean markLineBreaks)">9</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static String unescapeStringForXML(String s)">2</method>
			<method name="public static org.w3c.dom.Document readDocumentFromFile(String filename)">1</method>
			<method name="public static int findSpace(String haystack, int begin)">5</method>
			<method name="public static String escapeTextAroundXMLTags(String s)">2</method>
			<method name="public static boolean isBreaking(String tag)">1</method>
			<method name="public static String escapeElementXML(String in)">5</method>
			<method name="public static String escapeXML(String in)">7</method>
			<method name="public static edu.stanford.nlp.util.XMLUtils$XMLTag parseTag(String tagString)">5</method>
			<method name="private void _init_()">0</method>
			<method name="public static javax.xml.parsers.DocumentBuilder getXmlParser()">1</method>
			<method name="private static char translate(String s)">288</method>
			<method name="public static String readTag(java.io.Reader r)">1</method>
			<method name="public static boolean isBreaking(edu.stanford.nlp.util.XMLUtils$XMLTag tag)">1</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="public static edu.stanford.nlp.util.XMLUtils$XMLTag readAndParseTag(java.io.Reader r)">1</method>
			<method name="public static org.w3c.dom.Document readDocumentFromString(String s)">1</method>
			<method name="public static javax.xml.parsers.DocumentBuilder getValidatingXmlParser(java.io.File schemaFile)">1</method>
			<method name="public static String readUntilTag(java.io.Reader r)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.RedwoodConfiguration$6</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>1.0</lcom3>
		<loc>12</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.5</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.util.logging.RedwoodConfiguration)">0</method>
			<method name="public void run()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.RedwoodConfiguration$7</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>5</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>20</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.0</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.util.logging.RedwoodConfiguration, edu.stanford.nlp.util.logging.RedwoodConfiguration$Thunk)">0</method>
			<method name="public void run()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.structure.MachineReadingAnnotations</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="private void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.RedwoodConfiguration$8</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>6</rfc>
		<lcom>1</lcom>
		<ca>2</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>1.0</lcom3>
		<loc>16</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.5</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.util.logging.RedwoodConfiguration)">0</method>
			<method name="public void run()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.RedwoodConfiguration$2</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>1.0</lcom3>
		<loc>18</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.5</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.util.logging.RedwoodConfiguration)">0</method>
			<method name="public void run()">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.classify.LinearClassifier</name>
		<wmc>70</wmc>
		<dit>1</dit>
		<noc>1</noc>
		<cbo>34</cbo>
		<rfc>189</rfc>
		<lcom>1733</lcom>
		<ca>12</ca>
		<ce>23</ce>
		<npm>54</npm>
		<lcom3>0.7536231884057971</lcom3>
		<loc>3770</loc>
		<dam>0.6666666666666666</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.10737812911725955</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>52.72857142857143</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="private edu.stanford.nlp.stats.Counter logProbabilityOfRVFDatum(edu.stanford.nlp.ling.RVFDatum example)">1</method>
			<method name="public void justificationOf(edu.stanford.nlp.ling.Datum example, java.io.PrintWriter pw, edu.stanford.nlp.util.Function printer, boolean sortedByFeature)">17</method>
			<method name="public double scoreOf(edu.stanford.nlp.ling.RVFDatum example, Object label)">2</method>
			<method name="public void justificationOf(edu.stanford.nlp.ling.Datum example, java.io.PrintWriter pw, boolean sorted)">2</method>
			<method name="public java.util.Collection labels()">1</method>
			<method name="public void dump()">1</method>
			<method name="public void dump(java.io.PrintWriter pw)">1</method>
			<method name="private double weight(Object feature, int iLabel)">1</method>
			<method name="public edu.stanford.nlp.stats.Counter probabilityOf(edu.stanford.nlp.ling.Datum example)">3</method>
			<method name="public java.util.List getTopFeatures(java.util.Set labels, double threshold, boolean useMagnitude, int numFeatures, boolean descending)">2</method>
			<method name="private static int bucketizeValue(double wt)">4</method>
			<method name="public void setWeights(double[][] newWeights)">1</method>
			<method name="public String toDistributionString(int threshold)">3</method>
			<method name="public edu.stanford.nlp.stats.Counter logProbabilityOf(edu.stanford.nlp.ling.Datum example)">2</method>
			<method name="public java.util.List getTopFeatures(double threshold, boolean useMagnitude, int numFeatures)">1</method>
			<method name="public String toHistogramString()">14</method>
			<method name="public String toString(String style, int param)">8</method>
			<method name="public void saveToFilename(String file)">4</method>
			<method name="protected java.util.Set getLabelIndices(java.util.Set labels)">2</method>
			<method name="public void justificationOf(edu.stanford.nlp.ling.RVFDatum example, java.io.PrintWriter pw)">13</method>
			<method name="public void _init_(edu.stanford.nlp.stats.Counter weightCounter, edu.stanford.nlp.stats.Counter thresholdsC)">0</method>
			<method name="public void justificationOf(edu.stanford.nlp.ling.Datum example, java.io.PrintWriter pw, edu.stanford.nlp.util.Function printer)">1</method>
			<method name="public double weight(Object feature, Object label)">1</method>
			<method name="public void justificationOf(edu.stanford.nlp.ling.Datum example)">1</method>
			<method name="protected java.util.List getTopFeaturesLabelIndices(java.util.Set iLabels, double threshold, boolean useMagnitude, int numFeatures, boolean descending)">10</method>
			<method name="public edu.stanford.nlp.util.Index labelIndex()">1</method>
			<method name="public static edu.stanford.nlp.classify.LinearClassifier readClassifier(String loadPath)">1</method>
			<method name="private double scoreOf(int[] feats, Object label)">4</method>
			<method name="public String topFeaturesToString(java.util.List topFeatures)">5</method>
			<method name="private double scoreOfRVFDatum(edu.stanford.nlp.ling.RVFDatum example, Object label)">2</method>
			<method name="public void _init_(double[] weights, edu.stanford.nlp.util.Index weightIndex)">0</method>
			<method name="public edu.stanford.nlp.stats.Counter logProbabilityOf(edu.stanford.nlp.ling.RVFDatum example)">1</method>
			<method name="public Object experimentalClassOf(edu.stanford.nlp.ling.Datum example)">7</method>
			<method name="private Object classOfRVFDatum(edu.stanford.nlp.ling.RVFDatum example)">1</method>
			<method name="public String toAllWeightsString()">1</method>
			<method name="private void init(edu.stanford.nlp.stats.Counter weightCounter, edu.stanford.nlp.stats.Counter thresholdsC)">5</method>
			<method name="protected int getFeatureCountLabelIndices(java.util.Set iLabels, double threshold, boolean useMagnitude)">4</method>
			<method name="public edu.stanford.nlp.stats.Counter logProbabilityOf(int[] features)">1</method>
			<method name="public static void writeClassifier(edu.stanford.nlp.classify.LinearClassifier classifier, String writePath)">1</method>
			<method name="public void dumpSorted()">1</method>
			<method name="private edu.stanford.nlp.stats.Counter probabilityOfRVFDatum(edu.stanford.nlp.ling.RVFDatum example)">2</method>
			<method name="public String toString()">1</method>
			<method name="private double weight(int iFeature, int iLabel)">6</method>
			<method name="private edu.stanford.nlp.stats.Counter scoresOfRVFDatum(edu.stanford.nlp.ling.RVFDatum example)">2</method>
			<method name="public double[][] weights()">1</method>
			<method name="public void _init_(double[][] weights, edu.stanford.nlp.util.Index featureIndex, edu.stanford.nlp.util.Index labelIndex, double[] thresholds)">0</method>
			<method name="public edu.stanford.nlp.stats.Counter scoresOf(edu.stanford.nlp.ling.Datum example)">4</method>
			<method name="public Object classOf(edu.stanford.nlp.ling.Datum example)">2</method>
			<method name="public String toBiggestWeightFeaturesString(boolean useMagnitude, int numFeatures, boolean printDescending)">11</method>
			<method name="private void justificationOfRVFDatum(edu.stanford.nlp.ling.RVFDatum example, java.io.PrintWriter pw)">13</method>
			<method name="public Object classOf(edu.stanford.nlp.ling.RVFDatum example)">1</method>
			<method name="private static void printHistCounts(int ind, String title, java.io.PrintWriter pw, double[][] hist, Object[][] histEg)">7</method>
			<method name="public void justificationOf(edu.stanford.nlp.ling.Datum example, java.io.PrintWriter pw)">1</method>
			<method name="public int getFeatureCount(java.util.Set labels, double threshold, boolean useMagnitude)">2</method>
			<method name="public double scoreOf(edu.stanford.nlp.ling.Datum example, Object label)">3</method>
			<method name="public edu.stanford.nlp.stats.Counter scoresOf(edu.stanford.nlp.ling.RVFDatum example)">2</method>
			<method name="public void _init_(double[][] weights, edu.stanford.nlp.util.Index featureIndex, edu.stanford.nlp.util.Index labelIndex)">0</method>
			<method name="public edu.stanford.nlp.stats.Counter probabilityOf(edu.stanford.nlp.ling.RVFDatum example)">2</method>
			<method name="public void adaptWeights(edu.stanford.nlp.classify.Dataset adapt, edu.stanford.nlp.classify.LinearClassifierFactory lcf)">1</method>
			<method name="public edu.stanford.nlp.stats.Counter scoresOf(int[] features)">2</method>
			<method name="public void justificationOf(edu.stanford.nlp.ling.RVFDatum example)">1</method>
			<method name="public void _init_(edu.stanford.nlp.stats.Counter weightCounter)">0</method>
			<method name="public java.util.Map weightsAsMapOfCounters()">2</method>
			<method name="public int totalSize()">1</method>
			<method name="public edu.stanford.nlp.util.Index featureIndex()">1</method>
			<method name="public int getFeatureCount(double threshold, boolean useMagnitude)">5</method>
			<method name="public edu.stanford.nlp.stats.Counter scoresOf(edu.stanford.nlp.ling.Datum example, java.util.Collection possibleLabels)">3</method>
			<method name="public java.util.Collection features()">1</method>
			<method name="public edu.stanford.nlp.stats.Counter probabilityOf(int[] features)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.RedwoodConfiguration$3</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>1.0</lcom3>
		<loc>18</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.5</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.util.logging.RedwoodConfiguration)">0</method>
			<method name="public void run()">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.RedwoodConfiguration$4</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>1.0</lcom3>
		<loc>18</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.5</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.util.logging.RedwoodConfiguration)">0</method>
			<method name="public void run()">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.hebrew.HebrewTreeReaderFactory</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>13</cbo>
		<rfc>26</rfc>
		<lcom>3</lcom>
		<ca>2</ca>
		<ce>12</ce>
		<npm>3</npm>
		<lcom3>1.5</lcom3>
		<loc>110</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4444444444444444</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>35.333333333333336</amc>
		<cc>
			<method name="public edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader in)">1</method>
			<method name="public static void main(String[] args)">3</method>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.RedwoodConfiguration$5</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>4</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>20</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.0</amc>
		<cc>
			<method name="public void run()">1</method>
			<method name="void _init_(edu.stanford.nlp.util.logging.RedwoodConfiguration, int)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.HasInterval</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>24</cbo>
		<rfc>7</rfc>
		<lcom>1</lcom>
		<ca>23</ca>
		<ce>6</ce>
		<npm>1</npm>
		<lcom3>1.0</lcom3>
		<loc>28</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.5</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="public abstract edu.stanford.nlp.util.Interval getInterval()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.RedwoodConfiguration$1</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>1.0</lcom3>
		<loc>18</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.5</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.util.logging.RedwoodConfiguration)">0</method>
			<method name="public void run()">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Interval$RelType</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>5</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.9696969696969697</lcom3>
		<loc>133</loc>
		<dam>0.09090909090909091</dam>
		<moa>11</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>29.5</amc>
		<cc>
			<method name="public static edu.stanford.nlp.util.Interval$RelType valueOf(String name)">1</method>
			<method name="public static edu.stanford.nlp.util.Interval$RelType[] values()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$TrueTagAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.SQNMinimizer</name>
		<wmc>11</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>35</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>6</npm>
		<lcom3>0.7</lcom3>
		<loc>566</loc>
		<dam>0.6363636363636364</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.26136363636363635</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>49.45454545454545</amc>
		<cc>
			<method name="protected void init(edu.stanford.nlp.optimization.AbstractStochasticCachingDiffFunction func)">1</method>
			<method name="public void _init_(int mem, double initialGain, int batchSize, boolean output)">0</method>
			<method name="private static double[] plusAndConstMult(double[] a, double[] b, double c, double[] d)">2</method>
			<method name="private void clearStuff()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(int m)">0</method>
			<method name="private void computeDir(double[] dir, double[] fg)">1</method>
			<method name="public edu.stanford.nlp.util.Pair tune(edu.stanford.nlp.optimization.Function function, double[] initial, long msPerTest)">1</method>
			<method name="public String getName()">1</method>
			<method name="protected void takeStep(edu.stanford.nlp.optimization.AbstractStochasticCachingDiffFunction dfunction)">6</method>
			<method name="public void setM(int m)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.LabeledScoredConstituent$LabelFactoryHolder</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>0</npm>
		<lcom3>1.0</lcom3>
		<loc>12</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.5</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>13</noc>
		<cbo>24</cbo>
		<rfc>11</rfc>
		<lcom>4</lcom>
		<ca>22</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>0.8125</lcom3>
		<loc>97</loc>
		<dam>0.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>17.6</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="public abstract edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree, edu.stanford.nlp.trees.tregex.TregexMatcher)">1</method>
			<method name="public String toString()">4</method>
			<method name="protected void setRoot(edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPatternRoot root)">2</method>
			<method name="void _init_(String label, edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern[] children)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.classify.AbstractLinearClassifierFactory</name>
		<wmc>9</wmc>
		<dit>1</dit>
		<noc>2</noc>
		<cbo>9</cbo>
		<rfc>17</rfc>
		<lcom>26</lcom>
		<ca>2</ca>
		<ce>7</ce>
		<npm>6</npm>
		<lcom3>0.5416666666666666</lcom3>
		<loc>88</loc>
		<dam>0.3333333333333333</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.3333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.444444444444445</amc>
		<cc>
			<method name="public volatile edu.stanford.nlp.classify.Classifier trainClassifier(edu.stanford.nlp.classify.GeneralDataset x0)">1</method>
			<method name="public edu.stanford.nlp.classify.Classifier trainClassifier(java.util.List examples)">1</method>
			<method name="public void _init_()">0</method>
			<method name="int numClasses()">1</method>
			<method name="int numFeatures()">1</method>
			<method name="protected abstract double[][] trainWeights(edu.stanford.nlp.classify.GeneralDataset)">1</method>
			<method name="public edu.stanford.nlp.classify.LinearClassifier trainClassifier(java.lang.ref.Reference ref)">1</method>
			<method name="public edu.stanford.nlp.classify.LinearClassifier trainClassifier(java.util.Collection examples)">1</method>
			<method name="public edu.stanford.nlp.classify.LinearClassifier trainClassifier(edu.stanford.nlp.classify.GeneralDataset data)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.AbstractTreebankParserParams$AnnotatePunctuationFunction</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>12</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>4</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>48</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.25</amc>
		<cc>
			<method name="public void _init_(String annotationMark, String key)">0</method>
			<method name="public String toString()">1</method>
			<method name="public volatile Object apply(Object x0)">1</method>
			<method name="public String apply(edu.stanford.nlp.trees.tregex.TregexMatcher m)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$GroundedTime</name>
		<wmc>16</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>18</cbo>
		<rfc>29</rfc>
		<lcom>78</lcom>
		<ca>5</ca>
		<ce>14</ce>
		<npm>16</npm>
		<lcom3>0.8</lcom3>
		<loc>137</loc>
		<dam>0.5</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2767857142857143</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.4375</amc>
		<cc>
			<method name="public org.joda.time.Partial getJodaTimePartial()">1</method>
			<method name="public volatile edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time x0, int x1)">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Time intersect(edu.stanford.nlp.time.SUTime$Time t)">2</method>
			<method name="public edu.stanford.nlp.time.SUTime$Time resolve(edu.stanford.nlp.time.SUTime$Time refTime, int flags)">1</method>
			<method name="public volatile edu.stanford.nlp.time.SUTime$Temporal setTimeZone(org.joda.time.DateTimeZone x0)">1</method>
			<method name="public boolean hasTime()">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Range getRange(int flags, edu.stanford.nlp.time.SUTime$Duration granularity)">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Temporal intersect(edu.stanford.nlp.time.SUTime$Temporal other)">4</method>
			<method name="public edu.stanford.nlp.time.SUTime$Duration getDuration()">1</method>
			<method name="public boolean isGrounded()">1</method>
			<method name="public String toFormattedString(int flags)">1</method>
			<method name="public void _init_(org.joda.time.ReadableInstant base)">0</method>
			<method name="public edu.stanford.nlp.time.SUTime$Time add(edu.stanford.nlp.time.SUTime$Duration offset)">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$GroundedTime setTimeZone(org.joda.time.DateTimeZone tz)">1</method>
			<method name="public void _init_(edu.stanford.nlp.time.SUTime$Time p, org.joda.time.ReadableInstant base)">0</method>
			<method name="public org.joda.time.Instant getJodaTimeInstant()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.ExtractorFrames$ExtractorTwoWordsTag</name>
		<wmc>7</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>19</rfc>
		<lcom>11</lcom>
		<ca>0</ca>
		<ce>3</ce>
		<npm>6</npm>
		<lcom3>0.8055555555555557</lcom3>
		<loc>103</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.35714285714285715</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.857142857142858</amc>
		<cc>
			<method name="String extract(edu.stanford.nlp.tagger.maxent.History h, edu.stanford.nlp.tagger.maxent.PairsHolder pH)">1</method>
			<method name="public int leftContext()">1</method>
			<method name="public boolean isLocal()">1</method>
			<method name="public int rightContext()">1</method>
			<method name="public boolean isDynamic()">1</method>
			<method name="public String toString()">1</method>
			<method name="public void _init_(int leftWord, int rightWord, int tag)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.process.WordSegmenter</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>7</rfc>
		<lcom>21</lcom>
		<ca>5</ca>
		<ce>1</ce>
		<npm>7</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.30952380952380953</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract void loadSegmenter(String)">1</method>
			<method name="public abstract void train(edu.stanford.nlp.trees.Tree)">1</method>
			<method name="public abstract void finishTraining()">1</method>
			<method name="public abstract void train(java.util.List)">1</method>
			<method name="public abstract java.util.List segment(String)">1</method>
			<method name="public abstract void train(java.util.Collection)">1</method>
			<method name="public abstract void initializeTraining(double)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.MachineReading</name>
		<wmc>44</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>21</cbo>
		<rfc>141</rfc>
		<lcom>796</lcom>
		<ca>2</ca>
		<ce>20</ce>
		<npm>27</npm>
		<lcom3>0.9155446756425948</lcom3>
		<loc>2554</loc>
		<dam>0.3684210526315789</dam>
		<moa>9</moa>
		<mfa>0.0</mfa>
		<cam>0.11482558139534883</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>56.61363636363637</amc>
		<cc>
			<method name="protected java.util.List printTask(String taskName, java.util.Set printers, edu.stanford.nlp.pipeline.Annotation gold, edu.stanford.nlp.pipeline.Annotation pred)">2</method>
			<method name="public edu.stanford.nlp.pipeline.Annotation annotate(edu.stanford.nlp.pipeline.Annotation testing)">1</method>
			<method name="protected boolean serializedModelExists(String prefix)">4</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static void setLoggerLevel(java.util.logging.Level level)">1</method>
			<method name="static edu.stanford.nlp.pipeline.Annotation keepPercentage(edu.stanford.nlp.pipeline.Annotation corpus, double percentage)">2</method>
			<method name="public static void setConsoleLevel(java.util.logging.Level level)">4</method>
			<method name="public void setRelationResultsPrinterSet(java.util.Set relationResultsPrinterSet)">1</method>
			<method name="private java.util.Set makeResultsPrinters(String classes, String[] args)">3</method>
			<method name="public void setForceParseSentences(boolean forceParseSentences)">1</method>
			<method name="public java.util.Set getEntityResultsPrinterSet()">1</method>
			<method name="public void setPredictions(edu.stanford.nlp.pipeline.Annotation[][] predictions)">1</method>
			<method name="public void setEntityResultsPrinterSet(java.util.Set entityResultsPrinterSet)">1</method>
			<method name="private edu.stanford.nlp.ie.machinereading.GenericDataSetReader makeAuxReader()">1</method>
			<method name="protected edu.stanford.nlp.pipeline.Annotation annotate(edu.stanford.nlp.pipeline.Annotation testing, int partition)">21</method>
			<method name="private static void changeGoldRelationArgsToPredicted(edu.stanford.nlp.pipeline.Annotation dataset)">4</method>
			<method name="public void setReader(edu.stanford.nlp.ie.machinereading.GenericDataSetReader reader)">1</method>
			<method name="private static void removeSkippableRelations(edu.stanford.nlp.pipeline.Annotation dataset, java.util.Set relationsToSkip)">6</method>
			<method name="private void assignSyntacticHeadToEntities(edu.stanford.nlp.pipeline.Annotation corpus)">11</method>
			<method name="protected void train(edu.stanford.nlp.pipeline.Annotation training, int partition)">1</method>
			<method name="public void setExtractRelations(boolean extractRelations)">1</method>
			<method name="private edu.stanford.nlp.ie.machinereading.GenericDataSetReader makeReader(java.util.Properties props)">1</method>
			<method name="public edu.stanford.nlp.ie.machinereading.GenericDataSetReader getReader()">1</method>
			<method name="public edu.stanford.nlp.ie.machinereading.GenericDataSetReader getAuxReader()">1</method>
			<method name="public edu.stanford.nlp.util.Pair[] getDatasets()">1</method>
			<method name="public static edu.stanford.nlp.ie.machinereading.RelationFeatureFactory makeRelationFeatureFactory(Class relationFeatureFactoryClass, String relationFeatureList, boolean doNotLexicalizeFirstArg)">3</method>
			<method name="public void setDatasets(edu.stanford.nlp.util.Pair[] datasets)">1</method>
			<method name="protected void makeDataSets(edu.stanford.nlp.pipeline.Annotation training, edu.stanford.nlp.pipeline.Annotation testing, edu.stanford.nlp.pipeline.Annotation auxDataset)">13</method>
			<method name="public static edu.stanford.nlp.ie.machinereading.MachineReading makeMachineReading(String[] args)">1</method>
			<method name="public static edu.stanford.nlp.ie.machinereading.Extractor makeExtractor(Class extractorClass)">2</method>
			<method name="public void setExtractEvents(boolean extractEvents)">1</method>
			<method name="public void setAuxReader(edu.stanford.nlp.ie.machinereading.GenericDataSetReader auxReader)">1</method>
			<method name="public void setExtractEntities(boolean extractEntities)">1</method>
			<method name="protected edu.stanford.nlp.pipeline.Annotation loadOrMakeSerializedSentences(String sentencesPath, edu.stanford.nlp.ie.machinereading.GenericDataSetReader reader, java.io.File serializedSentences)">1</method>
			<method name="public static edu.stanford.nlp.ie.machinereading.structure.RelationMentionFactory makeRelationMentionFactory(Class relationMentionFactoryClass)">1</method>
			<method name="private void _init_(String[] args)">0</method>
			<method name="public static edu.stanford.nlp.ie.machinereading.Extractor makeEntityExtractor(Class entityExtractorClass, String gazetteerPath)">2</method>
			<method name="public static edu.stanford.nlp.ie.machinereading.MachineReading makeMachineReadingForAnnotation(edu.stanford.nlp.ie.machinereading.GenericDataSetReader reader, edu.stanford.nlp.ie.machinereading.Extractor entityExtractor, edu.stanford.nlp.ie.machinereading.Extractor relationExtractor, edu.stanford.nlp.ie.machinereading.Extractor eventExtractor, edu.stanford.nlp.ie.machinereading.Extractor consistencyChecker, edu.stanford.nlp.ie.machinereading.Extractor relationPostProcessor, boolean testRelationsUsingPredictedEntities, boolean verbose)">8</method>
			<method name="protected void _init_()">0</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="public java.util.Set getRelationResultsPrinterSet()">1</method>
			<method name="public java.util.List run()">1</method>
			<method name="public edu.stanford.nlp.pipeline.Annotation[][] getPredictions()">1</method>
			<method name="private void makeResultsPrinters(String[] args)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$DurationWithMillis</name>
		<wmc>8</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>22</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>5</ce>
		<npm>8</npm>
		<lcom3>0.5714285714285714</lcom3>
		<loc>110</loc>
		<dam>0.5</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.5</amc>
		<cc>
			<method name="public void _init_(org.joda.time.ReadableDuration base)">0</method>
			<method name="public void _init_(edu.stanford.nlp.time.SUTime$Duration d, org.joda.time.ReadableDuration base)">0</method>
			<method name="public edu.stanford.nlp.time.SUTime$Duration divideBy(int m)">2</method>
			<method name="public org.joda.time.Period getJodaTimePeriod()">1</method>
			<method name="public org.joda.time.Duration getJodaTimeDuration()">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Duration add(edu.stanford.nlp.time.SUTime$Duration d)">3</method>
			<method name="public void _init_(long ms)">0</method>
			<method name="public edu.stanford.nlp.time.SUTime$Duration multiplyBy(int m)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.semgraph.SemanticGraphEdge</name>
		<wmc>17</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>31</rfc>
		<lcom>104</lcom>
		<ca>8</ca>
		<ce>4</ce>
		<npm>16</npm>
		<lcom3>0.7734375</lcom3>
		<loc>243</loc>
		<dam>0.875</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.21428571428571427</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>12.823529411764707</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.semgraph.SemanticGraphEdge e)">0</method>
			<method name="public edu.stanford.nlp.ling.IndexedWord getDependent()">1</method>
			<method name="public boolean equals(Object o)">7</method>
			<method name="public edu.stanford.nlp.ling.IndexedWord getTarget()">1</method>
			<method name="public static java.util.Comparator orderByTargetComparator()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public boolean typeEquals(edu.stanford.nlp.semgraph.SemanticGraphEdge e)">1</method>
			<method name="public edu.stanford.nlp.ling.IndexedWord getSource()">1</method>
			<method name="public volatile int compareTo(Object x0)">1</method>
			<method name="public boolean isExtra()">1</method>
			<method name="public int hashCode()">4</method>
			<method name="public int compareTo(edu.stanford.nlp.semgraph.SemanticGraphEdge other)">3</method>
			<method name="public edu.stanford.nlp.trees.GrammaticalRelation getRelation()">1</method>
			<method name="public double getWeight()">1</method>
			<method name="public String toString()">2</method>
			<method name="public void _init_(edu.stanford.nlp.ling.IndexedWord source, edu.stanford.nlp.ling.IndexedWord target, edu.stanford.nlp.trees.GrammaticalRelation relation, double weight, boolean isExtra)">0</method>
			<method name="public edu.stanford.nlp.ling.IndexedWord getGovernor()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.arabic.ArabicTreeNormalizer$ArabicEmptyFilter</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>8</rfc>
		<lcom>3</lcom>
		<ca>2</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>1.5</lcom3>
		<loc>60</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.666666666666668</amc>
		<cc>
			<method name="public boolean accept(edu.stanford.nlp.trees.Tree t)">10</method>
			<method name="public void _init_()">0</method>
			<method name="public volatile boolean accept(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.sequences.CoNLLDocumentReaderAndWriter</name>
		<wmc>15</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>61</rfc>
		<lcom>59</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>6</npm>
		<lcom3>0.9081632653061226</lcom3>
		<loc>1162</loc>
		<dam>0.7142857142857143</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.22321428571428573</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>76.0</amc>
		<cc>
			<method name="private String intern(String s)">2</method>
			<method name="static java.util.Iterator access$000(java.io.Reader x0)">1</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="private void deEndify(java.util.List tokens)">11</method>
			<method name="public java.util.Iterator getIterator(java.io.Reader r)">1</method>
			<method name="private void entitySubclassify(java.util.List tokens, String style)">41</method>
			<method name="static java.util.List access$100(edu.stanford.nlp.sequences.CoNLLDocumentReaderAndWriter x0, String x1)">1</method>
			<method name="public void printAnswers(java.util.List doc, java.io.PrintWriter out)">6</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="public void init(edu.stanford.nlp.sequences.SeqClassifierFlags flags)">1</method>
			<method name="private static java.util.Iterator splitIntoDocs(java.io.Reader r)">5</method>
			<method name="private edu.stanford.nlp.ling.CoreLabel makeCoreLabel(String line)">3</method>
			<method name="private java.util.List processDocument(String doc)">4</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.domains.roth.RothEntityExtractor</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>9</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>1.3333333333333335</lcom3>
		<loc>55</loc>
		<dam>0.6666666666666666</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>25.0</amc>
		<cc>
			<method name="public String getEntityTypeForTag(String ner)">2</method>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.FixedPrioritiesPriorityQueue</name>
		<wmc>28</wmc>
		<dit>3</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>50</rfc>
		<lcom>282</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>21</npm>
		<lcom3>0.6222222222222222</lcom3>
		<loc>567</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.4222222222222222</mfa>
		<cam>0.29285714285714287</cam>
		<ic>2</ic>
		<cbm>9</cbm>
		<amc>19.071428571428573</amc>
		<cc>
			<method name="public void clear()">1</method>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="public String toString(int maxKeysToPrint)">6</method>
			<method name="public void _init_(int capacity)">0</method>
			<method name="public boolean hasNext()">2</method>
			<method name="public volatile Object clone()">1</method>
			<method name="public double getPriority()">2</method>
			<method name="private static int leftChild(int loc)">1</method>
			<method name="public int size()">1</method>
			<method name="public String toString()">1</method>
			<method name="private void grow(int newCapacity)">2</method>
			<method name="private void heapifyDown(int loc)">7</method>
			<method name="public void _init_()">0</method>
			<method name="public Object getFirst()">2</method>
			<method name="public void remove()">1</method>
			<method name="public boolean changePriority(Object key, double priority)">1</method>
			<method name="public double getPriority(Object key)">3</method>
			<method name="public Object next()">1</method>
			<method name="public Object removeFirst()">1</method>
			<method name="private void swap(int loc1, int loc2)">1</method>
			<method name="public boolean add(Object key, double priority)">2</method>
			<method name="public static void main(String[] args)">2</method>
			<method name="private void heapifyUp(int loc)">3</method>
			<method name="private static int rightChild(int loc)">1</method>
			<method name="public edu.stanford.nlp.util.FixedPrioritiesPriorityQueue clone()">2</method>
			<method name="public boolean relaxPriority(Object key, double priority)">1</method>
			<method name="public java.util.List toSortedList()">2</method>
			<method name="private static int parent(int loc)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.CtbDict</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>24</rfc>
		<lcom>17</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>0.7083333333333334</lcom3>
		<loc>165</loc>
		<dam>0.5</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6428571428571429</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>22.0</amc>
		<cc>
			<method name="private void readCtbDict(String filename)">1</method>
			<method name="private void _init_()">0</method>
			<method name="private java.util.Set getsuf(String a)">1</method>
			<method name="private java.util.Set getpre(String a)">1</method>
			<method name="protected static String getTagPre(String a1, String a2)">3</method>
			<method name="protected static String getTagSuf(String a1, String a2)">3</method>
			<method name="private static synchronized edu.stanford.nlp.tagger.maxent.CtbDict getInstance()">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.metrics.UnlabeledAttachmentEval</name>
		<wmc>7</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>18</cbo>
		<rfc>61</rfc>
		<lcom>15</lcom>
		<ca>3</ca>
		<ce>16</ce>
		<npm>4</npm>
		<lcom3>0.7222222222222223</lcom3>
		<loc>498</loc>
		<dam>0.8333333333333334</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.2962962962962963</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>69.28571428571429</amc>
		<cc>
			<method name="static edu.stanford.nlp.util.Filter access$000(edu.stanford.nlp.parser.metrics.UnlabeledAttachmentEval x0)">1</method>
			<method name="public static void main(String[] args)">17</method>
			<method name="static void _clinit_()">0</method>
			<method name="protected java.util.Set makeObjects(edu.stanford.nlp.trees.Tree tree)">3</method>
			<method name="public void _init_(String str, boolean runningAverages, edu.stanford.nlp.trees.HeadFinder headFinder, edu.stanford.nlp.util.Filter punctRejectFilter)">0</method>
			<method name="public void evaluate(edu.stanford.nlp.trees.Tree guess, edu.stanford.nlp.trees.Tree gold, java.io.PrintWriter pw)">4</method>
			<method name="public void _init_(String str, boolean runningAverages, edu.stanford.nlp.trees.HeadFinder headFinder)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.StanfordRedwoodConfiguration</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>10</rfc>
		<lcom>6</lcom>
		<ca>2</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>46</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.25</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.5</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public static void minimalSetup()">1</method>
			<method name="public static void apply(java.util.Properties props)">3</method>
			<method name="public static void setup()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$ExplicitTemporalSet</name>
		<wmc>12</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>29</rfc>
		<lcom>24</lcom>
		<ca>1</ca>
		<ce>10</ce>
		<npm>12</npm>
		<lcom3>0.7272727272727273</lcom3>
		<loc>180</loc>
		<dam>0.5</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2222222222222222</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.833333333333334</amc>
		<cc>
			<method name="public edu.stanford.nlp.time.SUTime$Time getTime()">1</method>
			<method name="public transient void _init_(edu.stanford.nlp.time.SUTime$Temporal[] temporals)">0</method>
			<method name="public edu.stanford.nlp.time.SUTime$ExplicitTemporalSet setTimeZone(org.joda.time.DateTimeZone tz)">2</method>
			<method name="public edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time refTime, int flags)">2</method>
			<method name="public volatile edu.stanford.nlp.time.SUTime$Temporal setTimeZone(org.joda.time.DateTimeZone x0)">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Temporal intersect(edu.stanford.nlp.time.SUTime$Temporal other)">5</method>
			<method name="public edu.stanford.nlp.time.SUTime$Range getRange(int flags, edu.stanford.nlp.time.SUTime$Duration granularity)">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Duration getDuration()">1</method>
			<method name="public void _init_(edu.stanford.nlp.time.SUTime$ExplicitTemporalSet p, java.util.Set temporals)">0</method>
			<method name="public void _init_(java.util.Set temporals)">0</method>
			<method name="public boolean isGrounded()">1</method>
			<method name="public String toFormattedString(int flags)">4</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$GrandparentAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequenceMatcher$BranchStates</name>
		<wmc>35</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>17</cbo>
		<rfc>87</rfc>
		<lcom>537</lcom>
		<ca>8</ca>
		<ce>11</ce>
		<npm>0</npm>
		<lcom3>0.4117647058823529</lcom3>
		<loc>963</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.23714285714285716</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>26.428571428571427</amc>
		<cc>
			<method name="protected void removeMatchStateInfo(int bid, edu.stanford.nlp.ling.tokensregex.SequencePattern$State node)">2</method>
			<method name="void _init_()">0</method>
			<method name="static java.util.List access$1400(edu.stanford.nlp.ling.tokensregex.SequenceMatcher$BranchStates x0, int x1)">1</method>
			<method name="protected java.util.Map getMatchStateInfo(int bid, boolean add)">4</method>
			<method name="protected edu.stanford.nlp.ling.tokensregex.SequenceMatcher$BranchState getBranchState(int bid)">4</method>
			<method name="protected void startMatchedCountInc(int bid, edu.stanford.nlp.ling.tokensregex.SequencePattern$State node)">2</method>
			<method name="protected int endMatchedCountInc(int bid, edu.stanford.nlp.ling.tokensregex.SequencePattern$State node)">3</method>
			<method name="static void access$1200(edu.stanford.nlp.ling.tokensregex.SequenceMatcher$BranchStates x0, edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates x1)">1</method>
			<method name="protected edu.stanford.nlp.ling.tokensregex.SequenceMatcher$BranchState getBranchState(int bid, boolean add)">4</method>
			<method name="protected void clearGroupStart(int bid, int captureGroupId)">3</method>
			<method name="private void mergeBranchStates(edu.stanford.nlp.ling.tokensregex.SequenceMatcher$BranchState bs)">6</method>
			<method name="private void condense()">4</method>
			<method name="protected void setGroupStart(int bid, int captureGroupId, int curPosition)">3</method>
			<method name="protected java.util.Map getMatchedResults(int bid, boolean add)">4</method>
			<method name="static void access$1300(edu.stanford.nlp.ling.tokensregex.SequenceMatcher$BranchStates x0)">1</method>
			<method name="protected java.util.Map getMatchedGroups(int bid, boolean add)">4</method>
			<method name="protected edu.stanford.nlp.util.HasInterval getMatchedInterval(int bid, edu.stanford.nlp.ling.tokensregex.SequencePattern$State node)">1</method>
			<method name="private java.util.List getParents(int bid)">3</method>
			<method name="protected Object getMatchStateInfo(int bid, edu.stanford.nlp.ling.tokensregex.SequencePattern$State node)">2</method>
			<method name="static void access$1700(edu.stanford.nlp.ling.tokensregex.SequenceMatcher$BranchStates x0, edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates x1)">1</method>
			<method name="protected void setMatchedResult(int bid, int index, Object obj)">3</method>
			<method name="protected void clearMatchedCount(int bid, edu.stanford.nlp.ling.tokensregex.SequencePattern$State node)">1</method>
			<method name="protected int newBid(int parent, int child)">1</method>
			<method name="protected int size()">1</method>
			<method name="protected void setMatchStateInfo(int bid, edu.stanford.nlp.ling.tokensregex.SequencePattern$State node, Object obj)">1</method>
			<method name="protected void setMatchedInterval(int bid, edu.stanford.nlp.ling.tokensregex.SequencePattern$State node, edu.stanford.nlp.util.HasInterval interval)">2</method>
			<method name="protected edu.stanford.nlp.ling.tokensregex.BasicSequenceMatchResult$MatchedGroup getMatchedGroup(int bid, int groupId)">2</method>
			<method name="protected Object getMatchedResult(int bid, int index)">2</method>
			<method name="static void access$1600(edu.stanford.nlp.ling.tokensregex.SequenceMatcher$BranchStates x0, edu.stanford.nlp.ling.tokensregex.SequenceMatcher$BranchState x1)">1</method>
			<method name="protected int getBid(int parent, int child)">1</method>
			<method name="protected void addBidsToCollapse(int bid, int[] bids)">1</method>
			<method name="private void link(edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates s)">1</method>
			<method name="protected void setGroupEnd(int bid, int captureGroupId, int curPosition, Object value)">5</method>
			<method name="protected int getBranchId(int bid, int nextBranchIndex, int nextTotal)">6</method>
			<method name="private void unlink(edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates s)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.CTBunkDict</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>22</rfc>
		<lcom>11</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>0.7333333333333333</lcom3>
		<loc>125</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.333333333333332</amc>
		<cc>
			<method name="private static void readCTBunkDict(String filename)">2</method>
			<method name="private void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="private static java.util.Set get(String a)">1</method>
			<method name="protected static String getTag(String tag, String word)">3</method>
			<method name="private static edu.stanford.nlp.tagger.maxent.CTBunkDict getInstance()">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.international.arabic.ArabicMorphoFeatureSpecification$ArabicMorphoFeatures</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>15</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>1.5</lcom3>
		<loc>95</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.8333333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>30.333333333333332</amc>
		<cc>
			<method name="public edu.stanford.nlp.international.morph.MorphoFeatures fromTagString(String str)">3</method>
			<method name="public String getTag(String basePartOfSpeech)">3</method>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$18$1</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>6</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>0.5</lcom3>
		<loc>57</loc>
		<dam>0.0</dam>
		<moa>4</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.333333333333332</amc>
		<cc>
			<method name="public void advance()">2</method>
			<method name="void initialize()">2</method>
			<method name="void _init_(edu.stanford.nlp.trees.tregex.Relation$18, edu.stanford.nlp.trees.tregex.TregexMatcher, edu.stanford.nlp.trees.Tree)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.domains.ace.AceReader</name>
		<wmc>16</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>27</cbo>
		<rfc>131</rfc>
		<lcom>78</lcom>
		<ca>1</ca>
		<ce>26</ce>
		<npm>5</npm>
		<lcom3>0.7777777777777779</lcom3>
		<loc>1261</loc>
		<dam>0.8888888888888888</dam>
		<moa>6</moa>
		<mfa>0.0</mfa>
		<cam>0.22380952380952382</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>77.25</amc>
		<cc>
			<method name="public edu.stanford.nlp.pipeline.Annotation read(String path)">1</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="private edu.stanford.nlp.ie.machinereading.structure.EntityMention convertAceEntityMention(edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEntityMention entityMention, String docId, edu.stanford.nlp.util.CoreMap sentence, int tokenOffset, String corefID)">1</method>
			<method name="private void countNameRelations(edu.stanford.nlp.util.CoreMap sent)">3</method>
			<method name="private edu.stanford.nlp.ie.machinereading.structure.EntityMention convertAceEntityMention(edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEntityMention entityMention, String docId, edu.stanford.nlp.util.CoreMap sentence, int tokenOffset)">9</method>
			<method name="public void _init_(edu.stanford.nlp.pipeline.StanfordCoreNLP processor, boolean preprocess, String version)">0</method>
			<method name="private void countMentionTypes(edu.stanford.nlp.util.CoreMap sent)">3</method>
			<method name="private java.util.List readDocument(java.io.File file, edu.stanford.nlp.pipeline.Annotation corpus)">1</method>
			<method name="private void countAdjacentMentions(edu.stanford.nlp.util.CoreMap sent)">4</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="private java.util.List readDocument(String prefix, edu.stanford.nlp.pipeline.Annotation corpus)">1</method>
			<method name="public void _init_(edu.stanford.nlp.pipeline.StanfordCoreNLP processor, boolean preprocess)">0</method>
			<method name="private edu.stanford.nlp.ie.machinereading.structure.EventMention convertAceEventMention(edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEventMention aceEventMention, String docId, edu.stanford.nlp.util.CoreMap sentence, java.util.Map entityMap, int tokenOffset)">5</method>
			<method name="private edu.stanford.nlp.ie.machinereading.structure.RelationMention convertAceRelationMention(edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceRelationMention aceRelationMention, String docId, edu.stanford.nlp.util.CoreMap sentence, java.util.Map entityMap)">7</method>
			<method name="private void printCounter(edu.stanford.nlp.stats.Counter c, String h)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.TaggerConfig$Mode</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.9333333333333332</lcom3>
		<loc>67</loc>
		<dam>0.2</dam>
		<moa>5</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>14.5</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static edu.stanford.nlp.tagger.maxent.TaggerConfig$Mode valueOf(String name)">1</method>
			<method name="public static edu.stanford.nlp.tagger.maxent.TaggerConfig$Mode[] values()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.SimpleGoodTuring</name>
		<wmc>13</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>43</rfc>
		<lcom>38</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>4</npm>
		<lcom3>0.796875</lcom3>
		<loc>858</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.20512820512820512</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>63.76923076923077</amc>
		<cc>
			<method name="public double[] getProbabilities()">1</method>
			<method name="private static int[] integerList2IntArray(java.util.List integers)">2</method>
			<method name="private int row(int freq)">5</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="private void print()">2</method>
			<method name="private double smoothed(int i)">1</method>
			<method name="public void _init_(int[] r, int[] n)">0</method>
			<method name="private static int[][] readInput()">1</method>
			<method name="private void validate(double tolerance)">3</method>
			<method name="private static double sq(double x)">1</method>
			<method name="private void compute()">13</method>
			<method name="private void findBestFit()">3</method>
			<method name="public double getProbabilityForUnseen()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.BobChrisTreeNormalizer$AOverAFilter</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>11</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>1.5</lcom3>
		<loc>61</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.0</amc>
		<cc>
			<method name="public boolean accept(edu.stanford.nlp.trees.Tree t)">9</method>
			<method name="public void _init_()">0</method>
			<method name="public volatile boolean accept(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.semgraph.SemanticGraphFactory</name>
		<wmc>24</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>20</cbo>
		<rfc>91</rfc>
		<lcom>276</lcom>
		<ca>3</ca>
		<ce>17</ce>
		<npm>22</npm>
		<lcom3>1.0434782608695652</lcom3>
		<loc>780</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.1909722222222222</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>31.458333333333332</amc>
		<cc>
			<method name="public static edu.stanford.nlp.semgraph.SemanticGraph makeFromTree(edu.stanford.nlp.trees.Tree tree, edu.stanford.nlp.semgraph.SemanticGraphFactory$Mode mode, boolean includeExtras, boolean lemmatize, boolean threadSafe, edu.stanford.nlp.util.Filter filter)">1</method>
			<method name="public static edu.stanford.nlp.semgraph.SemanticGraph generateUncollapsedDependencies(edu.stanford.nlp.trees.GrammaticalStructure gs, String docID, int index)">1</method>
			<method name="public static edu.stanford.nlp.semgraph.SemanticGraph duplicateKeepNodes(edu.stanford.nlp.semgraph.SemanticGraph sg)">3</method>
			<method name="public static edu.stanford.nlp.semgraph.SemanticGraph makeFromTree(edu.stanford.nlp.trees.GrammaticalStructure structure, String docID, int sentIndex)">1</method>
			<method name="static void addProjectedCategoriesToGrammaticalStructure(edu.stanford.nlp.trees.GrammaticalStructure gs)">3</method>
			<method name="public static edu.stanford.nlp.semgraph.SemanticGraph makeFromTree(edu.stanford.nlp.trees.Tree tree)">1</method>
			<method name="public static edu.stanford.nlp.semgraph.SemanticGraph makeFromTree(edu.stanford.nlp.trees.GrammaticalStructure gs, edu.stanford.nlp.semgraph.SemanticGraphFactory$Mode mode, boolean includeExtras, boolean lemmatize, boolean threadSafe, edu.stanford.nlp.util.Filter filter, String docID, int sentIndex)">4</method>
			<method name="public static edu.stanford.nlp.semgraph.SemanticGraph deepCopyFromGraphs(java.util.List graphs, java.util.List lengths)">7</method>
			<method name="public static edu.stanford.nlp.semgraph.SemanticGraph generateUncollapsedDependencies(edu.stanford.nlp.trees.Tree tree)">1</method>
			<method name="public static edu.stanford.nlp.semgraph.SemanticGraph generateCollapsedDependencies(edu.stanford.nlp.trees.GrammaticalStructure gs, String docID, int index)">1</method>
			<method name="public static edu.stanford.nlp.semgraph.SemanticGraph makeFromTree(edu.stanford.nlp.trees.Tree tree, edu.stanford.nlp.semgraph.SemanticGraphFactory$Mode mode, boolean includeExtras, boolean lemmatize, boolean threadSafe, edu.stanford.nlp.util.Filter filter, String docID, int sentIndex)">1</method>
			<method name="public static edu.stanford.nlp.semgraph.SemanticGraph makeFromEdges(Iterable edges)">3</method>
			<method name="public static edu.stanford.nlp.semgraph.SemanticGraph makeFromVertices(edu.stanford.nlp.semgraph.SemanticGraph sg, java.util.Collection nodes)">6</method>
			<method name="public static edu.stanford.nlp.semgraph.SemanticGraph makeFromTree(edu.stanford.nlp.trees.Tree tree, boolean collapse)">2</method>
			<method name="public static edu.stanford.nlp.semgraph.SemanticGraph generateCCProcessedDependencies(edu.stanford.nlp.trees.Tree tree)">1</method>
			<method name="public static edu.stanford.nlp.semgraph.SemanticGraph makeFromGraphs(java.util.Collection sgList)">3</method>
			<method name="public static edu.stanford.nlp.semgraph.SemanticGraph makeFromTree(edu.stanford.nlp.trees.GrammaticalStructure gs, edu.stanford.nlp.semgraph.SemanticGraphFactory$Mode mode, boolean includeExtras, boolean lemmatize, boolean threadSafe)">1</method>
			<method name="public static edu.stanford.nlp.semgraph.SemanticGraph allTypedDependencies(edu.stanford.nlp.trees.Tree tree, boolean collapse)">2</method>
			<method name="public static edu.stanford.nlp.semgraph.SemanticGraph makeFromTree(edu.stanford.nlp.trees.Tree tree, edu.stanford.nlp.semgraph.SemanticGraphFactory$Mode mode, boolean includeExtras, boolean lemmatize, boolean threadSafe)">1</method>
			<method name="public static edu.stanford.nlp.semgraph.SemanticGraph generateCCProcessedDependencies(edu.stanford.nlp.trees.GrammaticalStructure gs, String docID, int index)">1</method>
			<method name="private void _init_()">0</method>
			<method name="public static edu.stanford.nlp.semgraph.SemanticGraph makeFromTree(edu.stanford.nlp.trees.Tree tree, edu.stanford.nlp.semgraph.SemanticGraphFactory$Mode mode, boolean includeExtras, edu.stanford.nlp.util.Filter filter)">1</method>
			<method name="public static edu.stanford.nlp.semgraph.SemanticGraph generateCollapsedDependencies(edu.stanford.nlp.trees.Tree tree)">1</method>
			<method name="public static java.util.Set getVerticesFromEdgeSet(Iterable edges)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$MorphoNumAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.process.AbstractTokenizer</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>10</noc>
		<cbo>11</cbo>
		<rfc>12</rfc>
		<lcom>15</lcom>
		<ca>10</ca>
		<ce>1</ce>
		<npm>6</npm>
		<lcom3>0.5</lcom3>
		<loc>82</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.571428571428571</amc>
		<cc>
			<method name="public java.util.List tokenize()">2</method>
			<method name="public void _init_()">0</method>
			<method name="protected abstract Object getNext()">1</method>
			<method name="public boolean hasNext()">3</method>
			<method name="public void remove()">1</method>
			<method name="public Object next()">3</method>
			<method name="public Object peek()">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalRelations$ResultativeComplementGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.CTBErrorCorrectingTreeNormalizer$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.ClassicCounter$1$1</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>12</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>4</npm>
		<lcom3>0.625</lcom3>
		<loc>39</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.4</amc>
		<cc>
			<method name="public Double next()">1</method>
			<method name="void _init_(edu.stanford.nlp.stats.ClassicCounter$1)">0</method>
			<method name="public boolean hasNext()">1</method>
			<method name="public void remove()">1</method>
			<method name="public volatile Object next()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.IntPair</name>
		<wmc>7</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>15</cbo>
		<rfc>9</rfc>
		<lcom>9</lcom>
		<ca>15</ca>
		<ce>1</ce>
		<npm>7</npm>
		<lcom3>1.1666666666666667</lcom3>
		<loc>86</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.42857142857142855</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.142857142857142</amc>
		<cc>
			<method name="public int hashCode()">1</method>
			<method name="public edu.stanford.nlp.util.IntTuple getCopy()">1</method>
			<method name="public int getTarget()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public int getSource()">1</method>
			<method name="public void _init_(int src, int trgt)">0</method>
			<method name="public boolean equals(Object iO)">4</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.FeatureKey</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>23</rfc>
		<lcom>0</lcom>
		<ca>4</ca>
		<ce>0</ce>
		<npm>4</npm>
		<lcom3>0.4571428571428572</lcom3>
		<loc>149</loc>
		<dam>0.2</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2857142857142857</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>17.0</amc>
		<cc>
			<method name="public boolean equals(Object o)">6</method>
			<method name="public int hashCode()">2</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="protected void read(java.io.DataInputStream inf)">1</method>
			<method name="protected void _init_(int num, String val, String tag)">0</method>
			<method name="public String toString()">1</method>
			<method name="protected void save(java.io.DataOutputStream f)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.ScorerBCubed</name>
		<wmc>9</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>23</rfc>
		<lcom>22</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>1</npm>
		<lcom3>0.75</lcom3>
		<loc>647</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>70.77777777777777</amc>
		<cc>
			<method name="private void calculatePrecisionBconll(edu.stanford.nlp.dcoref.Document doc)">1</method>
			<method name="private void calculatePrecisionBcai(edu.stanford.nlp.dcoref.Document doc)">10</method>
			<method name="protected void calculateRecall(edu.stanford.nlp.dcoref.Document doc)">2</method>
			<method name="private void calculateRecallBconll(edu.stanford.nlp.dcoref.Document doc)">8</method>
			<method name="private void calculateRecallBcai(edu.stanford.nlp.dcoref.Document doc)">7</method>
			<method name="private void calculateRecallBall(edu.stanford.nlp.dcoref.Document doc)">7</method>
			<method name="protected void calculatePrecision(edu.stanford.nlp.dcoref.Document doc)">2</method>
			<method name="private void calculatePrecisionBall(edu.stanford.nlp.dcoref.Document doc)">7</method>
			<method name="public void _init_(edu.stanford.nlp.dcoref.ScorerBCubed$BCubedType _type)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.MultiWordStringMatcher$MatchType</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.9444444444444443</lcom3>
		<loc>78</loc>
		<dam>0.16666666666666666</dam>
		<moa>6</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>17.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="public static edu.stanford.nlp.ling.tokensregex.MultiWordStringMatcher$MatchType[] values()">1</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static edu.stanford.nlp.ling.tokensregex.MultiWordStringMatcher$MatchType valueOf(String name)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalRelations$ControllingSubjectGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.crf.CRFClassifierWithDropout</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>27</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>10</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>226</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4444444444444444</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>74.0</amc>
		<cc>
			<method name="protected java.util.Collection loadAuxiliaryData(java.util.Collection docs, edu.stanford.nlp.sequences.DocumentReaderAndWriter readerAndWriter)">6</method>
			<method name="protected edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunction getObjectiveFunction(int[][][][] data, int[][] labels)">3</method>
			<method name="public void _init_(edu.stanford.nlp.sequences.SeqClassifierFlags flags)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.Lattice</name>
		<wmc>11</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>33</rfc>
		<lcom>5</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>11</npm>
		<lcom3>0.7333333333333334</lcom3>
		<loc>235</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.36363636363636365</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.818181818181817</amc>
		<cc>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="public java.util.List getEdgesOverSpan(int start, int end)">3</method>
			<method name="public void addEdge(edu.stanford.nlp.parser.lexparser.LatticeEdge e)">3</method>
			<method name="public void _init_()">0</method>
			<method name="public int getNumNodes()">1</method>
			<method name="public java.util.List getConstraints()">1</method>
			<method name="public void addBoundary()">1</method>
			<method name="public void addConstraint(edu.stanford.nlp.parser.lexparser.ParserConstraint c)">1</method>
			<method name="public void setEdge(int id, edu.stanford.nlp.parser.lexparser.LatticeEdge e)">1</method>
			<method name="public String toString()">2</method>
			<method name="public int getNumEdges()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.Expressions$RegexMatchVarExpression</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>19</rfc>
		<lcom>10</lcom>
		<ca>1</ca>
		<ce>9</ce>
		<npm>5</npm>
		<lcom3>2.0</lcom3>
		<loc>138</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.34285714285714286</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>26.6</amc>
		<cc>
			<method name="public transient void _init_(Integer groupid, String[] tags)">0</method>
			<method name="public static edu.stanford.nlp.ling.tokensregex.types.Expressions$RegexMatchVarExpression valueOf(String group)">2</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Expression assign(edu.stanford.nlp.ling.tokensregex.types.Expression expr)">1</method>
			<method name="public transient void _init_(String groupname, String[] tags)">0</method>
			<method name="public transient edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env env, Object[] args)">8</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$6$1</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>5</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>0.6666666666666667</lcom3>
		<loc>38</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.5</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.trees.tregex.Relation$6, edu.stanford.nlp.trees.Tree)">0</method>
			<method name="public void advance()">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.international.french.process.FrenchTokenizer$FrenchTokenizerFactory</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>21</rfc>
		<lcom>22</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>6</npm>
		<lcom3>0.42857142857142855</lcom3>
		<loc>161</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.46875</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.625</amc>
		<cc>
			<method name="public void setOptions(String options)">6</method>
			<method name="public edu.stanford.nlp.process.Tokenizer getTokenizer(java.io.Reader r)">1</method>
			<method name="public static edu.stanford.nlp.process.TokenizerFactory newTokenizerFactory()">1</method>
			<method name="private void _init_(edu.stanford.nlp.process.LexedTokenFactory factory, String options)">0</method>
			<method name="private void _init_(edu.stanford.nlp.process.LexedTokenFactory factory)">0</method>
			<method name="public java.util.Iterator getIterator(java.io.Reader r)">1</method>
			<method name="public edu.stanford.nlp.process.Tokenizer getTokenizer(java.io.Reader r, String extraOptions)">1</method>
			<method name="public static edu.stanford.nlp.process.TokenizerFactory newWordTokenizerFactory(String options)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.Document</name>
		<wmc>33</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>33</cbo>
		<rfc>123</rfc>
		<lcom>340</lcom>
		<ca>13</ca>
		<ce>22</ce>
		<npm>12</npm>
		<lcom3>0.9025</lcom3>
		<loc>3026</loc>
		<dam>0.24</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.2</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>89.93939393939394</amc>
		<cc>
			<method name="public edu.stanford.nlp.dcoref.SpeakerInfo getSpeakerInfo(String speaker)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private void setParagraphAnnotation()">5</method>
			<method name="public java.util.List getOrderedMentions()">1</method>
			<method name="private void markQuotations(java.util.List results, boolean normalQuotationType)">16</method>
			<method name="public boolean isIncompatible(edu.stanford.nlp.dcoref.Mention m1, edu.stanford.nlp.dcoref.Mention m2)">1</method>
			<method name="private void initializeCorefCluster()">8</method>
			<method name="public void _init_(edu.stanford.nlp.pipeline.Annotation anno, java.util.List predictedMentions, java.util.List goldMentions, edu.stanford.nlp.dcoref.Dictionaries dict)">0</method>
			<method name="private void findTwinMentionsStrict()">8</method>
			<method name="private void findTwinMentionsRelaxed()">7</method>
			<method name="public int numberOfSpeakers()">1</method>
			<method name="public void extractGoldCorefClusters()">4</method>
			<method name="protected java.util.List getGoldLinks()">2</method>
			<method name="private String findParagraphSpeaker(java.util.List paragraph, int paragraphUtterIndex, String nextParagraphSpeaker, int paragraphOffset, edu.stanford.nlp.dcoref.Dictionaries dict)">9</method>
			<method name="protected void processDiscourse(edu.stanford.nlp.dcoref.Dictionaries dict)">7</method>
			<method name="private void findSpeakersInConversation(edu.stanford.nlp.dcoref.Dictionaries dict)">5</method>
			<method name="private void findSpeakers(edu.stanford.nlp.dcoref.Dictionaries dict)">6</method>
			<method name="protected void extractGoldLinks()">23</method>
			<method name="private edu.stanford.nlp.dcoref.Document$DocType findDocType(edu.stanford.nlp.dcoref.Dictionaries dict)">8</method>
			<method name="public static boolean isSpeaker(edu.stanford.nlp.dcoref.Mention m, edu.stanford.nlp.dcoref.Mention ant, edu.stanford.nlp.dcoref.Dictionaries dict)">10</method>
			<method name="protected void assignOriginalID()">5</method>
			<method name="private String findNextParagraphSpeaker(java.util.List paragraph, int paragraphOffset, edu.stanford.nlp.dcoref.Dictionaries dict)">3</method>
			<method name="public void _init_()">0</method>
			<method name="protected void initialize()">2</method>
			<method name="private boolean findSpeaker(int utterNum, int sentNum, java.util.List sentences, int startIndex, int endIndex, edu.stanford.nlp.dcoref.Dictionaries dict)">6</method>
			<method name="public void mergeAcronymCache(edu.stanford.nlp.dcoref.CorefCluster to, edu.stanford.nlp.dcoref.CorefCluster from)">5</method>
			<method name="protected void printMentionDetection()">2</method>
			<method name="public void mergeIncompatibles(edu.stanford.nlp.dcoref.CorefCluster to, edu.stanford.nlp.dcoref.CorefCluster from)">5</method>
			<method name="private void findQuotationSpeaker(int utterNum, java.util.List sentences, edu.stanford.nlp.util.Pair beginQuotation, edu.stanford.nlp.util.Pair endQuotation, edu.stanford.nlp.dcoref.Dictionaries dict)">9</method>
			<method name="public void addIncompatible(edu.stanford.nlp.dcoref.Mention m1, edu.stanford.nlp.dcoref.Mention m2)">1</method>
			<method name="private void findSpeakersInArticle(edu.stanford.nlp.dcoref.Dictionaries dict)">7</method>
			<method name="protected void findTwinMentions(boolean strict)">2</method>
			<method name="public boolean isIncompatible(edu.stanford.nlp.dcoref.CorefCluster c1, edu.stanford.nlp.dcoref.CorefCluster c2)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunctionWithDropout</name>
		<wmc>12</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>13</cbo>
		<rfc>86</rfc>
		<lcom>18</lcom>
		<ca>2</ca>
		<ce>12</ce>
		<npm>2</npm>
		<lcom3>0.7177033492822966</lcom3>
		<loc>2619</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.18981481481481483</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>215.66666666666666</amc>
		<cc>
			<method name="private java.util.Map sparseE(int[] activeFeatures)">3</method>
			<method name="private edu.stanford.nlp.util.Quadruple expectedCountsAndValueForADoc(int docIndex, boolean skipExpectedCountCalc, boolean skipValCalc)">20</method>
			<method name="private java.util.Map sparseE(java.util.Set activeFeatures)">3</method>
			<method name="private void initEdgeLabels()">5</method>
			<method name="public void calculate(double[] x)">18</method>
			<method name="private double getDropoutPrior(edu.stanford.nlp.ie.crf.CRFCliqueTree cliqueTree, int[][][] docData, java.util.Map EForADoc, java.util.List docDataHash, int[] activeFeatures, java.util.Map dropoutPriorGrad, java.util.Map condensedFeaturesMap, java.util.List EForADocPos)">55</method>
			<method name="private void initializeDataFeatureHash()">11</method>
			<method name="void _init_(int[][][][] data, int[][] labels, int window, edu.stanford.nlp.util.Index classIndex, java.util.List labelIndices, int[] map, String priorType, String backgroundSymbol, double sigma, double[][][][] featureVal, double delta, double dropoutScale, int multiThreadGrad, boolean dropoutApprox, double unsupDropoutScale, int[][][][] unsupDropoutData)">0</method>
			<method name="static edu.stanford.nlp.util.Quadruple access$000(edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunctionWithDropout x0, int x1, boolean x2, boolean x3)">1</method>
			<method name="public void setWeights(double[][] weights)">5</method>
			<method name="private void increScoreAllowNull(java.util.Map aMap, int fIndex, int k, double val)">3</method>
			<method name="private void increScore(java.util.Map aMap, int fIndex, int k, double val)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.SieveOptions</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>16</cbo>
		<rfc>6</rfc>
		<lcom>0</lcom>
		<ca>16</ca>
		<ce>0</ce>
		<npm>2</npm>
		<lcom3>0.034482758620689724</lcom3>
		<loc>336</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>152.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public String toString()">30</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.hebrew.HebrewTreebankLanguagePack</name>
		<wmc>13</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>16</rfc>
		<lcom>60</lcom>
		<ca>3</ca>
		<ce>5</ce>
		<npm>12</npm>
		<lcom3>0.9166666666666666</lcom3>
		<loc>190</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.153846153846153</amc>
		<cc>
			<method name="public String treebankFileExtension()">1</method>
			<method name="public char[] labelAnnotationIntroducingCharacters()">1</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public String[] startSymbols()">1</method>
			<method name="public String[] punctuationWords()">1</method>
			<method name="public edu.stanford.nlp.trees.HeadFinder typedDependencyHeadFinder()">1</method>
			<method name="public String[] evalBIgnoredPunctuationTags()">1</method>
			<method name="public edu.stanford.nlp.trees.TreeReaderFactory treeReaderFactory()">1</method>
			<method name="public String[] sentenceFinalPunctuationTags()">1</method>
			<method name="public String[] punctuationTags()">1</method>
			<method name="public edu.stanford.nlp.trees.HeadFinder headFinder()">1</method>
			<method name="public String[] sentenceFinalPunctuationWords()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.AcquisitionsPrior</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>22</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>756</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>375.5</amc>
		<cc>
			<method name="public double scoreOf(int[] sequence)">35</method>
			<method name="public void _init_(String backgroundSymbol, edu.stanford.nlp.util.Index classIndex, java.util.List doc)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.concurrent.MulticoreWrapper$CallableJob</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>38</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.333333333333334</amc>
		<cc>
			<method name="public edu.stanford.nlp.util.concurrent.MulticoreWrapper$JobResult call()">1</method>
			<method name="public volatile Object call()">1</method>
			<method name="public void _init_(Object item, int itemId, edu.stanford.nlp.util.concurrent.ThreadsafeProcessor processor, int processorId)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.PhraseTable$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.TaggedWordFactory</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>13</rfc>
		<lcom>13</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>6</npm>
		<lcom3>0.9</lcom3>
		<loc>67</loc>
		<dam>0.5</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.833333333333334</amc>
		<cc>
			<method name="public edu.stanford.nlp.ling.Label newLabel(String labelStr, int options)">2</method>
			<method name="public edu.stanford.nlp.ling.Label newLabel(String labelStr)">1</method>
			<method name="public edu.stanford.nlp.ling.Label newLabel(edu.stanford.nlp.ling.Label oldLabel)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public edu.stanford.nlp.ling.Label newLabelFromString(String word)">2</method>
			<method name="public void _init_(char divider)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.StringParsingTask$ParserException</name>
		<wmc>2</wmc>
		<dit>4</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>11</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>1.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.0</amc>
		<cc>
			<method name="public void _init_(Exception e)">0</method>
			<method name="public void _init_(String message)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.classify.LogConditionalObjectiveFunction</name>
		<wmc>31</wmc>
		<dit>0</dit>
		<noc>1</noc>
		<cbo>14</cbo>
		<rfc>72</rfc>
		<lcom>67</lcom>
		<ca>3</ca>
		<ce>11</ce>
		<npm>23</npm>
		<lcom3>0.562962962962963</lcom3>
		<loc>2919</loc>
		<dam>1.0</dam>
		<moa>7</moa>
		<mfa>0.0</mfa>
		<cam>0.2456575682382134</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>92.58064516129032</amc>
		<cc>
			<method name="public void _init_(int numFeatures, int numClasses, int[][] data, int[] labels)">0</method>
			<method name="private void calculateSCL(double[] x)">8</method>
			<method name="public void _init_(int numFeatures, int numClasses, int[][] data, int[] labels, int intPrior, double sigma, double epsilon)">0</method>
			<method name="public void _init_(Iterable dataIterable, edu.stanford.nlp.classify.LogPrior logPrior, edu.stanford.nlp.util.Index featureIndex, edu.stanford.nlp.util.Index labelIndex)">0</method>
			<method name="public void _init_(int numFeatures, int numClasses, int[][] data, int[] labels, edu.stanford.nlp.classify.LogPrior prior)">0</method>
			<method name="protected void calculate(double[] x)">2</method>
			<method name="public void _init_(edu.stanford.nlp.classify.GeneralDataset dataset, edu.stanford.nlp.classify.LogPrior prior, boolean useSumCondObjFun)">0</method>
			<method name="public void calculateStochasticGradientLocal(double[] x, int[] batch)">11</method>
			<method name="public void setPrior(edu.stanford.nlp.classify.LogPrior prior)">1</method>
			<method name="public int domainDimension()">1</method>
			<method name="public void calculateStochastic(double[] x, double[] v, int[] batch)">5</method>
			<method name="public void _init_(edu.stanford.nlp.classify.GeneralDataset dataset, edu.stanford.nlp.classify.LogPrior prior)">0</method>
			<method name="public double[][] to2D(double[] x)">3</method>
			<method name="protected void calculateStochasticAlgorithmicDifferentiation(double[] x, double[] v, int[] batch)">20</method>
			<method name="public void _init_(int numFeatures, int numClasses, int[][] data, int[] labels, float[] dataweights)">0</method>
			<method name="private void calculateCL(double[] x)">24</method>
			<method name="public void calculateStochasticGradient(double[] x, int[] batch)">8</method>
			<method name="public void _init_(edu.stanford.nlp.classify.GeneralDataset dataset)">0</method>
			<method name="int featureOf(int index)">1</method>
			<method name="public void _init_(int numFeatures, int numClasses, int[][] data, int[] labels, float[] dataweights, edu.stanford.nlp.classify.LogPrior prior)">0</method>
			<method name="public double valueAt(double[] x, double xscale, int[] batch)">6</method>
			<method name="int classOf(int index)">1</method>
			<method name="public void _init_(int numFeatures, int numClasses, int[][] data, double[][] values, int[] labels, int intPrior, double sigma, double epsilon)">0</method>
			<method name="public void setUseSumCondObjFun(boolean value)">1</method>
			<method name="public void _init_(edu.stanford.nlp.classify.GeneralDataset dataset, float[] dataWeights, edu.stanford.nlp.classify.LogPrior prior)">0</method>
			<method name="protected void rvfcalculate(double[] x)">12</method>
			<method name="public double calculateStochasticUpdate(double[] x, double xscale, int[] batch, double gain)">13</method>
			<method name="public void calculateStochasticFiniteDifference(double[] x, double[] v, double h, int[] batch)">11</method>
			<method name="protected int indexOf(int f, int c)">1</method>
			<method name="public void _init_(int numFeatures, int numClasses, int[][] data, int[] labels, boolean useSumCondObjFun)">0</method>
			<method name="public int dataDimension()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.MultiNodePattern$UnionMultiNodePattern</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>11</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>0.0</lcom3>
		<loc>59</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.8333333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>28.0</amc>
		<cc>
			<method name="protected void _init_(java.util.List nodePatterns)">0</method>
			<method name="protected java.util.Collection match(java.util.List nodes, int start)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.LexicalizedParser$1</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>6</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>0.3333333333333333</lcom3>
		<loc>23</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.5</amc>
		<cc>
			<method name="public edu.stanford.nlp.trees.Tree process(java.util.List sentence)">1</method>
			<method name="public edu.stanford.nlp.util.concurrent.ThreadsafeProcessor newInstance()">1</method>
			<method name="void _init_(edu.stanford.nlp.parser.lexparser.LexicalizedParser)">0</method>
			<method name="public volatile Object process(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalRelations$TemporalModifierGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.DescriptionPattern$1</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>35</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>33.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$TopicAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Pair$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.ScaledSGDMinimizer$lagrange</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>6</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>3</npm>
		<lcom3>0.10000000000000009</lcom3>
		<loc>99</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4666666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>30.333333333333332</amc>
		<cc>
			<method name="public Double apply(Double lam)">2</method>
			<method name="public void _init_(double[] s, double[] y, double[] d, double a)">0</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequenceMatcher</name>
		<wmc>39</wmc>
		<dit>0</dit>
		<noc>1</noc>
		<cbo>23</cbo>
		<rfc>92</rfc>
		<lcom>371</lcom>
		<ca>13</ca>
		<ce>13</ce>
		<npm>26</npm>
		<lcom3>0.7990430622009569</lcom3>
		<loc>1069</loc>
		<dam>0.09090909090909091</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.24060150375939848</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>26.128205128205128</amc>
		<cc>
			<method name="static void access$1500(edu.stanford.nlp.ling.tokensregex.SequenceMatcher x0)">1</method>
			<method name="public java.util.List groupNodes(int group)">3</method>
			<method name="public void setFindType(edu.stanford.nlp.ling.tokensregex.SequenceMatcher$FindType findType)">1</method>
			<method name="public boolean matches()">4</method>
			<method name="private String getStateMessage()">3</method>
			<method name="static void _clinit_()">0</method>
			<method name="public Object groupMatchResult(int group, int index)">3</method>
			<method name="public java.util.List groupMatchResults(int group)">3</method>
			<method name="public void reset()">1</method>
			<method name="public int regionStart()">1</method>
			<method name="public int end(int group)">3</method>
			<method name="public Iterable findAllNonOverlapping()">1</method>
			<method name="public boolean find(int start)">3</method>
			<method name="public void region(int start, int end)">6</method>
			<method name="protected boolean findMatchStartNoBacktracking(int start, boolean matchAllTokens)">9</method>
			<method name="protected boolean find(int start, boolean matchStart)">6</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.SequenceMatcher$FindType getFindType()">1</method>
			<method name="public Object nodeMatchResult(int index)">3</method>
			<method name="public int start(int group)">3</method>
			<method name="public boolean isMatchWithResult()">1</method>
			<method name="private edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates getStartStates()">1</method>
			<method name="protected boolean findMatchStartBacktracking(int start, boolean matchAllTokens)">13</method>
			<method name="public java.util.List replaceAllExtended(java.util.List replacement)">3</method>
			<method name="public void setMatchWithResult(boolean matchWithResult)">1</method>
			<method name="public boolean find()">4</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.BasicSequenceMatchResult toBasicSequenceMatchResult()">3</method>
			<method name="public java.util.List replaceFirstExtended(java.util.List replacement)">3</method>
			<method name="public Object get(int i)">1</method>
			<method name="static java.util.logging.Logger access$700()">1</method>
			<method name="public java.util.List replaceAll(java.util.List replacement)">2</method>
			<method name="private boolean findNextAll()">5</method>
			<method name="protected boolean findMatchStart(int start, boolean matchAllTokens)">4</method>
			<method name="public int regionEnd()">1</method>
			<method name="public Object groupValue(int group)">3</method>
			<method name="private void clearMatched()">4</method>
			<method name="private boolean findNextNonOverlapping()">2</method>
			<method name="protected void _init_(edu.stanford.nlp.ling.tokensregex.SequencePattern pattern, java.util.List elements)">0</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.SequenceMatchResult$MatchedGroupInfo groupInfo(int group)">3</method>
			<method name="public java.util.List replaceFirst(java.util.List replacement)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.ReadDataTagged</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>15</cbo>
		<rfc>44</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>14</ce>
		<npm>1</npm>
		<lcom3>0.625</lcom3>
		<loc>416</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.3142857142857143</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>81.0</amc>
		<cc>
			<method name="edu.stanford.nlp.tagger.maxent.DataWordTag get(int index)">1</method>
			<method name="void release()">1</method>
			<method name="public int getSize()">1</method>
			<method name="protected void _init_(edu.stanford.nlp.tagger.maxent.TaggerConfig config, edu.stanford.nlp.tagger.maxent.MaxentTagger maxentTagger, edu.stanford.nlp.tagger.maxent.PairsHolder pairs)">0</method>
			<method name="private void loadFile(edu.stanford.nlp.tagger.io.TaggedFileReader reader, java.util.Map wordTagCounts)">10</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.ExtractorWordSuff</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>14</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>67</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.8</amc>
		<cc>
			<method name="String extract(edu.stanford.nlp.tagger.maxent.History h, edu.stanford.nlp.tagger.maxent.PairsHolder pH)">2</method>
			<method name="void _init_(int num, int position)">0</method>
			<method name="public boolean isLocal()">2</method>
			<method name="public boolean isDynamic()">1</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.metrics.Evalb$F1Comparator</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>7</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>41</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.25</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="private void _init_()">0</method>
			<method name="public int compare(edu.stanford.nlp.util.Triple o1, edu.stanford.nlp.util.Triple o2)">3</method>
			<method name="void _init_(edu.stanford.nlp.parser.metrics.Evalb$1 x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.Dictionary</name>
		<wmc>21</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>17</cbo>
		<rfc>73</rfc>
		<lcom>30</lcom>
		<ca>11</ca>
		<ce>7</ce>
		<npm>2</npm>
		<lcom3>0.725</lcom3>
		<loc>549</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2275132275132275</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>24.952380952380953</amc>
		<cc>
			<method name="private void readTags(java.io.DataInputStream rf)">1</method>
			<method name="protected int getCountPart(String verb)">2</method>
			<method name="void save(java.io.DataOutputStream file)">2</method>
			<method name="public void _init_()">0</method>
			<method name="boolean isUnknown(String word)">2</method>
			<method name="void fillWordTagCounts(java.util.Map wordTagCounts)">2</method>
			<method name="protected int getCountThat(String verb)">2</method>
			<method name="String getFirstTag(String word)">2</method>
			<method name="protected void setAmbClasses(edu.stanford.nlp.tagger.maxent.AmbiguityClasses ambClasses, int veryCommonWordThresh, edu.stanford.nlp.tagger.maxent.TTags ttags)">2</method>
			<method name="protected void read(String filename)">2</method>
			<method name="protected int getAmbClass(String word)">3</method>
			<method name="protected edu.stanford.nlp.tagger.maxent.TagCount get(String word)">1</method>
			<method name="protected void read(java.io.DataInputStream file)">1</method>
			<method name="protected String[] getTags(String word)">2</method>
			<method name="private void read(java.io.DataInputStream rf, String filename)">1</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="protected void addVThatTaking(String verb)">2</method>
			<method name="protected int sum(String word)">2</method>
			<method name="protected int getCountRB(String verb)">2</method>
			<method name="protected int getCount(String word, String tag)">2</method>
			<method name="protected int getCountIn(String verb)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequenceMatchAction$StartMatchAction</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>6</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>4</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>22</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.5</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.SequencePattern pattern)">0</method>
			<method name="public transient edu.stanford.nlp.ling.tokensregex.SequenceMatchResult apply(edu.stanford.nlp.ling.tokensregex.SequenceMatchResult seqMatchResult, int[] groups)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.Expression</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>33</cbo>
		<rfc>6</rfc>
		<lcom>15</lcom>
		<ca>31</ca>
		<ce>3</ce>
		<npm>6</npm>
		<lcom3>2.0</lcom3>
		<loc>6</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4166666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public transient abstract edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env, Object[])">1</method>
			<method name="public abstract String getType()">1</method>
			<method name="public abstract boolean hasValue()">1</method>
			<method name="public abstract edu.stanford.nlp.ling.tokensregex.types.Expression simplify(edu.stanford.nlp.ling.tokensregex.Env)">1</method>
			<method name="public abstract edu.stanford.nlp.ling.tokensregex.types.Tags getTags()">1</method>
			<method name="public abstract void setTags(edu.stanford.nlp.ling.tokensregex.types.Tags)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.CHTBLexer</name>
		<wmc>25</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>43</rfc>
		<lcom>218</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>10</npm>
		<lcom3>0.9748062015503876</lcom3>
		<loc>932</loc>
		<dam>0.7209302325581395</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.24305555555555555</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>34.56</amc>
		<cc>
			<method name="private static int[] zzUnpackTrans()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private static char[] zzUnpackCMap(String packed)">3</method>
			<method name="public final int yystate()">1</method>
			<method name="void _init_(java.io.InputStream in)">0</method>
			<method name="private static int zzUnpackTrans(String packed, int offset, int[] result)">3</method>
			<method name="private static int zzUnpackAttribute(String packed, int offset, int[] result)">3</method>
			<method name="private static int[] zzUnpackRowMap()">1</method>
			<method name="public void yypushback(int number)">2</method>
			<method name="void _init_(java.io.Reader in)">0</method>
			<method name="private static void reportError(String yytext)">1</method>
			<method name="private static int zzUnpackRowMap(String packed, int offset, int[] result)">2</method>
			<method name="public final String yytext()">1</method>
			<method name="public final void yyclose()">1</method>
			<method name="public final void yybegin(int newState)">1</method>
			<method name="public final void yyreset(java.io.Reader reader)">1</method>
			<method name="public final int yylength()">1</method>
			<method name="public final char yycharat(int pos)">1</method>
			<method name="private static int zzUnpackAction(String packed, int offset, int[] result)">3</method>
			<method name="public int yylex()">1</method>
			<method name="private static int[] zzUnpackAttribute()">1</method>
			<method name="private static int[] zzUnpackAction()">1</method>
			<method name="private boolean zzRefill()">1</method>
			<method name="public String match()">1</method>
			<method name="private void zzScanError(int errorCode)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.Treebank</name>
		<wmc>22</wmc>
		<dit>2</dit>
		<noc>5</noc>
		<cbo>59</cbo>
		<rfc>84</rfc>
		<lcom>213</lcom>
		<ca>44</ca>
		<ce>17</ce>
		<npm>21</npm>
		<lcom3>0.8571428571428571</lcom3>
		<loc>983</loc>
		<dam>0.6666666666666666</dam>
		<moa>1</moa>
		<mfa>0.48484848484848486</mfa>
		<cam>0.16666666666666666</cam>
		<ic>1</ic>
		<cbm>2</cbm>
		<amc>43.54545454545455</amc>
		<cc>
			<method name="public edu.stanford.nlp.trees.Treebank transform(edu.stanford.nlp.trees.TreeTransformer treeTrans)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(edu.stanford.nlp.trees.TreeReaderFactory trf, String encoding)">0</method>
			<method name="public void decimate(java.io.Writer trainW, java.io.Writer devW, java.io.Writer testW)">1</method>
			<method name="public void _init_(edu.stanford.nlp.trees.TreeReaderFactory trf)">0</method>
			<method name="public void _init_(int initialCapacity, edu.stanford.nlp.trees.TreeReaderFactory trf)">0</method>
			<method name="public String encoding()">1</method>
			<method name="public void loadPath(java.io.File path)">1</method>
			<method name="public int size()">1</method>
			<method name="public void _init_(int initialCapacity)">0</method>
			<method name="public void loadPath(String pathName, String suffix, boolean recursively)">1</method>
			<method name="public void loadPath(String pathName, java.io.FileFilter filt)">1</method>
			<method name="public void loadPath(java.io.File path, String suffix, boolean recursively)">1</method>
			<method name="public boolean remove(Object o)">1</method>
			<method name="public String textualSummary(edu.stanford.nlp.trees.TreebankLanguagePack tlp)">42</method>
			<method name="public String toString()">1</method>
			<method name="public abstract void loadPath(java.io.File, java.io.FileFilter)">1</method>
			<method name="public String textualSummary()">1</method>
			<method name="public abstract void apply(edu.stanford.nlp.trees.TreeVisitor)">1</method>
			<method name="protected edu.stanford.nlp.trees.TreeReaderFactory treeReaderFactory()">1</method>
			<method name="public void loadPath(String pathName)">1</method>
			<method name="public abstract void clear()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.sequences.KBestSequenceFinder</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>18</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>3</npm>
		<lcom3>0.3333333333333333</lcom3>
		<loc>967</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>240.5</amc>
		<cc>
			<method name="public edu.stanford.nlp.stats.ClassicCounter kBestSequences(edu.stanford.nlp.sequences.SequenceModel ts, int k)">37</method>
			<method name="public int[] bestSequence(edu.stanford.nlp.sequences.SequenceModel ts)">1</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.BinaryHeapPriorityQueue$Entry</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>10</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>1.0</lcom3>
		<loc>32</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.666666666666666</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public String toString()">1</method>
			<method name="void _init_(edu.stanford.nlp.util.BinaryHeapPriorityQueue$1 x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalRelations$SemanticDependentGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.VariableStrings</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>25</rfc>
		<lcom>0</lcom>
		<ca>6</ca>
		<ce>3</ce>
		<npm>6</npm>
		<lcom3>0.2</lcom3>
		<loc>168</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.8333333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>26.666666666666668</amc>
		<cc>
			<method name="public boolean isSet(String o)">2</method>
			<method name="public void setVar(String var, String string)">3</method>
			<method name="public String getString(String var)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void unsetVar(String var)">3</method>
			<method name="public String toString()">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.graph.ConnectedComponents</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>23</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>84</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4166666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>27.0</amc>
		<cc>
			<method name="public static java.util.List getConnectedComponents(edu.stanford.nlp.graph.Graph graph)">2</method>
			<method name="public void _init_()">0</method>
			<method name="private static java.util.Set bfs(java.util.LinkedList todo, edu.stanford.nlp.graph.Graph graph, java.util.List verticesLeft)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.CoreMapNodePattern$AttributesEqualMatchChecker</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>10</rfc>
		<lcom>1</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>52</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.0</amc>
		<cc>
			<method name="public transient void _init_(Class[] classes)">0</method>
			<method name="public boolean matches(edu.stanford.nlp.util.CoreMap o1, edu.stanford.nlp.util.CoreMap o2)">3</method>
			<method name="public volatile boolean matches(Object x0, Object x1)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.Reranker</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>2</rfc>
		<lcom>1</lcom>
		<ca>4</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>2</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract java.util.List getEvals()">1</method>
			<method name="public abstract edu.stanford.nlp.parser.lexparser.RerankerQuery process(java.util.List)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$GoldAnswerAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.EnglishTreebankParserParams</name>
		<wmc>37</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>41</cbo>
		<rfc>120</rfc>
		<lcom>546</lcom>
		<ca>9</ca>
		<ce>36</ce>
		<npm>22</npm>
		<lcom3>0.9351851851851851</lcom3>
		<loc>8522</loc>
		<dam>1.0</dam>
		<moa>4</moa>
		<mfa>0.0</mfa>
		<cam>0.11342592592592593</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>229.0810810810811</amc>
		<cc>
			<method name="public edu.stanford.nlp.trees.TreeTransformer subcategoryStripper()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public boolean supportsBasicDependencies()">1</method>
			<method name="public edu.stanford.nlp.trees.MemoryTreebank memoryTreebank()">1</method>
			<method name="private static boolean hasC(java.util.List tags)">2</method>
			<method name="public edu.stanford.nlp.trees.HeadFinder typedDependencyHeadFinder()">2</method>
			<method name="private static boolean hasI(java.util.List tags)">2</method>
			<method name="public java.util.List defaultTestSentence()">2</method>
			<method name="public String[] sisterSplitters()">2</method>
			<method name="public edu.stanford.nlp.trees.MemoryTreebank testMemoryTreebank()">1</method>
			<method name="private static boolean lastOfSeveralNNP(edu.stanford.nlp.trees.Tree parent, edu.stanford.nlp.trees.Tree t)">5</method>
			<method name="private String ditrans(edu.stanford.nlp.trees.Tree t)">7</method>
			<method name="public java.util.List readGrammaticalStructureFromFile(String filename)">1</method>
			<method name="private static boolean rightPhrasal(edu.stanford.nlp.trees.Tree t)">7</method>
			<method name="private static String deduceTag(String w)">6</method>
			<method name="public edu.stanford.nlp.trees.TreeTransformer collinizerEvalb()">2</method>
			<method name="public edu.stanford.nlp.trees.TreeTransformer collinizer()">2</method>
			<method name="static edu.stanford.nlp.parser.lexparser.EnglishTreebankParserParams$EnglishTest access$000(edu.stanford.nlp.parser.lexparser.EnglishTreebankParserParams x0)">1</method>
			<method name="public edu.stanford.nlp.trees.GrammaticalStructure getGrammaticalStructure(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.util.Filter filter, edu.stanford.nlp.trees.HeadFinder hf)">1</method>
			<method name="public edu.stanford.nlp.parser.lexparser.Lexicon lex(edu.stanford.nlp.parser.lexparser.Options op, edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex)">2</method>
			<method name="public edu.stanford.nlp.trees.DiskTreebank diskTreebank()">1</method>
			<method name="private static boolean firstOfSeveralNNP(edu.stanford.nlp.trees.Tree parent, edu.stanford.nlp.trees.Tree t)">7</method>
			<method name="private String changeBaseCat(String cat, String newBaseCat)">4</method>
			<method name="private static boolean hasV(java.util.List tags)">3</method>
			<method name="public void _init_()">0</method>
			<method name="public int setOptionFlag(String[] args, int i)">71</method>
			<method name="static edu.stanford.nlp.parser.lexparser.EnglishTreebankParserParams$EnglishTrain access$100(edu.stanford.nlp.parser.lexparser.EnglishTreebankParserParams x0)">1</method>
			<method name="public edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.Tree root)">797</method>
			<method name="public java.io.PrintWriter pw(java.io.OutputStream o)">1</method>
			<method name="public edu.stanford.nlp.trees.TreeReaderFactory treeReaderFactory()">1</method>
			<method name="private boolean containsVP(edu.stanford.nlp.trees.Tree t)">4</method>
			<method name="private static String subCatify(edu.stanford.nlp.trees.Tree t)">11</method>
			<method name="private static boolean hasClausalV(edu.stanford.nlp.trees.Tree tree)">8</method>
			<method name="public edu.stanford.nlp.trees.TreebankLanguagePack treebankLanguagePack()">1</method>
			<method name="public edu.stanford.nlp.trees.HeadFinder headFinder()">1</method>
			<method name="public static void main(String[] args)">2</method>
			<method name="public void display()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.Treebanks$7</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>10</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>31</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>14.0</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.stats.TwoDimensionalCounter)">0</method>
			<method name="public void visitTree(edu.stanford.nlp.trees.Tree tree)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.Treebanks$8</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>5</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>18</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.5</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="public void visitTree(edu.stanford.nlp.trees.Tree t)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.Treebanks$5</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>8</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>29</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.5</amc>
		<cc>
			<method name="public void visitTree(edu.stanford.nlp.trees.Tree tree)">1</method>
			<method name="void _init_(edu.stanford.nlp.trees.TreeNormalizer, java.io.PrintWriter)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.Treebanks$6</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>7</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>36</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.5</amc>
		<cc>
			<method name="void _init_(int, int, java.io.PrintWriter)">0</method>
			<method name="public void visitTree(edu.stanford.nlp.trees.Tree tree)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$BeginIndexAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.Treebanks$3</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>6</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>34</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>14.5</amc>
		<cc>
			<method name="void _init_(int, int, java.io.PrintWriter)">0</method>
			<method name="public void visitTree(edu.stanford.nlp.trees.Tree tree)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.Treebanks$4</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>10</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>47</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>20.5</amc>
		<cc>
			<method name="public void visitTree(edu.stanford.nlp.trees.Tree tree)">3</method>
			<method name="void _init_(edu.stanford.nlp.trees.TreeNormalizer, int, int, java.io.PrintWriter)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.HasRegularizerParamRange</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract java.util.Set getRegularizerParamRange(double[])">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalRelations$RelativeClauseModifierGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.Treebanks$1</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>13</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.5</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="public edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader in)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.Treebanks$2</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>7</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>37</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.0</amc>
		<cc>
			<method name="void _init_(int, int, java.io.PrintWriter)">0</method>
			<method name="public void visitTree(edu.stanford.nlp.trees.Tree tree)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.tsurgeon.Tsurgeon</name>
		<wmc>15</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>27</cbo>
		<rfc>78</rfc>
		<lcom>87</lcom>
		<ca>4</ca>
		<ce>23</ce>
		<npm>11</npm>
		<lcom3>0.8673469387755102</lcom3>
		<loc>748</loc>
		<dam>0.8571428571428571</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.13690476190476192</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>48.4</amc>
		<cc>
			<method name="private static String removeComments(String line)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private static void displayTree(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.TreePrint tp, java.io.PrintWriter pw)">2</method>
			<method name="public static edu.stanford.nlp.util.Pair getOperationFromReader(java.io.BufferedReader reader, edu.stanford.nlp.trees.tregex.TregexPatternCompiler compiler)">1</method>
			<method name="public static java.util.List processPatternOnTrees(edu.stanford.nlp.trees.tregex.TregexPattern matchPattern, edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern p, java.util.Collection inputTrees)">2</method>
			<method name="public static String getTregexPatternFromReader(java.io.BufferedReader reader)">1</method>
			<method name="public static edu.stanford.nlp.trees.Tree processPattern(edu.stanford.nlp.trees.tregex.TregexPattern matchPattern, edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern p, edu.stanford.nlp.trees.Tree t)">3</method>
			<method name="private void _init_()">0</method>
			<method name="public static edu.stanford.nlp.trees.Tree processPatternsOnTree(java.util.List ops, edu.stanford.nlp.trees.Tree t)">3</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="public static String getTsurgeonTextFromReader(java.io.BufferedReader reader)">1</method>
			<method name="public static edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern parseOperation(String operationString)">1</method>
			<method name="public static edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern getTsurgeonOperationsFromReader(java.io.BufferedReader reader)">1</method>
			<method name="public static java.util.List getOperationsFromFile(String filename, String encoding, edu.stanford.nlp.trees.tregex.TregexPatternCompiler compiler)">1</method>
			<method name="public static edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern collectOperations(java.util.List patterns)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.TestOptions</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>25</cbo>
		<rfc>17</rfc>
		<lcom>0</lcom>
		<ca>21</ca>
		<ce>4</ce>
		<npm>4</npm>
		<lcom3>0.9393939393939394</lcom3>
		<loc>257</loc>
		<dam>0.022727272727272728</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>52.25</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public void display()">1</method>
			<method name="public edu.stanford.nlp.trees.TreePrint treePrint(edu.stanford.nlp.parser.lexparser.TreebankLangParserParams tlpParams)">1</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonParserTreeConstants</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>51</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>40.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.BinaryGrammar</name>
		<wmc>20</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>21</cbo>
		<rfc>51</rfc>
		<lcom>66</lcom>
		<ca>18</ca>
		<ce>3</ce>
		<npm>18</npm>
		<lcom3>0.7631578947368421</lcom3>
		<loc>558</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.25</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>26.3</amc>
		<cc>
			<method name="public double scoreRule(edu.stanford.nlp.parser.lexparser.BinaryRule br)">2</method>
			<method name="public void addRule(edu.stanford.nlp.parser.lexparser.BinaryRule br)">1</method>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="public void writeData(java.io.Writer w)">1</method>
			<method name="public java.util.List ruleListByRightChild(int state)">2</method>
			<method name="public void _init_(edu.stanford.nlp.util.Index stateIndex)">0</method>
			<method name="private void init()">2</method>
			<method name="public boolean isSynthetic(int state)">1</method>
			<method name="public edu.stanford.nlp.parser.lexparser.BinaryRule[] splitRulesWithRC(int state)">1</method>
			<method name="public void splitRules()">7</method>
			<method name="public java.util.List ruleListByParent(int state)">2</method>
			<method name="public java.util.List rules()">1</method>
			<method name="public java.util.List ruleListByLeftChild(int state)">2</method>
			<method name="public java.util.Iterator ruleIteratorByParent(int state)">2</method>
			<method name="public java.util.Iterator ruleIteratorByLeftChild(int state)">2</method>
			<method name="public void readData(java.io.BufferedReader in)">1</method>
			<method name="private void readObject(java.io.ObjectInputStream stream)">1</method>
			<method name="public edu.stanford.nlp.parser.lexparser.BinaryRule[] splitRulesWithLC(int state)">1</method>
			<method name="public int numRules()">1</method>
			<method name="public java.util.Iterator ruleIteratorByRightChild(int state)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreLabel$1</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>19</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.333333333333333</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="void _init_()">0</method>
			<method name="public int compare(Class o1, Class o2)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$XmlContextAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>9</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.TimeFormatter$ApplyActionWrapper</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>5</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>39</loc>
		<dam>0.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>17.0</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.ling.tokensregex.Env env, edu.stanford.nlp.util.Function base, edu.stanford.nlp.ling.tokensregex.types.Expression action)">0</method>
			<method name="public Object apply(Object in)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.metrics.BestOfTopKEval</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>12</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>4</npm>
		<lcom3>0.3333333333333333</lcom3>
		<loc>72</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.4583333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.5</amc>
		<cc>
			<method name="public void display(boolean verbose, java.io.PrintWriter pw)">1</method>
			<method name="public void _init_(edu.stanford.nlp.parser.metrics.AbstractEval comparisonEval, edu.stanford.nlp.parser.metrics.AbstractEval countingEval)">0</method>
			<method name="public void evaluate(java.util.List guesses, edu.stanford.nlp.trees.Tree gold, java.io.PrintWriter pw)">3</method>
			<method name="public void display(boolean verbose)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.CollectionFactory$LinkedListFactory</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>3</npm>
		<lcom3>1.5</lcom3>
		<loc>13</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public java.util.Collection newCollection()">1</method>
			<method name="public java.util.Collection newEmptyCollection()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.maxent.Experiments</name>
		<wmc>19</wmc>
		<dit>1</dit>
		<noc>1</noc>
		<cbo>11</cbo>
		<rfc>46</rfc>
		<lcom>0</lcom>
		<ca>7</ca>
		<ce>4</ce>
		<npm>19</npm>
		<lcom3>0.6166666666666667</lcom3>
		<loc>1146</loc>
		<dam>0.6</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2556390977443609</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>58.78947368421053</amc>
		<cc>
			<method name="public int numY(int x)">1</method>
			<method name="public void ptilde(int ySize)">13</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(String filename)">0</method>
			<method name="public void print(edu.stanford.nlp.io.PrintFile pf)">4</method>
			<method name="public final void ptilde()">14</method>
			<method name="public void _init_(int[][] vArray)">0</method>
			<method name="public edu.stanford.nlp.util.Index createIndex()">3</method>
			<method name="public void add(edu.stanford.nlp.maxent.Experiments m)">1</method>
			<method name="public int getNumber()">1</method>
			<method name="public int size()">1</method>
			<method name="public void print()">4</method>
			<method name="public void _init_(int[][] vArray, int[] maxYs)">0</method>
			<method name="public double ptildeX(int x)">2</method>
			<method name="public double ptildeXY(int x, int y)">3</method>
			<method name="public int[] get(int index)">1</method>
			<method name="public void _init_(int[][] vArray, int ySize)">0</method>
			<method name="public double ptildeY(int y)">2</method>
			<method name="public void setMaxY(int[] maxY)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.wordseg.Sighan2005DocumentReaderAndWriter</name>
		<wmc>17</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>17</cbo>
		<rfc>85</rfc>
		<lcom>102</lcom>
		<ca>1</ca>
		<ce>17</ce>
		<npm>5</npm>
		<lcom3>0.9080882352941176</lcom3>
		<loc>932</loc>
		<dam>0.9411764705882353</dam>
		<moa>5</moa>
		<mfa>0.0</mfa>
		<cam>0.14338235294117646</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>52.8235294117647</amc>
		<cc>
			<method name="private static String intern(String s)">1</method>
			<method name="public void printLattice(edu.stanford.nlp.fsm.DFSA tagLattice, java.util.List doc, java.io.PrintWriter out)">1</method>
			<method name="private void tagLatticeToAnswerLattice(edu.stanford.nlp.fsm.DFSAState tSource, edu.stanford.nlp.fsm.DFSAState aSource, StringBuilder answer, edu.stanford.nlp.util.MutableInteger nodeId, int pos, double cost, java.util.Map stateLinks, edu.stanford.nlp.fsm.DFSA answerLattice, edu.stanford.nlp.ling.CoreLabel[] docArray)">31</method>
			<method name="static void access$500(edu.stanford.nlp.wordseg.ChineseDictionary x0, Class x1, Class x2, Class x3, String x4, java.util.List x5)">1</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="static String access$100(String x0)">1</method>
			<method name="static edu.stanford.nlp.sequences.SeqClassifierFlags access$200(edu.stanford.nlp.wordseg.Sighan2005DocumentReaderAndWriter x0)">1</method>
			<method name="private String shapeOf(String input)">11</method>
			<method name="static edu.stanford.nlp.process.ChineseDocumentToSentenceProcessor access$000(edu.stanford.nlp.wordseg.Sighan2005DocumentReaderAndWriter x0)">1</method>
			<method name="public java.util.Iterator getIterator(java.io.Reader r)">1</method>
			<method name="private static void addDictionaryFeatures(edu.stanford.nlp.wordseg.ChineseDictionary dict, Class lbeginFieldName, Class lmiddleFieldName, Class lendFieldName, String nonspaceLine, java.util.List lwi)">17</method>
			<method name="static String access$300(edu.stanford.nlp.wordseg.Sighan2005DocumentReaderAndWriter x0, String x1)">1</method>
			<method name="public void init(edu.stanford.nlp.sequences.SeqClassifierFlags flags)">4</method>
			<method name="public void printAnswers(java.util.List doc, java.io.PrintWriter pw)">1</method>
			<method name="static edu.stanford.nlp.wordseg.ChineseDictionary access$400(edu.stanford.nlp.wordseg.Sighan2005DocumentReaderAndWriter x0)">1</method>
			<method name="static edu.stanford.nlp.wordseg.ChineseDictionary access$600(edu.stanford.nlp.wordseg.Sighan2005DocumentReaderAndWriter x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$AnswerAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.MultiTokenTag</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>14</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>1</ce>
		<npm>6</npm>
		<lcom3>0.4666666666666667</lcom3>
		<loc>112</loc>
		<dam>0.3333333333333333</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.375</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>17.166666666666668</amc>
		<cc>
			<method name="public boolean equals(Object o)">6</method>
			<method name="public int hashCode()">1</method>
			<method name="public boolean isEnd()">2</method>
			<method name="public boolean isStart()">2</method>
			<method name="public String toString()">1</method>
			<method name="public void _init_(edu.stanford.nlp.ling.MultiTokenTag$Tag tag, int index)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.SieveCoreferenceSystem$1</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>1.0</lcom3>
		<loc>17</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.333333333333333</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.dcoref.SieveCoreferenceSystem)">0</method>
			<method name="public String toString()">1</method>
			<method name="public boolean accept(java.io.File file)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.HashableCoreMap</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>26</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>5</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>168</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.36666666666666664</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>32.0</amc>
		<cc>
			<method name="public Object set(Class key, Object value)">2</method>
			<method name="public void _init_(java.util.Map hashkey)">0</method>
			<method name="public boolean equals(Object o)">4</method>
			<method name="public int hashCode()">1</method>
			<method name="public void _init_(edu.stanford.nlp.util.ArrayCoreMap other, java.util.Set hashkey)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.LabeledWord$LabelFactoryHolder</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>0.5</lcom3>
		<loc>14</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.3333333333333335</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="static edu.stanford.nlp.ling.LabelFactory access$000()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.NPTmpRetainingTreeNormalizer$NPTmpRetainingTreeReaderFactory</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>6</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>7</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>16</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.0</amc>
		<cc>
			<method name="public edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader in)">1</method>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.process.StripTagsProcessor</name>
		<wmc>7</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>33</rfc>
		<lcom>13</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>6</npm>
		<lcom3>0.7222222222222223</lcom3>
		<loc>238</loc>
		<dam>0.6666666666666666</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>32.57142857142857</amc>
		<cc>
			<method name="public java.util.List process(java.util.List in)">9</method>
			<method name="public void setMarkLineBreaks(boolean markLineBreaks)">1</method>
			<method name="public void _init_(boolean markLineBreaks)">0</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="public boolean getMarkLineBreaks()">1</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.GrammaticalStructure$TreeBankGrammaticalStructureWrapper$GsIterator</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>23</rfc>
		<lcom>7</lcom>
		<ca>1</ca>
		<ce>8</ce>
		<npm>5</npm>
		<lcom3>0.36</lcom3>
		<loc>118</loc>
		<dam>0.8</dam>
		<moa>4</moa>
		<mfa>0.0</mfa>
		<cam>0.5833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>17.833333333333332</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.trees.GrammaticalStructure$TreeBankGrammaticalStructureWrapper)">0</method>
			<method name="public boolean hasNext()">2</method>
			<method name="public void remove()">1</method>
			<method name="public edu.stanford.nlp.trees.GrammaticalStructure next()">2</method>
			<method name="private void primeGs()">4</method>
			<method name="public volatile Object next()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.CoreMapNodePatternTrigger$1</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>11</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>2</npm>
		<lcom3>1.0</lcom3>
		<loc>56</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>17.333333333333332</amc>
		<cc>
			<method name="public edu.stanford.nlp.util.Triple apply(edu.stanford.nlp.ling.tokensregex.NodePattern in)">3</method>
			<method name="void _init_(edu.stanford.nlp.ling.tokensregex.CoreMapNodePatternTrigger)">0</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Execution$LazyFileIterator$1</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>10</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>36</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.8333333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.5</amc>
		<cc>
			<method name="public boolean accept(java.io.File dir, String name)">3</method>
			<method name="void _init_(String)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.ResultsPrinter$1CompareSentences</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>7</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>49</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.333333333333334</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="void _init_()">0</method>
			<method name="public int compare(edu.stanford.nlp.util.CoreMap sent1, edu.stanford.nlp.util.CoreMap sent2)">4</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$EndIndexAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument</name>
		<wmc>52</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>17</cbo>
		<rfc>154</rfc>
		<lcom>1022</lcom>
		<ca>4</ca>
		<ce>16</ce>
		<npm>47</npm>
		<lcom3>0.900871459694989</lcom3>
		<loc>2138</loc>
		<dam>0.7777777777777778</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.13574660633484162</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>39.76923076923077</amc>
		<cc>
			<method name="public java.util.List getSentence(int index)">1</method>
			<method name="public java.util.ArrayList getAllEntityMentions()">1</method>
			<method name="public java.util.ArrayList getAllRelationMentions()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private void makeEntity(int startToken, int endToken, int id, String type, String subtype)">1</method>
			<method name="private void readPredictedEntityBoundaries(java.io.BufferedReader is)">1</method>
			<method name="public boolean sameChunk(int left, int right)">7</method>
			<method name="public String getPrefix()">1</method>
			<method name="public java.util.ArrayList getEventMentions(int sent)">1</method>
			<method name="private void readRawBytes(String fileName)">1</method>
			<method name="public java.util.Map getEntityMentions()">1</method>
			<method name="public void _init_(String id)">0</method>
			<method name="public java.util.Map getRelationMentions()">1</method>
			<method name="public edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEventMention getEventMention(String id)">1</method>
			<method name="public void addEntityMention(edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEntityMention em)">1</method>
			<method name="private String tokensWithByteSpan(int start, int end)">8</method>
			<method name="public void addEvent(edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEvent r)">1</method>
			<method name="public String toXml(int offset)">3</method>
			<method name="public boolean isApposition(int left, int right)">6</method>
			<method name="public void matchCharSeqs(String filePrefix)">3</method>
			<method name="public boolean isChunkHead(int pos)">2</method>
			<method name="public edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEntityMention getEntityMention(String id)">1</method>
			<method name="public static edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument parseDocument(String prefix, boolean usePredictedBoundaries, String AceVersion)">1</method>
			<method name="public void addRelationMention(edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceRelationMention e)">1</method>
			<method name="public edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceToken getToken(int i)">1</method>
			<method name="public edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEvent getEvent(String id)">1</method>
			<method name="public edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceRelation getRelation(String id)">1</method>
			<method name="public java.util.Map getEventMentions()">1</method>
			<method name="public edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceRelationMention getRelationMention(String id)">1</method>
			<method name="public int findChunkEnd(int pos)">4</method>
			<method name="public int findChunkStart(int pos)">5</method>
			<method name="public java.util.List getSentences()">1</method>
			<method name="public void constructSentenceRelationMentions()">6</method>
			<method name="public int getSentenceCount()">1</method>
			<method name="public int countVerbs(int start, int end)">3</method>
			<method name="public void setSource(String p)">7</method>
			<method name="public String toString()">1</method>
			<method name="public void setSentences(java.util.List sentences)">1</method>
			<method name="public int getTokenCount()">1</method>
			<method name="public java.util.ArrayList getRelationMentions(int sent)">1</method>
			<method name="public java.util.Set getKeySetEntities()">1</method>
			<method name="public int countCommas(int start, int end)">3</method>
			<method name="public void addEntity(edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEntity e)">1</method>
			<method name="public java.util.ArrayList getEntityMentions(int sent)">1</method>
			<method name="public void setPrefix(String p)">1</method>
			<method name="public edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEntity getEntity(String id)">1</method>
			<method name="public void addEventMention(edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEventMention e)">1</method>
			<method name="public static edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument parseDocument(String prefix, boolean usePredictedBoundaries)">1</method>
			<method name="public void addToken(edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceToken t)">1</method>
			<method name="public void addRelation(edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceRelation r)">1</method>
			<method name="public java.util.ArrayList getAllEventMentions()">1</method>
			<method name="public edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceCharSeq makeCharSeq(int startToken, int endToken)">5</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequenceMatcher$1</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>10</rfc>
		<lcom>11</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>4</npm>
		<lcom3>0.4</lcom3>
		<loc>64</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.5833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.333333333333334</amc>
		<cc>
			<method name="private edu.stanford.nlp.ling.tokensregex.SequenceMatchResult getNext()">2</method>
			<method name="void _init_(edu.stanford.nlp.ling.tokensregex.SequenceMatcher)">0</method>
			<method name="public boolean hasNext()">3</method>
			<method name="public void remove()">1</method>
			<method name="public volatile Object next()">1</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.SequenceMatchResult next()">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequenceMatcher$2</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>21</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.structure.MachineReadingAnnotations$AllRelationMentionsAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>9</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.arabic.ArabicTreeReaderFactory</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>1</noc>
		<cbo>15</cbo>
		<rfc>11</rfc>
		<lcom>1</lcom>
		<ca>3</ca>
		<ce>12</ce>
		<npm>3</npm>
		<lcom3>0.1875</lcom3>
		<loc>104</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>31.0</amc>
		<cc>
			<method name="public void _init_(boolean retainNPTmp, boolean retainPRD, boolean changeNoLabels, boolean filterX, boolean retainNPSbj, boolean noNormalization, boolean retainPPClr)">0</method>
			<method name="public edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader in)">3</method>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalRelations$PrepositionalComplementGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.structure.AnnotationUtils</name>
		<wmc>35</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>17</cbo>
		<rfc>94</rfc>
		<lcom>589</lcom>
		<ca>5</ca>
		<ce>12</ce>
		<npm>33</npm>
		<lcom3>0.9411764705882353</lcom3>
		<loc>1164</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.11764705882352941</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>32.22857142857143</amc>
		<cc>
			<method name="public static void addEntityMention(edu.stanford.nlp.util.CoreMap sentence, edu.stanford.nlp.ie.machinereading.structure.EntityMention arg)">2</method>
			<method name="public static String tokensAndNELabelsToString(edu.stanford.nlp.util.CoreMap sentence)">6</method>
			<method name="public static int sentenceCount(edu.stanford.nlp.util.CoreMap dataset)">2</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static java.util.List readSentencesFromFile(String path)">1</method>
			<method name="public java.util.List getEntityMentions(edu.stanford.nlp.util.CoreMap sent)">1</method>
			<method name="public static String getTextContent(edu.stanford.nlp.util.CoreMap sent, edu.stanford.nlp.ie.machinereading.structure.Span span)">5</method>
			<method name="public static void shuffleSentences(edu.stanford.nlp.util.CoreMap dataset)">1</method>
			<method name="private void _init_()">0</method>
			<method name="public java.util.List getEventMentions(edu.stanford.nlp.util.CoreMap sent)">1</method>
			<method name="public static java.util.List getAllUnrelatedRelations(edu.stanford.nlp.ie.machinereading.structure.RelationMentionFactory factory, edu.stanford.nlp.util.CoreMap sentence, boolean checkExisting)">9</method>
			<method name="public static String tokensToString(java.util.List tokens)">3</method>
			<method name="public static java.util.List entityMentionsToCoreLabels(edu.stanford.nlp.util.CoreMap dataset, java.util.Set annotationsToSkip, boolean useSubTypes, boolean useBIO)">4</method>
			<method name="public static void updateOffsetsInCoreLabels(java.util.List tokens, int offset)">2</method>
			<method name="public static edu.stanford.nlp.pipeline.Annotation createDataset(java.util.List sentences)">1</method>
			<method name="public static transient edu.stanford.nlp.ie.machinereading.structure.RelationMention getRelation(edu.stanford.nlp.ie.machinereading.structure.RelationMentionFactory factory, edu.stanford.nlp.util.CoreMap sentence, edu.stanford.nlp.ie.machinereading.structure.ExtractionObject[] args)">1</method>
			<method name="public static void addSentences(edu.stanford.nlp.util.CoreMap dataset, java.util.List sentences)">3</method>
			<method name="public static edu.stanford.nlp.pipeline.Annotation sentenceDeepMentionCopy(edu.stanford.nlp.pipeline.Annotation sentence)">4</method>
			<method name="public static void addRelationMentions(edu.stanford.nlp.util.CoreMap sentence, java.util.Collection args)">2</method>
			<method name="public static String excelify(String s)">1</method>
			<method name="public static void addEntityMentions(edu.stanford.nlp.util.CoreMap sentence, java.util.Collection args)">2</method>
			<method name="public static String sentenceToString(edu.stanford.nlp.util.CoreMap sent)">3</method>
			<method name="public static void addSentence(edu.stanford.nlp.util.CoreMap dataset, edu.stanford.nlp.util.CoreMap sentence)">2</method>
			<method name="public static String datasetToString(edu.stanford.nlp.util.CoreMap dataset)">3</method>
			<method name="public static edu.stanford.nlp.pipeline.Annotation deepMentionCopy(edu.stanford.nlp.util.CoreMap dataset)">4</method>
			<method name="public static java.util.List sentenceEntityMentionsToCoreLabels(edu.stanford.nlp.util.CoreMap sentence, boolean addAnswerAnnotation, java.util.Set annotationsToSkip, java.util.Set mentionTypesToUse, boolean useSubTypes, boolean useBIO)">14</method>
			<method name="public static void addRelationMention(edu.stanford.nlp.util.CoreMap sentence, edu.stanford.nlp.ie.machinereading.structure.RelationMention arg)">2</method>
			<method name="public static void addEventMention(edu.stanford.nlp.util.CoreMap sentence, edu.stanford.nlp.ie.machinereading.structure.EventMention arg)">2</method>
			<method name="public static void updateOffsets(java.util.List tokens, int offset)">2</method>
			<method name="public java.util.List getRelationMentions(edu.stanford.nlp.util.CoreMap sent)">1</method>
			<method name="public static String prettify(String s)">2</method>
			<method name="public static transient java.util.List getRelations(edu.stanford.nlp.ie.machinereading.structure.RelationMentionFactory factory, edu.stanford.nlp.util.CoreMap sentence, edu.stanford.nlp.ie.machinereading.structure.ExtractionObject[] args)">4</method>
			<method name="public static java.util.List getAllRelations(edu.stanford.nlp.ie.machinereading.structure.RelationMentionFactory factory, edu.stanford.nlp.util.CoreMap sentence, boolean createUnrelatedRelations)">3</method>
			<method name="public static edu.stanford.nlp.util.CoreMap getSentence(edu.stanford.nlp.util.CoreMap dataset, int i)">1</method>
			<method name="public static void addEventMentions(edu.stanford.nlp.util.CoreMap sentence, java.util.Collection args)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams$AddRelativeNodeRegexFunction</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>19</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>4</npm>
		<lcom3>0.38888888888888884</lcom3>
		<loc>153</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>35.75</amc>
		<cc>
			<method name="public void _init_(String annotationMark, String key, String regex)">0</method>
			<method name="public String toString()">1</method>
			<method name="public volatile Object apply(Object x0)">1</method>
			<method name="public String apply(edu.stanford.nlp.trees.tregex.TregexMatcher m)">6</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.process.Tokenizer</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>35</cbo>
		<rfc>5</rfc>
		<lcom>10</lcom>
		<ca>35</ca>
		<ce>0</ce>
		<npm>5</npm>
		<lcom3>2.0</lcom3>
		<loc>5</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract void remove()">1</method>
			<method name="public abstract boolean hasNext()">1</method>
			<method name="public abstract Object peek()">1</method>
			<method name="public abstract Object next()">1</method>
			<method name="public abstract java.util.List tokenize()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.sequences.DocumentReaderAndWriter</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>19</cbo>
		<rfc>2</rfc>
		<lcom>1</lcom>
		<ca>17</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>2</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract void init(edu.stanford.nlp.sequences.SeqClassifierFlags)">1</method>
			<method name="public abstract void printAnswers(java.util.List, java.io.PrintWriter)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.ChineseCoreAnnotations$CharactersAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>9</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.ScorerPairwise</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>13</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>217</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.8333333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>71.33333333333333</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="protected void calculateRecall(edu.stanford.nlp.dcoref.Document doc)">5</method>
			<method name="protected void calculatePrecision(edu.stanford.nlp.dcoref.Document doc)">5</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.MultiCoreMapNodePattern</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>13</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>3</npm>
		<lcom3>0.16666666666666666</lcom3>
		<loc>89</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.45</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>20.75</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.NodePattern nodePattern, java.util.Map aggregators)">0</method>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.NodePattern nodePattern)">0</method>
			<method name="protected java.util.Collection match(java.util.List nodes, int start)">5</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$CompositeExtractRuleCreator</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>19</cbo>
		<rfc>18</rfc>
		<lcom>10</lcom>
		<ca>1</ca>
		<ce>19</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>160</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5142857142857142</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>31.0</amc>
		<cc>
			<method name="protected edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule create(edu.stanford.nlp.ling.tokensregex.Env env, edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr expr, edu.stanford.nlp.ling.tokensregex.types.Expression result)">3</method>
			<method name="protected void updateExtractRule(edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule r, edu.stanford.nlp.ling.tokensregex.Env env, edu.stanford.nlp.ling.tokensregex.TokenSequencePattern pattern, edu.stanford.nlp.ling.tokensregex.types.Expression action, edu.stanford.nlp.ling.tokensregex.types.Expression result)">1</method>
			<method name="public void _init_()">0</method>
			<method name="protected void updateExtractRule(edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule r, edu.stanford.nlp.ling.tokensregex.Env env, edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr expr, edu.stanford.nlp.ling.tokensregex.types.Expression action, edu.stanford.nlp.ling.tokensregex.types.Expression result)">1</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule create(edu.stanford.nlp.ling.tokensregex.Env env, java.util.Map attributes)">4</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$SequenceMatchedExpressionExtractor</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>9</rfc>
		<lcom>1</lcom>
		<ca>2</ca>
		<ce>5</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>41</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4666666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.0</amc>
		<cc>
			<method name="public edu.stanford.nlp.ling.tokensregex.MatchedExpression apply(edu.stanford.nlp.ling.tokensregex.SequenceMatchResult matched)">1</method>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.MatchedExpression$SingleAnnotationExtractor extractor, int group)">0</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.AbstractTreebankParserParams$UntypedDependencyTyper</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>8</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>65</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>20.333333333333332</amc>
		<cc>
			<method name="public java.util.List makeDependency(edu.stanford.nlp.trees.Tree head, edu.stanford.nlp.trees.Tree dep, edu.stanford.nlp.trees.Tree root)">3</method>
			<method name="public void _init_(edu.stanford.nlp.trees.HeadFinder hf)">0</method>
			<method name="public volatile Object makeDependency(edu.stanford.nlp.trees.Tree x0, edu.stanford.nlp.trees.Tree x1, edu.stanford.nlp.trees.Tree x2)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser$Vertex</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>9</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>4</npm>
		<lcom3>0.16666666666666666</lcom3>
		<loc>91</loc>
		<dam>0.25</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>20.75</amc>
		<cc>
			<method name="public boolean equals(Object o)">5</method>
			<method name="public int hashCode()">2</method>
			<method name="public void _init_(int goal, int start, int end)">0</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.ArrayMap$Entry</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>14</rfc>
		<lcom>5</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>6</npm>
		<lcom3>0.5555555555555556</lcom3>
		<loc>107</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.7142857142857143</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>13.857142857142858</amc>
		<cc>
			<method name="public Object setValue(Object o)">1</method>
			<method name="public boolean equals(Object o)">9</method>
			<method name="public int hashCode()">3</method>
			<method name="public Object getKey()">1</method>
			<method name="public String toString()">1</method>
			<method name="void _init_(Object key, Object value)">0</method>
			<method name="public Object getValue()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.PhraseTable$PhraseStringCollection</name>
		<wmc>15</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>24</rfc>
		<lcom>75</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>15</npm>
		<lcom3>0.6428571428571429</lcom3>
		<loc>164</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.24761904761904763</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.8</amc>
		<cc>
			<method name="public void clear()">1</method>
			<method name="public boolean contains(Object o)">5</method>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="public boolean isEmpty()">2</method>
			<method name="public boolean containsAll(java.util.Collection c)">2</method>
			<method name="public boolean removeAll(java.util.Collection c)">2</method>
			<method name="public Object[] toArray(Object[] a)">1</method>
			<method name="public int size()">1</method>
			<method name="public volatile boolean add(Object x0)">1</method>
			<method name="public boolean addAll(java.util.Collection c)">2</method>
			<method name="public Object[] toArray()">1</method>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.PhraseTable phraseTable, boolean useNormalizedLookup)">0</method>
			<method name="public boolean remove(Object o)">1</method>
			<method name="public boolean retainAll(java.util.Collection c)">1</method>
			<method name="public boolean add(String s)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.FrenchTreebankParserParams$AddRelativeNodeFunction</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>16</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>6</npm>
		<lcom3>0.2571428571428571</lcom3>
		<loc>202</loc>
		<dam>0.8571428571428571</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4722222222222222</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>31.5</amc>
		<cc>
			<method name="public String toString()">2</method>
			<method name="public volatile Object apply(Object x0)">1</method>
			<method name="public String apply(edu.stanford.nlp.trees.tregex.TregexMatcher m)">6</method>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.FrenchTreebankParserParams, String annotationMark, String key1, boolean basicCategory, boolean toLower)">0</method>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.FrenchTreebankParserParams, String annotationMark, String key, boolean basicCategory)">0</method>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.FrenchTreebankParserParams, String annotationMark, String key1, String key2, boolean basicCategory)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$Rule</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>5</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.maxent.CGRunner</name>
		<wmc>9</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>23</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>8</ce>
		<npm>8</npm>
		<lcom3>0.5416666666666666</lcom3>
		<loc>345</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.3968253968253968</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>36.333333333333336</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.maxent.iis.LambdaSolve prob, String filename, double priorSigmaS)">0</method>
			<method name="public void solveQN()">1</method>
			<method name="private void printOptimizationResults(edu.stanford.nlp.maxent.CGRunner$LikelihoodFunction df, edu.stanford.nlp.maxent.CGRunner$MonitorFunction monitor)">4</method>
			<method name="public void _init_(edu.stanford.nlp.maxent.iis.LambdaSolve prob, String filename, double tol, double priorSigmaS)">0</method>
			<method name="public void solveOWLQN2(double weight)">1</method>
			<method name="public void solveL1(double weight)">1</method>
			<method name="public void solveCG()">1</method>
			<method name="public void _init_(edu.stanford.nlp.maxent.iis.LambdaSolve prob, String filename, double tol, double[] sigmaSquareds)">0</method>
			<method name="public void _init_(edu.stanford.nlp.maxent.iis.LambdaSolve prob, String filename)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.international.arabic.process.ArabicDocumentReaderAndWriter</name>
		<wmc>10</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>21</rfc>
		<lcom>35</lcom>
		<ca>2</ca>
		<ce>8</ce>
		<npm>6</npm>
		<lcom3>0.8412698412698413</lcom3>
		<loc>112</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.25</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.5</amc>
		<cc>
			<method name="static edu.stanford.nlp.process.TokenizerFactory access$100(edu.stanford.nlp.international.arabic.process.ArabicDocumentReaderAndWriter x0)">1</method>
			<method name="public void _init_(boolean hasSegMarkers)">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void init(edu.stanford.nlp.sequences.SeqClassifierFlags flags)">1</method>
			<method name="public void _init_(boolean hasSegMarkers, boolean hasTags, edu.stanford.nlp.process.TokenizerFactory tokFactory)">0</method>
			<method name="static boolean access$000(edu.stanford.nlp.international.arabic.process.ArabicDocumentReaderAndWriter x0)">1</method>
			<method name="public void printAnswers(java.util.List doc, java.io.PrintWriter pw)">2</method>
			<method name="static Character access$200(edu.stanford.nlp.international.arabic.process.ArabicDocumentReaderAndWriter x0)">1</method>
			<method name="public java.util.Iterator getIterator(java.io.Reader r)">1</method>
			<method name="public void _init_(boolean hasSegMarkers, edu.stanford.nlp.process.TokenizerFactory tokFactory)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalRelations$DirectObjectGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$TimexDocFunc</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.9583333333333334</lcom3>
		<loc>100</loc>
		<dam>0.125</dam>
		<moa>8</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>22.0</amc>
		<cc>
			<method name="public static edu.stanford.nlp.time.SUTime$TimexDocFunc[] values()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static edu.stanford.nlp.time.SUTime$TimexDocFunc valueOf(String name)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Iterables$14$1$1</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>2</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>1.0</lcom3>
		<loc>14</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.5</amc>
		<cc>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="void _init_(edu.stanford.nlp.util.Iterables$14$1)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.process.JFlexDummyLexer</name>
		<wmc>26</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>43</rfc>
		<lcom>237</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>12</npm>
		<lcom3>0.935</lcom3>
		<loc>785</loc>
		<dam>0.9375</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.21142857142857144</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>27.96153846153846</amc>
		<cc>
			<method name="private static int[] zzUnpackTrans()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private static char[] zzUnpackCMap(String packed)">3</method>
			<method name="public final int yystate()">1</method>
			<method name="void _init_(java.io.InputStream in)">0</method>
			<method name="private static int zzUnpackTrans(String packed, int offset, int[] result)">3</method>
			<method name="private static int zzUnpackAttribute(String packed, int offset, int[] result)">3</method>
			<method name="private static int[] zzUnpackRowMap()">1</method>
			<method name="public void yypushback(int number)">2</method>
			<method name="public static void main(String[] argv)">3</method>
			<method name="void _init_(java.io.Reader in)">0</method>
			<method name="private static int zzUnpackRowMap(String packed, int offset, int[] result)">2</method>
			<method name="public final String yytext()">1</method>
			<method name="public final void yyclose()">1</method>
			<method name="public final void yybegin(int newState)">1</method>
			<method name="public final void yyreset(java.io.Reader reader)">1</method>
			<method name="public final int yylength()">1</method>
			<method name="public final char yycharat(int pos)">1</method>
			<method name="public int getYYEOF()">1</method>
			<method name="private static int zzUnpackAction(String packed, int offset, int[] result)">3</method>
			<method name="public void pushBack(int n)">1</method>
			<method name="public int yylex()">1</method>
			<method name="private static int[] zzUnpackAttribute()">1</method>
			<method name="private static int[] zzUnpackAction()">1</method>
			<method name="private boolean zzRefill()">1</method>
			<method name="private void zzScanError(int errorCode)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.pascal.PascalTemplate</name>
		<wmc>16</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>47</rfc>
		<lcom>16</lcom>
		<ca>3</ca>
		<ce>7</ce>
		<npm>15</npm>
		<lcom3>0.7555555555555554</lcom3>
		<loc>682</loc>
		<dam>0.5</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.17575757575757575</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>41.25</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static edu.stanford.nlp.ie.pascal.PascalTemplate mergeCliqueTemplates(edu.stanford.nlp.ie.pascal.DateTemplate dt, String location, edu.stanford.nlp.ie.pascal.InfoTemplate wi)">1</method>
			<method name="public static boolean acronymMatch(String s1, String s2, java.util.HashMap stemmedAcronymIndex)">1</method>
			<method name="public void writeToFieldValueCounter(edu.stanford.nlp.stats.Counter[] fieldValueCounter, double score)">4</method>
			<method name="public void _init_(edu.stanford.nlp.ie.pascal.PascalTemplate pt)">0</method>
			<method name="public void print()">1</method>
			<method name="public void setValue(int index, String value)">2</method>
			<method name="public void setValue(String fieldName, String value)">3</method>
			<method name="public void unpackToCliqueTemplates(edu.stanford.nlp.ie.pascal.CliqueTemplates ct, double score)">2</method>
			<method name="public int hashCode()">3</method>
			<method name="public String getValue(String fieldName)">3</method>
			<method name="public boolean equals(Object obj)">9</method>
			<method name="public String toString()">4</method>
			<method name="public static String stemAcronym(String s, edu.stanford.nlp.ie.pascal.CliqueTemplates ct)">6</method>
			<method name="public static int getFieldIndex(String tag)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.Hook</name>
		<wmc>7</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>13</rfc>
		<lcom>0</lcom>
		<ca>9</ca>
		<ce>1</ce>
		<npm>7</npm>
		<lcom3>0.5</lcom3>
		<loc>159</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.35714285714285715</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>21.571428571428573</amc>
		<cc>
			<method name="public boolean equals(Object o)">9</method>
			<method name="public int hashCode()">1</method>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.Hook h)">0</method>
			<method name="public boolean isPostHook()">2</method>
			<method name="public boolean isPreHook()">2</method>
			<method name="public void _init_(boolean exhaustiveTest)">0</method>
			<method name="public String toString()">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.Distribution$DynamicDistribution</name>
		<wmc>8</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>28</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>8</npm>
		<lcom3>0.5238095238095238</lcom3>
		<loc>121</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.40625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.75</amc>
		<cc>
			<method name="public double totalCount()">1</method>
			<method name="public void _init_(edu.stanford.nlp.stats.Distribution prior, double priorMultiplier)">0</method>
			<method name="public void addToKeySet(Object o)">1</method>
			<method name="public java.util.Set keySet()">1</method>
			<method name="public double probabilityOf(Object o)">1</method>
			<method name="public Object sampleFrom()">2</method>
			<method name="public Object argmax()">1</method>
			<method name="public boolean containsKey(Object key)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalStructure$FromDependenciesFactory</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>4</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>17</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.7777777777777778</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.666666666666667</amc>
		<cc>
			<method name="public volatile edu.stanford.nlp.trees.GrammaticalStructure build(java.util.List x0, edu.stanford.nlp.trees.TreeGraphNode x1)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public edu.stanford.nlp.trees.EnglishGrammaticalStructure build(java.util.List tdeps, edu.stanford.nlp.trees.TreeGraphNode root)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.MetaClass$ClassCreationException</name>
		<wmc>8</wmc>
		<dit>4</dit>
		<noc>1</noc>
		<cbo>4</cbo>
		<rfc>12</rfc>
		<lcom>28</lcom>
		<ca>3</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>1.1428571428571428</lcom3>
		<loc>41</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>1.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.0</amc>
		<cc>
			<method name="void _init_(Throwable x0, edu.stanford.nlp.util.MetaClass$1 x1)">0</method>
			<method name="private void _init_()">0</method>
			<method name="void _init_(String x0, Throwable x1, edu.stanford.nlp.util.MetaClass$1 x2)">0</method>
			<method name="private void _init_(String msg, Throwable cause)">0</method>
			<method name="private void _init_(String msg)">0</method>
			<method name="void _init_(String x0, edu.stanford.nlp.util.MetaClass$1 x1)">0</method>
			<method name="private void _init_(Throwable cause)">0</method>
			<method name="void _init_(edu.stanford.nlp.util.MetaClass$1 x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.process.PTBTokenizer$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$NotAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.Dictionaries$Number</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>8</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.9166666666666666</lcom3>
		<loc>56</loc>
		<dam>0.25</dam>
		<moa>4</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>12.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static edu.stanford.nlp.dcoref.Dictionaries$Number valueOf(String name)">1</method>
			<method name="public static edu.stanford.nlp.dcoref.Dictionaries$Number[] values()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.french.FrenchTreeNormalizer$FrenchAOverAFilter</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>11</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>1.5</lcom3>
		<loc>51</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.666666666666666</amc>
		<cc>
			<method name="public boolean accept(edu.stanford.nlp.trees.Tree t)">8</method>
			<method name="public void _init_()">0</method>
			<method name="public volatile boolean accept(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.objectbank.ObjectBank</name>
		<wmc>28</wmc>
		<dit>1</dit>
		<noc>1</noc>
		<cbo>27</cbo>
		<rfc>49</rfc>
		<lcom>372</lcom>
		<ca>22</ca>
		<ce>6</ce>
		<npm>28</npm>
		<lcom3>0.8370370370370371</lcom3>
		<loc>315</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.1590909090909091</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.071428571428571</amc>
		<cc>
			<method name="public void clear()">1</method>
			<method name="public static edu.stanford.nlp.objectbank.ObjectBank getLineIterator(java.io.Reader reader)">1</method>
			<method name="public static edu.stanford.nlp.objectbank.ObjectBank getLineIterator(java.io.File file)">1</method>
			<method name="public java.util.Iterator iterator()">4</method>
			<method name="public static edu.stanford.nlp.objectbank.ObjectBank getLineIterator(java.io.File file, String encoding)">1</method>
			<method name="public boolean containsAll(java.util.Collection c)">2</method>
			<method name="public int size()">2</method>
			<method name="public static edu.stanford.nlp.objectbank.ObjectBank getLineIterator(java.io.File file, edu.stanford.nlp.util.Function op, String encoding)">1</method>
			<method name="public static edu.stanford.nlp.objectbank.ObjectBank getLineIterator(java.util.Collection filesStringsAndReaders, edu.stanford.nlp.util.Function op, String encoding)">1</method>
			<method name="public boolean contains(Object o)">3</method>
			<method name="public static edu.stanford.nlp.objectbank.ObjectBank getLineIterator(java.util.Collection filesStringsAndReaders, String encoding)">1</method>
			<method name="public boolean isEmpty()">2</method>
			<method name="public static edu.stanford.nlp.objectbank.ObjectBank getLineIterator(java.util.Collection filesStringsAndReaders, edu.stanford.nlp.util.Function op)">1</method>
			<method name="public Object[] toArray(Object[] o)">2</method>
			<method name="public static edu.stanford.nlp.objectbank.ObjectBank getLineIterator(java.io.File file, edu.stanford.nlp.util.Function op)">1</method>
			<method name="public boolean removeAll(java.util.Collection c)">1</method>
			<method name="public static edu.stanford.nlp.objectbank.ObjectBank getLineIterator(String filename, String encoding)">1</method>
			<method name="public boolean add(Object o)">1</method>
			<method name="public static edu.stanford.nlp.objectbank.ObjectBank getLineIterator(String filename, edu.stanford.nlp.util.Function op)">1</method>
			<method name="public boolean addAll(java.util.Collection c)">1</method>
			<method name="public static edu.stanford.nlp.objectbank.ObjectBank getLineIterator(String filename)">1</method>
			<method name="public Object[] toArray()">2</method>
			<method name="public static edu.stanford.nlp.objectbank.ObjectBank getLineIterator(java.io.Reader reader, edu.stanford.nlp.util.Function op)">1</method>
			<method name="public void clearMemory()">1</method>
			<method name="public boolean remove(Object o)">1</method>
			<method name="public void keepInMemory(boolean keep)">1</method>
			<method name="public boolean retainAll(java.util.Collection c)">1</method>
			<method name="public void _init_(edu.stanford.nlp.objectbank.ReaderIteratorFactory rif, edu.stanford.nlp.objectbank.IteratorFromReaderFactory ifrf)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.process.LexerTokenizer</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>1</noc>
		<cbo>6</cbo>
		<rfc>21</rfc>
		<lcom>8</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>102</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.2</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.io.Lexer l)">0</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="protected volatile Object getNext()">1</method>
			<method name="protected String getNext()">3</method>
			<method name="public void _init_(edu.stanford.nlp.io.Lexer l, java.io.Reader r)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$PossibleAnswersAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$LeftChildrenNodeAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>9</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalRelations$ControllingSubjectGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.io.IOUtils$GetLinesIterable</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>10</rfc>
		<lcom>4</lcom>
		<ca>2</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>0.5</lcom3>
		<loc>68</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.8</amc>
		<cc>
			<method name="void _init_(String path, Class fileInputStreamWrapper, String encoding)">0</method>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="private java.io.InputStream getStream()">1</method>
			<method name="void _init_(java.io.File file, Class fileInputStreamWrapper, String encoding)">0</method>
			<method name="static java.io.InputStream access$000(edu.stanford.nlp.io.IOUtils$GetLinesIterable x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.arabic.ArabicHeadFinder$TagSet</name>
		<wmc>12</wmc>
		<dit>2</dit>
		<noc>2</noc>
		<cbo>6</cbo>
		<rfc>22</rfc>
		<lcom>62</lcom>
		<ca>3</ca>
		<ce>5</ce>
		<npm>2</npm>
		<lcom3>0.9090909090909091</lcom3>
		<loc>82</loc>
		<dam>0.3333333333333333</dam>
		<moa>3</moa>
		<mfa>0.5909090909090909</mfa>
		<cam>0.3409090909090909</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>5.583333333333333</amc>
		<cc>
			<method name="void _init_(String x0, int x1, edu.stanford.nlp.trees.international.arabic.ArabicHeadFinder$1 x2)">0</method>
			<method name="static edu.stanford.nlp.trees.international.arabic.ArabicHeadFinder$TagSet tagSet(String str)">3</method>
			<method name="public static edu.stanford.nlp.trees.international.arabic.ArabicHeadFinder$TagSet valueOf(String name)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="abstract String prep()">1</method>
			<method name="abstract String detPlusNoun()">1</method>
			<method name="abstract String det()">1</method>
			<method name="abstract String adj()">1</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static edu.stanford.nlp.trees.international.arabic.ArabicHeadFinder$TagSet[] values()">1</method>
			<method name="abstract String noun()">1</method>
			<method name="abstract edu.stanford.nlp.trees.TreebankLanguagePack langPack()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser</name>
		<wmc>261</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>58</cbo>
		<rfc>355</rfc>
		<lcom>23876</lcom>
		<ca>2</ca>
		<ce>58</ce>
		<npm>77</npm>
		<lcom3>0.6598901098901099</lcom3>
		<loc>9639</loc>
		<dam>0.8095238095238095</dam>
		<moa>8</moa>
		<mfa>0.0</mfa>
		<cam>0.13146853146853146</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>35.85057471264368</amc>
		<cc>
			<method name="private boolean jj_3R_119()">3</method>
			<method name="public void ReInit(edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParserTokenManager tm)">3</method>
			<method name="private boolean jj_3R_42()">2</method>
			<method name="public final edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr SeqRegex(edu.stanford.nlp.ling.tokensregex.Env env)">1</method>
			<method name="private boolean jj_3R_44()">3</method>
			<method name="public final edu.stanford.nlp.ling.tokensregex.types.Expression Expression(edu.stanford.nlp.ling.tokensregex.Env env)">1</method>
			<method name="public final edu.stanford.nlp.ling.tokensregex.types.Value BasicValue(edu.stanford.nlp.ling.tokensregex.Env env)">1</method>
			<method name="private boolean jj_3R_45()">3</method>
			<method name="private boolean jj_3R_43()">2</method>
			<method name="private boolean jj_2_3(int xla)">2</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr parseNode(edu.stanford.nlp.ling.tokensregex.Env env, String s)">1</method>
			<method name="private boolean jj_3R_41()">5</method>
			<method name="private boolean jj_3R_47()">2</method>
			<method name="private boolean jj_3R_40()">6</method>
			<method name="public final edu.stanford.nlp.ling.tokensregex.types.Expression BasicCondExpression(edu.stanford.nlp.ling.tokensregex.Env env)">1</method>
			<method name="private boolean jj_3R_117()">3</method>
			<method name="private boolean jj_3R_46()">3</method>
			<method name="private boolean jj_2_15(int xla)">2</method>
			<method name="private boolean jj_3_28()">3</method>
			<method name="private boolean jj_2_23(int xla)">2</method>
			<method name="public final edu.stanford.nlp.ling.tokensregex.SequenceMatchAction AnnotateAction(edu.stanford.nlp.ling.tokensregex.Env env)">1</method>
			<method name="private boolean jj_3R_79()">4</method>
			<method name="public final edu.stanford.nlp.ling.tokensregex.types.Expression NestedFunctionCallExpression(edu.stanford.nlp.ling.tokensregex.Env env)">1</method>
			<method name="public final edu.stanford.nlp.ling.tokensregex.types.Expression ListExpression(edu.stanford.nlp.ling.tokensregex.Env env)">2</method>
			<method name="private boolean jj_3R_90()">2</method>
			<method name="private edu.stanford.nlp.ling.tokensregex.parser.Token jj_consume_token(int kind)">1</method>
			<method name="private boolean jj_2_8(int xla)">2</method>
			<method name="private boolean jj_3R_25()">3</method>
			<method name="private boolean jj_3R_91()">8</method>
			<method name="private boolean jj_2_19(int xla)">2</method>
			<method name="private boolean jj_3R_71()">2</method>
			<method name="private boolean jj_3R_35()">5</method>
			<method name="private boolean jj_2_18(int xla)">2</method>
			<method name="private Long parseLongInteger(String str)">3</method>
			<method name="public edu.stanford.nlp.util.Pair parseSequenceWithAction(edu.stanford.nlp.ling.tokensregex.Env env, String s)">1</method>
			<method name="private boolean jj_3_26()">4</method>
			<method name="private boolean jj_3R_36()">2</method>
			<method name="private boolean jj_3R_72()">2</method>
			<method name="private boolean jj_3R_115()">2</method>
			<method name="private boolean jj_2_24(int xla)">2</method>
			<method name="private boolean jj_3R_74()">2</method>
			<method name="private boolean jj_3_11()">2</method>
			<method name="public final edu.stanford.nlp.ling.tokensregex.types.Expression VarOrRegexVar(edu.stanford.nlp.ling.tokensregex.Env env)">1</method>
			<method name="private int jj_ntk()">2</method>
			<method name="private boolean jj_3_24()">3</method>
			<method name="private boolean jj_2_34(int xla)">2</method>
			<method name="private boolean jj_3R_73()">2</method>
			<method name="public final edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr SeqRegexBasic(edu.stanford.nlp.ling.tokensregex.Env env)">1</method>
			<method name="private boolean jj_3R_111()">8</method>
			<method name="private boolean jj_3R_29()">6</method>
			<method name="public final edu.stanford.nlp.ling.tokensregex.parser.Token NumberToken()">1</method>
			<method name="public final edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr SeqRegexRepeatTimes(edu.stanford.nlp.ling.tokensregex.Env env, edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr expr)">2</method>
			<method name="private boolean jj_3R_80()">2</method>
			<method name="private boolean jj_3R_77()">3</method>
			<method name="private boolean jj_3R_78()">3</method>
			<method name="public void _init_(java.io.Reader stream)">0</method>
			<method name="private boolean jj_3R_113()">3</method>
			<method name="private boolean jj_3R_39()">5</method>
			<method name="private boolean jj_3R_75()">2</method>
			<method name="private boolean jj_3R_97()">2</method>
			<method name="private boolean jj_3R_95()">2</method>
			<method name="public final edu.stanford.nlp.ling.tokensregex.parser.Token getNextToken()">2</method>
			<method name="private boolean jj_3R_76()">4</method>
			<method name="private boolean jj_2_21(int xla)">2</method>
			<method name="public final int Index()">1</method>
			<method name="public final edu.stanford.nlp.ling.tokensregex.types.Expression MethodCallExpression(edu.stanford.nlp.ling.tokensregex.Env env, edu.stanford.nlp.ling.tokensregex.types.Expression parent)">2</method>
			<method name="private boolean jj_2_16(int xla)">2</method>
			<method name="public final edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$Rule Rule(edu.stanford.nlp.ling.tokensregex.Env env)">1</method>
			<method name="private boolean jj_3R_108()">3</method>
			<method name="private boolean jj_2_2(int xla)">2</method>
			<method name="private boolean jj_3R_32()">3</method>
			<method name="private boolean jj_3R_62()">2</method>
			<method name="private boolean jj_3_20()">2</method>
			<method name="private boolean jj_3R_104()">4</method>
			<method name="public final edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue CompositeFieldValue(edu.stanford.nlp.ling.tokensregex.Env env)">3</method>
			<method name="private boolean jj_3_21()">4</method>
			<method name="private boolean jj_3R_118()">2</method>
			<method name="private boolean jj_3R_31()">3</method>
			<method name="private boolean jj_3_6()">4</method>
			<method name="public final java.util.Map FieldValue(edu.stanford.nlp.ling.tokensregex.Env env, java.util.Map attributes)">1</method>
			<method name="public final java.util.Map SetAttrValues(edu.stanford.nlp.ling.tokensregex.Env env)">3</method>
			<method name="public void ReInit(java.io.InputStream stream, String encoding)">3</method>
			<method name="public final edu.stanford.nlp.ling.tokensregex.types.Expression CondGroup(edu.stanford.nlp.ling.tokensregex.Env env)">1</method>
			<method name="public final edu.stanford.nlp.ling.tokensregex.types.AssignableExpression AssignableVar(edu.stanford.nlp.ling.tokensregex.Env env)">3</method>
			<method name="private boolean jj_3R_19()">5</method>
			<method name="private boolean jj_3_29()">2</method>
			<method name="private boolean jj_3R_52()">4</method>
			<method name="private void jj_add_error_token(int kind, int pos)">9</method>
			<method name="private boolean jj_3R_21()">3</method>
			<method name="public final edu.stanford.nlp.ling.tokensregex.types.AssignableExpression AssignableExpression(edu.stanford.nlp.ling.tokensregex.Env env)">1</method>
			<method name="private boolean jj_3_30()">3</method>
			<method name="private boolean jj_2_27(int xla)">2</method>
			<method name="public final edu.stanford.nlp.ling.tokensregex.parser.Token IntegerToken()">3</method>
			<method name="private boolean jj_3R_110()">2</method>
			<method name="public final void disable_tracing()">1</method>
			<method name="private boolean jj_3_25()">2</method>
			<method name="private boolean jj_2_12(int xla)">2</method>
			<method name="private boolean jj_3_10()">2</method>
			<method name="public final edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr SeqRegexDisj(edu.stanford.nlp.ling.tokensregex.Env env)">1</method>
			<method name="private boolean jj_3_15()">3</method>
			<method name="private boolean jj_2_14(int xla)">2</method>
			<method name="private boolean jj_3_14()">3</method>
			<method name="private boolean jj_3R_66()">4</method>
			<method name="private boolean jj_3R_87()">3</method>
			<method name="private boolean jj_3R_94()">2</method>
			<method name="private boolean jj_3_19()">3</method>
			<method name="private boolean jj_3R_56()">2</method>
			<method name="public final String RelaxedString()">3</method>
			<method name="private boolean jj_3_18()">3</method>
			<method name="public final edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$Rule ExpressionExtractorRule(edu.stanford.nlp.ling.tokensregex.Env env)">1</method>
			<method name="private boolean jj_3R_86()">3</method>
			<method name="private boolean jj_3R_81()">3</method>
			<method name="private boolean jj_3R_114()">2</method>
			<method name="private boolean jj_3R_48()">2</method>
			<method name="private boolean jj_2_7(int xla)">2</method>
			<method name="private boolean jj_3R_49()">3</method>
			<method name="private boolean jj_3R_96()">2</method>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParserTokenManager tm)">0</method>
			<method name="private boolean jj_3R_63()">2</method>
			<method name="private boolean jj_3R_101()">3</method>
			<method name="static void _clinit_()">0</method>
			<method name="private boolean jj_3R_27()">5</method>
			<method name="private boolean jj_3R_100()">6</method>
			<method name="public final edu.stanford.nlp.ling.tokensregex.types.Expression NestedVarExpression(edu.stanford.nlp.ling.tokensregex.Env env)">1</method>
			<method name="private boolean jj_3R_92()">3</method>
			<method name="private boolean jj_3R_102()">3</method>
			<method name="private boolean jj_2_17(int xla)">2</method>
			<method name="public void updateExpressionExtractor(edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor extractor, java.io.Reader r)">1</method>
			<method name="private boolean jj_3R_82()">4</method>
			<method name="private static void jj_la1_init_1()">1</method>
			<method name="public final edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr SeqBackRef(edu.stanford.nlp.ling.tokensregex.Env env)">1</method>
			<method name="private boolean jj_3R_120()">2</method>
			<method name="private static void jj_la1_init_0()">1</method>
			<method name="private boolean jj_3R_83()">2</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor getExpressionExtractor(edu.stanford.nlp.ling.tokensregex.Env env, java.io.Reader r)">1</method>
			<method name="private boolean jj_3R_93()">2</method>
			<method name="private boolean jj_3R_109()">4</method>
			<method name="private boolean jj_3R_65()">3</method>
			<method name="private boolean jj_3R_103()">9</method>
			<method name="public final edu.stanford.nlp.ling.tokensregex.NodePattern NodeGroup(edu.stanford.nlp.ling.tokensregex.Env env)">1</method>
			<method name="public final String CoreMapVarValue(edu.stanford.nlp.ling.tokensregex.Env env)">1</method>
			<method name="public void _init_()">0</method>
			<method name="private boolean jj_3_33()">4</method>
			<method name="private boolean jj_3_34()">5</method>
			<method name="public final edu.stanford.nlp.ling.tokensregex.types.Expression CondExpression(edu.stanford.nlp.ling.tokensregex.Env env)">1</method>
			<method name="private boolean jj_3R_61()">2</method>
			<method name="private boolean jj_3R_105()">5</method>
			<method name="private boolean jj_3R_51()">2</method>
			<method name="private boolean jj_3R_23()">3</method>
			<method name="private boolean jj_3_32()">2</method>
			<method name="private boolean jj_3R_107()">2</method>
			<method name="private boolean jj_scan_token(int kind)">10</method>
			<method name="public final edu.stanford.nlp.ling.tokensregex.parser.Token getToken(int index)">3</method>
			<method name="public final edu.stanford.nlp.ling.tokensregex.types.Expression FunctionCallExpression(edu.stanford.nlp.ling.tokensregex.Env env)">2</method>
			<method name="public final edu.stanford.nlp.ling.tokensregex.parser.Token RelaxedStringToken()">3</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr parseSequence(edu.stanford.nlp.ling.tokensregex.Env env, String s)">1</method>
			<method name="public final String StringRegex(edu.stanford.nlp.ling.tokensregex.Env env)">1</method>
			<method name="private boolean jj_3_31()">3</method>
			<method name="private boolean jj_3R_53()">2</method>
			<method name="private boolean jj_3R_59()">2</method>
			<method name="private boolean jj_3R_38()">5</method>
			<method name="private boolean jj_2_31(int xla)">2</method>
			<method name="public final edu.stanford.nlp.ling.tokensregex.types.AssignableExpression AssignableNestedVarExpression(edu.stanford.nlp.ling.tokensregex.Env env)">1</method>
			<method name="private boolean jj_3R_69()">4</method>
			<method name="public void ReInit(java.io.Reader stream)">3</method>
			<method name="private boolean jj_3R_37()">4</method>
			<method name="public final edu.stanford.nlp.ling.tokensregex.NodePattern NodeConj(edu.stanford.nlp.ling.tokensregex.Env env)">1</method>
			<method name="public final edu.stanford.nlp.ling.tokensregex.NodePattern CoreMapNode(edu.stanford.nlp.ling.tokensregex.Env env)">4</method>
			<method name="private boolean jj_2_6(int xla)">2</method>
			<method name="private boolean jj_3_1()">2</method>
			<method name="private boolean jj_2_20(int xla)">2</method>
			<method name="public final edu.stanford.nlp.ling.tokensregex.parser.Token CmpToken()">3</method>
			<method name="private boolean jj_3_5()">4</method>
			<method name="private boolean jj_3R_55()">2</method>
			<method name="private boolean jj_3R_57()">3</method>
			<method name="private boolean jj_3_8()">2</method>
			<method name="private boolean jj_3R_67()">3</method>
			<method name="private boolean jj_2_11(int xla)">2</method>
			<method name="public final edu.stanford.nlp.ling.tokensregex.types.Value ValueExpression(edu.stanford.nlp.ling.tokensregex.Env env)">1</method>
			<method name="private boolean jj_3_4()">4</method>
			<method name="private boolean jj_2_25(int xla)">2</method>
			<method name="private boolean jj_3R_20()">4</method>
			<method name="private boolean jj_3_2()">2</method>
			<method name="public void ReInit(java.io.InputStream stream)">1</method>
			<method name="private boolean jj_2_5(int xla)">2</method>
			<method name="private String parseQuotedString(String str)">1</method>
			<method name="public final edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr SeqVar(edu.stanford.nlp.ling.tokensregex.Env env)">1</method>
			<method name="private boolean jj_3_3()">2</method>
			<method name="public final Object StringNumberValue(edu.stanford.nlp.ling.tokensregex.Env env)">1</method>
			<method name="private boolean jj_3R_99()">2</method>
			<method name="private void jj_save(int index, int xla)">3</method>
			<method name="private void jj_rescan_token()">5</method>
			<method name="private boolean jj_2_4(int xla)">2</method>
			<method name="private boolean jj_3R_26()">5</method>
			<method name="public final edu.stanford.nlp.ling.tokensregex.types.Expression CaseExpression(edu.stanford.nlp.ling.tokensregex.Env env)">2</method>
			<method name="public final edu.stanford.nlp.ling.tokensregex.NodePattern Node(edu.stanford.nlp.ling.tokensregex.Env env)">10</method>
			<method name="public final edu.stanford.nlp.ling.tokensregex.NodePattern NodeDisj(edu.stanford.nlp.ling.tokensregex.Env env)">1</method>
			<method name="public final java.util.Map AttrValue(edu.stanford.nlp.ling.tokensregex.Env env, java.util.Map attributes)">1</method>
			<method name="public final java.util.Map SetAttrValue(edu.stanford.nlp.ling.tokensregex.Env env, java.util.Map attributes)">1</method>
			<method name="private boolean jj_3R_121()">3</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.parser.ParseException generateParseException()">10</method>
			<method name="private boolean jj_3R_64()">7</method>
			<method name="private boolean jj_3R_28()">4</method>
			<method name="private Integer parseInteger(String str)">2</method>
			<method name="private boolean jj_2_30(int xla)">2</method>
			<method name="public final edu.stanford.nlp.ling.tokensregex.NodePattern CoreMapExprNodePattern(edu.stanford.nlp.ling.tokensregex.Env env)">1</method>
			<method name="private boolean jj_3_12()">2</method>
			<method name="private boolean jj_3_13()">2</method>
			<method name="public final edu.stanford.nlp.ling.tokensregex.SequenceMatchAction Action(edu.stanford.nlp.ling.tokensregex.Env env)">1</method>
			<method name="private boolean jj_3R_30()">3</method>
			<method name="private boolean jj_3_23()">3</method>
			<method name="private boolean jj_2_10(int xla)">2</method>
			<method name="private boolean jj_3R_24()">3</method>
			<method name="private boolean jj_3R_60()">2</method>
			<method name="private boolean jj_3_22()">3</method>
			<method name="private boolean jj_3R_34()">3</method>
			<method name="private boolean jj_3R_33()">3</method>
			<method name="private boolean jj_3R_50()">3</method>
			<method name="private boolean jj_2_1(int xla)">2</method>
			<method name="private boolean jj_3R_106()">2</method>
			<method name="private boolean jj_3_27()">5</method>
			<method name="private boolean jj_3R_22()">2</method>
			<method name="private boolean jj_3R_70()">2</method>
			<method name="public void _init_(java.io.InputStream stream, String encoding)">0</method>
			<method name="public final String RelaxedStringNoIdentifier()">1</method>
			<method name="private boolean jj_3R_68()">3</method>
			<method name="private boolean jj_2_33(int xla)">2</method>
			<method name="public final edu.stanford.nlp.ling.tokensregex.NodePattern NodeBasic(edu.stanford.nlp.ling.tokensregex.Env env)">8</method>
			<method name="private boolean jj_2_22(int xla)">2</method>
			<method name="public final edu.stanford.nlp.ling.tokensregex.NodePattern BracketedNode(edu.stanford.nlp.ling.tokensregex.Env env)">2</method>
			<method name="private boolean jj_3R_54()">2</method>
			<method name="private boolean jj_2_29(int xla)">2</method>
			<method name="public final edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr SeqRegexDisjConj(edu.stanford.nlp.ling.tokensregex.Env env)">1</method>
			<method name="private boolean jj_3_9()">2</method>
			<method name="private boolean jj_3R_112()">4</method>
			<method name="public final java.util.List RuleList(edu.stanford.nlp.ling.tokensregex.Env env)">4</method>
			<method name="private boolean jj_3_16()">2</method>
			<method name="private boolean jj_3R_89()">2</method>
			<method name="public void _init_(java.io.InputStream stream)">0</method>
			<method name="private boolean jj_3R_88()">3</method>
			<method name="private boolean jj_3_7()">4</method>
			<method name="public final edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$Rule AssignmentRule(edu.stanford.nlp.ling.tokensregex.Env env)">2</method>
			<method name="private boolean jj_3_17()">4</method>
			<method name="private boolean jj_3R_58()">3</method>
			<method name="public final edu.stanford.nlp.ling.tokensregex.NodePattern CoreMapVarNodePattern(edu.stanford.nlp.ling.tokensregex.Env env)">1</method>
			<method name="private boolean jj_3R_84()">2</method>
			<method name="private boolean jj_3R_116()">2</method>
			<method name="private boolean jj_3R_98()">2</method>
			<method name="public final edu.stanford.nlp.ling.tokensregex.MultiNodePattern MultiNodePattern(edu.stanford.nlp.ling.tokensregex.Env env)">2</method>
			<method name="public final edu.stanford.nlp.ling.tokensregex.NodePattern NodeDisjConj(edu.stanford.nlp.ling.tokensregex.Env env)">1</method>
			<method name="private boolean jj_3R_122()">5</method>
			<method name="private boolean jj_3R_85()">2</method>
			<method name="public final edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr SeqRegexGroup(edu.stanford.nlp.ling.tokensregex.Env env)">1</method>
			<method name="private boolean jj_2_9(int xla)">2</method>
			<method name="private boolean jj_2_32(int xla)">2</method>
			<method name="private boolean jj_2_13(int xla)">2</method>
			<method name="private boolean jj_2_28(int xla)">2</method>
			<method name="public final void enable_tracing()">1</method>
			<method name="public final edu.stanford.nlp.ling.tokensregex.NodePattern CoreMapWordPattern(edu.stanford.nlp.ling.tokensregex.Env env)">1</method>
			<method name="private boolean jj_2_26(int xla)">2</method>
			<method name="public final edu.stanford.nlp.util.Pair SeqRegexWithAction(edu.stanford.nlp.ling.tokensregex.Env env)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.CoreMapAttributeAggregator$MostFreqAggregator</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>13</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>0.5</lcom3>
		<loc>58</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Object aggregate(Class key, java.util.List in)">5</method>
			<method name="public void _init_(java.util.Set set)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.GrammaticalRelation$KillGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.classify.ClassifierFactory</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>2</rfc>
		<lcom>1</lcom>
		<ca>3</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>2</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract edu.stanford.nlp.classify.Classifier trainClassifier(java.util.List)">1</method>
			<method name="public abstract edu.stanford.nlp.classify.Classifier trainClassifier(edu.stanford.nlp.classify.GeneralDataset)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequencePattern$OrPatternExpr</name>
		<wmc>10</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>18</cbo>
		<rfc>57</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>17</ce>
		<npm>3</npm>
		<lcom3>0.6111111111111112</lcom3>
		<loc>599</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.23333333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>58.7</amc>
		<cc>
			<method name="public transient void _init_(edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr[] patterns)">0</method>
			<method name="private static edu.stanford.nlp.util.Pair _getStringAnnotation_(edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr p)">5</method>
			<method name="protected void updateBindings(edu.stanford.nlp.ling.tokensregex.SequencePattern$VarGroupBindings bindings)">2</method>
			<method name="protected int assignGroupIds(int start)">2</method>
			<method name="public void _init_(java.util.List patterns)">0</method>
			<method name="protected edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr copy()">2</method>
			<method name="private edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr optimizeOr()">15</method>
			<method name="protected edu.stanford.nlp.ling.tokensregex.SequencePattern$Frag build()">3</method>
			<method name="public String toString()">1</method>
			<method name="protected edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr optimize()">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalRelations$TimePostpositionGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.arabic.ArabicTreebankTokenizer</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>17</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>4</npm>
		<lcom3>2.0</lcom3>
		<loc>111</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4166666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>26.75</amc>
		<cc>
			<method name="public void _init_(java.io.Reader r)">0</method>
			<method name="public String getNext()">9</method>
			<method name="public volatile Object getNext()">1</method>
			<method name="public static void main(String[] args)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Interner</name>
		<wmc>10</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>24</rfc>
		<lcom>27</lcom>
		<ca>9</ca>
		<ce>1</ce>
		<npm>9</npm>
		<lcom3>0.4444444444444444</lcom3>
		<loc>103</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.2222222222222222</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.1</amc>
		<cc>
			<method name="public int size()">1</method>
			<method name="public void clear()">1</method>
			<method name="public static void main(String[] args)">3</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static edu.stanford.nlp.util.Interner getGlobal()">1</method>
			<method name="public static edu.stanford.nlp.util.Interner setGlobal(edu.stanford.nlp.util.Interner interner)">1</method>
			<method name="public synchronized Object intern(Object o)">2</method>
			<method name="public java.util.Set internAll(java.util.Set s)">2</method>
			<method name="public static Object globalIntern(Object o)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalRelations$DeterminerGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalRelations$ClausalSubjectGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.NodePruner</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>40</rfc>
		<lcom>8</lcom>
		<ca>2</ca>
		<ce>9</ce>
		<npm>2</npm>
		<lcom3>0.5</lcom3>
		<loc>248</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.42857142857142855</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>48.2</amc>
		<cc>
			<method name="edu.stanford.nlp.trees.Tree prune(edu.stanford.nlp.trees.Tree tree, int start)">3</method>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.ExhaustivePCFGParser parser, edu.stanford.nlp.trees.TreeTransformer debinarizer)">0</method>
			<method name="java.util.List prune(java.util.List treeList, edu.stanford.nlp.ling.Label label, int start, int end)">10</method>
			<method name="private java.util.List helper(java.util.List treeList, int start)">2</method>
			<method name="public edu.stanford.nlp.trees.Tree prune(edu.stanford.nlp.trees.Tree tree)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.negra.NegraLabel</name>
		<wmc>11</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>23</rfc>
		<lcom>25</lcom>
		<ca>3</ca>
		<ce>5</ce>
		<npm>9</npm>
		<lcom3>0.825</lcom3>
		<loc>104</loc>
		<dam>0.75</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4318181818181818</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.090909090909092</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public void _init_(String str, String edge, java.util.Map features)">0</method>
			<method name="public edu.stanford.nlp.ling.LabelFactory labelFactory()">1</method>
			<method name="public void setFeatureValue(String feature, String value)">1</method>
			<method name="public void _init_(String str)">0</method>
			<method name="static java.util.Map access$100(edu.stanford.nlp.trees.international.negra.NegraLabel x0)">1</method>
			<method name="public String featureValue(String feature)">1</method>
			<method name="public String getEdge()">1</method>
			<method name="public String toString()">3</method>
			<method name="public void _init_(String str, java.util.Map features)">0</method>
			<method name="public void setEdge(String edge)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.Expressions$SimpleCachedExpression</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>1</noc>
		<cbo>4</cbo>
		<rfc>13</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>4</npm>
		<lcom3>0.4</lcom3>
		<loc>118</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.3888888888888889</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.333333333333332</amc>
		<cc>
			<method name="public boolean hasValue()">2</method>
			<method name="public boolean equals(Object o)">7</method>
			<method name="public int hashCode()">3</method>
			<method name="protected transient edu.stanford.nlp.ling.tokensregex.types.Value doEvaluation(edu.stanford.nlp.ling.tokensregex.Env env, Object[] args)">1</method>
			<method name="protected transient void _init_(String typename, Object value, String[] tags)">0</method>
			<method name="public transient edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env env, Object[] args)">4</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequenceMatchAction$BranchAction</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>5</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>46</loc>
		<dam>0.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>20.5</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.util.Filter filter, edu.stanford.nlp.ling.tokensregex.SequenceMatchAction acceptBranch, edu.stanford.nlp.ling.tokensregex.SequenceMatchAction rejectBranch)">0</method>
			<method name="public transient edu.stanford.nlp.ling.tokensregex.SequenceMatchResult apply(edu.stanford.nlp.ling.tokensregex.SequenceMatchResult seqMatchResult, int[] groups)">4</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.FactoredParser</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>53</cbo>
		<rfc>141</rfc>
		<lcom>15</lcom>
		<ca>0</ca>
		<ce>53</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1561</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.23333333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>259.1666666666667</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="private static java.util.ArrayList addLast(java.util.ArrayList s)">1</method>
			<method name="private static java.util.List cleanTags(java.util.List twList, edu.stanford.nlp.trees.TreebankLanguagePack tlp)">2</method>
			<method name="public static void main(String[] args)">80</method>
			<method name="private static java.util.ArrayList cutLast(java.util.ArrayList s)">1</method>
			<method name="private static java.util.ArrayList wordify(java.util.List wList)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalRelations$XClausalComplementGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.classify.WeightedDataset</name>
		<wmc>12</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>23</rfc>
		<lcom>16</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>10</npm>
		<lcom3>0.6363636363636364</lcom3>
		<loc>244</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.23333333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.166666666666668</amc>
		<cc>
			<method name="public void _init_(int initSize)">0</method>
			<method name="public void _init_(edu.stanford.nlp.util.Index labelIndex, int[] labels, edu.stanford.nlp.util.Index featureIndex, int[][] data, int size, float[] weights)">0</method>
			<method name="protected void ensureSize()">2</method>
			<method name="public float[] getFeatureCounts()">3</method>
			<method name="public void add(java.util.Collection features, Object label)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public float[] getWeights()">1</method>
			<method name="public void add(edu.stanford.nlp.ling.Datum d)">1</method>
			<method name="private float[] trimToSize(float[] i)">1</method>
			<method name="public void add(java.util.Collection features, Object label, float weight)">1</method>
			<method name="public void randomize(int randomSeed)">2</method>
			<method name="public void add(edu.stanford.nlp.ling.Datum d, float weight)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.AmbiguityClasses</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>12</rfc>
		<lcom>1</lcom>
		<ca>3</ca>
		<ce>5</ce>
		<npm>1</npm>
		<lcom3>0.75</lcom3>
		<loc>66</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>20.333333333333332</amc>
		<cc>
			<method name="private int add(edu.stanford.nlp.tagger.maxent.AmbiguityClass a)">2</method>
			<method name="public void _init_(edu.stanford.nlp.tagger.maxent.TTags ttags)">0</method>
			<method name="protected int getClass(String word, edu.stanford.nlp.tagger.maxent.Dictionary dict, int veryCommonWordThresh, edu.stanford.nlp.tagger.maxent.TTags ttags)">4</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$RefTime</name>
		<wmc>8</wmc>
		<dit>0</dit>
		<noc>1</noc>
		<cbo>9</cbo>
		<rfc>10</rfc>
		<lcom>22</lcom>
		<ca>3</ca>
		<ce>7</ce>
		<npm>8</npm>
		<lcom3>0.9285714285714286</lcom3>
		<loc>91</loc>
		<dam>0.5</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3958333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.125</amc>
		<cc>
			<method name="public edu.stanford.nlp.time.SUTime$Time add(edu.stanford.nlp.time.SUTime$Duration offset)">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Time offset(edu.stanford.nlp.time.SUTime$Duration offset, int offsetFlags)">2</method>
			<method name="public void _init_(edu.stanford.nlp.time.SUTime$StandardTemporalType timeType, String timeLabel, String label)">0</method>
			<method name="public volatile edu.stanford.nlp.time.SUTime$Temporal resolve(edu.stanford.nlp.time.SUTime$Time x0, int x1)">1</method>
			<method name="public edu.stanford.nlp.time.SUTime$Time resolve(edu.stanford.nlp.time.SUTime$Time refTime, int flags)">4</method>
			<method name="public void _init_(String label)">0</method>
			<method name="public boolean isRef()">1</method>
			<method name="public String toFormattedString(int flags)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$CharacterOffsetEndAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.international.french.process.FrenchLexer$UntokenizableOptions</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.9523809523809524</lcom3>
		<loc>89</loc>
		<dam>0.14285714285714285</dam>
		<moa>7</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>19.5</amc>
		<cc>
			<method name="public static edu.stanford.nlp.international.french.process.FrenchLexer$UntokenizableOptions[] values()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static edu.stanford.nlp.international.french.process.FrenchLexer$UntokenizableOptions valueOf(String name)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$BooleanFunction</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>3</noc>
		<cbo>7</cbo>
		<rfc>20</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>4</ce>
		<npm>4</npm>
		<lcom3>0.4</lcom3>
		<loc>131</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3888888888888889</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>20.5</amc>
		<cc>
			<method name="public String getParamDesc()">1</method>
			<method name="protected void _init_(String name, int nargs, String resultTypeName)">0</method>
			<method name="protected void _init_(String name, int nargs)">0</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.Env env, java.util.List in)">4</method>
			<method name="public boolean checkArgs(java.util.List in)">5</method>
			<method name="public transient abstract Boolean compute(Boolean[])">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceToken</name>
		<wmc>38</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>80</rfc>
		<lcom>583</lcom>
		<ca>7</ca>
		<ce>4</ce>
		<npm>34</npm>
		<lcom3>0.96512641673932</lcom3>
		<loc>849</loc>
		<dam>0.6451612903225806</dam>
		<moa>5</moa>
		<mfa>0.0</mfa>
		<cam>0.3108108108108108</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>20.526315789473685</amc>
		<cc>
			<method name="public String getMassiClass()">1</method>
			<method name="public int getSentence()">1</method>
			<method name="public String getMassiBbn()">1</method>
			<method name="public int getByteEnd()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static boolean isSgml(String s)">1</method>
			<method name="public static void loadProximityClasses(String proxFileName)">1</method>
			<method name="public int getNerc()">1</method>
			<method name="public void setMassiClass(String i)">1</method>
			<method name="public int getRawByteEnd()">1</method>
			<method name="public void _init_(String word, String lemma, String pos, String chunk, String nerc, String start, String end, int sentence)">0</method>
			<method name="private static int detectCase(String word)">21</method>
			<method name="public int getChunk()">1</method>
			<method name="public static String removeSpaces(String s)">2</method>
			<method name="public void setMassiBbn(String i)">1</method>
			<method name="public edu.stanford.nlp.trees.Span getRawByteOffset()">1</method>
			<method name="public static String isTriggerWord(String lower)">1</method>
			<method name="public static void loadGazetteers(String dataPath)">1</method>
			<method name="public static boolean exists(java.util.Map dict, String elem)">2</method>
			<method name="public String toString()">1</method>
			<method name="public int getLemma()">1</method>
			<method name="public void setMassiWnss(String i)">1</method>
			<method name="public int[] getSuffixes()">1</method>
			<method name="public int getByteStart()">1</method>
			<method name="private static void loadDictionary(java.util.Map dict, String file)">1</method>
			<method name="public edu.stanford.nlp.trees.Span getByteOffset()">1</method>
			<method name="public static boolean isLastName(String lower)">1</method>
			<method name="public int getWord()">1</method>
			<method name="public int getCase()">1</method>
			<method name="public String getMassiWnss()">1</method>
			<method name="public static boolean isLocation(String lower)">1</method>
			<method name="public String getLiteral()">1</method>
			<method name="public int getPos()">1</method>
			<method name="public String display()">2</method>
			<method name="public int adjustPhrasePositions(int offsetToSubtract, String word)">2</method>
			<method name="private static int[] extractSuffixes(String word)">4</method>
			<method name="public int getRawByteStart()">1</method>
			<method name="public static boolean isFirstName(String lower)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$CoNLLDepAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$LabelWeightAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.Redwood$RedwoodChannels</name>
		<wmc>10</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>15</cbo>
		<rfc>19</rfc>
		<lcom>39</lcom>
		<ca>14</ca>
		<ce>4</ce>
		<npm>10</npm>
		<lcom3>0.2222222222222222</lcom3>
		<loc>154</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.55</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>14.3</amc>
		<cc>
			<method name="public void prettyLog(Object obj)">1</method>
			<method name="public transient edu.stanford.nlp.util.logging.Redwood$RedwoodChannels channels(Object[] moreChannelNames)">1</method>
			<method name="public transient void warn(Object[] objs)">1</method>
			<method name="public transient void fatal(Object[] objs)">1</method>
			<method name="public void prettyLog(String description, Object obj)">1</method>
			<method name="public transient void logf(String format, Object[] args)">1</method>
			<method name="public transient void log(Object[] obj)">1</method>
			<method name="public transient void _init_(Object[] channelNames)">0</method>
			<method name="public transient void err(Object[] objs)">1</method>
			<method name="public transient void debug(Object[] objs)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.CoreMapAttributeAggregator$ConcatListAggregator</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>9</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>40</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Object aggregate(Class key, java.util.List in)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.Redwood$Record$1</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>1.0</lcom3>
		<loc>41</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.0</amc>
		<cc>
			<method name="public int compare(Object a, Object b)">7</method>
			<method name="void _init_(edu.stanford.nlp.util.logging.Redwood$Record)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.ExtractorDash</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>7</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>1.3333333333333333</lcom3>
		<loc>24</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.75</amc>
		<cc>
			<method name="String extract(edu.stanford.nlp.tagger.maxent.History h, edu.stanford.nlp.tagger.maxent.PairsHolder pH)">2</method>
			<method name="public boolean isLocal()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public boolean isDynamic()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.TimeAnnotations</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>0</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.common.NoPunctuationHeadFinder</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>15</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>9</ce>
		<npm>2</npm>
		<lcom3>1.3333333333333333</lcom3>
		<loc>68</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.35</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.75</amc>
		<cc>
			<method name="public static void main(String[] args)">1</method>
			<method name="public void _init_()">0</method>
			<method name="protected int postOperationFix(int headIdx, edu.stanford.nlp.trees.Tree[] daughterTrees)">3</method>
			<method name="private boolean isPunctuationLabel(String label)">4</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalRelations$ArgumentGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.TagCount</name>
		<wmc>13</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>39</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>6</npm>
		<lcom3>0.75</lcom3>
		<loc>263</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.21794871794871795</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.846153846153847</amc>
		<cc>
			<method name="protected int numTags()">1</method>
			<method name="void _init_(edu.stanford.nlp.stats.IntCounter tagCounts)">0</method>
			<method name="private int calculateSumCache()">2</method>
			<method name="protected int get(String tag)">2</method>
			<method name="private void _init_()">0</method>
			<method name="protected int sum()">1</method>
			<method name="public int getAmbClassId()">1</method>
			<method name="public String getFirstTag()">2</method>
			<method name="protected void save(java.io.DataOutputStream rf)">2</method>
			<method name="public String[] getTags()">1</method>
			<method name="public String toString()">1</method>
			<method name="public void setAmbClassId(int ambClassId)">1</method>
			<method name="public static edu.stanford.nlp.tagger.maxent.TagCount readTagCount(java.io.DataInputStream rf)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.TreeCollinizer</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>27</rfc>
		<lcom>4</lcom>
		<ca>4</ca>
		<ce>5</ce>
		<npm>4</npm>
		<lcom3>0.3333333333333333</lcom3>
		<loc>216</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.55</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>52.0</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.trees.TreebankLanguagePack tlp, boolean deletePunct, boolean fixCollinsBaseNP)">0</method>
			<method name="public void _init_(edu.stanford.nlp.trees.TreebankLanguagePack tlp)">0</method>
			<method name="public edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree tree)">21</method>
			<method name="public void _init_(edu.stanford.nlp.trees.TreebankLanguagePack tlp, boolean deletePunct, boolean fixCollinsBaseNP, int whOption)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.TreeFilters$HasMatchingChild</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>11</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>0.5</lcom3>
		<loc>78</loc>
		<dam>0.3333333333333333</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4666666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>24.0</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.trees.TreebankLanguagePack tlp, String regex)">0</method>
			<method name="public volatile boolean accept(Object x0)">1</method>
			<method name="public boolean accept(edu.stanford.nlp.trees.Tree tree)">7</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.SystemUtils$WriterThread</name>
		<wmc>2</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>9</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>47</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.9846153846153847</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>21.5</amc>
		<cc>
			<method name="public void _init_(java.io.InputStream inputStream, java.io.Writer writer)">0</method>
			<method name="public void run()">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequencePattern$ValueState</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>17</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.333333333333333</amc>
		<cc>
			<method name="void _init_(Object x0, edu.stanford.nlp.ling.tokensregex.SequencePattern$1 x1)">0</method>
			<method name="public Object value(int bid, edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates matchedStates)">1</method>
			<method name="private void _init_(Object value)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.crf.CRFNonLinearLogConditionalObjectiveFunction</name>
		<wmc>16</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>14</cbo>
		<rfc>65</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>13</ce>
		<npm>11</npm>
		<lcom3>0.8523809523809524</lcom3>
		<loc>3326</loc>
		<dam>0.09523809523809523</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.1696969696969697</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>204.25</amc>
		<cc>
			<method name="private double[][] emptyU()">5</method>
			<method name="public double[][] empty2D()">2</method>
			<method name="public edu.stanford.nlp.util.Triple separateWeights(double[] x)">9</method>
			<method name="static void _clinit_()">0</method>
			<method name="public double[][] to2D(double[] linearWeights)">2</method>
			<method name="private void empiricalCounts()">5</method>
			<method name="public static int getPriorType(String priorTypeStr)">12</method>
			<method name="public edu.stanford.nlp.ie.crf.CliquePotentialFunction getCliquePotentialFunction(double[] x)">1</method>
			<method name="public int domainDimension()">6</method>
			<method name="public double[][] emptyFull2D()">2</method>
			<method name="private double[][] emptyW()">2</method>
			<method name="public void calculate(double[] x)">103</method>
			<method name="public java.util.Set getRegularizerParamRange(double[] x)">2</method>
			<method name="void _init_(int[][][][] data, int[][] labels, int window, edu.stanford.nlp.util.Index classIndex, java.util.List labelIndices, int[] map, edu.stanford.nlp.sequences.SeqClassifierFlags flags, int numNodeFeatures, int numEdgeFeatures, double[][][][] featureVal)">0</method>
			<method name="public int[][] getFeatureGrouping()">13</method>
			<method name="public double[] initial()">20</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.GrammarCompactor</name>
		<wmc>15</wmc>
		<dit>1</dit>
		<noc>1</noc>
		<cbo>18</cbo>
		<rfc>99</rfc>
		<lcom>67</lcom>
		<ca>2</ca>
		<ce>16</ce>
		<npm>4</npm>
		<lcom3>0.8246753246753247</lcom3>
		<loc>1156</loc>
		<dam>0.6363636363636364</dam>
		<moa>4</moa>
		<mfa>0.0</mfa>
		<cam>0.19047619047619047</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>75.33333333333333</amc>
		<cc>
			<method name="protected abstract edu.stanford.nlp.fsm.TransducerGraph doCompaction(edu.stanford.nlp.fsm.TransducerGraph, java.util.List, java.util.List)">1</method>
			<method name="protected java.util.Map convertGrammarToGraphs(edu.stanford.nlp.util.Pair grammar, java.util.Set unaryRules, java.util.Set binaryRules)">4</method>
			<method name="protected static edu.stanford.nlp.fsm.TransducerGraph getGraphFromMap(java.util.Map m, String o)">2</method>
			<method name="protected edu.stanford.nlp.util.Pair convertGraphsToGrammar(java.util.Set graphs, java.util.Set unaryRules, java.util.Set binaryRules)">19</method>
			<method name="protected static edu.stanford.nlp.stats.Distribution computeInputPrior(java.util.Map allTrainPaths)">2</method>
			<method name="protected static String getTopCategoryOfSyntheticState(String s)">3</method>
			<method name="protected boolean addOneUnaryRule(edu.stanford.nlp.parser.lexparser.UnaryRule rule, java.util.Map graphs)">3</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static boolean writeFile(edu.stanford.nlp.fsm.TransducerGraph graph, String dir, String name)">4</method>
			<method name="public edu.stanford.nlp.util.Triple compactGrammar(edu.stanford.nlp.util.Pair grammar, edu.stanford.nlp.util.Index originalStateIndex)">1</method>
			<method name="public edu.stanford.nlp.util.Triple compactGrammar(edu.stanford.nlp.util.Pair grammar, java.util.Map allTrainPaths, java.util.Map allTestPaths, edu.stanford.nlp.util.Index originalStateIndex)">7</method>
			<method name="protected boolean addOneBinaryRule(edu.stanford.nlp.parser.lexparser.BinaryRule rule, java.util.Map graphs)">7</method>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.Options op)">0</method>
			<method name="private double smartNegate(double output)">2</method>
			<method name="protected static boolean isSyntheticState(String state)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.IntCounter$3$1</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>13</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>4</npm>
		<lcom3>0.625</lcom3>
		<loc>39</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.4</amc>
		<cc>
			<method name="public Double next()">1</method>
			<method name="public boolean hasNext()">1</method>
			<method name="void _init_(edu.stanford.nlp.stats.IntCounter$3)">0</method>
			<method name="public void remove()">1</method>
			<method name="public volatile Object next()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$ChineseCharAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Execution$Option</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>4</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>4</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract String name()">1</method>
			<method name="public abstract boolean required()">1</method>
			<method name="public abstract String gloss()">1</method>
			<method name="public abstract String alt()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.LabelFactory</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>80</cbo>
		<rfc>4</rfc>
		<lcom>6</lcom>
		<ca>80</ca>
		<ce>1</ce>
		<npm>4</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract edu.stanford.nlp.ling.Label newLabel(edu.stanford.nlp.ling.Label)">1</method>
			<method name="public abstract edu.stanford.nlp.ling.Label newLabel(String)">1</method>
			<method name="public abstract edu.stanford.nlp.ling.Label newLabel(String, int)">1</method>
			<method name="public abstract edu.stanford.nlp.ling.Label newLabelFromString(String)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.Tree$TreeIterator</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>14</rfc>
		<lcom>9</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>5</npm>
		<lcom3>0.4</lcom3>
		<loc>77</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.666666666666666</amc>
		<cc>
			<method name="public edu.stanford.nlp.trees.Tree next()">3</method>
			<method name="public boolean hasNext()">2</method>
			<method name="public void remove()">1</method>
			<method name="public String toString()">1</method>
			<method name="protected void _init_(edu.stanford.nlp.trees.Tree t)">0</method>
			<method name="public volatile Object next()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.io.IOUtils$EolPreservingLineReaderIterable</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>9</rfc>
		<lcom>17</lcom>
		<ca>2</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>0.3333333333333333</lcom3>
		<loc>43</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.42857142857142855</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.857142857142857</amc>
		<cc>
			<method name="static int access$500(edu.stanford.nlp.io.IOUtils$EolPreservingLineReaderIterable x0)">1</method>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="private void _init_(java.io.Reader reader)">0</method>
			<method name="static java.io.Reader access$600(edu.stanford.nlp.io.IOUtils$EolPreservingLineReaderIterable x0)">1</method>
			<method name="private void _init_(java.io.Reader reader, int bufferSize)">0</method>
			<method name="void _init_(java.io.Reader x0, int x1, edu.stanford.nlp.io.IOUtils$1 x2)">0</method>
			<method name="void _init_(java.io.Reader x0, edu.stanford.nlp.io.IOUtils$1 x1)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.NERFeatureFactory$Bin5Annotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.EnglishTreebankParserParams$1</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>8</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>10</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>49</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>23.0</amc>
		<cc>
			<method name="public edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader in)">3</method>
			<method name="void _init_(edu.stanford.nlp.parser.lexparser.EnglishTreebankParserParams)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.AnnotationPipeline$1</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>4</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>1.0</lcom3>
		<loc>17</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.333333333333333</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.pipeline.AnnotationPipeline)">0</method>
			<method name="public volatile Object apply(Object x0)">1</method>
			<method name="public Object apply(edu.stanford.nlp.pipeline.Annotation in)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.EnglishTreebankParserParams$2</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>6</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>9</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>23</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.0</amc>
		<cc>
			<method name="public edu.stanford.nlp.trees.TreeReader newTreeReader(java.io.Reader in)">1</method>
			<method name="void _init_(edu.stanford.nlp.parser.lexparser.EnglishTreebankParserParams)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams$AddEquivalencedNodeFunctionVar</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>13</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>4</npm>
		<lcom3>0.4444444444444445</lcom3>
		<loc>69</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.5</amc>
		<cc>
			<method name="public void _init_(String annotationMark, String key)">0</method>
			<method name="public String toString()">1</method>
			<method name="public volatile Object apply(Object x0)">1</method>
			<method name="public String apply(edu.stanford.nlp.trees.tregex.TregexMatcher m)">4</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.AnnotationPipeline$2</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>5</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>0.6666666666666667</lcom3>
		<loc>27</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.0</amc>
		<cc>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="void _init_(edu.stanford.nlp.pipeline.AnnotationPipeline, Iterable, edu.stanford.nlp.util.Function)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.TaggerFeatures</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>9</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.tagger.maxent.TaggerExperiments domain)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.TimeFormatter$FormatComponent</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>7</noc>
		<cbo>11</cbo>
		<rfc>11</rfc>
		<lcom>11</lcom>
		<ca>9</ca>
		<ce>2</ce>
		<npm>4</npm>
		<lcom3>0.5</lcom3>
		<loc>73</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.37142857142857144</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.142857142857142</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public StringBuilder appendRegex(StringBuilder sb)">4</method>
			<method name="public edu.stanford.nlp.time.SUTime$Temporal updateTemporal(edu.stanford.nlp.time.SUTime$Temporal t, String fieldValueStr)">1</method>
			<method name="public int getGroup()">1</method>
			<method name="protected abstract StringBuilder appendRegex0(StringBuilder)">1</method>
			<method name="public void appendQuantifier(String str)">2</method>
			<method name="void _init_(edu.stanford.nlp.time.TimeFormatter$1 x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$ExtractRule</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>14</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>14</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract boolean extract(Object, java.util.List)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.io.StringOutputStream</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>9</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>0</ce>
		<npm>4</npm>
		<lcom3>0.0</lcom3>
		<loc>29</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.625</mfa>
		<cam>0.625</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="public synchronized void clear()">1</method>
			<method name="public synchronized String toString()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public synchronized void write(int i)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.tsurgeon.HoldTreeNode</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>6</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>22</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="public edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.tregex.TregexMatcher m)">1</method>
			<method name="public String toString()">1</method>
			<method name="public void _init_(edu.stanford.nlp.trees.tregex.tsurgeon.AuxiliaryTree t)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.AbstractCollinsHeadFinder</name>
		<wmc>14</wmc>
		<dit>1</dit>
		<noc>8</noc>
		<cbo>13</cbo>
		<rfc>31</rfc>
		<lcom>31</lcom>
		<ca>8</ca>
		<ce>5</ce>
		<npm>3</npm>
		<lcom3>0.8461538461538461</lcom3>
		<loc>578</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.37755102040816324</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>39.785714285714285</amc>
		<cc>
			<method name="private int findRightExceptHead(edu.stanford.nlp.trees.Tree[] daughterTrees, String[] how)">5</method>
			<method name="public edu.stanford.nlp.trees.Tree determineHead(edu.stanford.nlp.trees.Tree t)">1</method>
			<method name="private int findLeftHead(edu.stanford.nlp.trees.Tree[] daughterTrees, String[] how)">4</method>
			<method name="protected edu.stanford.nlp.trees.Tree findMarkedHead(edu.stanford.nlp.trees.Tree t)">1</method>
			<method name="private int findRightHead(edu.stanford.nlp.trees.Tree[] daughterTrees, String[] how)">4</method>
			<method name="protected edu.stanford.nlp.trees.Tree traverseLocate(edu.stanford.nlp.trees.Tree[] daughterTrees, String[] how, boolean lastResort)">11</method>
			<method name="public edu.stanford.nlp.trees.Tree determineHead(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.Tree parent)">6</method>
			<method name="protected edu.stanford.nlp.trees.Tree determineNonTrivialHead(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.Tree parent)">6</method>
			<method name="public boolean makesCopulaHead()">1</method>
			<method name="private int findLeftExceptHead(edu.stanford.nlp.trees.Tree[] daughterTrees, String[] how)">5</method>
			<method name="protected transient void _init_(edu.stanford.nlp.trees.TreebankLanguagePack tlp, String[] categoriesToAvoid)">0</method>
			<method name="protected int postOperationFix(int headIdx, edu.stanford.nlp.trees.Tree[] daughterTrees)">1</method>
			<method name="private int findRightDisHead(edu.stanford.nlp.trees.Tree[] daughterTrees, String[] how)">4</method>
			<method name="private int findLeftDisHead(edu.stanford.nlp.trees.Tree[] daughterTrees, String[] how)">4</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$DistSimAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.fsm.AutomatonMinimizer</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract edu.stanford.nlp.fsm.TransducerGraph minimizeFA(edu.stanford.nlp.fsm.TransducerGraph)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalRelations$AdverbialModifierGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.NERFeatureFactory$Bin4Annotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.CoreMapNodePattern$StringInSetAnnotationPattern</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>19</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>6</npm>
		<lcom3>0.0</lcom3>
		<loc>68</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.36666666666666664</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.166666666666666</amc>
		<cc>
			<method name="public void _init_(java.util.Set targets, int flags)">0</method>
			<method name="public void _init_(java.util.Set targets)">0</method>
			<method name="public boolean match(String str)">1</method>
			<method name="public java.util.Set getTargets()">1</method>
			<method name="public volatile boolean match(Object x0)">1</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.TimeFormatter$LiteralComponent</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>5</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>18</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.5</amc>
		<cc>
			<method name="protected StringBuilder appendRegex0(StringBuilder sb)">1</method>
			<method name="public void _init_(String str)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalRelations$NumberModifierGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.TimeAnnotations$TimexAnnotations</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>9</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.TimeFormatter</name>
		<wmc>10</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>64</rfc>
		<lcom>41</lcom>
		<ca>4</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>0.8333333333333334</lcom3>
		<loc>608</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2037037037037037</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>59.6</amc>
		<cc>
			<method name="private static String parseToken(String pattern, int[] indexRef)">27</method>
			<method name="private static boolean isSpecialRegexChar(char c)">3</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="private static String makeRegex(java.util.List strs)">3</method>
			<method name="static String access$500(java.util.List x0)">1</method>
			<method name="static void access$100(edu.stanford.nlp.time.TimeFormatter$FormatterBuilder x0, String x1)">1</method>
			<method name="private static void parsePatternTo(edu.stanford.nlp.time.TimeFormatter$FormatterBuilder builder, String pattern)">22</method>
			<method name="static java.util.Comparator access$400()">1</method>
			<method name="private static boolean isNumericToken(String token)">4</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.TimeFormatter$FormatterBuilder</name>
		<wmc>47</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>15</cbo>
		<rfc>121</rfc>
		<lcom>73</lcom>
		<ca>2</ca>
		<ce>13</ce>
		<npm>3</npm>
		<lcom3>0.5695652173913043</lcom3>
		<loc>581</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.18936170212765957</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.25531914893617</amc>
		<cc>
			<method name="protected void appendWeekOfWeekyear(int digits)">1</method>
			<method name="static void access$600(edu.stanford.nlp.time.TimeFormatter$FormatterBuilder x0, String x1)">1</method>
			<method name="protected void appendGroupEnd()">1</method>
			<method name="private void appendNumericFields(org.joda.time.DateTimeFieldType[] fieldTypes, int minDigits, int maxDigits)">1</method>
			<method name="protected void appendQuantifier(String str)">2</method>
			<method name="public org.joda.time.format.DateTimeFormatter toFormatter()">1</method>
			<method name="protected void appendYearOfEra(int minDigits, int maxDigits)">1</method>
			<method name="protected void appendTimeZoneShortName()">1</method>
			<method name="protected void appendMonthOfYearShortText()">1</method>
			<method name="protected void appendDayOfWeekText()">1</method>
			<method name="private void _init_()">0</method>
			<method name="protected void appendYear(int minDigits, int maxDigits)">1</method>
			<method name="protected void appendMonthOfYear(int digits)">1</method>
			<method name="protected void appendTimeZoneName()">1</method>
			<method name="protected void appendGroupStart()">1</method>
			<method name="protected void appendClockhourOfDay(int digits)">1</method>
			<method name="protected void appendClockhourOfHalfday(int digits)">1</method>
			<method name="protected void appendTimeZoneId()">1</method>
			<method name="protected void appendLiteral(char c)">1</method>
			<method name="public java.util.regex.Pattern toTextPattern()">1</method>
			<method name="protected void appendFractionOfSecond(int minDigits, int maxDigits)">1</method>
			<method name="private void appendComponent(edu.stanford.nlp.time.TimeFormatter$FormatComponent fc, boolean hasGroup)">2</method>
			<method name="protected void appendSecondOfMinute(int digits)">1</method>
			<method name="protected void appendTwoDigitYear(int pivot, boolean lenient)">1</method>
			<method name="protected void appendMinuteOfHour(int digits)">1</method>
			<method name="private void appendLiteralField(String s)">1</method>
			<method name="protected void appendWeekyear(int minDigits, int maxDigits)">1</method>
			<method name="protected void appendHalfdayOfDayText()">1</method>
			<method name="protected void appendCenturyOfEra(int minDigits, int maxDigits)">1</method>
			<method name="protected void appendDayOfYear(int digits)">1</method>
			<method name="public String toTextRegex()">2</method>
			<method name="protected void appendDayOfWeek(int digits)">1</method>
			<method name="private void appendNumericField(org.joda.time.DateTimeFieldType fieldType, int minDigits, int maxDigits)">1</method>
			<method name="private void appendNumericFields(org.joda.time.DateTimeFieldType[] fieldTypes, int digits)">1</method>
			<method name="protected void appendHourOfDay(int digits)">2</method>
			<method name="private void appendNumericField(org.joda.time.DateTimeFieldType fieldType, int digits)">1</method>
			<method name="private void appendRegexPart(String s)">1</method>
			<method name="private void appendTextField(org.joda.time.DateTimeFieldType fieldType, boolean isShort)">1</method>
			<method name="void _init_(edu.stanford.nlp.time.TimeFormatter$1 x0)">0</method>
			<method name="protected void appendLiteral(String s)">1</method>
			<method name="protected void appendHourOfHalfday(int digits)">1</method>
			<method name="protected void appendTwoDigitWeekyear(int pivot, boolean lenient)">1</method>
			<method name="protected void appendDayOfWeekShortText()">1</method>
			<method name="protected void appendMonthOfYearText()">1</method>
			<method name="protected void appendTimeZoneOffset(String zeroOffsetText, String zeroOffsetParseText, boolean showSeparators, int minFields, int maxFields)">1</method>
			<method name="protected void appendDayOfMonth(int digits)">1</method>
			<method name="protected void appendEraText()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.HashableCoreMap$HashableCoreMapException</name>
		<wmc>1</wmc>
		<dit>4</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>6</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>1.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.0</amc>
		<cc>
			<method name="public void _init_(String message)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.pascal.RelationalModel</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract double computeProb(edu.stanford.nlp.ie.pascal.PascalTemplate)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.maxent.Problem</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>19</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>4</ce>
		<npm>6</npm>
		<lcom3>0.5</lcom3>
		<loc>109</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.3333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.5</amc>
		<cc>
			<method name="public void print()">2</method>
			<method name="public void removeLast()">1</method>
			<method name="public void add(edu.stanford.nlp.maxent.Feature f)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void print(String filename)">1</method>
			<method name="public void _init_(edu.stanford.nlp.maxent.Experiments d, edu.stanford.nlp.maxent.Features f)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.CollinsPuncTransformer</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>34</rfc>
		<lcom>19</lcom>
		<ca>4</ca>
		<ce>5</ce>
		<npm>2</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>237</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.42857142857142855</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>32.714285714285715</amc>
		<cc>
			<method name="static void preTermHelper(edu.stanford.nlp.trees.Tree t, java.util.List l)">4</method>
			<method name="edu.stanford.nlp.trees.Tree transformNode(edu.stanford.nlp.trees.Tree tree, edu.stanford.nlp.trees.TreeFactory tf)">13</method>
			<method name="edu.stanford.nlp.trees.Tree transformRoot(edu.stanford.nlp.trees.Tree tree, edu.stanford.nlp.trees.TreeFactory tf)">2</method>
			<method name="public void _init_(edu.stanford.nlp.trees.TreebankLanguagePack tlp)">0</method>
			<method name="boolean isPunc(edu.stanford.nlp.trees.Tree t)">3</method>
			<method name="public edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree tree)">1</method>
			<method name="static java.util.LinkedList preTerms(edu.stanford.nlp.trees.Tree t)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$15$1</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>6</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>0.5</lcom3>
		<loc>47</loc>
		<dam>0.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.666666666666666</amc>
		<cc>
			<method name="public void advance()">3</method>
			<method name="void initialize()">1</method>
			<method name="void _init_(edu.stanford.nlp.trees.tregex.Relation$15, edu.stanford.nlp.trees.Tree, edu.stanford.nlp.trees.tregex.TregexMatcher)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$UTypeAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.semgraph.SemanticGraphFactory$Mode</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>3</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.9333333333333332</lcom3>
		<loc>67</loc>
		<dam>0.2</dam>
		<moa>5</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>14.5</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="public static edu.stanford.nlp.semgraph.SemanticGraphFactory$Mode[] values()">1</method>
			<method name="public static edu.stanford.nlp.semgraph.SemanticGraphFactory$Mode valueOf(String name)">1</method>
			<method name="private void _init_(String, int)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$PredictedAnswerAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.structure.MachineReadingAnnotations$DocumentDirectoryAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.ExtractorFrames</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>15</cbo>
		<rfc>38</rfc>
		<lcom>1</lcom>
		<ca>3</ca>
		<ce>12</ce>
		<npm>0</npm>
		<lcom3>0.9090909090909091</lcom3>
		<loc>728</loc>
		<dam>0.8181818181818182</dam>
		<moa>11</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>238.0</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="protected static edu.stanford.nlp.tagger.maxent.Extractor[] getExtractorFrames(String arch)">27</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.CNFTransformers$FromCNFTransformer</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>16</rfc>
		<lcom>1</lcom>
		<ca>2</ca>
		<ce>5</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>101</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>49.5</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="public edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree t)">5</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.TreeFunctions$LabeledTreeToStringLabeledTreeFunction</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>19</rfc>
		<lcom>8</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>98</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.45</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.4</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.trees.TreeFunctions$1 x0)">0</method>
			<method name="private void _init_()">0</method>
			<method name="public edu.stanford.nlp.trees.Tree apply(edu.stanford.nlp.trees.Tree t)">1</method>
			<method name="public edu.stanford.nlp.trees.Tree helper(edu.stanford.nlp.trees.Tree t)">5</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalRelations$PrepositionalLocalizerModifierGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.TimeExpressionPatterns</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>2</rfc>
		<lcom>1</lcom>
		<ca>2</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>2</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract int determineRelFlags(edu.stanford.nlp.util.CoreMap, edu.stanford.nlp.time.TimeExpression)">1</method>
			<method name="public abstract edu.stanford.nlp.ling.tokensregex.CoreMapExpressionExtractor createExtractor()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.LeftHeadFinder</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>7</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>1.5</lcom3>
		<loc>21</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.8333333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.666666666666667</amc>
		<cc>
			<method name="public edu.stanford.nlp.trees.Tree determineHead(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.Tree parent)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public edu.stanford.nlp.trees.Tree determineHead(edu.stanford.nlp.trees.Tree t)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.CollectionFactory$TreeSetFactory</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>3</npm>
		<lcom3>1.5</lcom3>
		<loc>13</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public java.util.Collection newCollection()">1</method>
			<method name="public java.util.Collection newEmptyCollection()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.TaggedWord$LabelFactoryHolder</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>0.5</lcom3>
		<loc>14</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.3333333333333335</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="static edu.stanford.nlp.ling.LabelFactory access$000()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$12</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>19</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.5</amc>
		<cc>
			<method name="void _init_(String x0, int x1)">0</method>
			<method name="public transient Boolean compute(Boolean[] in)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$13</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>11</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.5</amc>
		<cc>
			<method name="void _init_(String x0, int x1)">0</method>
			<method name="public transient String compute(String[] in)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$D2_LMiddleAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.pascal.AcronymModel$AlignedPerWord</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>5</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>70</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>22.333333333333332</amc>
		<cc>
			<method name="public double value(edu.stanford.nlp.ie.pascal.Alignment alignment)">9</method>
			<method name="public void _init_()">0</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEntityMention</name>
		<wmc>21</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>13</cbo>
		<rfc>49</rfc>
		<lcom>104</lcom>
		<ca>9</ca>
		<ce>8</ce>
		<npm>20</npm>
		<lcom3>0.8357142857142857</lcom3>
		<loc>359</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.15714285714285714</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.761904761904763</amc>
		<cc>
			<method name="public java.util.List getRelationMentions()">1</method>
			<method name="public String toXml(int offset)">2</method>
			<method name="public void _init_(String id, String type, String ldctype, edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceCharSeq extent, edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceCharSeq head)">0</method>
			<method name="private static boolean contains(java.util.ArrayList set, int elem)">3</method>
			<method name="public String getType()">1</method>
			<method name="public void detectHeadToken(edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument doc)">4</method>
			<method name="public String getLdctype()">1</method>
			<method name="public void addEventMention(edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEventMention rm)">1</method>
			<method name="public edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEntity getParent()">1</method>
			<method name="public boolean after(edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEntityMention em)">2</method>
			<method name="public boolean before(edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEntityMention em)">2</method>
			<method name="public edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceCharSeq getExtent()">1</method>
			<method name="public String getMention()">1</method>
			<method name="public void addRelationMention(edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceRelationMention rm)">1</method>
			<method name="public java.util.List getEventMentions()">1</method>
			<method name="public edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceCharSeq getHead()">1</method>
			<method name="public void setType(String s)">1</method>
			<method name="public String toString()">1</method>
			<method name="public int getHeadTokenPosition()">1</method>
			<method name="public void setParent(edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEntity e)">1</method>
			<method name="public void setLdctype(String s)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$10</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>32</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.0</amc>
		<cc>
			<method name="void _init_(String x0, int x1)">0</method>
			<method name="public transient Boolean compute(Boolean[] in)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$DocSourceTypeAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$11</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>32</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.0</amc>
		<cc>
			<method name="void _init_(String x0, int x1)">0</method>
			<method name="public transient Boolean compute(Boolean[] in)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$16</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>11</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>85</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>20.25</amc>
		<cc>
			<method name="public String getParamDesc()">1</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.Env env, java.util.List in)">3</method>
			<method name="public boolean checkArgs(java.util.List in)">5</method>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$17</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>10</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>74</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>17.5</amc>
		<cc>
			<method name="public String getParamDesc()">1</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.Env env, java.util.List in)">2</method>
			<method name="public boolean checkArgs(java.util.List in)">4</method>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.IntTuple</name>
		<wmc>17</wmc>
		<dit>1</dit>
		<noc>4</noc>
		<cbo>10</cbo>
		<rfc>32</rfc>
		<lcom>26</lcom>
		<ca>10</ca>
		<ce>4</ce>
		<npm>17</npm>
		<lcom3>0.53125</lcom3>
		<loc>342</loc>
		<dam>0.5</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.23529411764705882</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>19.0</amc>
		<cc>
			<method name="public static edu.stanford.nlp.util.IntTuple getIntTuple(java.util.List integers)">2</method>
			<method name="public void set(int num, int val)">1</method>
			<method name="public int length()">1</method>
			<method name="public int get(int num)">1</method>
			<method name="public void shiftLeft()">1</method>
			<method name="public void _init_(int num)">0</method>
			<method name="public boolean equals(Object iO)">5</method>
			<method name="public volatile int compareTo(Object x0)">1</method>
			<method name="public void print()">1</method>
			<method name="public edu.stanford.nlp.util.IntTuple getCopy()">1</method>
			<method name="public int hashCode()">2</method>
			<method name="public int[] elems()">1</method>
			<method name="public static edu.stanford.nlp.util.IntTuple getIntTuple(int num)">5</method>
			<method name="public void _init_(int[] arr)">0</method>
			<method name="public static edu.stanford.nlp.util.IntTuple concat(edu.stanford.nlp.util.IntTuple t1, edu.stanford.nlp.util.IntTuple t2)">3</method>
			<method name="public String toString()">3</method>
			<method name="public int compareTo(edu.stanford.nlp.util.IntTuple o)">6</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$14</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>12</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.0</amc>
		<cc>
			<method name="void _init_(String x0, int x1)">0</method>
			<method name="public transient String compute(String[] in)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$15</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>12</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.0</amc>
		<cc>
			<method name="void _init_(String x0, int x1)">0</method>
			<method name="public transient String compute(String[] in)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.EntityBIO</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>10</rfc>
		<lcom>1</lcom>
		<ca>2</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>1.0</lcom3>
		<loc>58</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>26.0</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="public String toString(edu.stanford.nlp.util.Index tagIndex)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.Dependencies$DependentPuncWordRejectFilter</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>8</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>0.75</lcom3>
		<loc>42</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.333333333333334</amc>
		<cc>
			<method name="public boolean accept(edu.stanford.nlp.trees.Dependency d)">4</method>
			<method name="public void _init_(edu.stanford.nlp.util.Filter wrf)">0</method>
			<method name="public volatile boolean accept(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$18</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>10</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>74</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>17.5</amc>
		<cc>
			<method name="public String getParamDesc()">1</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.Env env, java.util.List in)">2</method>
			<method name="public boolean checkArgs(java.util.List in)">4</method>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.process.PTBLexer$1</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>49</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>47.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$19</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>11</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>71</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>22.666666666666668</amc>
		<cc>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.Env env, java.util.List in)">2</method>
			<method name="public boolean checkArgs(java.util.List in)">4</method>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$22$1</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>6</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>0</npm>
		<lcom3>0.5</lcom3>
		<loc>28</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.0</amc>
		<cc>
			<method name="void initialize()">3</method>
			<method name="void _init_(edu.stanford.nlp.trees.tregex.Relation$22, edu.stanford.nlp.trees.Tree)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.GrammarProjection</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>5</rfc>
		<lcom>10</lcom>
		<ca>6</ca>
		<ce>2</ce>
		<npm>5</npm>
		<lcom3>2.0</lcom3>
		<loc>5</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract int project(int)">1</method>
			<method name="public abstract edu.stanford.nlp.parser.lexparser.BinaryGrammar targetBG()">1</method>
			<method name="public abstract edu.stanford.nlp.parser.lexparser.UnaryGrammar targetUG()">1</method>
			<method name="public abstract edu.stanford.nlp.parser.lexparser.BinaryGrammar sourceBG()">1</method>
			<method name="public abstract edu.stanford.nlp.parser.lexparser.UnaryGrammar sourceUG()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$FeaturesAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.HybridMinimizer</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>11</rfc>
		<lcom>9</lcom>
		<ca>3</ca>
		<ce>7</ce>
		<npm>6</npm>
		<lcom3>0.06666666666666661</lcom3>
		<loc>95</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>14.333333333333334</amc>
		<cc>
			<method name="public double[] minimize(edu.stanford.nlp.optimization.DiffFunction function, double functionTolerance, double[] initial, int maxIterations)">1</method>
			<method name="public void _init_(edu.stanford.nlp.optimization.Minimizer minimizerOne, edu.stanford.nlp.optimization.Minimizer minimizerTwo, int iterationCutoff)">0</method>
			<method name="public volatile double[] minimize(edu.stanford.nlp.optimization.Function x0, double x1, double[] x2)">1</method>
			<method name="public double[] minimize(edu.stanford.nlp.optimization.DiffFunction function, double functionTolerance, double[] initial)">1</method>
			<method name="public volatile double[] minimize(edu.stanford.nlp.optimization.Function x0, double x1, double[] x2, int x3)">1</method>
			<method name="public void setEvaluators(int iters, edu.stanford.nlp.optimization.Evaluator[] evaluators)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalRelations$GoesWithGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.crf.CRFClassifierFloat</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>12</cbo>
		<rfc>26</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>12</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>158</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.34375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>38.5</amc>
		<cc>
			<method name="protected double[] trainWeights(int[][][][] data, int[][] labels, edu.stanford.nlp.optimization.Evaluator[] evaluators, int pruneFeatureItr, double[][][][] featureVals)">4</method>
			<method name="protected void _init_()">0</method>
			<method name="public void _init_(java.util.Properties props)">0</method>
			<method name="public void _init_(edu.stanford.nlp.sequences.SeqClassifierFlags flags)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequencePattern$ValuePatternExpr</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>14</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>1</npm>
		<lcom3>0.2</lcom3>
		<loc>59</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.3333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.5</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr expr, Object value)">0</method>
			<method name="protected void updateBindings(edu.stanford.nlp.ling.tokensregex.SequencePattern$VarGroupBindings bindings)">1</method>
			<method name="protected int assignGroupIds(int start)">1</method>
			<method name="protected edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr copy()">1</method>
			<method name="protected edu.stanford.nlp.ling.tokensregex.SequencePattern$Frag build()">1</method>
			<method name="protected edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr optimize()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.RerankerQuery</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>4</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract double score(edu.stanford.nlp.trees.Tree)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.process.WordShapeClassifier</name>
		<wmc>24</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>70</rfc>
		<lcom>244</lcom>
		<ca>6</ca>
		<ce>3</ce>
		<npm>5</npm>
		<lcom3>1.017391304347826</lcom3>
		<loc>1829</loc>
		<dam>0.15</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2670807453416149</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>74.375</amc>
		<cc>
			<method name="private static String wordShapeChris1(String s)">77</method>
			<method name="private static String wordShapeJenny1(String s, java.util.Collection knownLCWords)">14</method>
			<method name="private static String wordShapeChris2Short(String s, int len, java.util.Collection knownLCWords)">14</method>
			<method name="public static String wordShape(String inStr, int wordShaper, java.util.Collection knownLCWords)">4</method>
			<method name="private static String wordShapeDan1(String s)">13</method>
			<method name="private static String wordShapeCluster1(String s)">10</method>
			<method name="static void _clinit_()">0</method>
			<method name="private static String wordShapeChinese(String s)">1</method>
			<method name="private static String wordShapeChris2Long(String s, boolean omitIfInBoundary, int len, java.util.Collection knownLCWords)">22</method>
			<method name="private static char chris4equivalenceClass(char c)">28</method>
			<method name="private static String wordShapeChris4Short(String s, int len, java.util.Collection knownLCWords)">10</method>
			<method name="private static String wordShapeDigits(String s)">5</method>
			<method name="public static int lookupShaper(String name)">18</method>
			<method name="private static String wordShapeDan2(String s, java.util.Collection knownLCWords)">13</method>
			<method name="private static String wordShapeChris4(String s, boolean omitIfInBoundary, java.util.Collection knownLCWords)">2</method>
			<method name="public static String wordShapeChris4(String s)">1</method>
			<method name="private void _init_()">0</method>
			<method name="private static String wordShapeChris4Long(String s, boolean omitIfInBoundary, int len, java.util.Collection knownLCWords)">13</method>
			<method name="public static void main(String[] args)">6</method>
			<method name="private static boolean dontUseLC(int shape)">6</method>
			<method name="private static boolean containsGreekLetter(String s)">1</method>
			<method name="public static String wordShape(String inStr, int wordShaper)">1</method>
			<method name="private static String wordShapeChris2(String s, boolean omitIfInBoundary, java.util.Collection knownLCWords)">2</method>
			<method name="private static String wordShapeDan2Bio(String s, java.util.Collection knownLCWords)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequenceMatchAction</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>9</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public transient abstract edu.stanford.nlp.ling.tokensregex.SequenceMatchResult apply(edu.stanford.nlp.ling.tokensregex.SequenceMatchResult, int[])">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.RelationExtractorAnnotator</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>17</cbo>
		<rfc>40</rfc>
		<lcom>9</lcom>
		<ca>1</ca>
		<ce>16</ce>
		<npm>5</npm>
		<lcom3>0.5</lcom3>
		<loc>288</loc>
		<dam>0.5</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.35</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>46.666666666666664</amc>
		<cc>
			<method name="public static void main(String[] args)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void annotate(edu.stanford.nlp.pipeline.Annotation annotation)">8</method>
			<method name="public java.util.Set requires()">1</method>
			<method name="public void _init_(java.util.Properties props)">0</method>
			<method name="public java.util.Set requirementsSatisfied()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.TransformingTreebank</name>
		<wmc>8</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>17</cbo>
		<rfc>37</rfc>
		<lcom>16</lcom>
		<ca>1</ca>
		<ce>17</ce>
		<npm>8</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>269</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.21875</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>32.25</amc>
		<cc>
			<method name="public void clear()">1</method>
			<method name="public void _init_(edu.stanford.nlp.trees.Treebank tb, edu.stanford.nlp.trees.TreeTransformer transformer)">0</method>
			<method name="public void loadPath(java.io.File path, java.io.FileFilter filt)">1</method>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(edu.stanford.nlp.trees.TreeReaderFactory trf)">0</method>
			<method name="public void apply(edu.stanford.nlp.trees.TreeVisitor tv)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequencePattern$SeqEndState</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>6</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>24</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="protected boolean match(int bid, edu.stanford.nlp.ling.tokensregex.SequenceMatcher$MatchedStates matchedStates, boolean consume, edu.stanford.nlp.ling.tokensregex.SequencePattern$State prevState)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$20</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>14</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>71</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>34.5</amc>
		<cc>
			<method name="transient void _init_(String x0, edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$ParamInfo[] x1)">0</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.Env env, java.util.List in)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.fsm.QuasiDeterminizer</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>41</rfc>
		<lcom>10</lcom>
		<ca>2</ca>
		<ce>4</ce>
		<npm>5</npm>
		<lcom3>2.0</lcom3>
		<loc>360</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>71.0</amc>
		<cc>
			<method name="public static void main(String[] args)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public edu.stanford.nlp.fsm.TransducerGraph processGraph(edu.stanford.nlp.fsm.TransducerGraph graph)">1</method>
			<method name="public edu.stanford.nlp.fsm.TransducerGraph pushLambdas(edu.stanford.nlp.fsm.TransducerGraph graph, edu.stanford.nlp.stats.ClassicCounter lambda)">5</method>
			<method name="public static edu.stanford.nlp.stats.ClassicCounter computeLambda(edu.stanford.nlp.fsm.TransducerGraph graph)">8</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$21</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>13</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>57</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>27.5</amc>
		<cc>
			<method name="transient void _init_(String x0, edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$ParamInfo[] x1)">0</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.Env env, java.util.List in)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequencePattern$MultiNodePatternExpr</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>10</rfc>
		<lcom>3</lcom>
		<ca>2</ca>
		<ce>6</ce>
		<npm>2</npm>
		<lcom3>0.4</lcom3>
		<loc>37</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.0</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.MultiNodePattern nodePattern)">0</method>
			<method name="protected void updateBindings(edu.stanford.nlp.ling.tokensregex.SequencePattern$VarGroupBindings bindings)">1</method>
			<method name="protected int assignGroupIds(int start)">1</method>
			<method name="protected edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr copy()">1</method>
			<method name="protected edu.stanford.nlp.ling.tokensregex.SequencePattern$Frag build()">1</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$22</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>7</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>46</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>22.0</amc>
		<cc>
			<method name="transient void _init_(String x0, edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$ParamInfo[] x1)">0</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.Env env, java.util.List in)">4</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$23</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>8</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>8</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>56</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>27.0</amc>
		<cc>
			<method name="transient void _init_(String x0, edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$ParamInfo[] x1)">0</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.Env env, java.util.List in)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$24</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>8</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>50</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>24.0</amc>
		<cc>
			<method name="transient void _init_(String x0, edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$ParamInfo[] x1)">0</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.Env env, java.util.List in)">4</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$25</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>9</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>60</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>29.0</amc>
		<cc>
			<method name="transient void _init_(String x0, edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$ParamInfo[] x1)">0</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.Env env, java.util.List in)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$26</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>10</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>10</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>47</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>22.5</amc>
		<cc>
			<method name="transient void _init_(String x0, edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$ParamInfo[] x1)">0</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.Env env, java.util.List in)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.XMLUtils$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$27</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>14</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>103</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>24.75</amc>
		<cc>
			<method name="public String getParamDesc()">1</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.Env env, java.util.List in)">9</method>
			<method name="public boolean checkArgs(java.util.List in)">2</method>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$28</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>14</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>103</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>24.75</amc>
		<cc>
			<method name="public String getParamDesc()">1</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.Env env, java.util.List in)">9</method>
			<method name="public boolean checkArgs(java.util.List in)">2</method>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.neural.rnn.RNNCoreAnnotations$NodeVector</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.tsurgeon.ExciseNode</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>16</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>127</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>41.333333333333336</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern top, edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern bottom)">0</method>
			<method name="public edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.tregex.TregexMatcher m)">6</method>
			<method name="public void _init_(edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern node)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$29</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>24</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>247</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>60.75</amc>
		<cc>
			<method name="public String getParamDesc()">1</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.Env env, java.util.List in)">12</method>
			<method name="public boolean checkArgs(java.util.List in)">9</method>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$SpeakerAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.Rule</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>2</rfc>
		<lcom>1</lcom>
		<ca>3</ca>
		<ce>0</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>2</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract int parent()">1</method>
			<method name="public abstract float score()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.crf.FloatFactorTable</name>
		<wmc>38</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>61</rfc>
		<lcom>85</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>28</npm>
		<lcom3>0.3423423423423424</lcom3>
		<loc>1040</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2781954887218045</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>26.289473684210527</amc>
		<cc>
			<method name="public void _init_(int numClasses, int windowSize)">0</method>
			<method name="private int[] toArray(int index)">2</method>
			<method name="public float unnormalizedLogProb(int[] label)">1</method>
			<method name="private int indexOf(int[] entry)">2</method>
			<method name="public boolean hasNaN()">1</method>
			<method name="private int[] indicesFront(int[] entries)">5</method>
			<method name="public void multiplyInEnd(edu.stanford.nlp.ie.crf.FloatFactorTable other)">2</method>
			<method name="public String toString(edu.stanford.nlp.util.Index classIndex)">2</method>
			<method name="public float totalMass()">1</method>
			<method name="public String toProbString()">2</method>
			<method name="private String toString(int[] array, edu.stanford.nlp.util.Index classIndex)">2</method>
			<method name="public int numClasses()">1</method>
			<method name="public float logProbEnd(int[] label)">1</method>
			<method name="public edu.stanford.nlp.ie.crf.FloatFactorTable sumOutFront()">2</method>
			<method name="public void logIncrementValue(int[] label, float value)">1</method>
			<method name="private int size()">1</method>
			<method name="public String toString()">2</method>
			<method name="public float getValue(int[] label)">1</method>
			<method name="public float prob(int[] label)">1</method>
			<method name="private int[] indicesEnd(int[] entries)">3</method>
			<method name="public void incrementValue(int[] label, float value)">1</method>
			<method name="private void logIncrementValue(int index, float value)">1</method>
			<method name="public edu.stanford.nlp.ie.crf.FloatFactorTable sumOutEnd()">2</method>
			<method name="private int indexOf(int[] front, int end)">2</method>
			<method name="public float conditionalLogProb(int[] given, int of)">3</method>
			<method name="private float getValue(int index)">1</method>
			<method name="public float unnormalizedLogProbEnd(int label)">2</method>
			<method name="public float unnormalizedLogProbEnd(int[] label)">2</method>
			<method name="public static void main(String[] args)">9</method>
			<method name="public float logProb(int[] label)">1</method>
			<method name="public void divideBy(edu.stanford.nlp.ie.crf.FloatFactorTable other)">4</method>
			<method name="public float logProbEnd(int label)">1</method>
			<method name="public void setValue(int[] label, float value)">1</method>
			<method name="public int windowSize()">1</method>
			<method name="public float unnormalizedLogProbFront(int[] label)">2</method>
			<method name="public void multiplyInFront(edu.stanford.nlp.ie.crf.FloatFactorTable other)">2</method>
			<method name="private void setValue(int index, float value)">1</method>
			<method name="public float logProbFront(int[] label)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.Span$ConstituentFactoryHolder$SpanFactory</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>6</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>22</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.45</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.5</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public edu.stanford.nlp.trees.Constituent newConstituent(int start, int end, edu.stanford.nlp.ling.Label label, double score)">1</method>
			<method name="public edu.stanford.nlp.trees.Constituent newConstituent(int start, int end)">1</method>
			<method name="void _init_(edu.stanford.nlp.trees.Span$1 x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.CoreMapSequenceMatcher$1</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>5</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>19</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.333333333333333</amc>
		<cc>
			<method name="public String apply(java.util.List in)">2</method>
			<method name="void _init_()">0</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.international.Languages$Language</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>7</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.9523809523809524</lcom3>
		<loc>89</loc>
		<dam>0.14285714285714285</dam>
		<moa>7</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>19.5</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="public static edu.stanford.nlp.international.Languages$Language[] values()">1</method>
			<method name="public static edu.stanford.nlp.international.Languages$Language valueOf(String name)">1</method>
			<method name="private void _init_(String, int)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$SearchNodeIterator</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>32</noc>
		<cbo>33</cbo>
		<rfc>9</rfc>
		<lcom>15</lcom>
		<ca>32</ca>
		<ce>1</ce>
		<npm>5</npm>
		<lcom3>0.3333333333333333</lcom3>
		<loc>49</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.857142857142857</amc>
		<cc>
			<method name="void advance()">1</method>
			<method name="void initialize()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public edu.stanford.nlp.trees.Tree next()">2</method>
			<method name="public boolean hasNext()">2</method>
			<method name="public void remove()">1</method>
			<method name="public volatile Object next()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$34</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>12</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>84</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>20.0</amc>
		<cc>
			<method name="public String getParamDesc()">1</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.Env env, java.util.List in)">3</method>
			<method name="public boolean checkArgs(java.util.List in)">6</method>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalRelations$ReferentGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.SMDMinimizer</name>
		<wmc>11</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>14</cbo>
		<rfc>34</rfc>
		<lcom>17</lcom>
		<ca>6</ca>
		<ce>10</ce>
		<npm>8</npm>
		<lcom3>0.7</lcom3>
		<loc>503</loc>
		<dam>0.25</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.24545454545454545</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>44.0</amc>
		<cc>
			<method name="protected void init(edu.stanford.nlp.optimization.AbstractStochasticCachingDiffFunction func)">2</method>
			<method name="protected String getName()">1</method>
			<method name="public static void main(String[] args)">2</method>
			<method name="public void _init_()">0</method>
			<method name="public void setBatchSize(int batchSize)">1</method>
			<method name="public edu.stanford.nlp.util.Pair tune(edu.stanford.nlp.optimization.Function function, double[] initial, long msPerTest)">1</method>
			<method name="public void _init_(double initialSMDGain, int batchSize, edu.stanford.nlp.optimization.StochasticCalculateMethods method, int passes)">0</method>
			<method name="public void _init_(double initGain, int batchSize, edu.stanford.nlp.optimization.StochasticCalculateMethods method, int passes, boolean outputToFile)">0</method>
			<method name="protected void takeStep(edu.stanford.nlp.optimization.AbstractStochasticCachingDiffFunction dfunction)">4</method>
			<method name="public double[] minimize(edu.stanford.nlp.optimization.Function function, double functionTolerance, double[] initial)">1</method>
			<method name="public void shutUp()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$35</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>10</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>60</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>14.0</amc>
		<cc>
			<method name="public String getParamDesc()">1</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.Env env, java.util.List in)">2</method>
			<method name="public boolean checkArgs(java.util.List in)">5</method>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$32</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>19</rfc>
		<lcom>10</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>4</npm>
		<lcom3>2.0</lcom3>
		<loc>128</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.44</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>24.6</amc>
		<cc>
			<method name="public String getParamDesc()">1</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.Env env, java.util.List in)">3</method>
			<method name="public void removeTag(edu.stanford.nlp.util.CoreMap cm, String tag)">2</method>
			<method name="public boolean checkArgs(java.util.List in)">7</method>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$33</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>14</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>89</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>21.25</amc>
		<cc>
			<method name="public String getParamDesc()">1</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.Env env, java.util.List in)">2</method>
			<method name="public boolean checkArgs(java.util.List in)">7</method>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.TransformingTreebank$MyTreeTransformer2</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>15</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>47</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>14.666666666666666</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="void _init_(edu.stanford.nlp.trees.TransformingTreebank$1 x0)">0</method>
			<method name="public edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree tree)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.classify.LinearClassifierFactory$NegativeScorer</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>21</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>9</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>117</loc>
		<dam>0.0</dam>
		<moa>5</moa>
		<mfa>0.0</mfa>
		<cam>0.42857142857142855</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>36.0</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.classify.LinearClassifierFactory, edu.stanford.nlp.classify.GeneralDataset trainSet, edu.stanford.nlp.classify.GeneralDataset devSet, edu.stanford.nlp.stats.Scorer scorer, edu.stanford.nlp.util.Timing timer)">0</method>
			<method name="public Double apply(Double sigmaToTry)">1</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$30</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>22</rfc>
		<lcom>10</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>4</npm>
		<lcom3>2.0</lcom3>
		<loc>172</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.44</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>33.4</amc>
		<cc>
			<method name="public String getParamDesc()">1</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Value getTag(edu.stanford.nlp.util.CoreMap cm, String tag)">2</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.Env env, java.util.List in)">5</method>
			<method name="public boolean checkArgs(java.util.List in)">9</method>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$31</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>21</rfc>
		<lcom>10</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>4</npm>
		<lcom3>2.0</lcom3>
		<loc>157</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>30.4</amc>
		<cc>
			<method name="public String getParamDesc()">1</method>
			<method name="public void setTag(edu.stanford.nlp.util.CoreMap cm, String tag, edu.stanford.nlp.ling.tokensregex.types.Value tagValue)">2</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.Env env, java.util.List in)">4</method>
			<method name="public boolean checkArgs(java.util.List in)">8</method>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.TransformingTreebank$MyTreeTransformer3</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>15</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>47</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>14.666666666666666</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="void _init_(edu.stanford.nlp.trees.TransformingTreebank$1 x0)">0</method>
			<method name="public edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree tree)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.MetaClass$ClassFactory</name>
		<wmc>14</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>45</rfc>
		<lcom>69</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>5</npm>
		<lcom3>0.3589743589743589</lcom3>
		<loc>585</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.29464285714285715</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>40.57142857142857</amc>
		<cc>
			<method name="void _init_(String x0, String[] x1, edu.stanford.nlp.util.MetaClass$1 x2)">0</method>
			<method name="private transient void _init_(String classname, String[] params)">0</method>
			<method name="public boolean equals(Object o)">5</method>
			<method name="public String getName()">1</method>
			<method name="private transient void _init_(String classname, Class[] params)">0</method>
			<method name="public transient Object createInstance(Object[] params)">3</method>
			<method name="private transient void construct(String classname, Class[] params)">1</method>
			<method name="void _init_(String x0, Object[] x1, edu.stanford.nlp.util.MetaClass$1 x2)">0</method>
			<method name="public int hashCode()">1</method>
			<method name="private static boolean samePrimitive(Class a, Class b)">5</method>
			<method name="private transient void _init_(String classname, Object[] params)">0</method>
			<method name="public String toString()">2</method>
			<method name="void _init_(String x0, Class[] x1, edu.stanford.nlp.util.MetaClass$1 x2)">0</method>
			<method name="private static int superDistance(Class candidate, Class target)">8</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.SimpleConstituent$ConstituentFactoryHolder</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>0</npm>
		<lcom3>1.0</lcom3>
		<loc>12</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.5</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalRelations$PreconjunctGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.dvparser.DVParserCostAndGradient$ScoringProcessor</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>10</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>3</npm>
		<lcom3>0.3333333333333333</lcom3>
		<loc>45</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.0</amc>
		<cc>
			<method name="public edu.stanford.nlp.util.Pair process(edu.stanford.nlp.trees.Tree tree)">1</method>
			<method name="public edu.stanford.nlp.util.concurrent.ThreadsafeProcessor newInstance()">1</method>
			<method name="public volatile Object process(Object x0)">1</method>
			<method name="void _init_(edu.stanford.nlp.parser.dvparser.DVParserCostAndGradient)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$38</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>11</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>70</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.5</amc>
		<cc>
			<method name="public String getParamDesc()">1</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.Env env, java.util.List in)">3</method>
			<method name="public boolean checkArgs(java.util.List in)">6</method>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$39</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>29</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>270</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>66.5</amc>
		<cc>
			<method name="public String getParamDesc()">1</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.Env env, java.util.List in)">13</method>
			<method name="public boolean checkArgs(java.util.List in)">9</method>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter</name>
		<wmc>36</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>31</cbo>
		<rfc>143</rfc>
		<lcom>378</lcom>
		<ca>1</ca>
		<ce>31</ce>
		<npm>28</npm>
		<lcom3>0.7857142857142857</lcom3>
		<loc>1392</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.10978835978835978</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>37.55555555555556</amc>
		<cc>
			<method name="public boolean isKnown(int word)">1</method>
			<method name="public void finishTraining()">1</method>
			<method name="public void writeData(java.io.Writer w)">1</method>
			<method name="private static int numSubArgs(String[] args, int index)">3</method>
			<method name="static void saveSegmenterDataToSerialized(edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter cs, String filename)">1</method>
			<method name="public void train(java.util.List sentence, double weight)">1</method>
			<method name="public static edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter getSegmenterDataFromFile(String parserFileOrUrl, edu.stanford.nlp.parser.lexparser.Options op)">2</method>
			<method name="protected static edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter getSegmenterDataFromSerializedFile(String serializedFileOrUrl)">3</method>
			<method name="public void train(java.util.List sentence)">1</method>
			<method name="public void train(edu.stanford.nlp.ling.TaggedWord tw, int loc, double weight)">1</method>
			<method name="public void setUnknownWordModel(edu.stanford.nlp.parser.lexparser.UnknownWordModel uwm)">1</method>
			<method name="public edu.stanford.nlp.parser.lexparser.UnknownWordModel getUnknownWordModel()">1</method>
			<method name="public void loadSegmenter(String filename)">1</method>
			<method name="private static edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter getSegmenterDataFromTreebank(edu.stanford.nlp.trees.Treebank trainTreebank, edu.stanford.nlp.parser.lexparser.Options op, edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex)">16</method>
			<method name="public float score(edu.stanford.nlp.parser.lexparser.IntTaggedWord iTW, int loc, String word, String featureSpec)">1</method>
			<method name="public void train(java.util.Collection trees, java.util.Collection rawTrees)">1</method>
			<method name="private static edu.stanford.nlp.trees.Treebank makeTreebank(String treebankPath, edu.stanford.nlp.parser.lexparser.Options op, java.io.FileFilter filt)">2</method>
			<method name="private static void printArgs(String[] args, java.io.PrintStream ps)">2</method>
			<method name="public int numRules()">1</method>
			<method name="public java.util.Iterator ruleIteratorByWord(int word, int loc, String featureSpec)">1</method>
			<method name="private void _init_(edu.stanford.nlp.trees.Treebank trainTreebank, edu.stanford.nlp.parser.lexparser.Options op, edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex)">0</method>
			<method name="public java.util.Iterator ruleIteratorByWord(String word, int loc, String featureSpec)">1</method>
			<method name="public void incrementTreesRead(double weight)">1</method>
			<method name="public void _init_(String segmenterFileOrUrl, edu.stanford.nlp.parser.lexparser.Options op)">0</method>
			<method name="public void train(java.util.Collection trees, double weight)">2</method>
			<method name="public void trainUnannotated(java.util.List sentence, double weight)">1</method>
			<method name="public void initializeTraining(double numTrees)">1</method>
			<method name="public boolean isKnown(String word)">1</method>
			<method name="public java.util.List segment(String s)">1</method>
			<method name="public void train(java.util.Collection trees)">1</method>
			<method name="public static void main(String[] args)">40</method>
			<method name="public void train(edu.stanford.nlp.trees.Tree tree, double weight)">1</method>
			<method name="public void readData(java.io.BufferedReader in)">1</method>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.ChineseLexicon lex, edu.stanford.nlp.process.WordSegmenter seg)">0</method>
			<method name="public void train(edu.stanford.nlp.trees.Tree tree)">1</method>
			<method name="static void saveSegmenterDataToText(edu.stanford.nlp.parser.lexparser.ChineseLexiconAndWordSegmenter cs, String filename)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$36</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>12</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>68</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.0</amc>
		<cc>
			<method name="public String getParamDesc()">1</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.Env env, java.util.List in)">2</method>
			<method name="public boolean checkArgs(java.util.List in)">5</method>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.international.arabic.process.ArabicDocumentReaderAndWriter$1</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>29</rfc>
		<lcom>2</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>2</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>174</loc>
		<dam>0.3333333333333333</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>41.75</amc>
		<cc>
			<method name="public java.util.List apply(String in)">9</method>
			<method name="static void _clinit_()">0</method>
			<method name="void _init_(edu.stanford.nlp.international.arabic.process.ArabicDocumentReaderAndWriter)">0</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$37</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>10</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>96</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>23.0</amc>
		<cc>
			<method name="public String getParamDesc()">1</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.Env env, java.util.List in)">4</method>
			<method name="public boolean checkArgs(java.util.List in)">9</method>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$CommonWordsAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.RelationFeatureFactory$DEPENDENCY_TYPE</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.9166666666666666</lcom3>
		<loc>56</loc>
		<dam>0.25</dam>
		<moa>4</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>12.0</amc>
		<cc>
			<method name="public static edu.stanford.nlp.ie.machinereading.RelationFeatureFactory$DEPENDENCY_TYPE[] values()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static edu.stanford.nlp.ie.machinereading.RelationFeatureFactory$DEPENDENCY_TYPE valueOf(String name)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.ExtractorStartSentenceCap</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>13</rfc>
		<lcom>8</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>3</npm>
		<lcom3>1.0</lcom3>
		<loc>59</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.4</amc>
		<cc>
			<method name="String extract(edu.stanford.nlp.tagger.maxent.History h, edu.stanford.nlp.tagger.maxent.PairsHolder pH)">5</method>
			<method name="public boolean isLocal()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public boolean isDynamic()">1</method>
			<method name="protected void setGlobalHolder(edu.stanford.nlp.tagger.maxent.MaxentTagger tagger)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.process.LowercaseAndAmericanizeFunction</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>1.5</lcom3>
		<loc>20</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.333333333333333</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public String apply(String input)">2</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.Env$Binder</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>2</rfc>
		<lcom>1</lcom>
		<ca>3</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>2</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract void bind(edu.stanford.nlp.ling.tokensregex.Env)">1</method>
			<method name="public abstract void init(String, java.util.Properties)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.tsurgeon.SimpleNode</name>
		<wmc>12</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>18</rfc>
		<lcom>50</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>12</npm>
		<lcom3>0.8181818181818182</lcom3>
		<loc>141</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.35</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.416666666666666</amc>
		<cc>
			<method name="public void dump(String prefix)">4</method>
			<method name="public edu.stanford.nlp.trees.tregex.tsurgeon.Node jjtGetChild(int i)">1</method>
			<method name="public int jjtGetNumChildren()">2</method>
			<method name="public String toString(String prefix)">1</method>
			<method name="public edu.stanford.nlp.trees.tregex.tsurgeon.Node jjtGetParent()">1</method>
			<method name="public void jjtSetParent(edu.stanford.nlp.trees.tregex.tsurgeon.Node n)">1</method>
			<method name="public String toString()">1</method>
			<method name="public void jjtClose()">1</method>
			<method name="public void jjtOpen()">1</method>
			<method name="public void jjtAddChild(edu.stanford.nlp.trees.tregex.tsurgeon.Node n, int i)">3</method>
			<method name="public void _init_(edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonParser p, int i)">0</method>
			<method name="public void _init_(int i)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Iterables$2$1</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>13</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>4</npm>
		<lcom3>0.25</lcom3>
		<loc>86</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.4</amc>
		<cc>
			<method name="public boolean hasNext()">1</method>
			<method name="public void remove()">1</method>
			<method name="void _init_(edu.stanford.nlp.util.Iterables$2)">0</method>
			<method name="public Object next()">2</method>
			<method name="public void prepare()">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.regexp.NumberSequenceClassifier</name>
		<wmc>29</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>18</cbo>
		<rfc>85</rfc>
		<lcom>344</lcom>
		<ca>6</ca>
		<ce>12</ce>
		<npm>14</npm>
		<lcom3>0.9125</lcom3>
		<loc>1982</loc>
		<dam>0.55</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.15306122448979592</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>66.65517241379311</amc>
		<cc>
			<method name="private java.util.List runSUTime(edu.stanford.nlp.util.CoreMap sentence, edu.stanford.nlp.util.CoreMap document)">2</method>
			<method name="private void ordinalRecognizer(java.util.List tokenSequence)">3</method>
			<method name="private static edu.stanford.nlp.util.CoreMap buildSentenceFromTokens(java.util.List tokens)">1</method>
			<method name="private int changeLeftToRight(java.util.List tokens, int start, String oldTag, String posTag, String newTag)">6</method>
			<method name="static void _clinit_()">0</method>
			<method name="private static boolean leftScanFindsWeightWord(java.util.List pl, int i)">4</method>
			<method name="private static String buildText(java.util.List tokens, Class textAnnotation)">6</method>
			<method name="private java.util.List classifyWithSUTime(java.util.List tokenSequence, edu.stanford.nlp.util.CoreMap document, edu.stanford.nlp.util.CoreMap sentence)">15</method>
			<method name="private static boolean rightScanFindsMoneyWord(java.util.List pl, int i)">7</method>
			<method name="public static edu.stanford.nlp.util.CoreMap alignSentence(edu.stanford.nlp.util.CoreMap sentence)">2</method>
			<method name="public void loadClassifier(java.io.ObjectInputStream in, java.util.Properties props)">1</method>
			<method name="public void _init_(boolean useSUTime)">0</method>
			<method name="private int changeRightToLeft(java.util.List tokens, int start, String oldTag, String posTag, String newTag)">6</method>
			<method name="private void moneyAndPercentRecognizer(java.util.List tokenSequence)">19</method>
			<method name="private static edu.stanford.nlp.util.CoreMap buildSentenceFromTokens(java.util.List tokens, Integer characterOffsetStart, Integer characterOffsetEnd)">6</method>
			<method name="public java.util.List classifyWithGlobalInformation(java.util.List tokens, edu.stanford.nlp.util.CoreMap document, edu.stanford.nlp.util.CoreMap sentence)">2</method>
			<method name="private java.util.List classifyOld(java.util.List document)">80</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(java.util.Properties props, boolean useSUTime, java.util.Properties sutimeProps)">0</method>
			<method name="public void printProbsDocument(java.util.List document)">1</method>
			<method name="public static void transferAnnotations(edu.stanford.nlp.ling.CoreLabel src, edu.stanford.nlp.ling.CoreLabel dst)">4</method>
			<method name="public static java.util.List copyTokens(java.util.List srcTokens, edu.stanford.nlp.util.CoreMap srcSentence)">5</method>
			<method name="public java.util.List classify(java.util.List document)">1</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="private static edu.stanford.nlp.ling.CoreLabel copyCoreLabel(edu.stanford.nlp.ling.CoreLabel src, Integer startOffset, Integer endOffset)">4</method>
			<method name="public void serializeClassifier(String serializePath)">1</method>
			<method name="private static java.util.List copyTokens(java.util.List srcList, boolean adjustCharacterOffsets, boolean forceCopy)">8</method>
			<method name="public void train(java.util.Collection docs, edu.stanford.nlp.sequences.DocumentReaderAndWriter readerAndWriter)">1</method>
			<method name="public void finalizeClassification(edu.stanford.nlp.util.CoreMap document)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.CWordBooleanExtractor</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>5</noc>
		<cbo>8</cbo>
		<rfc>7</rfc>
		<lcom>10</lcom>
		<ca>5</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>25</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.0</amc>
		<cc>
			<method name="abstract boolean extractFeature(String)">1</method>
			<method name="String extract(edu.stanford.nlp.tagger.maxent.History h, edu.stanford.nlp.tagger.maxent.PairsHolder pH)">2</method>
			<method name="void _init_()">0</method>
			<method name="public boolean isLocal()">1</method>
			<method name="public boolean isDynamic()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.ChineseTreebankParserParams$1</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>12</cbo>
		<rfc>14</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>12</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>84</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.75</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.parser.lexparser.ChineseTreebankParserParams, edu.stanford.nlp.parser.lexparser.Options x0, edu.stanford.nlp.util.Index x1, edu.stanford.nlp.util.Index x2)">0</method>
			<method name="public volatile edu.stanford.nlp.parser.lexparser.DependencyGrammar formResult()">1</method>
			<method name="public volatile Object formResult()">1</method>
			<method name="public edu.stanford.nlp.parser.lexparser.MLEDependencyGrammar formResult()">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.ScorerMUC</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>27</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>1</npm>
		<lcom3>0.3333333333333333</lcom3>
		<loc>295</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.8333333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>72.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="protected void calculateRecall(edu.stanford.nlp.dcoref.Document doc)">8</method>
			<method name="protected void calculatePrecision(edu.stanford.nlp.dcoref.Document doc)">7</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.CorefCoreAnnotations$CorefChainAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>9</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.AbstractTreebankParserParams</name>
		<wmc>42</wmc>
		<dit>1</dit>
		<noc>6</noc>
		<cbo>38</cbo>
		<rfc>82</rfc>
		<lcom>821</lcom>
		<ca>8</ca>
		<ce>32</ce>
		<npm>40</npm>
		<lcom3>0.9721254355400696</lcom3>
		<loc>429</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.1130952380952381</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>9.047619047619047</amc>
		<cc>
			<method name="public static java.util.Collection unorderedTypedDependencyObjectify(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.HeadFinder hf, edu.stanford.nlp.trees.TreeTransformer collinizer)">1</method>
			<method name="public edu.stanford.nlp.trees.TreeTransformer subcategoryStripper()">2</method>
			<method name="public edu.stanford.nlp.process.TokenizerFactory treeTokenizerFactory()">1</method>
			<method name="public abstract void display()">1</method>
			<method name="public boolean supportsBasicDependencies()">1</method>
			<method name="public void setEvalGF(boolean evalGF)">1</method>
			<method name="public abstract edu.stanford.nlp.trees.MemoryTreebank memoryTreebank()">1</method>
			<method name="public static java.util.Collection untypedDependencyObjectify(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.HeadFinder hf, edu.stanford.nlp.trees.TreeTransformer collinizer)">1</method>
			<method name="public edu.stanford.nlp.trees.MemoryTreebank testMemoryTreebank()">1</method>
			<method name="public static java.util.Collection typedDependencyObjectify(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.HeadFinder hf, edu.stanford.nlp.trees.TreeTransformer collinizer)">1</method>
			<method name="public static java.util.Collection dependencyObjectify(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.HeadFinder hf, edu.stanford.nlp.trees.TreeTransformer collinizer, edu.stanford.nlp.trees.DependencyTyper typer)">2</method>
			<method name="public java.util.List readGrammaticalStructureFromFile(String filename)">1</method>
			<method name="public void setInputEncoding(String encoding)">1</method>
			<method name="protected void _init_(edu.stanford.nlp.trees.TreebankLanguagePack tlp)">0</method>
			<method name="public abstract String[] sisterSplitters()">1</method>
			<method name="public double[] MLEDependencyGrammarSmoothingParams()">1</method>
			<method name="public abstract edu.stanford.nlp.trees.TreeTransformer collinizer()">1</method>
			<method name="public abstract edu.stanford.nlp.trees.HeadFinder headFinder()">1</method>
			<method name="public edu.stanford.nlp.trees.GrammaticalStructure getGrammaticalStructure(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.util.Filter filter, edu.stanford.nlp.trees.HeadFinder hf)">1</method>
			<method name="public edu.stanford.nlp.parser.lexparser.Lexicon lex(edu.stanford.nlp.parser.lexparser.Options op, edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex)">1</method>
			<method name="public abstract edu.stanford.nlp.trees.DiskTreebank diskTreebank()">1</method>
			<method name="public java.io.PrintWriter pw()">1</method>
			<method name="public void setOutputEncoding(String encoding)">1</method>
			<method name="public boolean isEvalGF()">1</method>
			<method name="private static void dependencyObjectifyHelper(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.Tree root, edu.stanford.nlp.trees.HeadFinder hf, java.util.Collection c, edu.stanford.nlp.trees.DependencyTyper typer)">5</method>
			<method name="public abstract edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree, edu.stanford.nlp.trees.Tree)">1</method>
			<method name="public int setOptionFlag(String[] args, int i)">1</method>
			<method name="public abstract edu.stanford.nlp.trees.TreeTransformer collinizerEvalb()">1</method>
			<method name="public String getOutputEncoding()">1</method>
			<method name="public edu.stanford.nlp.parser.lexparser.Extractor dependencyGrammarExtractor(edu.stanford.nlp.parser.lexparser.Options op, edu.stanford.nlp.util.Index wordIndex, edu.stanford.nlp.util.Index tagIndex)">1</method>
			<method name="public edu.stanford.nlp.parser.metrics.AbstractEval ppAttachmentEval()">1</method>
			<method name="public java.io.PrintWriter pw(java.io.OutputStream o)">2</method>
			<method name="public static java.util.Collection parsevalObjectify(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.TreeTransformer collinizer, boolean labelConstituents)">8</method>
			<method name="public edu.stanford.nlp.trees.TreebankLanguagePack treebankLanguagePack()">1</method>
			<method name="public String getInputEncoding()">1</method>
			<method name="public static java.util.Collection parsevalObjectify(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.TreeTransformer collinizer)">1</method>
			<method name="public abstract edu.stanford.nlp.trees.HeadFinder typedDependencyHeadFinder()">1</method>
			<method name="public edu.stanford.nlp.trees.Treebank treebank()">1</method>
			<method name="public void setEvaluateGrammaticalFunctions(boolean evalGFs)">1</method>
			<method name="public edu.stanford.nlp.ling.Label processHeadWord(edu.stanford.nlp.ling.Label headWord)">1</method>
			<method name="public static java.util.Collection unorderedUntypedDependencyObjectify(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.HeadFinder hf, edu.stanford.nlp.trees.TreeTransformer collinizer)">1</method>
			<method name="public static edu.stanford.nlp.stats.EquivalenceClasser typedDependencyClasser()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseCollinizer</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>22</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>3</npm>
		<lcom3>0.3333333333333333</lcom3>
		<loc>141</loc>
		<dam>0.75</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>33.25</amc>
		<cc>
			<method name="private edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree tree, boolean isRoot)">13</method>
			<method name="public void _init_(edu.stanford.nlp.trees.international.pennchinese.ChineseTreebankLanguagePack ctlp)">0</method>
			<method name="public void _init_(edu.stanford.nlp.trees.international.pennchinese.ChineseTreebankLanguagePack ctlp, boolean deletePunct)">0</method>
			<method name="public edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree tree)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalRelations$NominalPassiveSubjectGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.negra.NegraPennLexer</name>
		<wmc>26</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>44</rfc>
		<lcom>237</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>12</npm>
		<lcom3>0.9381818181818181</lcom3>
		<loc>815</loc>
		<dam>0.9090909090909091</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.21142857142857144</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>29.076923076923077</amc>
		<cc>
			<method name="private static int[] zzUnpackTrans()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private static char[] zzUnpackCMap(String packed)">3</method>
			<method name="public final int yystate()">1</method>
			<method name="void _init_(java.io.InputStream in)">0</method>
			<method name="private static int zzUnpackTrans(String packed, int offset, int[] result)">3</method>
			<method name="private static int zzUnpackAttribute(String packed, int offset, int[] result)">3</method>
			<method name="private static int[] zzUnpackRowMap()">1</method>
			<method name="public void yypushback(int number)">2</method>
			<method name="public static void main(String[] argv)">3</method>
			<method name="void _init_(java.io.Reader in)">0</method>
			<method name="private static int zzUnpackRowMap(String packed, int offset, int[] result)">2</method>
			<method name="public final String yytext()">1</method>
			<method name="public final void yyclose()">1</method>
			<method name="public final void yybegin(int newState)">1</method>
			<method name="public final void yyreset(java.io.Reader reader)">1</method>
			<method name="public final int yylength()">1</method>
			<method name="public final char yycharat(int pos)">1</method>
			<method name="public int getYYEOF()">1</method>
			<method name="private static int zzUnpackAction(String packed, int offset, int[] result)">3</method>
			<method name="public void pushBack(int n)">1</method>
			<method name="public int yylex()">1</method>
			<method name="private static int[] zzUnpackAttribute()">1</method>
			<method name="private static int[] zzUnpackAction()">1</method>
			<method name="private boolean zzRefill()">1</method>
			<method name="private void zzScanError(int errorCode)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.io.IOUtils$EolPreservingLineReaderIterable$1</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>18</rfc>
		<lcom>11</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>4</npm>
		<lcom3>0.2916666666666667</lcom3>
		<loc>244</loc>
		<dam>0.75</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5714285714285714</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>32.714285714285715</amc>
		<cc>
			<method name="private String getNext()">4</method>
			<method name="void _init_(edu.stanford.nlp.io.IOUtils$EolPreservingLineReaderIterable)">0</method>
			<method name="public boolean hasNext()">5</method>
			<method name="private boolean copyUntilEol()">6</method>
			<method name="public void remove()">1</method>
			<method name="public String next()">2</method>
			<method name="public volatile Object next()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.metrics.UnlabeledAttachmentEval$1</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>8</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>2</npm>
		<lcom3>0.75</lcom3>
		<loc>26</loc>
		<dam>0.5</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.0</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.parser.metrics.UnlabeledAttachmentEval)">0</method>
			<method name="public boolean accept(edu.stanford.nlp.trees.Dependency dep)">1</method>
			<method name="public volatile boolean accept(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.NodePattern</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>15</noc>
		<cbo>24</cbo>
		<rfc>6</rfc>
		<lcom>6</lcom>
		<ca>24</ca>
		<ce>1</ce>
		<npm>3</npm>
		<lcom3>1.222222222222222</lcom3>
		<loc>23</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.8333333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.0</amc>
		<cc>
			<method name="public abstract boolean match(Object)">1</method>
			<method name="public Object matchWithResult(Object node)">2</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$43</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>11</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>81</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.25</amc>
		<cc>
			<method name="public String getParamDesc()">1</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.Env env, java.util.List in)">2</method>
			<method name="public boolean checkArgs(java.util.List in)">5</method>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$44</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>18</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>125</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>30.25</amc>
		<cc>
			<method name="public String getParamDesc()">1</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.Env env, java.util.List in)">4</method>
			<method name="public boolean checkArgs(java.util.List in)">5</method>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$45</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>49</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>47.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$LinkAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.sievepasses.CorefDictionaryMatch</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>28</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>27.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$40</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>12</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>140</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>34.0</amc>
		<cc>
			<method name="public String getParamDesc()">1</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.Env env, java.util.List in)">8</method>
			<method name="public boolean checkArgs(java.util.List in)">9</method>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$41</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>13</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>137</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>33.25</amc>
		<cc>
			<method name="public String getParamDesc()">1</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.Env env, java.util.List in)">9</method>
			<method name="public boolean checkArgs(java.util.List in)">9</method>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.ValueFunctions$42</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>11</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>74</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>17.5</amc>
		<cc>
			<method name="public String getParamDesc()">1</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.ling.tokensregex.Env env, java.util.List in)">3</method>
			<method name="public boolean checkArgs(java.util.List in)">6</method>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.ExtractorDistsim$ExtractorDistsimConjunction</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>15</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>0.85</lcom3>
		<loc>90</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.36</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.0</amc>
		<cc>
			<method name="String extract(edu.stanford.nlp.tagger.maxent.History h, edu.stanford.nlp.tagger.maxent.PairsHolder pH)">4</method>
			<method name="public boolean isLocal()">1</method>
			<method name="public boolean isDynamic()">1</method>
			<method name="void _init_(String distSimPath, int left, int right)">0</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.ArabicTreebankParserParams$AddEquivalencedConjNode</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>19</rfc>
		<lcom>2</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>4</npm>
		<lcom3>0.75</lcom3>
		<loc>112</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.4</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="public void _init_(String annotationMark, String key)">0</method>
			<method name="public String toString()">1</method>
			<method name="public volatile Object apply(Object x0)">1</method>
			<method name="public String apply(edu.stanford.nlp.trees.tregex.TregexMatcher m)">4</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.types.Expressions$VarExpression</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>17</rfc>
		<lcom>1</lcom>
		<ca>2</ca>
		<ce>9</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>109</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4444444444444444</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>35.333333333333336</amc>
		<cc>
			<method name="public transient void _init_(String varname, String[] tags)">0</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Expression assign(edu.stanford.nlp.ling.tokensregex.types.Expression expr)">1</method>
			<method name="public transient edu.stanford.nlp.ling.tokensregex.types.Value evaluate(edu.stanford.nlp.ling.tokensregex.Env env, Object[] args)">10</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.CoreMapNodePattern$AbstractStringAnnotationPattern</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>2</noc>
		<cbo>4</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>2</ca>
		<ce>2</ce>
		<npm>4</npm>
		<lcom3>0.3333333333333333</lcom3>
		<loc>40</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.75</amc>
		<cc>
			<method name="public boolean normalize()">2</method>
			<method name="public void _init_()">0</method>
			<method name="public String getNormalized(String str)">3</method>
			<method name="public boolean ignoreCase()">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$DurationRange</name>
		<wmc>9</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>20</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>9</npm>
		<lcom3>0.45833333333333337</lcom3>
		<loc>201</loc>
		<dam>0.3333333333333333</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.4444444444444444</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>21.0</amc>
		<cc>
			<method name="public edu.stanford.nlp.time.SUTime$Duration divideBy(int m)">3</method>
			<method name="public org.joda.time.Period getJodaTimePeriod()">3</method>
			<method name="public boolean includeTimexAltValue()">1</method>
			<method name="public org.joda.time.Duration getJodaTimeDuration()">3</method>
			<method name="public edu.stanford.nlp.time.SUTime$Duration add(edu.stanford.nlp.time.SUTime$Duration d)">3</method>
			<method name="public void _init_(edu.stanford.nlp.time.SUTime$Duration min, edu.stanford.nlp.time.SUTime$Duration max)">0</method>
			<method name="public edu.stanford.nlp.time.SUTime$Duration multiplyBy(int m)">3</method>
			<method name="public String toFormattedString(int flags)">4</method>
			<method name="public void _init_(edu.stanford.nlp.time.SUTime$DurationRange d, edu.stanford.nlp.time.SUTime$Duration min, edu.stanford.nlp.time.SUTime$Duration max)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.tsurgeon.RelabelNode</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>42</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>3</npm>
		<lcom3>0.8392857142857143</lcom3>
		<loc>395</loc>
		<dam>0.35714285714285715</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>75.2</amc>
		<cc>
			<method name="private static String removeEscapeSlashes(String in)">5</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void _init_(edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonPattern child, String newLabel)">0</method>
			<method name="public String toString()">4</method>
			<method name="public edu.stanford.nlp.trees.Tree evaluate(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.tregex.TregexMatcher tm)">7</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.TreeCoreAnnotations$HeadTagAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.neural.rnn.RNNCoreAnnotations$Predictions</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$WordnetSynAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.OutputHandler</name>
		<wmc>13</wmc>
		<dit>0</dit>
		<noc>3</noc>
		<cbo>16</cbo>
		<rfc>68</rfc>
		<lcom>34</lcom>
		<ca>6</ca>
		<ce>10</ce>
		<npm>8</npm>
		<lcom3>0.7243589743589745</lcom3>
		<loc>1033</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.24475524475524477</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>77.46153846153847</amc>
		<cc>
			<method name="protected StringBuilder style(StringBuilder b, String line, edu.stanford.nlp.util.logging.Color color, edu.stanford.nlp.util.logging.Style style)">7</method>
			<method name="private void updateTracks(int untilDepth)">6</method>
			<method name="private void writeContent(int depth, Object content, StringBuilder b)">3</method>
			<method name="public java.util.List signalEndTrack(int newDepth, long timeOfEnd)">8</method>
			<method name="public void _init_()">0</method>
			<method name="public java.util.List signalStartTrack(edu.stanford.nlp.util.logging.Redwood$Record signal)">3</method>
			<method name="public java.util.List handle(edu.stanford.nlp.util.logging.Redwood$Record record)">35</method>
			<method name="public void styleChannel(String channel, edu.stanford.nlp.util.logging.Style style)">2</method>
			<method name="protected boolean formatChannel(StringBuilder b, String channelStr, Object channel)">10</method>
			<method name="protected boolean supportsAnsi()">1</method>
			<method name="public void colorChannel(String channel, edu.stanford.nlp.util.logging.Color color)">2</method>
			<method name="public void setColorChannels(boolean colorChannels)">2</method>
			<method name="public abstract void print(Object[], String)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.sievepasses.StrictHeadMatch2</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>16</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.sievepasses.StrictHeadMatch1</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>20</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.sievepasses.StrictHeadMatch4</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>28</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>27.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.sievepasses.StrictHeadMatch3</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>16</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.objectbank.DelimitRegExIterator</name>
		<wmc>10</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>32</rfc>
		<lcom>29</lcom>
		<ca>2</ca>
		<ce>5</ce>
		<npm>8</npm>
		<lcom3>0.48148148148148145</lcom3>
		<loc>188</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.32</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>17.5</amc>
		<cc>
			<method name="public void _init_(java.io.Reader r, String delimiter, edu.stanford.nlp.util.Function op)">0</method>
			<method name="public static void main(String[] args)">2</method>
			<method name="public static edu.stanford.nlp.objectbank.DelimitRegExIterator defaultDelimitRegExIterator(java.io.Reader in, String delimiter)">1</method>
			<method name="public boolean hasNext()">2</method>
			<method name="private void setNext()">2</method>
			<method name="public static edu.stanford.nlp.objectbank.IteratorFromReaderFactory getFactory(String delim)">1</method>
			<method name="public Object next()">2</method>
			<method name="public static edu.stanford.nlp.objectbank.IteratorFromReaderFactory getFactory(String delim, edu.stanford.nlp.util.Function op)">1</method>
			<method name="public Object peek()">1</method>
			<method name="protected Object parseString(String s)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.ArgUtils</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>17</rfc>
		<lcom>6</lcom>
		<ca>3</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>145</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>35.25</amc>
		<cc>
			<method name="public static void printArgs(String[] args, java.io.PrintStream ps)">2</method>
			<method name="private void _init_()">0</method>
			<method name="public static edu.stanford.nlp.util.Pair getTreebankDescription(String[] args, int argIndex, String flag)">5</method>
			<method name="public static int numSubArgs(String[] args, int index)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.UnnamedConcreteDependency$UnnamedConcreteDependencyFactory</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>6</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>22</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.5</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public edu.stanford.nlp.trees.Dependency newDependency(edu.stanford.nlp.ling.Label regent, edu.stanford.nlp.ling.Label dependent)">1</method>
			<method name="void _init_(edu.stanford.nlp.trees.UnnamedConcreteDependency$1 x0)">0</method>
			<method name="public edu.stanford.nlp.trees.Dependency newDependency(edu.stanford.nlp.ling.Label regent, edu.stanford.nlp.ling.Label dependent, Object name)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$ImmediatelyHeads$1</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>8</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>0</npm>
		<lcom3>0.0</lcom3>
		<loc>53</loc>
		<dam>0.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>24.0</amc>
		<cc>
			<method name="void initialize()">4</method>
			<method name="void _init_(edu.stanford.nlp.trees.tregex.Relation$ImmediatelyHeads, edu.stanford.nlp.trees.Tree, edu.stanford.nlp.trees.tregex.TregexMatcher)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.StanfordCoreNLP$15</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>44</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>10</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>492</loc>
		<dam>0.0</dam>
		<moa>5</moa>
		<mfa>0.0</mfa>
		<cam>0.5714285714285714</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>238.5</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.pipeline.StanfordCoreNLP, boolean, String, java.io.File, edu.stanford.nlp.util.MutableInteger, String, String, boolean, edu.stanford.nlp.util.MutableInteger, edu.stanford.nlp.pipeline.StanfordCoreNLP$OutputFormat, String, String, edu.stanford.nlp.util.MutableInteger)">0</method>
			<method name="public void run()">11</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.StanfordCoreNLP$14</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>10</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>1.0</lcom3>
		<loc>35</loc>
		<dam>0.5</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.25</amc>
		<cc>
			<method name="public String signature()">1</method>
			<method name="public edu.stanford.nlp.pipeline.Annotator create()">1</method>
			<method name="public volatile Object create()">1</method>
			<method name="void _init_(java.util.Properties x0, java.util.Properties)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.StanfordCoreNLP$16</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>28</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>26.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonParserConstants</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>142</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>116.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.RedwoodConfiguration$Handlers</name>
		<wmc>14</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>22</cbo>
		<rfc>32</rfc>
		<lcom>91</lcom>
		<ca>1</ca>
		<ce>21</ce>
		<npm>13</npm>
		<lcom3>1.0</lcom3>
		<loc>196</loc>
		<dam>0.0</dam>
		<moa>11</moa>
		<mfa>0.0</mfa>
		<cam>0.1623931623931624</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.214285714285714</amc>
		<cc>
			<method name="public static transient edu.stanford.nlp.util.logging.RedwoodConfiguration$Thunk branch(edu.stanford.nlp.util.logging.RedwoodConfiguration$Thunk[] destinations)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public static edu.stanford.nlp.util.logging.RedwoodConfiguration$Thunk chain(edu.stanford.nlp.util.logging.LogRecordHandler handler1, edu.stanford.nlp.util.logging.RedwoodConfiguration$Thunk destination)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static edu.stanford.nlp.util.logging.RedwoodConfiguration$Thunk file(java.io.File path)">1</method>
			<method name="public static edu.stanford.nlp.util.logging.LogRecordHandler reroute(Object src, Object dst)">1</method>
			<method name="public static transient edu.stanford.nlp.util.logging.LogRecordHandler hideChannels(Object[] channelsToHide)">1</method>
			<method name="public static edu.stanford.nlp.util.logging.RedwoodConfiguration$Thunk file(String path)">1</method>
			<method name="public static edu.stanford.nlp.util.logging.RedwoodConfiguration$Thunk chain(edu.stanford.nlp.util.logging.LogRecordHandler handler1, edu.stanford.nlp.util.logging.LogRecordHandler handler2, edu.stanford.nlp.util.logging.LogRecordHandler handler3, edu.stanford.nlp.util.logging.LogRecordHandler handler4, edu.stanford.nlp.util.logging.LogRecordHandler handler5, edu.stanford.nlp.util.logging.RedwoodConfiguration$Thunk destination)">1</method>
			<method name="public static transient edu.stanford.nlp.util.logging.LogRecordHandler showOnlyChannels(Object[] channelsToShow)">1</method>
			<method name="public static edu.stanford.nlp.util.logging.RedwoodConfiguration$Thunk chain(edu.stanford.nlp.util.logging.LogRecordHandler handler1, edu.stanford.nlp.util.logging.LogRecordHandler handler2, edu.stanford.nlp.util.logging.LogRecordHandler handler3, edu.stanford.nlp.util.logging.LogRecordHandler handler4, edu.stanford.nlp.util.logging.RedwoodConfiguration$Thunk destination)">1</method>
			<method name="public static edu.stanford.nlp.util.logging.RedwoodConfiguration$Thunk chain(edu.stanford.nlp.util.logging.LogRecordHandler[] handlers, edu.stanford.nlp.util.logging.RedwoodConfiguration$Thunk destination)">1</method>
			<method name="public static edu.stanford.nlp.util.logging.RedwoodConfiguration$Thunk chain(edu.stanford.nlp.util.logging.LogRecordHandler handler1, edu.stanford.nlp.util.logging.LogRecordHandler handler2, edu.stanford.nlp.util.logging.LogRecordHandler handler3, edu.stanford.nlp.util.logging.RedwoodConfiguration$Thunk destination)">1</method>
			<method name="public static edu.stanford.nlp.util.logging.RedwoodConfiguration$Thunk chain(edu.stanford.nlp.util.logging.LogRecordHandler handler1, edu.stanford.nlp.util.logging.LogRecordHandler handler2, edu.stanford.nlp.util.logging.RedwoodConfiguration$Thunk destination)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$LeftTermAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.ExactGrammarCompactor</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>16</cbo>
		<rfc>18</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>15</ce>
		<npm>1</npm>
		<lcom3>0.1428571428571428</lcom3>
		<loc>114</loc>
		<dam>0.14285714285714285</dam>
		<moa>6</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>52.5</amc>
		<cc>
			<method name="protected edu.stanford.nlp.fsm.TransducerGraph doCompaction(edu.stanford.nlp.fsm.TransducerGraph graph, java.util.List l1, java.util.List l3)">3</method>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.Options op, boolean saveGraphs, boolean verbose)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.HTKLatticeReader</name>
		<wmc>23</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>74</rfc>
		<lcom>53</lcom>
		<ca>2</ca>
		<ce>6</ce>
		<npm>9</npm>
		<lcom3>0.7007575757575758</lcom3>
		<loc>1686</loc>
		<dam>0.5833333333333334</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.1956521739130435</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>71.78260869565217</amc>
		<cc>
			<method name="public void _init_(String filename, boolean mergeType)">0</method>
			<method name="public int getNumStates()">1</method>
			<method name="public void _init_(String filename)">0</method>
			<method name="private int mergeDuplicates()">6</method>
			<method name="private void buildWordsEndAt()">3</method>
			<method name="public void printWords()">2</method>
			<method name="private void changeEndTimes(java.util.List words, int newEndTime)">6</method>
			<method name="private void removeSilence()">5</method>
			<method name="private double getProb(edu.stanford.nlp.parser.lexparser.HTKLatticeReader$LatticeWord lw)">1</method>
			<method name="private void buildWordsAtTime()">3</method>
			<method name="private void buildWordsStartAt()">3</method>
			<method name="public java.util.List getLatticeWords()">1</method>
			<method name="private void removeEmptyNodes()">6</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="public java.util.List getWordsOverSpan(int a, int b)">2</method>
			<method name="private void removeRedundency()">7</method>
			<method name="private void buildWordTimeArrays()">1</method>
			<method name="private void mergeSimultaneousNodes()">7</method>
			<method name="private void changeStartTimes(java.util.List words, int newStartTime)">6</method>
			<method name="public void _init_(String filename, boolean mergeType, boolean debug, boolean prettyPrint)">0</method>
			<method name="private boolean removeRedundentPair(edu.stanford.nlp.parser.lexparser.HTKLatticeReader$LatticeWord w1, edu.stanford.nlp.parser.lexparser.HTKLatticeReader$LatticeWord w2)">11</method>
			<method name="public void processLattice()">2</method>
			<method name="private void readInput(java.io.BufferedReader in)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$ProtoAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.Annotation</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>63</cbo>
		<rfc>24</rfc>
		<lcom>15</lcom>
		<ca>60</ca>
		<ce>3</ce>
		<npm>6</npm>
		<lcom3>1.2</lcom3>
		<loc>103</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.375</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.0</amc>
		<cc>
			<method name="public void _init_(java.util.List sentences)">0</method>
			<method name="public edu.stanford.nlp.pipeline.Annotation copy()">1</method>
			<method name="public void _init_(String text)">0</method>
			<method name="public void _init_()">0</method>
			<method name="public String toString()">1</method>
			<method name="public void _init_(edu.stanford.nlp.pipeline.Annotation map)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.TokensRegexNERAnnotator</name>
		<wmc>15</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>30</cbo>
		<rfc>115</rfc>
		<lcom>83</lcom>
		<ca>1</ca>
		<ce>29</ce>
		<npm>7</npm>
		<lcom3>0.8296703296703296</lcom3>
		<loc>1382</loc>
		<dam>0.7692307692307693</dam>
		<moa>5</moa>
		<mfa>0.0</mfa>
		<cam>0.2087912087912088</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>90.26666666666667</amc>
		<cc>
			<method name="private edu.stanford.nlp.ling.tokensregex.MultiPatternMatcher createPatternMatcher(java.util.Map patternToEntry)">11</method>
			<method name="private void annotateMatched(java.util.List tokens)">4</method>
			<method name="private boolean checkOrigNerTags(edu.stanford.nlp.pipeline.TokensRegexNERAnnotator$Entry entry, java.util.List tokens, int start, int end)">19</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void _init_(String mapping, boolean ignoreCase, String validPosRegex)">0</method>
			<method name="public java.util.Set requires()">1</method>
			<method name="public java.util.Set requirementsSatisfied()">1</method>
			<method name="private static transient java.util.List readEntries(String annotatorName, java.util.Set noDefaultOverwriteLabels, boolean ignoreCase, boolean verbose, String[] mappings)">3</method>
			<method name="public void _init_(String name, java.util.Properties properties)">0</method>
			<method name="public void _init_(String mapping, boolean ignoreCase)">0</method>
			<method name="public void annotate(edu.stanford.nlp.pipeline.Annotation annotation)">5</method>
			<method name="private static java.util.List readEntries(String annotatorName, java.util.List entries, edu.stanford.nlp.ling.tokensregex.matcher.TrieMap seenRegexes, String mappingFilename, java.io.BufferedReader mapping, java.util.Set noDefaultOverwriteLabels, boolean ignoreCase, boolean verbose)">1</method>
			<method name="private static java.util.Properties getProperties(String name, String mapping, boolean ignoreCase, String validPosRegex)">4</method>
			<method name="public void _init_(String mapping)">0</method>
			<method name="private boolean checkPosTags(java.util.List tokens, int start, int end)">7</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.CoNLL2011DocumentReader$NamedEntityAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.process.PTBTokenizer$PTBTokenizerFactory</name>
		<wmc>12</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>21</rfc>
		<lcom>46</lcom>
		<ca>5</ca>
		<ce>7</ce>
		<npm>9</npm>
		<lcom3>0.13636363636363635</lcom3>
		<loc>153</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.3333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.583333333333334</amc>
		<cc>
			<method name="public void setOptions(String options)">1</method>
			<method name="public edu.stanford.nlp.process.Tokenizer getTokenizer(java.io.Reader r)">1</method>
			<method name="void _init_(edu.stanford.nlp.process.LexedTokenFactory x0, String x1, edu.stanford.nlp.process.PTBTokenizer$1 x2)">0</method>
			<method name="public static edu.stanford.nlp.process.PTBTokenizer$PTBTokenizerFactory newPTBTokenizerFactory(boolean tokenizeNLs, boolean invertible)">1</method>
			<method name="public static edu.stanford.nlp.process.TokenizerFactory newTokenizerFactory()">1</method>
			<method name="private void _init_(boolean tokenizeNLs, boolean invertible, boolean suppressEscaping, edu.stanford.nlp.process.LexedTokenFactory factory)">0</method>
			<method name="public java.util.Iterator getIterator(java.io.Reader r)">1</method>
			<method name="private void _init_(edu.stanford.nlp.process.LexedTokenFactory tokenFactory, String options)">0</method>
			<method name="public static edu.stanford.nlp.process.PTBTokenizer$PTBTokenizerFactory newPTBTokenizerFactory(edu.stanford.nlp.process.LexedTokenFactory tokenFactory, String options)">1</method>
			<method name="public static edu.stanford.nlp.process.PTBTokenizer$PTBTokenizerFactory newCoreLabelTokenizerFactory(String options)">1</method>
			<method name="public static edu.stanford.nlp.process.PTBTokenizer$PTBTokenizerFactory newWordTokenizerFactory(String options)">1</method>
			<method name="public edu.stanford.nlp.process.Tokenizer getTokenizer(java.io.Reader r, String extraOptions)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$INAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.ArrayCoreMap</name>
		<wmc>25</wmc>
		<dit>1</dit>
		<noc>3</noc>
		<cbo>19</cbo>
		<rfc>77</rfc>
		<lcom>0</lcom>
		<ca>11</ca>
		<ce>11</ce>
		<npm>20</npm>
		<lcom3>0.6979166666666666</lcom3>
		<loc>1099</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.16287878787878787</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>42.64</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="public void _init_(int capacity)">0</method>
			<method name="private void writeObject(java.io.ObjectOutputStream out)">1</method>
			<method name="public transient String toShorterString(String[] what)">7</method>
			<method name="public transient String toShortString(char separator, String[] what)">8</method>
			<method name="public transient String toShortString(String[] what)">1</method>
			<method name="public void prettyLog(edu.stanford.nlp.util.logging.Redwood$RedwoodChannels channels, String description)">3</method>
			<method name="public int size()">1</method>
			<method name="public boolean has(Class key)">3</method>
			<method name="public Object get(Class key)">3</method>
			<method name="public void setCapacity(int newSize)">2</method>
			<method name="public void compact()">2</method>
			<method name="public boolean equals(Object obj)">10</method>
			<method name="public String toString()">5</method>
			<method name="public void _init_(edu.stanford.nlp.util.CoreMap other)">0</method>
			<method name="public Object remove(Class key)">4</method>
			<method name="static int access$000(edu.stanford.nlp.util.ArrayCoreMap x0)">1</method>
			<method name="public java.util.Set keySet()">1</method>
			<method name="public void _init_()">0</method>
			<method name="public boolean containsKey(Class key)">3</method>
			<method name="static Class[] access$100(edu.stanford.nlp.util.ArrayCoreMap x0)">1</method>
			<method name="public Object set(Class key, Object value)">5</method>
			<method name="private boolean equals(edu.stanford.nlp.util.ArrayCoreMap other)">17</method>
			<method name="public int hashCode()">9</method>
			<method name="public void _init_(edu.stanford.nlp.util.ArrayCoreMap other)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.TrueCaseAnnotator</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>60</rfc>
		<lcom>24</lcom>
		<ca>1</ca>
		<ce>9</ce>
		<npm>7</npm>
		<lcom3>0.7857142857142857</lcom3>
		<loc>350</loc>
		<dam>0.75</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.325</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>42.25</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public void annotate(edu.stanford.nlp.pipeline.Annotation annotation)">3</method>
			<method name="public java.util.Set requires()">1</method>
			<method name="private void setTrueCaseText(edu.stanford.nlp.ling.CoreLabel l)">6</method>
			<method name="public void _init_(boolean verbose)">0</method>
			<method name="public static java.util.Map loadMixedCaseMap(String mapFile)">3</method>
			<method name="public java.util.Set requirementsSatisfied()">1</method>
			<method name="public void _init_(String modelLoc, String classBias, String mixedCaseFileName, boolean verbose)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.Rules</name>
		<wmc>41</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>22</cbo>
		<rfc>128</rfc>
		<lcom>810</lcom>
		<ca>3</ca>
		<ce>20</ce>
		<npm>39</npm>
		<lcom3>0.9708333333333334</lcom3>
		<loc>3095</loc>
		<dam>0.6666666666666666</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.16458333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>74.34146341463415</amc>
		<cc>
			<method name="public static boolean entityIsRoleAppositive(edu.stanford.nlp.dcoref.CorefCluster mentionCluster, edu.stanford.nlp.dcoref.CorefCluster potentialAntecedent, edu.stanford.nlp.dcoref.Mention m1, edu.stanford.nlp.dcoref.Mention m2, edu.stanford.nlp.dcoref.Dictionaries dict)">4</method>
			<method name="public static boolean entityTokenDistance(edu.stanford.nlp.dcoref.Mention m1, edu.stanford.nlp.dcoref.Mention m2)">3</method>
			<method name="public static boolean isAcronym(java.util.List first, java.util.List second)">25</method>
			<method name="public static boolean entityRelaxedHeadsAgreeBetweenMentions(edu.stanford.nlp.dcoref.CorefCluster mentionCluster, edu.stanford.nlp.dcoref.CorefCluster potentialAntecedent, edu.stanford.nlp.dcoref.Mention m, edu.stanford.nlp.dcoref.Mention ant)">4</method>
			<method name="public static boolean entityIsApposition(edu.stanford.nlp.dcoref.CorefCluster mentionCluster, edu.stanford.nlp.dcoref.CorefCluster potentialAntecedent, edu.stanford.nlp.dcoref.Mention m1, edu.stanford.nlp.dcoref.Mention m2)">7</method>
			<method name="public static boolean antecedentMatchesMentionSpeakerAnnotation(edu.stanford.nlp.dcoref.Mention mention, edu.stanford.nlp.dcoref.Mention ant)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static boolean entityIsAcronym(edu.stanford.nlp.dcoref.Document document, edu.stanford.nlp.dcoref.CorefCluster mentionCluster, edu.stanford.nlp.dcoref.CorefCluster potentialAntecedent)">4</method>
			<method name="public static boolean entityIWithinI(edu.stanford.nlp.dcoref.Mention m1, edu.stanford.nlp.dcoref.Mention m2, edu.stanford.nlp.dcoref.Dictionaries dict)">9</method>
			<method name="public static boolean entityHaveIncompatibleModifier(edu.stanford.nlp.dcoref.Mention m, edu.stanford.nlp.dcoref.Mention ant)">13</method>
			<method name="public static boolean entitySubjectObject(edu.stanford.nlp.dcoref.Mention m1, edu.stanford.nlp.dcoref.Mention m2)">13</method>
			<method name="public static boolean entityHaveIncompatibleModifier(edu.stanford.nlp.dcoref.CorefCluster mentionCluster, edu.stanford.nlp.dcoref.CorefCluster potentialAntecedent)">2</method>
			<method name="public static boolean entityIWithinI(edu.stanford.nlp.dcoref.CorefCluster mentionCluster, edu.stanford.nlp.dcoref.CorefCluster potentialAntecedent, edu.stanford.nlp.dcoref.Dictionaries dict)">2</method>
			<method name="public static boolean entityIsRelativePronoun(edu.stanford.nlp.dcoref.Mention m1, edu.stanford.nlp.dcoref.Mention m2)">3</method>
			<method name="public static boolean entityAttributesAgree(edu.stanford.nlp.dcoref.CorefCluster mentionCluster, edu.stanford.nlp.dcoref.CorefCluster potentialAntecedent)">1</method>
			<method name="public static boolean entitySameProperHeadLastWord(edu.stanford.nlp.dcoref.CorefCluster mentionCluster, edu.stanford.nlp.dcoref.CorefCluster potentialAntecedent, edu.stanford.nlp.dcoref.Mention mention, edu.stanford.nlp.dcoref.Mention ant)">2</method>
			<method name="public static boolean entityWordsIncluded(edu.stanford.nlp.dcoref.CorefCluster mentionCluster, edu.stanford.nlp.dcoref.CorefCluster potentialAntecedent, edu.stanford.nlp.dcoref.Mention mention, edu.stanford.nlp.dcoref.Mention ant)">2</method>
			<method name="public static boolean entitySameProperHeadLastWord(edu.stanford.nlp.dcoref.Mention m, edu.stanford.nlp.dcoref.Mention a)">12</method>
			<method name="public static boolean entitySameSpeaker(edu.stanford.nlp.dcoref.Document document, edu.stanford.nlp.dcoref.Mention m, edu.stanford.nlp.dcoref.Mention ant)">7</method>
			<method name="public static boolean entityAttributesAgree(edu.stanford.nlp.dcoref.CorefCluster mentionCluster, edu.stanford.nlp.dcoref.CorefCluster potentialAntecedent, boolean ignoreGender)">28</method>
			<method name="public static boolean entityNumberInLaterMention(edu.stanford.nlp.dcoref.Mention mention, edu.stanford.nlp.dcoref.Mention ant)">4</method>
			<method name="public void _init_()">0</method>
			<method name="public static boolean entityClusterAllCorefDictionary(edu.stanford.nlp.dcoref.CorefCluster menCluster, edu.stanford.nlp.dcoref.CorefCluster antCluster, edu.stanford.nlp.dcoref.Dictionaries dict, int dictColumn, int freq)">6</method>
			<method name="public static boolean mentionMatchesSpeaker(edu.stanford.nlp.dcoref.Mention mention, edu.stanford.nlp.dcoref.SpeakerInfo speakerInfo, boolean strictMatch)">9</method>
			<method name="public static boolean entityPersonDisagree(edu.stanford.nlp.dcoref.Document document, edu.stanford.nlp.dcoref.Mention m, edu.stanford.nlp.dcoref.Mention ant, edu.stanford.nlp.dcoref.Dictionaries dict)">34</method>
			<method name="public static boolean entityBothHaveProper(edu.stanford.nlp.dcoref.CorefCluster mentionCluster, edu.stanford.nlp.dcoref.CorefCluster potentialAntecedent)">5</method>
			<method name="public static boolean entityHaveExtraProperNoun(edu.stanford.nlp.dcoref.Mention m, edu.stanford.nlp.dcoref.Mention a, java.util.Set exceptWords)">7</method>
			<method name="public static boolean entityHaveDifferentLocation(edu.stanford.nlp.dcoref.Mention m, edu.stanford.nlp.dcoref.Mention a, edu.stanford.nlp.dcoref.Dictionaries dict)">15</method>
			<method name="private static boolean isContextOverlapping(edu.stanford.nlp.dcoref.Mention m1, edu.stanford.nlp.dcoref.Mention m2)">1</method>
			<method name="public static boolean entityPersonDisagree(edu.stanford.nlp.dcoref.Document document, edu.stanford.nlp.dcoref.CorefCluster mentionCluster, edu.stanford.nlp.dcoref.CorefCluster potentialAntecedent, edu.stanford.nlp.dcoref.Dictionaries dict)">3</method>
			<method name="public static boolean entityIsPredicateNominatives(edu.stanford.nlp.dcoref.CorefCluster mentionCluster, edu.stanford.nlp.dcoref.CorefCluster potentialAntecedent, edu.stanford.nlp.dcoref.Mention m1, edu.stanford.nlp.dcoref.Mention m2)">8</method>
			<method name="public static boolean entityExactStringMatch(edu.stanford.nlp.dcoref.CorefCluster mentionCluster, edu.stanford.nlp.dcoref.CorefCluster potentialAntecedent, edu.stanford.nlp.dcoref.Dictionaries dict, java.util.Set roleSet)">9</method>
			<method name="public static boolean entityHeadsAgree(edu.stanford.nlp.dcoref.CorefCluster mentionCluster, edu.stanford.nlp.dcoref.CorefCluster potentialAntecedent, edu.stanford.nlp.dcoref.Mention m, edu.stanford.nlp.dcoref.Mention ant, edu.stanford.nlp.dcoref.Dictionaries dict)">6</method>
			<method name="public static boolean entityAlias(edu.stanford.nlp.dcoref.CorefCluster mentionCluster, edu.stanford.nlp.dcoref.CorefCluster potentialAntecedent, edu.stanford.nlp.dcoref.Semantics semantics, edu.stanford.nlp.dcoref.Dictionaries dict)">1</method>
			<method name="public static boolean sentenceContextIncompatible(edu.stanford.nlp.dcoref.Mention men, edu.stanford.nlp.dcoref.Mention ant, edu.stanford.nlp.dcoref.Dictionaries dict)">14</method>
			<method name="public static boolean antecedentMatchesMentionSpeakerAnnotation(edu.stanford.nlp.dcoref.Mention mention, edu.stanford.nlp.dcoref.Mention ant, edu.stanford.nlp.dcoref.Document document)">8</method>
			<method name="public static boolean antecedentIsMentionSpeaker(edu.stanford.nlp.dcoref.Document document, edu.stanford.nlp.dcoref.Mention mention, edu.stanford.nlp.dcoref.Mention ant, edu.stanford.nlp.dcoref.Dictionaries dict)">3</method>
			<method name="public static boolean contextIncompatible(edu.stanford.nlp.dcoref.Mention men, edu.stanford.nlp.dcoref.Mention ant, edu.stanford.nlp.dcoref.Dictionaries dict)">11</method>
			<method name="public static boolean entityCorefDictionary(edu.stanford.nlp.dcoref.Mention men, edu.stanford.nlp.dcoref.Mention ant, edu.stanford.nlp.dcoref.Dictionaries dict, int dictVersion, int freq)">9</method>
			<method name="public static int getSpeakerClusterId(edu.stanford.nlp.dcoref.Document document, String speakerString)">6</method>
			<method name="public static boolean entityRelaxedExactStringMatch(edu.stanford.nlp.dcoref.CorefCluster mentionCluster, edu.stanford.nlp.dcoref.CorefCluster potentialAntecedent, edu.stanford.nlp.dcoref.Mention mention, edu.stanford.nlp.dcoref.Mention ant, edu.stanford.nlp.dcoref.Dictionaries dict, java.util.Set roleSet)">13</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.CoreMapNodePattern$NumericAnnotationPattern</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>14</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>5</npm>
		<lcom3>0.0</lcom3>
		<loc>76</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.3333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.8</amc>
		<cc>
			<method name="public boolean match(Number number)">2</method>
			<method name="public boolean match(String str)">2</method>
			<method name="public void _init_(double value, edu.stanford.nlp.ling.tokensregex.CoreMapNodePattern$NumericAnnotationPattern$CmpType cmpType)">0</method>
			<method name="public boolean match(Object node)">3</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.ExtractorFrames$ExtractorContinuousTagConjunction</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>8</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>63</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>30.0</amc>
		<cc>
			<method name="String extract(edu.stanford.nlp.tagger.maxent.History h, edu.stanford.nlp.tagger.maxent.PairsHolder pH)">5</method>
			<method name="public void _init_(int maxPosition)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.io.BZip2PipedOutputStream</name>
		<wmc>5</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>31</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>5</npm>
		<lcom3>0.5</lcom3>
		<loc>132</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.625</mfa>
		<cam>0.45</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>24.4</amc>
		<cc>
			<method name="public void write(int b)">1</method>
			<method name="public void flush()">1</method>
			<method name="public void _init_(String filename)">0</method>
			<method name="public void close()">1</method>
			<method name="public void _init_(String filename, java.io.OutputStream err)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunction</name>
		<wmc>48</wmc>
		<dit>0</dit>
		<noc>2</noc>
		<cbo>20</cbo>
		<rfc>108</rfc>
		<lcom>894</lcom>
		<ca>8</ca>
		<ce>13</ce>
		<npm>28</npm>
		<lcom3>0.8965721040189124</lcom3>
		<loc>2496</loc>
		<dam>0.7222222222222222</dam>
		<moa>4</moa>
		<mfa>0.0</mfa>
		<cam>0.15130023640661938</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>50.25</amc>
		<cc>
			<method name="public double valueAt(double[] x, double xScale, int[] batch)">3</method>
			<method name="public void to2D(double[] weights1D, double wScale, double[][] newWeights)">2</method>
			<method name="public double valueForADoc(int docIndex)">1</method>
			<method name="protected double regularGradientAndValue()">2</method>
			<method name="public static void clear2D(double[][] arr2D)">3</method>
			<method name="static void _clinit_()">0</method>
			<method name="protected edu.stanford.nlp.util.Pair getCondProbs(edu.stanford.nlp.ie.crf.CRFCliqueTree cTree, int[][][] docData)">11</method>
			<method name="public void to2D(double[] weights1D, double[][] newWeights)">1</method>
			<method name="public static double[][] to2D(double[] weights, java.util.List labelIndices, int[] map)">2</method>
			<method name="protected double multiThreadGradient(java.util.List docIDs, boolean calculateEmpirical)">11</method>
			<method name="public static void to1D(double[][] weights, double[] newWeights)">2</method>
			<method name="public double[] to1D(double[][] weights)">1</method>
			<method name="protected static void combine2DArr(double[][] combineInto, java.util.Map toBeCombined)">2</method>
			<method name="protected void empiricalCounts(double[][] eHat)">2</method>
			<method name="protected static void combine2DArr(double[][] combineInto, java.util.Map toBeCombined, double scale)">2</method>
			<method name="public static void to2D(double[] weights, java.util.List labelIndices, int[] map, double[][] newWeights)">2</method>
			<method name="public static int getPriorType(String priorTypeStr)">13</method>
			<method name="public int domainDimension()">1</method>
			<method name="public void calculate(double[] x)">6</method>
			<method name="public void calculateStochastic(double[] x, double[] v, int[] batch)">6</method>
			<method name="public void calculateStochasticGradient(double[] x, int[] batch)">5</method>
			<method name="public double[][] to2D(double[] weights)">1</method>
			<method name="public double[][] to2D(double[] weights1D, double wScale)">2</method>
			<method name="protected double expectedCountsAndValueForADoc(double[][] E, int docIndex)">1</method>
			<method name="public static double[] to1D(double[][] weights, int domainDimension)">2</method>
			<method name="public void setFeatureGrouping(int[][] fg)">1</method>
			<method name="public double[] initial(java.util.Random randGen)">2</method>
			<method name="public int[][] getWeightIndices()">4</method>
			<method name="protected double expectedAndEmpiricalCountsAndValueForADoc(double[][] E, double[][] Ehat, int docIndex)">1</method>
			<method name="public double calculateStochasticUpdate(double[] x, double xScale, int[] batch, double gScale)">5</method>
			<method name="protected static void combine2DArr(double[][] combineInto, double[][] toBeCombined, double scale)">3</method>
			<method name="protected double expectedCountsAndValueForADoc(double[][] E, int docIndex, boolean doExpectedCountCalc, boolean doValueCalc)">4</method>
			<method name="void _init_(int[][][][] data, int[][] labels, int window, edu.stanford.nlp.util.Index classIndex, java.util.List labelIndices, int[] map, String priorType, String backgroundSymbol, double sigma, double[][][][] featureVal, int multiThreadGrad, boolean calcEmpirical)">0</method>
			<method name="protected void applyPrior(double[] x, double batchScale)">7</method>
			<method name="public edu.stanford.nlp.ie.crf.CliquePotentialFunction getCliquePotentialFunction(double[] x)">1</method>
			<method name="public int[][] getLabels()">1</method>
			<method name="protected static void combine2DArr(double[][] combineInto, double[][] toBeCombined)">3</method>
			<method name="protected double expectedCountsForADoc(double[][] E, int docIndex)">1</method>
			<method name="protected void documentExpectedCounts(double[][] E, int[][][] docData, double[][][] featureVal3DArr, edu.stanford.nlp.ie.crf.CRFCliqueTree cliqueTree)">7</method>
			<method name="private double documentLogProbability(int[][][] docData, int docIndex, edu.stanford.nlp.ie.crf.CRFCliqueTree cliqueTree)">5</method>
			<method name="public double[] initial(boolean useRandomSeed)">2</method>
			<method name="public void setWeights(double[][] weights)">1</method>
			<method name="protected void empiricalCountsForADoc(double[][] eHat, int docIndex)">8</method>
			<method name="public int[][] getFeatureGrouping()">2</method>
			<method name="void _init_(int[][][][] data, int[][] labels, int window, edu.stanford.nlp.util.Index classIndex, java.util.List labelIndices, int[] map, String priorType, String backgroundSymbol, double sigma, double[][][][] featureVal, int multiThreadGrad)">0</method>
			<method name="public double[] initial()">1</method>
			<method name="public int dataDimension()">1</method>
			<method name="protected double[][] empty2D()">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.NodePattern$NegateNodePattern</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>9</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>29</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.333333333333334</amc>
		<cc>
			<method name="public boolean match(Object node)">2</method>
			<method name="public String toString()">1</method>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.NodePattern p)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalRelations$VerbModifierGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.ExtractorFrames$ExtractorWordLowerCase</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>16</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.5</amc>
		<cc>
			<method name="String extract(edu.stanford.nlp.tagger.maxent.History h, edu.stanford.nlp.tagger.maxent.PairsHolder pH)">1</method>
			<method name="public void _init_(int position)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$15</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>42</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>40.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>16</cbo>
		<rfc>25</rfc>
		<lcom>8</lcom>
		<ca>8</ca>
		<ce>8</ce>
		<npm>5</npm>
		<lcom3>1.0277777777777777</lcom3>
		<loc>219</loc>
		<dam>0.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.36666666666666664</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>39.2</amc>
		<cc>
			<method name="public void update(edu.stanford.nlp.ling.tokensregex.Env env, java.util.Map attributes)">14</method>
			<method name="public boolean accept(edu.stanford.nlp.ling.tokensregex.MatchedExpression obj)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public boolean extract(Object in, java.util.List out)">1</method>
			<method name="public volatile boolean accept(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$14</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>11</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.0</amc>
		<cc>
			<method name="public edu.stanford.nlp.time.SUTime$Duration getDuration()">1</method>
			<method name="void _init_(edu.stanford.nlp.time.SUTime$Time x0, edu.stanford.nlp.time.SUTime$Duration x1, edu.stanford.nlp.time.SUTime$Range x2)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.wordseg.ChineseDictionary</name>
		<wmc>11</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>48</rfc>
		<lcom>41</lcom>
		<ca>2</ca>
		<ce>4</ce>
		<npm>7</npm>
		<lcom3>0.72</lcom3>
		<loc>483</loc>
		<dam>0.6</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4727272727272727</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>42.45454545454545</amc>
		<cc>
			<method name="public void _init_(String[] dicts, edu.stanford.nlp.process.ChineseDocumentToSentenceProcessor cdtos)">0</method>
			<method name="public static void main(String[] args)">3</method>
			<method name="public void _init_(String[] dicts)">0</method>
			<method name="private void serializeDictionary(String serializePath)">1</method>
			<method name="public boolean contains(String word)">2</method>
			<method name="private static java.util.Set[] loadDictionary(String serializePath)">2</method>
			<method name="public void _init_(String serDicts, edu.stanford.nlp.process.ChineseDocumentToSentenceProcessor cdtos, boolean expandMidDot)">0</method>
			<method name="private void addDict(String dict, boolean expandMidDot)">5</method>
			<method name="private void addOneDict(String item)">5</method>
			<method name="public void _init_(String dict)">0</method>
			<method name="public void _init_(String[] dicts, edu.stanford.nlp.process.ChineseDocumentToSentenceProcessor cdtos, boolean expandMidDot)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$1</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>37</cbo>
		<rfc>5</rfc>
		<lcom>3</lcom>
		<ca>35</ca>
		<ce>4</ce>
		<npm>0</npm>
		<lcom3>1.5</lcom3>
		<loc>22</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">1</method>
			<method name="boolean satisfies(edu.stanford.nlp.trees.Tree t1, edu.stanford.nlp.trees.Tree t2, edu.stanford.nlp.trees.Tree root, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">2</method>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$TemporalOp$10</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>12</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>70</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>34.0</amc>
		<cc>
			<method name="void _init_(String, int)">0</method>
			<method name="public edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal arg1, edu.stanford.nlp.time.SUTime$Temporal arg2, int flags)">9</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$WordSenseAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$2</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>0</npm>
		<lcom3>1.5</lcom3>
		<loc>20</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.333333333333333</amc>
		<cc>
			<method name="java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">1</method>
			<method name="boolean satisfies(edu.stanford.nlp.trees.Tree t1, edu.stanford.nlp.trees.Tree t2, edu.stanford.nlp.trees.Tree root, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">2</method>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$5</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>7</rfc>
		<lcom>3</lcom>
		<ca>2</ca>
		<ce>5</ce>
		<npm>0</npm>
		<lcom3>1.5</lcom3>
		<loc>23</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.333333333333333</amc>
		<cc>
			<method name="java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">1</method>
			<method name="boolean satisfies(edu.stanford.nlp.trees.Tree t1, edu.stanford.nlp.trees.Tree t2, edu.stanford.nlp.trees.Tree root, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">1</method>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$TemporalOp$14</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>13</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>106</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4583333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>25.5</amc>
		<cc>
			<method name="public transient edu.stanford.nlp.time.SUTime$Temporal apply(Object[] args)">8</method>
			<method name="public edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Duration d, int scale)">3</method>
			<method name="void _init_(String, int)">0</method>
			<method name="public edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$PeriodicTemporalSet d, int scale)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParserConstants</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>235</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>216.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.Redwood$RecordHandlerTree$1</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>13</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>4</npm>
		<lcom3>0.33333333333333337</lcom3>
		<loc>150</loc>
		<dam>0.8333333333333334</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.6</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>27.8</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.util.logging.Redwood$RecordHandlerTree)">0</method>
			<method name="public boolean hasNext()">7</method>
			<method name="public void remove()">6</method>
			<method name="public edu.stanford.nlp.util.logging.LogRecordHandler next()">2</method>
			<method name="public volatile Object next()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$6</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>2</ca>
		<ce>5</ce>
		<npm>0</npm>
		<lcom3>1.5</lcom3>
		<loc>37</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.0</amc>
		<cc>
			<method name="java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">1</method>
			<method name="boolean satisfies(edu.stanford.nlp.trees.Tree t1, edu.stanford.nlp.trees.Tree t2, edu.stanford.nlp.trees.Tree root, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">3</method>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$TemporalOp$13</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>11</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>58</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>28.0</amc>
		<cc>
			<method name="void _init_(String, int)">0</method>
			<method name="public edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal arg1, edu.stanford.nlp.time.SUTime$Temporal arg2, int flags)">7</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime</name>
		<wmc>8</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>52</cbo>
		<rfc>67</rfc>
		<lcom>26</lcom>
		<ca>23</ca>
		<ce>41</ce>
		<npm>6</npm>
		<lcom3>1.0136054421768708</lcom3>
		<loc>1408</loc>
		<dam>0.0873015873015873</dam>
		<moa>84</moa>
		<mfa>0.0</mfa>
		<cam>0.34285714285714286</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>159.25</amc>
		<cc>
			<method name="public static edu.stanford.nlp.time.SUTime$Temporal createTemporal(edu.stanford.nlp.time.SUTime$StandardTemporalType timeType, edu.stanford.nlp.time.SUTime$Temporal temporal)">1</method>
			<method name="private void _init_()">0</method>
			<method name="public static edu.stanford.nlp.time.SUTime$Time parseDateTime(String dateStr)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static edu.stanford.nlp.time.SUTime$Temporal createTemporal(edu.stanford.nlp.time.SUTime$StandardTemporalType timeType, String label, String mod, edu.stanford.nlp.time.SUTime$Temporal temporal)">1</method>
			<method name="public static edu.stanford.nlp.time.SUTime$Time parseDateTime(String dateStr, boolean allowPartial)">26</method>
			<method name="public static final edu.stanford.nlp.time.SUTime$Time getCurrentTime()">1</method>
			<method name="public static edu.stanford.nlp.time.SUTime$Temporal createTemporal(edu.stanford.nlp.time.SUTime$StandardTemporalType timeType, String label, edu.stanford.nlp.time.SUTime$Temporal temporal)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$3</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>0</npm>
		<lcom3>1.5</lcom3>
		<loc>15</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.6666666666666665</amc>
		<cc>
			<method name="java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">1</method>
			<method name="boolean satisfies(edu.stanford.nlp.trees.Tree t1, edu.stanford.nlp.trees.Tree t2, edu.stanford.nlp.trees.Tree root, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">1</method>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$TemporalOp$12</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>11</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>58</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>28.0</amc>
		<cc>
			<method name="void _init_(String, int)">0</method>
			<method name="public edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal arg1, edu.stanford.nlp.time.SUTime$Temporal arg2, int flags)">7</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceRelationMention</name>
		<wmc>13</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>35</rfc>
		<lcom>58</lcom>
		<ca>5</ca>
		<ce>7</ce>
		<npm>13</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>278</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.24175824175824176</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>20.153846153846153</amc>
		<cc>
			<method name="public void setParent(edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceRelation e)">1</method>
			<method name="public edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceRelationMentionArgument[] getArgs()">1</method>
			<method name="public String toXml(int offset)">3</method>
			<method name="public void _init_(String id, edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceCharSeq extent, String lc)">0</method>
			<method name="public String getLexicalCondition()">1</method>
			<method name="public edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEntityMention getArg(int which)">1</method>
			<method name="public edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceRelation getParent()">1</method>
			<method name="public void setArg(int which, edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEntityMention em, String role)">1</method>
			<method name="public edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEntityMention getLastArg()">2</method>
			<method name="public edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceEntityMention getFirstArg()">2</method>
			<method name="public int getMaxTokenEnd()">1</method>
			<method name="public int getMinTokenStart()">1</method>
			<method name="public int getSentence(edu.stanford.nlp.ie.machinereading.domains.ace.reader.AceDocument doc)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.tsurgeon.TsurgeonParseException</name>
		<wmc>1</wmc>
		<dit>4</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>1.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.0</amc>
		<cc>
			<method name="public void _init_(String message, Throwable cause)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$4</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>2</ca>
		<ce>5</ce>
		<npm>0</npm>
		<lcom3>1.5</lcom3>
		<loc>26</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.333333333333333</amc>
		<cc>
			<method name="java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">1</method>
			<method name="boolean satisfies(edu.stanford.nlp.trees.Tree t1, edu.stanford.nlp.trees.Tree t2, edu.stanford.nlp.trees.Tree root, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">3</method>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$TemporalOp$11</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>12</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>70</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>34.0</amc>
		<cc>
			<method name="void _init_(String, int)">0</method>
			<method name="public edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal arg1, edu.stanford.nlp.time.SUTime$Temporal arg2, int flags)">9</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$9</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>7</rfc>
		<lcom>3</lcom>
		<ca>2</ca>
		<ce>6</ce>
		<npm>0</npm>
		<lcom3>1.5</lcom3>
		<loc>27</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.666666666666667</amc>
		<cc>
			<method name="java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">1</method>
			<method name="boolean satisfies(edu.stanford.nlp.trees.Tree t1, edu.stanford.nlp.trees.Tree t2, edu.stanford.nlp.trees.Tree root, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">2</method>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$TemporalOp$18</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>12</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>7</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>60</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>29.0</amc>
		<cc>
			<method name="void _init_(String, int)">0</method>
			<method name="public edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal arg1, edu.stanford.nlp.time.SUTime$Temporal arg2, int flags)">6</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.TreeNormalizer</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>3</noc>
		<cbo>38</cbo>
		<rfc>5</rfc>
		<lcom>6</lcom>
		<ca>36</ca>
		<ce>2</ce>
		<npm>4</npm>
		<lcom3>1.3333333333333333</lcom3>
		<loc>14</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.25</amc>
		<cc>
			<method name="public edu.stanford.nlp.trees.Tree normalizeWholeTree(edu.stanford.nlp.trees.Tree tree, edu.stanford.nlp.trees.TreeFactory tf)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public String normalizeNonterminal(String category)">1</method>
			<method name="public String normalizeTerminal(String leaf)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$TemporalOp$17</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>10</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>50</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.666666666666666</amc>
		<cc>
			<method name="public transient edu.stanford.nlp.time.SUTime$Temporal apply(Object[] args)">4</method>
			<method name="void _init_(String, int)">0</method>
			<method name="public edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Temporal t, String modifier)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$7</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>7</rfc>
		<lcom>3</lcom>
		<ca>2</ca>
		<ce>5</ce>
		<npm>0</npm>
		<lcom3>1.5</lcom3>
		<loc>23</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.333333333333333</amc>
		<cc>
			<method name="java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">1</method>
			<method name="boolean satisfies(edu.stanford.nlp.trees.Tree t1, edu.stanford.nlp.trees.Tree t2, edu.stanford.nlp.trees.Tree root, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">1</method>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$TemporalOp$16</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>13</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>95</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>30.666666666666668</amc>
		<cc>
			<method name="public transient edu.stanford.nlp.time.SUTime$Temporal apply(Object[] args)">8</method>
			<method name="void _init_(String, int)">0</method>
			<method name="public edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$TimeUnit tu, int n)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Filters$RandomFilter</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>4</npm>
		<lcom3>0.0</lcom3>
		<loc>40</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.5</amc>
		<cc>
			<method name="public void _init_(double fraction, java.util.Random random)">0</method>
			<method name="public void _init_(double fraction)">0</method>
			<method name="public void _init_()">0</method>
			<method name="public boolean accept(Object o)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Relation$8</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>7</rfc>
		<lcom>3</lcom>
		<ca>2</ca>
		<ce>6</ce>
		<npm>0</npm>
		<lcom3>1.5</lcom3>
		<loc>27</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.666666666666667</amc>
		<cc>
			<method name="java.util.Iterator searchNodeIterator(edu.stanford.nlp.trees.Tree t, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">1</method>
			<method name="boolean satisfies(edu.stanford.nlp.trees.Tree t1, edu.stanford.nlp.trees.Tree t2, edu.stanford.nlp.trees.Tree root, edu.stanford.nlp.trees.tregex.TregexMatcher matcher)">2</method>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$TemporalOp$15</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>13</rfc>
		<lcom>6</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>106</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4583333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>25.5</amc>
		<cc>
			<method name="public transient edu.stanford.nlp.time.SUTime$Temporal apply(Object[] args)">8</method>
			<method name="public edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$Duration d, int scale)">3</method>
			<method name="void _init_(String, int)">0</method>
			<method name="public edu.stanford.nlp.time.SUTime$Temporal apply(edu.stanford.nlp.time.SUTime$PeriodicTemporalSet d, int scale)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.structure.EventMention</name>
		<wmc>19</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>63</rfc>
		<lcom>91</lcom>
		<ca>3</ca>
		<ce>6</ce>
		<npm>18</npm>
		<lcom3>0.8</lcom3>
		<loc>701</loc>
		<dam>0.8</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.22839506172839505</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>35.63157894736842</amc>
		<cc>
			<method name="public void setModification(String eventModification)">1</method>
			<method name="public boolean equals(Object o)">13</method>
			<method name="public void setArgs(java.util.List args)">2</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void addArgs(java.util.List args, java.util.List argNames, boolean discardSameArgDifferentName)">5</method>
			<method name="public void addParent(edu.stanford.nlp.ie.machinereading.structure.EventMention p)">1</method>
			<method name="public void removeFromParents()">2</method>
			<method name="public java.util.Set getParents()">1</method>
			<method name="public boolean contains(edu.stanford.nlp.ie.machinereading.structure.EventMention e)">3</method>
			<method name="public void _init_(String objectId, edu.stanford.nlp.util.CoreMap sentence, edu.stanford.nlp.ie.machinereading.structure.Span span, String type, String subtype, edu.stanford.nlp.ie.machinereading.structure.ExtractionObject anchor, java.util.List args, java.util.List argNames)">0</method>
			<method name="public void removeParent(edu.stanford.nlp.ie.machinereading.structure.ExtractionObject p)">1</method>
			<method name="public edu.stanford.nlp.ie.machinereading.structure.ExtractionObject getAnchor()">1</method>
			<method name="public edu.stanford.nlp.ie.machinereading.structure.ExtractionObject getSingleParent(edu.stanford.nlp.util.CoreMap sentence)">8</method>
			<method name="public int hashCode()">3</method>
			<method name="public void resetArguments()">1</method>
			<method name="public String getModification()">1</method>
			<method name="public String toString()">4</method>
			<method name="public void mergeEvent(edu.stanford.nlp.ie.machinereading.structure.EventMention e, boolean discardSameArgDifferentName)">6</method>
			<method name="public void addArg(edu.stanford.nlp.ie.machinereading.structure.ExtractionObject a, String an, boolean discardSameArgDifferentName)">6</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.UnaryGrammar</name>
		<wmc>30</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>20</cbo>
		<rfc>68</rfc>
		<lcom>263</lcom>
		<ca>17</ca>
		<ce>3</ce>
		<npm>24</npm>
		<lcom3>0.7711598746081505</lcom3>
		<loc>752</loc>
		<dam>1.0</dam>
		<moa>4</moa>
		<mfa>0.0</mfa>
		<cam>0.2315270935960591</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>23.7</amc>
		<cc>
			<method name="public java.util.Iterator closedRuleIterator()">1</method>
			<method name="public java.util.Iterator ruleIteratorByChild(int state)">2</method>
			<method name="public java.util.List[] rulesWithParent()">1</method>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="public java.util.Iterator closedRuleIteratorByChild(int state)">2</method>
			<method name="public java.util.List rulesByParent(int state)">2</method>
			<method name="public void writeData(java.io.Writer w)">2</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void _init_(edu.stanford.nlp.util.Index stateIndex)">0</method>
			<method name="public final void purgeRules()">3</method>
			<method name="public void writeAllData(java.io.Writer w)">7</method>
			<method name="void makeCRArrays()">2</method>
			<method name="private void readObject(java.io.ObjectInputStream stream)">1</method>
			<method name="public String toString()">1</method>
			<method name="public int numRules()">1</method>
			<method name="public java.util.Iterator ruleIterator()">1</method>
			<method name="public int numClosedRules()">1</method>
			<method name="public edu.stanford.nlp.parser.lexparser.UnaryRule[] closedRulesByParent(int state)">2</method>
			<method name="public java.util.Iterator closedRuleIteratorByParent(int state)">2</method>
			<method name="private void init()">2</method>
			<method name="private void closeRulesUnderMax(edu.stanford.nlp.parser.lexparser.UnaryRule ur)">3</method>
			<method name="public java.util.List rulesByChild(int state)">2</method>
			<method name="private boolean relaxRule(edu.stanford.nlp.parser.lexparser.UnaryRule ur)">3</method>
			<method name="public final void addRule(edu.stanford.nlp.parser.lexparser.UnaryRule ur)">1</method>
			<method name="public java.util.List rules()">1</method>
			<method name="public edu.stanford.nlp.parser.lexparser.UnaryRule getRule(edu.stanford.nlp.parser.lexparser.UnaryRule ur)">1</method>
			<method name="public java.util.Iterator ruleIteratorByParent(int state)">2</method>
			<method name="public double scoreRule(edu.stanford.nlp.parser.lexparser.UnaryRule ur)">2</method>
			<method name="public void readData(java.io.BufferedReader in)">1</method>
			<method name="public edu.stanford.nlp.parser.lexparser.UnaryRule[] closedRulesByChild(int state)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.process.PTBEscapingProcessor</name>
		<wmc>11</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>46</rfc>
		<lcom>29</lcom>
		<ca>1</ca>
		<ce>9</ce>
		<npm>8</npm>
		<lcom3>0.5714285714285714</lcom3>
		<loc>542</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2222222222222222</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>47.63636363636363</amc>
		<cc>
			<method name="public static void main(String[] args)">3</method>
			<method name="private static java.util.List fixQuotes(java.util.List input)">8</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="private boolean maybeAppendOneMore(int pos, String s, StringBuilder buff)">5</method>
			<method name="public static String unprocess(String s)">2</method>
			<method name="public String escapeString(String s)">11</method>
			<method name="public java.util.List apply(java.util.List hasWordsList)">1</method>
			<method name="public volatile Object apply(Object x0)">1</method>
			<method name="public java.util.List process(java.util.List input)">3</method>
			<method name="public void _init_(char[] escapeChars, String[] replaceEscapes, char[] substChars, String[] replaceSubsts, boolean fixQuotes)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.AbstractTreebankLanguagePack$BasicCategoryStringFunction</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>0.75</lcom3>
		<loc>21</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.333333333333333</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.trees.TreebankLanguagePack tlp)">0</method>
			<method name="public String apply(String in)">1</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.LengthTreeFilter</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>6</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>0.75</lcom3>
		<loc>26</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.0</amc>
		<cc>
			<method name="public void _init_(int length)">0</method>
			<method name="public volatile boolean accept(Object x0)">1</method>
			<method name="public boolean accept(edu.stanford.nlp.trees.Tree tree)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.sequences.ExactBestSequenceFinder</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>19</rfc>
		<lcom>6</lcom>
		<ca>3</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>1.3333333333333333</lcom3>
		<loc>575</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>142.5</amc>
		<cc>
			<method name="private static edu.stanford.nlp.util.Pair bestSequence(edu.stanford.nlp.sequences.SequenceModel ts, double[][] linearConstraints)">26</method>
			<method name="public int[] bestSequence(edu.stanford.nlp.sequences.SequenceModel ts)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public static edu.stanford.nlp.util.Pair bestSequenceWithLinearConstraints(edu.stanford.nlp.sequences.SequenceModel ts, double[][] linearConstraints)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.Macros</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>30</rfc>
		<lcom>15</lcom>
		<ca>3</ca>
		<ce>3</ce>
		<npm>5</npm>
		<lcom3>2.0</lcom3>
		<loc>153</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>24.5</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public static java.util.List readMacros(String filename)">1</method>
			<method name="public static java.util.List readMacros(String filename, String encoding)">1</method>
			<method name="public static void addAllMacros(edu.stanford.nlp.trees.tregex.TregexPatternCompiler compiler, String filename, String encoding)">4</method>
			<method name="public static java.util.List readMacros(java.io.BufferedReader bin)">5</method>
			<method name="public static void addAllMacros(edu.stanford.nlp.trees.tregex.TregexPatternCompiler compiler, java.io.BufferedReader br)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.sentiment.SentimentTraining</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>48</rfc>
		<lcom>13</lcom>
		<ca>0</ca>
		<ce>8</ce>
		<npm>5</npm>
		<lcom3>0.6</lcom3>
		<loc>701</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.3333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>115.5</amc>
		<cc>
			<method name="public static void train(edu.stanford.nlp.sentiment.SentimentModel model, String modelPath, java.util.List trainingTrees, java.util.List devTrees)">18</method>
			<method name="public static void main(String[] args)">14</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static void executeOneTrainingBatch(edu.stanford.nlp.sentiment.SentimentModel model, java.util.List trainingBatch, double[] sumGradSquare)">2</method>
			<method name="public static boolean runGradientCheck(edu.stanford.nlp.sentiment.SentimentModel model, java.util.List trees)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$DomainAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalRelations$ComplementGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalRelations$PrepositionalObjectGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$HeightAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalRelations$AdjectivalModifierGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.LabeledScoredConstituent$LabeledScoredConstituentLabelFactory</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>9</rfc>
		<lcom>15</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>4</npm>
		<lcom3>2.0</lcom3>
		<loc>39</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.5</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.trees.LabeledScoredConstituent$1 x0)">0</method>
			<method name="public edu.stanford.nlp.ling.Label newLabel(String labelStr, int options)">1</method>
			<method name="private void _init_()">0</method>
			<method name="public edu.stanford.nlp.ling.Label newLabel(String labelStr)">1</method>
			<method name="public edu.stanford.nlp.ling.Label newLabel(edu.stanford.nlp.ling.Label oldLabel)">1</method>
			<method name="public edu.stanford.nlp.ling.Label newLabelFromString(String labelStr)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.TokensRegexNERAnnotator$Entry</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>11</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.16666666666666674</lcom3>
		<loc>64</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>28.0</amc>
		<cc>
			<method name="public String toString()">2</method>
			<method name="public void _init_(String tokensRegex, String[] regex, String type, java.util.Set overwritableTypes, double priority, int annotateGroup)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.FilteringTreebank</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>15</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>5</ce>
		<npm>5</npm>
		<lcom3>0.5</lcom3>
		<loc>64</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.3333333333333333</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.2</amc>
		<cc>
			<method name="public void clear()">1</method>
			<method name="public void loadPath(java.io.File path, java.io.FileFilter filt)">1</method>
			<method name="public java.util.Iterator iterator()">1</method>
			<method name="public void _init_(edu.stanford.nlp.trees.Treebank treebank, edu.stanford.nlp.util.Filter filter)">0</method>
			<method name="public void apply(edu.stanford.nlp.trees.TreeVisitor tv)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalRelations$VerbCompoundGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$SectionEndAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.negra.NegraPennTokenizer</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>8</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>33</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.5</amc>
		<cc>
			<method name="public void _init_(java.io.Reader r)">0</method>
			<method name="public static void main(String[] args)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalRelations$NounCompoundModifierGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$BagOfWordsAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>9</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.concurrent.MulticoreWrapper</name>
		<wmc>9</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>19</cbo>
		<rfc>61</rfc>
		<lcom>0</lcom>
		<ca>15</ca>
		<ce>4</ce>
		<npm>8</npm>
		<lcom3>0.5</lcom3>
		<loc>424</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2962962962962963</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>44.888888888888886</amc>
		<cc>
			<method name="public Object poll()">2</method>
			<method name="public synchronized void put(Object item)">1</method>
			<method name="public boolean peek()">4</method>
			<method name="public void join()">3</method>
			<method name="private void blockingGetResult()">4</method>
			<method name="public void _init_(int numThreads, edu.stanford.nlp.util.concurrent.ThreadsafeProcessor processor, boolean orderResults)">0</method>
			<method name="public void _init_(int nThreads, edu.stanford.nlp.util.concurrent.ThreadsafeProcessor processor)">0</method>
			<method name="public String toString()">1</method>
			<method name="public void setMaxBlockTime(long t)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.StanfordCoreNLP$12</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>13</rfc>
		<lcom>2</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>0.7999999999999999</lcom3>
		<loc>85</loc>
		<dam>0.6</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.0</amc>
		<cc>
			<method name="public String signature()">2</method>
			<method name="public edu.stanford.nlp.pipeline.Annotator create()">1</method>
			<method name="void _init_(java.util.Properties x0, String, String)">0</method>
			<method name="public volatile Object create()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.StanfordCoreNLP$13</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>9</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>1.3333333333333333</lcom3>
		<loc>37</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.0</amc>
		<cc>
			<method name="void _init_(java.util.Properties x0)">0</method>
			<method name="public String signature()">1</method>
			<method name="public edu.stanford.nlp.pipeline.Annotator create()">1</method>
			<method name="public volatile Object create()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.StanfordCoreNLP$10</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>15</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>1.3333333333333333</lcom3>
		<loc>152</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>36.75</amc>
		<cc>
			<method name="void _init_(java.util.Properties x0)">0</method>
			<method name="public String signature()">3</method>
			<method name="public edu.stanford.nlp.pipeline.Annotator create()">6</method>
			<method name="public volatile Object create()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.parser.TokenSequenceParser$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.StanfordCoreNLP$11</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>6</rfc>
		<lcom>4</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>1.3333333333333333</lcom3>
		<loc>22</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.25</amc>
		<cc>
			<method name="void _init_(java.util.Properties x0)">0</method>
			<method name="public String signature()">1</method>
			<method name="public edu.stanford.nlp.pipeline.Annotator create()">1</method>
			<method name="public volatile Object create()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Iterables$14$1$1$1</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>10</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>3</npm>
		<lcom3>0.3333333333333333</lcom3>
		<loc>99</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>23.25</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.util.Iterables$14$1$1)">0</method>
			<method name="public boolean hasNext()">7</method>
			<method name="public void remove()">1</method>
			<method name="public Object next()">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalRelations$BaGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.WordNetConnection</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract boolean wordNetContains(String)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.arabic.ATBTreeUtils</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>27</rfc>
		<lcom>15</lcom>
		<ca>2</ca>
		<ce>8</ce>
		<npm>5</npm>
		<lcom3>0.9761904761904763</lcom3>
		<loc>138</loc>
		<dam>0.42857142857142855</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.26666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>17.714285714285715</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public static String taggedStringFromTree(edu.stanford.nlp.trees.Tree t, boolean removeEscaping, String separator)">3</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="public static String unEscape(String s)">2</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static String escape(String s)">2</method>
			<method name="public static String flattenTree(edu.stanford.nlp.trees.Tree t)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>10</noc>
		<cbo>21</cbo>
		<rfc>8</rfc>
		<lcom>21</lcom>
		<ca>19</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>14</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.42857142857142855</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>1.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="protected abstract edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr copy()">1</method>
			<method name="protected abstract edu.stanford.nlp.ling.tokensregex.SequencePattern$Frag build()">1</method>
			<method name="protected Object value()">1</method>
			<method name="protected edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr optimize()">1</method>
			<method name="protected abstract int assignGroupIds(int)">1</method>
			<method name="protected abstract void updateBindings(edu.stanford.nlp.ling.tokensregex.SequencePattern$VarGroupBindings)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.MultiCoreMapNodePattern$StringSequenceAnnotationPattern</name>
		<wmc>6</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>26</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>5</npm>
		<lcom3>0.1</lcom3>
		<loc>159</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.42857142857142855</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>25.166666666666668</amc>
		<cc>
			<method name="public void _init_(Class textKey, java.util.Map targets, boolean ignoreCase)">0</method>
			<method name="public void _init_(Class textKey, java.util.Set targets, boolean ignoreCase)">0</method>
			<method name="public void _init_(Class textKey, java.util.Set targets)">0</method>
			<method name="public String toString()">1</method>
			<method name="protected java.util.Collection match(java.util.List nodes, int start)">2</method>
			<method name="public void _init_(Class textKey, java.util.Map targets)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.AbstractTreebankParserParams$1</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>10</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>70</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>22.333333333333332</amc>
		<cc>
			<method name="void _init_()">0</method>
			<method name="public volatile Object equivalenceClass(Object x0)">1</method>
			<method name="public String equivalenceClass(java.util.List s)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.Dictionaries$Gender</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>6</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.9333333333333332</lcom3>
		<loc>67</loc>
		<dam>0.2</dam>
		<moa>5</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>14.5</amc>
		<cc>
			<method name="public static edu.stanford.nlp.dcoref.Dictionaries$Gender valueOf(String name)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static edu.stanford.nlp.dcoref.Dictionaries$Gender[] values()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.ViterbiParser</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract edu.stanford.nlp.trees.Tree getBestParse()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$HaveAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequenceMatchAction$SeriesAction</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>9</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>0.0</lcom3>
		<loc>38</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4666666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.333333333333334</amc>
		<cc>
			<method name="public void _init_(java.util.List actions)">0</method>
			<method name="public transient edu.stanford.nlp.ling.tokensregex.SequenceMatchResult apply(edu.stanford.nlp.ling.tokensregex.SequenceMatchResult seqMatchResult, int[] groups)">2</method>
			<method name="public transient void _init_(edu.stanford.nlp.ling.tokensregex.SequenceMatchAction[] actions)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.AnnotationPipeline$2$1$1</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>14</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>68</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>32.0</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.pipeline.AnnotationPipeline$2$1, edu.stanford.nlp.pipeline.Annotation)">0</method>
			<method name="public void run()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.process.Americanize</name>
		<wmc>9</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>41</rfc>
		<lcom>24</lcom>
		<ca>4</ca>
		<ce>4</ce>
		<npm>8</npm>
		<lcom3>0.734375</lcom3>
		<loc>1731</loc>
		<dam>0.9375</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.21428571428571427</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>189.55555555555554</amc>
		<cc>
			<method name="public static void main(String[] args)">1</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public edu.stanford.nlp.ling.HasWord apply(edu.stanford.nlp.ling.HasWord w)">2</method>
			<method name="public void _init_(int flags)">0</method>
			<method name="public String toString()">1</method>
			<method name="public static String americanize(String str)">1</method>
			<method name="public volatile Object apply(Object x0)">1</method>
			<method name="public static String americanize(String str, boolean capitalizeTimex)">11</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.MatchedExpression$SingleAnnotationExtractor</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>15</cbo>
		<rfc>21</rfc>
		<lcom>17</lcom>
		<ca>11</ca>
		<ce>5</ce>
		<npm>6</npm>
		<lcom3>0.9090909090909092</lcom3>
		<loc>249</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.38095238095238093</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>33.0</amc>
		<cc>
			<method name="public void annotate(edu.stanford.nlp.ling.tokensregex.MatchedExpression matchedExpression)">8</method>
			<method name="public void annotate(edu.stanford.nlp.ling.tokensregex.MatchedExpression matchedExpression, java.util.List nested)">2</method>
			<method name="public void _init_()">0</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.MatchedExpression createMatchedExpression(edu.stanford.nlp.util.Interval charOffsets, edu.stanford.nlp.util.Interval tokenOffsets)">1</method>
			<method name="private void setAnnotations(edu.stanford.nlp.util.CoreMap cm, java.util.List annotationKeys, Object obj)">7</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.types.Value apply(edu.stanford.nlp.util.CoreMap in)">1</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructureFactory</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>8</rfc>
		<lcom>8</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>5</npm>
		<lcom3>0.0</lcom3>
		<loc>60</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>10.6</amc>
		<cc>
			<method name="public edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructure newGrammaticalStructure(edu.stanford.nlp.trees.Tree t)">4</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(edu.stanford.nlp.util.Filter puncFilter, edu.stanford.nlp.trees.HeadFinder hf)">0</method>
			<method name="public void _init_(edu.stanford.nlp.util.Filter puncFilter)">0</method>
			<method name="public volatile edu.stanford.nlp.trees.GrammaticalStructure newGrammaticalStructure(edu.stanford.nlp.trees.Tree x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.WhitespaceTokenizerAnnotator</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>9</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>2</npm>
		<lcom3>1.0</lcom3>
		<loc>42</loc>
		<dam>0.5</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.0</amc>
		<cc>
			<method name="public edu.stanford.nlp.process.Tokenizer getTokenizer(java.io.Reader r)">1</method>
			<method name="public void _init_(java.util.Properties props)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalRelations$CopulaGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalRelations$ClausalSubjectGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$SentenceIDAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.dvparser.DVParser</name>
		<wmc>18</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>33</cbo>
		<rfc>125</rfc>
		<lcom>51</lcom>
		<ca>2</ca>
		<ce>33</ce>
		<npm>14</npm>
		<lcom3>0.7983193277310924</lcom3>
		<loc>2148</loc>
		<dam>0.42857142857142855</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.15294117647058825</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>117.94444444444444</amc>
		<cc>
			<method name="public void saveModel(String filename)">1</method>
			<method name="public boolean runGradientCheck(java.util.List sentences, java.util.IdentityHashMap compressedParses)">1</method>
			<method name="public edu.stanford.nlp.parser.lexparser.Options getOp()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.LexicalizedParser parser)">0</method>
			<method name="edu.stanford.nlp.parser.dvparser.DVModel getDVModel()">1</method>
			<method name="java.util.IdentityHashMap getTopParses(java.util.List trees, edu.stanford.nlp.trees.TreeTransformer transformer)">1</method>
			<method name="public static void help()">1</method>
			<method name="public static java.util.List getTopParsesForOneTree(edu.stanford.nlp.parser.lexparser.LexicalizedParser parser, int dvKBest, edu.stanford.nlp.trees.Tree tree, edu.stanford.nlp.trees.TreeTransformer transformer)">5</method>
			<method name="public void _init_(edu.stanford.nlp.parser.dvparser.DVModel model, edu.stanford.nlp.parser.lexparser.LexicalizedParser parser)">0</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="public void train(java.util.List sentences, java.util.IdentityHashMap compressedParses, edu.stanford.nlp.trees.Treebank testTreebank, String modelPath, String resultsRecordPath)">1</method>
			<method name="public void executeOneTrainingBatch(java.util.List trainingBatch, java.util.IdentityHashMap compressedParses, double[] sumGradSquare)">5</method>
			<method name="public static edu.stanford.nlp.trees.TreeTransformer buildTrainTransformer(edu.stanford.nlp.parser.lexparser.Options op)">1</method>
			<method name="public edu.stanford.nlp.parser.lexparser.LexicalizedParser attachModelToLexicalizedParser()">1</method>
			<method name="public static edu.stanford.nlp.parser.dvparser.DVParser loadModel(String filename, String[] args)">1</method>
			<method name="static java.util.IdentityHashMap getTopParses(edu.stanford.nlp.parser.lexparser.LexicalizedParser parser, edu.stanford.nlp.parser.lexparser.Options op, java.util.Collection trees, edu.stanford.nlp.trees.TreeTransformer transformer, boolean outputUpdates)">3</method>
			<method name="public static edu.stanford.nlp.parser.dvparser.DVModel getModelFromLexicalizedParser(edu.stanford.nlp.parser.lexparser.LexicalizedParser parser)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.HasInterval$1</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>8</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>49</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>15.333333333333334</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="void _init_()">0</method>
			<method name="public int compare(edu.stanford.nlp.util.HasInterval e1, edu.stanford.nlp.util.HasInterval e2)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.WordLemmaTagFactory</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>16</rfc>
		<lcom>13</lcom>
		<ca>1</ca>
		<ce>5</ce>
		<npm>6</npm>
		<lcom3>1.0</lcom3>
		<loc>117</loc>
		<dam>0.3333333333333333</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>18.0</amc>
		<cc>
			<method name="public edu.stanford.nlp.ling.Label newLabel(String labelStr, int options)">3</method>
			<method name="public edu.stanford.nlp.ling.Label newLabel(String labelStr)">1</method>
			<method name="public edu.stanford.nlp.ling.Label newLabel(edu.stanford.nlp.ling.Label oldLabel)">1</method>
			<method name="public edu.stanford.nlp.ling.Label newLabelFromString(String labelStr)">3</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(char divider)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.HasInterval$3</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>8</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>37</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.333333333333334</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="void _init_()">0</method>
			<method name="public int compare(edu.stanford.nlp.util.HasInterval e1, edu.stanford.nlp.util.HasInterval e2)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.HasInterval$2</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>19</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.333333333333333</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="void _init_()">0</method>
			<method name="public int compare(edu.stanford.nlp.util.HasInterval e1, edu.stanford.nlp.util.HasInterval e2)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.HasInterval$4</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>8</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>37</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>11.333333333333334</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="void _init_()">0</method>
			<method name="public int compare(edu.stanford.nlp.util.HasInterval e1, edu.stanford.nlp.util.HasInterval e2)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.Document$DocType</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>3</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.888888888888889</lcom3>
		<loc>45</loc>
		<dam>0.3333333333333333</dam>
		<moa>3</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>9.5</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static edu.stanford.nlp.dcoref.Document$DocType valueOf(String name)">1</method>
			<method name="public static edu.stanford.nlp.dcoref.Document$DocType[] values()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.objectbank.ObjectBank$PathToFileFunction</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>5</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>16</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.333333333333333</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public java.io.File apply(String str)">1</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.ParserAnnotator$ParserAnnotatorProcessor</name>
		<wmc>5</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>7</rfc>
		<lcom>8</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>0.25</lcom3>
		<loc>29</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.6</amc>
		<cc>
			<method name="public edu.stanford.nlp.util.CoreMap process(edu.stanford.nlp.util.CoreMap sentence)">1</method>
			<method name="public edu.stanford.nlp.util.concurrent.ThreadsafeProcessor newInstance()">1</method>
			<method name="void _init_(edu.stanford.nlp.pipeline.ParserAnnotator x0, edu.stanford.nlp.pipeline.ParserAnnotator$1 x1)">0</method>
			<method name="public volatile Object process(Object x0)">1</method>
			<method name="private void _init_(edu.stanford.nlp.pipeline.ParserAnnotator)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructure$FromDependenciesFactory</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>4</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>17</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.7777777777777778</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.666666666666667</amc>
		<cc>
			<method name="public volatile edu.stanford.nlp.trees.GrammaticalStructure build(java.util.List x0, edu.stanford.nlp.trees.TreeGraphNode x1)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalStructure build(java.util.List tdeps, edu.stanford.nlp.trees.TreeGraphNode root)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.sentiment.ReadSentimentDataset</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>13</cbo>
		<rfc>63</rfc>
		<lcom>13</lcom>
		<ca>0</ca>
		<ce>13</ce>
		<npm>3</npm>
		<lcom3>0.6</lcom3>
		<loc>714</loc>
		<dam>0.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.24444444444444444</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>117.66666666666667</amc>
		<cc>
			<method name="public static void main(String[] args)">17</method>
			<method name="private static void writeTrees(String filename, java.util.List trees, java.util.List treeIds)">2</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="private static void connect(java.util.List parentPointers, edu.stanford.nlp.trees.Tree[] subtrees, boolean[] connected, int index)">3</method>
			<method name="public static edu.stanford.nlp.trees.Tree convertTree(java.util.List parentPointers, java.util.List sentence, java.util.Map phraseIds, java.util.Map sentimentScores, edu.stanford.nlp.process.PTBEscapingProcessor escaper)">13</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.AbstractStochasticCachingDiffFunction$SamplingMethod</name>
		<wmc>4</wmc>
		<dit>2</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>7</rfc>
		<lcom>4</lcom>
		<ca>3</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.9444444444444443</lcom3>
		<loc>78</loc>
		<dam>0.16666666666666666</dam>
		<moa>6</moa>
		<mfa>0.8666666666666667</mfa>
		<cam>0.4444444444444444</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>17.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="private void _init_(String, int)">0</method>
			<method name="public static edu.stanford.nlp.optimization.AbstractStochasticCachingDiffFunction$SamplingMethod valueOf(String name)">1</method>
			<method name="public static edu.stanford.nlp.optimization.AbstractStochasticCachingDiffFunction$SamplingMethod[] values()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.crf.CRFClassifierNoisyLabel</name>
		<wmc>3</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>18</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>6</ce>
		<npm>1</npm>
		<lcom3>1.0</lcom3>
		<loc>121</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.38095238095238093</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>39.0</amc>
		<cc>
			<method name="static double[][] readErrorMatrix(String fileName, edu.stanford.nlp.util.Index tagIndex, boolean useLogProb)">1</method>
			<method name="protected edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunction getObjectiveFunction(int[][][][] data, int[][] labels)">4</method>
			<method name="public void _init_(edu.stanford.nlp.sequences.SeqClassifierFlags flags)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.process.WordShapeClassifier$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$GeniaAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$TokenPatternExtractRuleCreator</name>
		<wmc>5</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>22</cbo>
		<rfc>20</rfc>
		<lcom>10</lcom>
		<ca>1</ca>
		<ce>22</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>191</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5142857142857142</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>37.2</amc>
		<cc>
			<method name="protected edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule create(edu.stanford.nlp.ling.tokensregex.Env env, edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr expr, edu.stanford.nlp.ling.tokensregex.types.Expression result)">2</method>
			<method name="protected void updateExtractRule(edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule r, edu.stanford.nlp.ling.tokensregex.Env env, edu.stanford.nlp.ling.tokensregex.TokenSequencePattern pattern, edu.stanford.nlp.ling.tokensregex.types.Expression action, edu.stanford.nlp.ling.tokensregex.types.Expression result)">3</method>
			<method name="public void _init_()">0</method>
			<method name="protected void updateExtractRule(edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule r, edu.stanford.nlp.ling.tokensregex.Env env, edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr expr, edu.stanford.nlp.ling.tokensregex.types.Expression action, edu.stanford.nlp.ling.tokensregex.types.Expression result)">1</method>
			<method name="public edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule create(edu.stanford.nlp.ling.tokensregex.Env env, java.util.Map attributes)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.ParseFiles</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>21</cbo>
		<rfc>84</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>21</ce>
		<npm>3</npm>
		<lcom3>0.12962962962962962</lcom3>
		<loc>1021</loc>
		<dam>0.0</dam>
		<moa>7</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>249.75</amc>
		<cc>
			<method name="static void parseFiles(String[] args, int argIndex, boolean tokenized, edu.stanford.nlp.process.TokenizerFactory tokenizerFactory, String elementDelimiter, String sentenceDelimiter, edu.stanford.nlp.util.Function escaper, String tagDelimiter, edu.stanford.nlp.parser.lexparser.Options op, edu.stanford.nlp.trees.TreePrint treePrint, edu.stanford.nlp.parser.lexparser.LexicalizedParser pqFactory)">1</method>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.Options op, edu.stanford.nlp.trees.TreePrint treePrint, edu.stanford.nlp.parser.lexparser.LexicalizedParser pqFactory)">0</method>
			<method name="public void parseFiles(String[] args, int argIndex, boolean tokenized, edu.stanford.nlp.process.TokenizerFactory tokenizerFactory, String elementDelimiter, String sentenceDelimiter, edu.stanford.nlp.util.Function escaper, String tagDelimiter)">30</method>
			<method name="public void processResults(edu.stanford.nlp.parser.lexparser.ParserQuery parserQuery, int num, java.io.PrintWriter pwo)">22</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.classify.ProbabilisticClassifier</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>15</cbo>
		<rfc>2</rfc>
		<lcom>1</lcom>
		<ca>12</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>2</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract edu.stanford.nlp.stats.Counter logProbabilityOf(edu.stanford.nlp.ling.Datum)">1</method>
			<method name="public abstract edu.stanford.nlp.stats.Counter probabilityOf(edu.stanford.nlp.ling.Datum)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.fsm.DFSATransition</name>
		<wmc>12</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>17</rfc>
		<lcom>18</lcom>
		<ca>4</ca>
		<ce>2</ce>
		<npm>12</npm>
		<lcom3>0.7727272727272727</lcom3>
		<loc>99</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.3125</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.75</amc>
		<cc>
			<method name="public edu.stanford.nlp.fsm.DFSAState target()">1</method>
			<method name="public double score()">1</method>
			<method name="public Object getOutput()">1</method>
			<method name="public edu.stanford.nlp.fsm.DFSAState source()">1</method>
			<method name="public edu.stanford.nlp.fsm.DFSAState getSource()">1</method>
			<method name="public Object input()">1</method>
			<method name="public Object output()">1</method>
			<method name="public Object getInput()">1</method>
			<method name="public String toString()">1</method>
			<method name="public Object getID()">1</method>
			<method name="public edu.stanford.nlp.fsm.DFSAState getTarget()">1</method>
			<method name="public void _init_(Object transitionID, edu.stanford.nlp.fsm.DFSAState source, edu.stanford.nlp.fsm.DFSAState target, Object input, Object output, double score)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.CacheMap</name>
		<wmc>13</wmc>
		<dit>4</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>32</rfc>
		<lcom>48</lcom>
		<ca>2</ca>
		<ce>1</ce>
		<npm>12</npm>
		<lcom3>0.34375</lcom3>
		<loc>370</loc>
		<dam>0.875</dam>
		<moa>0</moa>
		<mfa>0.8860759493670886</mfa>
		<cam>0.34615384615384615</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>26.846153846153847</amc>
		<cc>
			<method name="public static edu.stanford.nlp.util.CacheMap create(int numEntries, float loadFactor, boolean accessOrder, String file, boolean useFileParams)">2</method>
			<method name="public void write()">3</method>
			<method name="public void _init_(int numEntries, float loadFactor, boolean accessOrder, String backingFile)">0</method>
			<method name="public Object get(Object key)">2</method>
			<method name="public void printStats(java.io.PrintStream out)">1</method>
			<method name="public static edu.stanford.nlp.util.CacheMap create(int numEntries, String file, boolean useFileParams)">1</method>
			<method name="public void _init_(int numEntries, float loadFactor, boolean accessOrder)">0</method>
			<method name="public Object put(Object key, Object value)">2</method>
			<method name="protected boolean removeEldestEntry(java.util.Map$Entry eldest)">2</method>
			<method name="public static edu.stanford.nlp.util.CacheMap create(int numEntries, float loadFactor, String file, boolean useFileParams)">1</method>
			<method name="public static edu.stanford.nlp.util.CacheMap create(String file, boolean useFileParams)">1</method>
			<method name="public void _init_(int numEntries)">0</method>
			<method name="public void _init_(int numEntries, float loadFactor)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.regexp.RegexNERSequenceClassifier$Entry</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>20</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>4</npm>
		<lcom3>0.4666666666666666</lcom3>
		<loc>114</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.35714285714285715</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>26.25</amc>
		<cc>
			<method name="public volatile int compareTo(Object x0)">1</method>
			<method name="public int compareTo(edu.stanford.nlp.ie.regexp.RegexNERSequenceClassifier$Entry other)">3</method>
			<method name="public String toString()">1</method>
			<method name="public void _init_(java.util.List regex, String type, java.util.Set overwritableTypes, double priority)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.Filters$CategoricalFilter</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>8</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>0.75</lcom3>
		<loc>26</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.0</amc>
		<cc>
			<method name="public String toString()">1</method>
			<method name="public boolean accept(Object obj)">1</method>
			<method name="protected void _init_(boolean judgment)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.french.FrenchTreeReader</name>
		<wmc>12</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>20</cbo>
		<rfc>93</rfc>
		<lcom>52</lcom>
		<ca>1</ca>
		<ce>20</ce>
		<npm>5</npm>
		<lcom3>1.0</lcom3>
		<loc>856</loc>
		<dam>0.8333333333333334</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.21296296296296297</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>68.83333333333333</amc>
		<cc>
			<method name="private String getPOS(org.w3c.dom.Element node)">5</method>
			<method name="public void _init_(java.io.Reader in)">0</method>
			<method name="private edu.stanford.nlp.trees.Tree postProcessMWE(edu.stanford.nlp.trees.Tree t)">2</method>
			<method name="private edu.stanford.nlp.trees.Tree getTreeFromXML(org.w3c.dom.Node root)">28</method>
			<method name="public static void main(String[] args)">6</method>
			<method name="public void _init_(java.io.Reader in, edu.stanford.nlp.trees.TreeFactory tf, edu.stanford.nlp.trees.TreeNormalizer tn)">0</method>
			<method name="private java.util.List getLemma(org.w3c.dom.Element node)">3</method>
			<method name="public void close()">1</method>
			<method name="private String getMorph(org.w3c.dom.Element node)">2</method>
			<method name="public edu.stanford.nlp.trees.Tree readTree()">4</method>
			<method name="private java.util.List getWordString(String text)">7</method>
			<method name="private String getSubcat(org.w3c.dom.Element node)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.GeneralizedCounter$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.crf.CRFClassifier</name>
		<wmc>89</wmc>
		<dit>0</dit>
		<noc>6</noc>
		<cbo>75</cbo>
		<rfc>370</rfc>
		<lcom>2420</lcom>
		<ca>12</ca>
		<ce>70</ce>
		<npm>59</npm>
		<lcom3>0.902511961722488</lcom3>
		<loc>9018</loc>
		<dam>0.05263157894736842</dam>
		<moa>9</moa>
		<mfa>0.0</mfa>
		<cam>0.0674931129476584</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>100.11235955056179</amc>
		<cc>
			<method name="public static edu.stanford.nlp.ie.crf.CRFClassifier getDefaultClassifier()">1</method>
			<method name="public java.util.Map topWeights()">3</method>
			<method name="public void serializeWeights(String serializePath)">1</method>
			<method name="public void loadTextClassifier(String text, java.util.Properties props)">1</method>
			<method name="public static edu.stanford.nlp.ie.crf.CRFClassifier getDefaultClassifier(java.util.Properties props)">1</method>
			<method name="public void serializeClassifier(java.io.ObjectOutputStream oos)">2</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void dropFeaturesBelowThreshold(double threshold)">7</method>
			<method name="void classifyAndWriteAnswers(java.util.Collection documents, java.util.List documentDataAndLabels, java.io.PrintWriter printWriter, edu.stanford.nlp.sequences.DocumentReaderAndWriter readerAndWriter)">1</method>
			<method name="public edu.stanford.nlp.optimization.Minimizer getMinimizer(int featurePruneIteration, edu.stanford.nlp.optimization.Evaluator[] evaluators)">17</method>
			<method name="public void _init_(java.util.Properties props)">0</method>
			<method name="public edu.stanford.nlp.sequences.SequenceModel getSequenceModel(java.util.List doc)">1</method>
			<method name="public void serializeClassIndex(String serializePath)">1</method>
			<method name="public void combine(edu.stanford.nlp.ie.crf.CRFClassifier crf, double weight)">7</method>
			<method name="private java.util.List classifyMaxEnt(java.util.List document, edu.stanford.nlp.util.Triple documentDataAndLabels)">2</method>
			<method name="public edu.stanford.nlp.util.Triple documentToDataAndLabels(java.util.List document)">9</method>
			<method name="public void loadDefaultClassifier(java.util.Properties props)">1</method>
			<method name="private java.util.List classify(java.util.List document, edu.stanford.nlp.util.Triple documentDataAndLabels)">3</method>
			<method name="protected java.util.Collection loadAuxiliaryData(java.util.Collection docs, edu.stanford.nlp.sequences.DocumentReaderAndWriter readerAndWriter)">1</method>
			<method name="public void updateWeightsForTest(double[] x)">1</method>
			<method name="public edu.stanford.nlp.ie.crf.CRFCliqueTree getCliqueTree(edu.stanford.nlp.util.Triple p)">1</method>
			<method name="protected java.util.List extractDatumSequence(int[][][] allData, int beginPosition, int endPosition, java.util.List labeledWordInfos)">7</method>
			<method name="public static edu.stanford.nlp.ie.crf.CRFClassifier getClassifier(java.io.File file)">1</method>
			<method name="public void printLabelInformation(String testFile, edu.stanford.nlp.sequences.DocumentReaderAndWriter readerAndWriter)">1</method>
			<method name="public java.util.List classifyGibbs(java.util.List document, edu.stanford.nlp.util.Triple documentDataAndLabels)">1</method>
			<method name="public void printLabelValue(java.util.List document)">11</method>
			<method name="public edu.stanford.nlp.util.Triple documentsToDataAndLabels(java.util.Collection documents)">4</method>
			<method name="private java.util.List classifyMaxEnt(java.util.List document, edu.stanford.nlp.sequences.SequenceModel model)">8</method>
			<method name="public java.util.List classifyMaxEnt(java.util.List document)">2</method>
			<method name="public void printFactorTableDocument(java.util.List document)">3</method>
			<method name="public void printFirstOrderProbsDocument(java.util.List document)">7</method>
			<method name="public static edu.stanford.nlp.ie.crf.CRFClassifier getClassifier(java.io.InputStream in)">1</method>
			<method name="protected void loadTextClassifier(java.io.BufferedReader br)">1</method>
			<method name="public void scaleWeights(double scale)">3</method>
			<method name="protected static java.util.List loadProcessedData(String filename)">1</method>
			<method name="public static edu.stanford.nlp.ie.crf.CRFClassifier getClassifier(String loadPath, java.util.Properties props)">1</method>
			<method name="protected void printFeatures()">4</method>
			<method name="private edu.stanford.nlp.sequences.SequenceModel getSequenceModel(edu.stanford.nlp.util.Triple documentDataAndLabels, java.util.List document)">2</method>
			<method name="public int getNumWeights()">3</method>
			<method name="protected void makeAnswerArraysAndTagIndex(java.util.Collection ob)">43</method>
			<method name="public void _init_(edu.stanford.nlp.ie.crf.CRFClassifier crf)">0</method>
			<method name="public void printFactorTable(String filename, edu.stanford.nlp.sequences.DocumentReaderAndWriter readerAndWriter)">1</method>
			<method name="public void _init_(edu.stanford.nlp.sequences.SeqClassifierFlags flags)">0</method>
			<method name="public void printFirstOrderProbsDocuments(edu.stanford.nlp.objectbank.ObjectBank documents)">2</method>
			<method name="public void writeWeights(java.io.PrintStream p)">3</method>
			<method name="public static edu.stanford.nlp.util.Index loadClassIndexFromFile(String serializePath)">1</method>
			<method name="public void serializeFeatureIndex(String serializePath)">1</method>
			<method name="public void loadTagIndex()">5</method>
			<method name="public java.util.List classifyGibbs(java.util.List document)">1</method>
			<method name="public void printFactorTableDocuments(edu.stanford.nlp.objectbank.ObjectBank documents)">2</method>
			<method name="protected void pruneNodeFeatureIndices(int totalNumOfFeatureSlices, int numOfFeatureSlices)">4</method>
			<method name="public void loadDefaultClassifier()">1</method>
			<method name="static edu.stanford.nlp.util.Pair readEntityMatrices(String fileName, edu.stanford.nlp.util.Index tagIndex)">4</method>
			<method name="protected static edu.stanford.nlp.util.Index allLabels(int window, edu.stanford.nlp.util.Index classIndex)">2</method>
			<method name="public java.util.List classifyWithGlobalInformation(java.util.List tokenSeq, edu.stanford.nlp.util.CoreMap doc, edu.stanford.nlp.util.CoreMap sent)">1</method>
			<method name="public edu.stanford.nlp.optimization.Minimizer getMinimizer()">1</method>
			<method name="private int getFeatureTypeIndex(int i)">1</method>
			<method name="protected edu.stanford.nlp.ie.crf.CliquePotentialFunction getCliquePotentialFunctionForTest()">2</method>
			<method name="static double[][] parseMatrix(String[] lines, edu.stanford.nlp.util.Index tagIndex, int matrixSize, boolean smooth)">1</method>
			<method name="public edu.stanford.nlp.ie.crf.CRFDatum makeDatum(java.util.List info, int loc, edu.stanford.nlp.sequences.FeatureFactory featureFactory)">6</method>
			<method name="private int[][][] transformDocData(int[][][] docData)">7</method>
			<method name="public void train(java.util.Collection objectBankWrapper, edu.stanford.nlp.sequences.DocumentReaderAndWriter readerAndWriter)">26</method>
			<method name="public void printFirstOrderProbs(String filename, edu.stanford.nlp.sequences.DocumentReaderAndWriter readerAndWriter)">1</method>
			<method name="protected double[] trainWeights(int[][][][] data, int[][] labels, edu.stanford.nlp.optimization.Evaluator[] evaluators, int pruneFeatureItr, double[][][][] featureVals)">19</method>
			<method name="protected edu.stanford.nlp.ie.crf.CRFLogConditionalObjectiveFunction getObjectiveFunction(int[][][][] data, int[][] labels)">1</method>
			<method name="private void combineWeights(edu.stanford.nlp.ie.crf.CRFClassifier crf, double weight)">12</method>
			<method name="private double[] makeDatumUsingEmbedding(java.util.List info, int loc, edu.stanford.nlp.sequences.FeatureFactory featureFactory, edu.stanford.nlp.util.PaddedList pInfo, java.util.List featuresC, java.util.List windowCliques)">18</method>
			<method name="protected void serializeTextClassifier(java.io.PrintWriter pw)">1</method>
			<method name="protected void addProcessedData(java.util.List processedData, int[][][][] data, int[][] labels, double[][][][] featureVals, int offset)">9</method>
			<method name="public double[][] to2D(double[] weights, java.util.List labelIndices, int[] map)">2</method>
			<method name="public static edu.stanford.nlp.ie.crf.CRFClassifier getClassifierNoExceptions(String loadPath)">1</method>
			<method name="public java.util.List getCliqueTrees(String filename, edu.stanford.nlp.sequences.DocumentReaderAndWriter readerAndWriter)">2</method>
			<method name="public void printProbsDocument(java.util.List document)">4</method>
			<method name="public static edu.stanford.nlp.util.Index loadFeatureIndexFromFile(String serializePath)">1</method>
			<method name="protected static void saveProcessedData(java.util.List datums, String filename)">1</method>
			<method name="public java.util.List classify(java.util.List document)">3</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="protected void _init_()">0</method>
			<method name="public java.util.List documentsToDataAndLabelsList(java.util.Collection documents)">2</method>
			<method name="public static double[][] loadWeightsFromFile(String serializePath)">1</method>
			<method name="public edu.stanford.nlp.ie.crf.CRFCliqueTree getCliqueTree(java.util.List document)">1</method>
			<method name="public void serializeTextClassifier(String serializePath)">1</method>
			<method name="public void serializeClassifier(String serializePath)">1</method>
			<method name="private static edu.stanford.nlp.ie.crf.CRFClassifier chooseCRFClassifier(edu.stanford.nlp.sequences.SeqClassifierFlags flags)">6</method>
			<method name="public void loadClassifier(java.io.ObjectInputStream ois, java.util.Properties props)">1</method>
			<method name="public static edu.stanford.nlp.ie.crf.CRFClassifier getClassifier(String loadPath)">1</method>
			<method name="static double[][] parseMatrix(String[] lines, edu.stanford.nlp.util.Index tagIndex, int matrixSize, boolean smooth, boolean useLogProb)">9</method>
			<method name="public static edu.stanford.nlp.ie.crf.CRFClassifier getJarClassifier(String resourceName, java.util.Properties props)">1</method>
			<method name="private static int getFeatureTypeIndex(String feature)">7</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.TreeAnnotatorAndBinarizer</name>
		<wmc>12</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>40</cbo>
		<rfc>100</rfc>
		<lcom>46</lcom>
		<ca>6</ca>
		<ce>34</ce>
		<npm>10</npm>
		<lcom3>0.5656565656565656</lcom3>
		<loc>1040</loc>
		<dam>1.0</dam>
		<moa>8</moa>
		<mfa>0.0</mfa>
		<cam>0.20833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>84.91666666666667</amc>
		<cc>
			<method name="public void printRuleCounts()">3</method>
			<method name="public static edu.stanford.nlp.util.Triple getAnnotatedBinaryTreebankFromTreebank(edu.stanford.nlp.trees.Treebank trainTreebank, edu.stanford.nlp.trees.Treebank secondaryTreebank, edu.stanford.nlp.trees.Treebank tuneTreebank, edu.stanford.nlp.parser.lexparser.Options op)">23</method>
			<method name="public void _init_(edu.stanford.nlp.trees.HeadFinder annotationHF, edu.stanford.nlp.trees.HeadFinder binarizationHF, edu.stanford.nlp.parser.lexparser.TreebankLangParserParams tlpParams, boolean forceCNF, boolean insideFactor, boolean doSubcategorization, edu.stanford.nlp.parser.lexparser.Options op)">0</method>
			<method name="public void setDoSelectiveSplit(boolean doSelectiveSplit)">1</method>
			<method name="public static void main(String[] args)">9</method>
			<method name="public void dumpStats()">2</method>
			<method name="private static void removeDeleteSplittersFromSplitters(edu.stanford.nlp.trees.TreebankLanguagePack tlp, edu.stanford.nlp.parser.lexparser.Options op)">7</method>
			<method name="private static int numSubArgs(String[] args, int index)">3</method>
			<method name="public void printStateCounts()">2</method>
			<method name="public edu.stanford.nlp.trees.Tree transformTree(edu.stanford.nlp.trees.Tree t)">10</method>
			<method name="public void addRoot(edu.stanford.nlp.trees.Tree t)">2</method>
			<method name="public void _init_(edu.stanford.nlp.parser.lexparser.TreebankLangParserParams tlpParams, boolean forceCNF, boolean insideFactor, boolean doSubcategorization, edu.stanford.nlp.parser.lexparser.Options op)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$BestCliquesAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.machinereading.structure.MachineReadingAnnotations$EntityMentionsAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>9</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.charniak.CharniakScoredParsesReaderWriter</name>
		<wmc>10</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>40</rfc>
		<lcom>41</lcom>
		<ca>2</ca>
		<ce>6</ce>
		<npm>7</npm>
		<lcom3>0.8888888888888888</lcom3>
		<loc>183</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2698412698412698</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>17.1</amc>
		<cc>
			<method name="public String parsesToString(java.util.List parses)">2</method>
			<method name="public Iterable readScoredTrees(String inputDesc, java.io.BufferedReader br)">1</method>
			<method name="public void printScoredTrees(Iterable trees, String filename)">2</method>
			<method name="static java.util.regex.Pattern access$300()">1</method>
			<method name="public Iterable readScoredTrees(String filename)">1</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public java.util.List stringToParses(String parseStr)">4</method>
			<method name="public void printScoredTrees(java.io.PrintWriter pw, int id, java.util.List trees)">2</method>
			<method name="static java.util.logging.Logger access$200()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.GrammaticalStructure$NameComparator</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>19</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.333333333333333</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public int compare(Object o1, Object o2)">1</method>
			<method name="void _init_(edu.stanford.nlp.trees.GrammaticalStructure$1 x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.ACEMentionExtractor$1</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>2</ca>
		<ce>0</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.LabeledScoredTreeNode$TreeFactoryHolder</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>0</npm>
		<lcom3>1.0</lcom3>
		<loc>11</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.0</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalRelations$MarkerGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.DeepTree$1</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>6</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>20</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.666666666666667</amc>
		<cc>
			<method name="public volatile int compare(Object x0, Object x1)">1</method>
			<method name="void _init_()">0</method>
			<method name="public int compare(edu.stanford.nlp.trees.DeepTree o1, edu.stanford.nlp.trees.DeepTree o2)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.crf.TestSequenceModel</name>
		<wmc>9</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>21</rfc>
		<lcom>10</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>9</npm>
		<lcom3>0.6041666666666666</lcom3>
		<loc>243</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.35185185185185186</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>25.333333333333332</amc>
		<cc>
			<method name="public double scoreOf(int[] sequence)">1</method>
			<method name="public int length()">1</method>
			<method name="public double scoreOf(int[] tags, int pos)">2</method>
			<method name="public int rightWindow()">1</method>
			<method name="public double[] scoresOf(int[] tags, int pos)">3</method>
			<method name="public int[] getPossibleValues(int pos)">3</method>
			<method name="public void _init_(edu.stanford.nlp.ie.crf.CRFCliqueTree cliqueTree, edu.stanford.nlp.ie.crf.LabelDictionary labelDictionary, java.util.List document)">0</method>
			<method name="public void _init_(edu.stanford.nlp.ie.crf.CRFCliqueTree cliqueTree)">0</method>
			<method name="public int leftWindow()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.pascal.AcronymModel$EndWord</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>5</rfc>
		<lcom>3</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>2.0</lcom3>
		<loc>62</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>19.666666666666668</amc>
		<cc>
			<method name="public double value(edu.stanford.nlp.ie.pascal.Alignment alignment)">6</method>
			<method name="public void _init_()">0</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.fsm.TransducerGraph$NodeProcessorWrappingArcProcessor</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>9</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>30</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.6666666666666666</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>13.5</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.fsm.TransducerGraph$NodeProcessor nodeProcessor)">0</method>
			<method name="public edu.stanford.nlp.fsm.TransducerGraph$Arc processArc(edu.stanford.nlp.fsm.TransducerGraph$Arc a)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.parser.Token</name>
		<wmc>7</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>8</rfc>
		<lcom>19</lcom>
		<ca>4</ca>
		<ce>0</ce>
		<npm>7</npm>
		<lcom3>1.0</lcom3>
		<loc>50</loc>
		<dam>0.1111111111111111</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.5238095238095238</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.857142857142857</amc>
		<cc>
			<method name="public static edu.stanford.nlp.ling.tokensregex.parser.Token newToken(int ofKind)">1</method>
			<method name="public static edu.stanford.nlp.ling.tokensregex.parser.Token newToken(int ofKind, String image)">2</method>
			<method name="public void _init_()">0</method>
			<method name="public void _init_(int kind, String image)">0</method>
			<method name="public String toString()">1</method>
			<method name="public void _init_(int kind)">0</method>
			<method name="public Object getValue()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.fsm.DFSA</name>
		<wmc>13</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>56</rfc>
		<lcom>42</lcom>
		<ca>5</ca>
		<ce>4</ce>
		<npm>10</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>395</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.18461538461538463</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>29.153846153846153</amc>
		<cc>
			<method name="public java.util.Set states()">1</method>
			<method name="private static void printTrieDFSAHelper(edu.stanford.nlp.fsm.DFSAState state, int level)">4</method>
			<method name="public static void printTrieDFSA(edu.stanford.nlp.fsm.DFSA dfsa)">1</method>
			<method name="public double score()">1</method>
			<method name="public edu.stanford.nlp.fsm.DFSAState initialState()">1</method>
			<method name="public void _init_(edu.stanford.nlp.fsm.DFSAState initialState, double score)">0</method>
			<method name="public void _init_(edu.stanford.nlp.fsm.DFSAState initialState)">0</method>
			<method name="public static void printTrieAsRules(edu.stanford.nlp.fsm.DFSA dfsa, java.io.Writer w)">1</method>
			<method name="public void setInitialState(edu.stanford.nlp.fsm.DFSAState initialState)">1</method>
			<method name="public void printAttFsmFormat(java.io.Writer w)">1</method>
			<method name="private static void printTrieAsRulesHelper(edu.stanford.nlp.fsm.DFSAState state, String prefix, java.io.Writer w)">1</method>
			<method name="public void _init_(Object dfsaID)">0</method>
			<method name="private static void exploreStates(java.util.List toVisit, java.util.Set visited)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.StochasticMinimizer</name>
		<wmc>22</wmc>
		<dit>1</dit>
		<noc>4</noc>
		<cbo>16</cbo>
		<rfc>85</rfc>
		<lcom>171</lcom>
		<ca>5</ca>
		<ce>12</ce>
		<npm>11</npm>
		<lcom3>0.8636363636363636</lcom3>
		<loc>1501</loc>
		<dam>0.8636363636363636</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.24206349206349206</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>66.22727272727273</amc>
		<cc>
			<method name="private static void copyPair(edu.stanford.nlp.util.Pair from, edu.stanford.nlp.util.Pair to)">1</method>
			<method name="protected abstract void takeStep(edu.stanford.nlp.optimization.AbstractStochasticCachingDiffFunction)">1</method>
			<method name="public edu.stanford.nlp.util.Pair tune(edu.stanford.nlp.optimization.Function function, double[] initial, long msPerTest, java.util.List batchSizes, java.util.List gains)">4</method>
			<method name="public abstract edu.stanford.nlp.util.Pair tune(edu.stanford.nlp.optimization.Function, double[], long)">1</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public double tuneGain(edu.stanford.nlp.optimization.Function function, double[] initial, long msPerTest, double lower, double upper)">1</method>
			<method name="private void initFiles()">2</method>
			<method name="protected abstract String getName()">1</method>
			<method name="public double tuneDouble(edu.stanford.nlp.optimization.Function function, double[] initial, long msPerTest, edu.stanford.nlp.optimization.StochasticMinimizer$PropertySetter ps, double lower, double upper)">1</method>
			<method name="public double[] minimize(edu.stanford.nlp.optimization.Function function, double functionTolerance, double[] initial)">1</method>
			<method name="protected void say(String s)">2</method>
			<method name="public void shutUp()">1</method>
			<method name="protected static double[] smooth(java.util.List toSmooth)">2</method>
			<method name="protected void init(edu.stanford.nlp.optimization.AbstractStochasticCachingDiffFunction func)">1</method>
			<method name="protected void sayln(String s)">2</method>
			<method name="public int tuneBatch(edu.stanford.nlp.optimization.Function function, double[] initial, long msPerTest, int bStart)">6</method>
			<method name="public double tuneDouble(edu.stanford.nlp.optimization.Function function, double[] initial, long msPerTest, edu.stanford.nlp.optimization.StochasticMinimizer$PropertySetter ps, double lower, double upper, double TOL)">11</method>
			<method name="protected static double gainSchedule(int it, double tau)">1</method>
			<method name="public double[] minimize(edu.stanford.nlp.optimization.Function function, double functionTolerance, double[] initial, int maxIterations)">21</method>
			<method name="public void setEvaluators(int iters, edu.stanford.nlp.optimization.Evaluator[] evaluators)">1</method>
			<method name="private void doEvaluation(double[] x)">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.stats.Counters$7$3$1</name>
		<wmc>4</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>10</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>0.6666666666666666</lcom3>
		<loc>33</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.75</amc>
		<cc>
			<method name="void _init_(edu.stanford.nlp.stats.Counters$7$3)">0</method>
			<method name="public boolean hasNext()">1</method>
			<method name="public void remove()">1</method>
			<method name="public Object next()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$13</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>6</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>4.0</amc>
		<cc>
			<method name="void _init_(String x0)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$12</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>14</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.5</amc>
		<cc>
			<method name="void _init_(org.joda.time.ReadablePeriod x0)">0</method>
			<method name="public org.joda.time.DateTimeFieldType[] getDateTimeFields()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$11</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>14</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.5</amc>
		<cc>
			<method name="void _init_(org.joda.time.ReadablePeriod x0)">0</method>
			<method name="public org.joda.time.DateTimeFieldType[] getDateTimeFields()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.sievepasses.RelaxedExactStringMatch</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>8</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$10</name>
		<wmc>2</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>5</rfc>
		<lcom>1</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>18</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>7.5</amc>
		<cc>
			<method name="void _init_(org.joda.time.ReadablePeriod x0)">0</method>
			<method name="public org.joda.time.DateTimeFieldType[] getDateTimeFields()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.international.french.process.FrenchLexer$1</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>3</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>49</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>47.0</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreLabel$CoreLabelFactory</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>24</rfc>
		<lcom>15</lcom>
		<ca>1</ca>
		<ce>9</ce>
		<npm>4</npm>
		<lcom3>2.0</lcom3>
		<loc>94</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>14.666666666666666</amc>
		<cc>
			<method name="public edu.stanford.nlp.ling.Label newLabel(String labelStr, int options)">1</method>
			<method name="private void _init_()">0</method>
			<method name="public edu.stanford.nlp.ling.Label newLabel(String labelStr)">1</method>
			<method name="public edu.stanford.nlp.ling.Label newLabel(edu.stanford.nlp.ling.Label oldLabel)">7</method>
			<method name="void _init_(edu.stanford.nlp.ling.CoreLabel$1 x0)">0</method>
			<method name="public edu.stanford.nlp.ling.Label newLabelFromString(String encodedLabelStr)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.tregex.TregexParserTokenManager</name>
		<wmc>22</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>38</rfc>
		<lcom>113</lcom>
		<ca>1</ca>
		<ce>4</ce>
		<npm>7</npm>
		<lcom3>0.753968253968254</lcom3>
		<loc>1718</loc>
		<dam>0.2222222222222222</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>76.27272727272727</amc>
		<cc>
			<method name="static void _clinit_()">0</method>
			<method name="private int jjMoveStringLiteralDfa0_0()">18</method>
			<method name="public void SwitchTo(int lexState)">3</method>
			<method name="private int jjMoveNfa_0(int startState, int curPos)">107</method>
			<method name="public void ReInit(edu.stanford.nlp.trees.tregex.SimpleCharStream stream, int lexState)">1</method>
			<method name="private void jjCheckNAdd(int state)">2</method>
			<method name="private void jjCheckNAddTwoStates(int state1, int state2)">1</method>
			<method name="public edu.stanford.nlp.trees.tregex.Token getNextToken()">9</method>
			<method name="public void _init_(edu.stanford.nlp.trees.tregex.SimpleCharStream stream, int lexState)">0</method>
			<method name="private void jjCheckNAddStates(int start, int end)">2</method>
			<method name="public void setDebugStream(java.io.PrintStream ds)">1</method>
			<method name="private final int jjStopStringLiteralDfa_0(int pos, long active0)">5</method>
			<method name="private void jjAddStates(int start, int end)">2</method>
			<method name="public void ReInit(edu.stanford.nlp.trees.tregex.SimpleCharStream stream)">1</method>
			<method name="public void _init_(edu.stanford.nlp.trees.tregex.SimpleCharStream stream)">0</method>
			<method name="private int jjStartNfaWithStates_0(int pos, int kind, int state)">1</method>
			<method name="private final int jjStartNfa_0(int pos, long active0)">1</method>
			<method name="private void ReInitRounds()">2</method>
			<method name="private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)">5</method>
			<method name="private int jjMoveStringLiteralDfa1_0(long active0)">4</method>
			<method name="private int jjStopAtPos(int pos, int kind)">1</method>
			<method name="protected edu.stanford.nlp.trees.tregex.Token jjFillToken()">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequenceMatchRules</name>
		<wmc>10</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>19</cbo>
		<rfc>38</rfc>
		<lcom>39</lcom>
		<ca>5</ca>
		<ce>17</ce>
		<npm>7</npm>
		<lcom3>0.9506172839506173</lcom3>
		<loc>272</loc>
		<dam>0.0</dam>
		<moa>4</moa>
		<mfa>0.0</mfa>
		<cam>0.24444444444444444</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>25.3</amc>
		<cc>
			<method name="public static edu.stanford.nlp.ling.tokensregex.MatchedExpression$SingleAnnotationExtractor createAnnotationExtractor(edu.stanford.nlp.ling.tokensregex.Env env, edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule r)">1</method>
			<method name="protected static edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRuleCreator lookupExtractRuleCreator(edu.stanford.nlp.ling.tokensregex.Env env, String ruleType)">5</method>
			<method name="public static edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule createExtractionRule(edu.stanford.nlp.ling.tokensregex.Env env, String ruleType, Object pattern, edu.stanford.nlp.ling.tokensregex.types.Expression result)">4</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="protected static edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule createExtractionRule(edu.stanford.nlp.ling.tokensregex.Env env, java.util.Map attributes)">4</method>
			<method name="public static edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule createTextPatternRule(edu.stanford.nlp.ling.tokensregex.Env env, String expr, edu.stanford.nlp.ling.tokensregex.types.Expression result)">1</method>
			<method name="public static edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AssignmentRule createAssignmentRule(edu.stanford.nlp.ling.tokensregex.Env env, edu.stanford.nlp.ling.tokensregex.types.AssignableExpression var, edu.stanford.nlp.ling.tokensregex.types.Expression result)">1</method>
			<method name="public static edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AnnotationExtractRule createTokenPatternRule(edu.stanford.nlp.ling.tokensregex.Env env, edu.stanford.nlp.ling.tokensregex.SequencePattern$PatternExpr expr, edu.stanford.nlp.ling.tokensregex.types.Expression result)">1</method>
			<method name="public static edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$Rule createRule(edu.stanford.nlp.ling.tokensregex.Env env, edu.stanford.nlp.ling.tokensregex.types.Expressions$CompositeValue cv)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.RuntimeInterruptedException</name>
		<wmc>2</wmc>
		<dit>4</dit>
		<noc>0</noc>
		<cbo>5</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>5</ca>
		<ce>0</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>9</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>1.0</mfa>
		<cam>0.75</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.5</amc>
		<cc>
			<method name="public void _init_(InterruptedException e)">0</method>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.time.SUTime$InexactDuration</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>9</rfc>
		<lcom>0</lcom>
		<ca>6</ca>
		<ce>4</ce>
		<npm>4</npm>
		<lcom3>1.3333333333333333</lcom3>
		<loc>40</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.75</amc>
		<cc>
			<method name="public void _init_(edu.stanford.nlp.time.SUTime$Duration d)">0</method>
			<method name="public void _init_(edu.stanford.nlp.time.SUTime$Duration d, org.joda.time.ReadablePeriod period)">0</method>
			<method name="public void _init_(org.joda.time.ReadablePeriod period)">0</method>
			<method name="public String toFormattedString(int flags)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.ChineseSegmenterAnnotator</name>
		<wmc>14</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>9</cbo>
		<rfc>60</rfc>
		<lcom>47</lcom>
		<ca>0</ca>
		<ce>9</ce>
		<npm>11</npm>
		<lcom3>0.8131868131868132</lcom3>
		<loc>513</loc>
		<dam>1.0</dam>
		<moa>2</moa>
		<mfa>0.0</mfa>
		<cam>0.34615384615384615</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>35.142857142857146</amc>
		<cc>
			<method name="private void loadModel(String segLoc)">3</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="public void _init_(String segLoc, boolean verbose)">0</method>
			<method name="public java.util.Set requires()">1</method>
			<method name="private void loadModel(String segLoc, java.util.Properties props)">3</method>
			<method name="public java.util.Set requirementsSatisfied()">1</method>
			<method name="public void splitCharacters(edu.stanford.nlp.util.CoreMap annotation)">6</method>
			<method name="public void _init_(String segLoc, boolean verbose, String serDictionary, String sighanCorporaDict)">0</method>
			<method name="public void annotate(edu.stanford.nlp.pipeline.Annotation annotation)">4</method>
			<method name="public void _init_(boolean verbose)">0</method>
			<method name="public void runSegmentation(edu.stanford.nlp.util.CoreMap annotation)">4</method>
			<method name="public void _init_(String name, java.util.Properties props)">0</method>
			<method name="public void doOneSentence(edu.stanford.nlp.util.CoreMap annotation)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.regexp.RegexNERSequenceClassifier</name>
		<wmc>12</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>11</cbo>
		<rfc>53</rfc>
		<lcom>56</lcom>
		<ca>2</ca>
		<ce>9</ce>
		<npm>9</npm>
		<lcom3>0.7090909090909091</lcom3>
		<loc>566</loc>
		<dam>0.8</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.22435897435897437</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>45.75</amc>
		<cc>
			<method name="public void loadClassifier(java.io.ObjectInputStream in, java.util.Properties props)">1</method>
			<method name="private static int findStartIndex(edu.stanford.nlp.ie.regexp.RegexNERSequenceClassifier$Entry entry, java.util.List document, int searchStart, java.util.Set myLabels, boolean ignoreCase)">12</method>
			<method name="public void _init_(java.io.BufferedReader reader, boolean ignoreCase, boolean overwriteMyLabels, String validPosRegex)">0</method>
			<method name="public java.util.List classifyWithGlobalInformation(java.util.List tokenSeq, edu.stanford.nlp.util.CoreMap doc, edu.stanford.nlp.util.CoreMap sent)">1</method>
			<method name="public java.util.List classify(java.util.List document)">5</method>
			<method name="public void _init_(String mapping, boolean ignoreCase, boolean overwriteMyLabels, String validPosRegex)">0</method>
			<method name="private static java.util.List readEntries(java.io.BufferedReader mapping, boolean ignoreCase)">1</method>
			<method name="public void serializeClassifier(String serializePath)">1</method>
			<method name="public void train(java.util.Collection docs, edu.stanford.nlp.sequences.DocumentReaderAndWriter readerAndWriter)">1</method>
			<method name="public void printProbsDocument(java.util.List document)">1</method>
			<method name="private boolean containsValidPos(java.util.List tokens, int start, int end)">5</method>
			<method name="public void _init_(String mapping, boolean ignoreCase, boolean overwriteMyLabels)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.ArrayHeap</name>
		<wmc>24</wmc>
		<dit>3</dit>
		<noc>0</noc>
		<cbo>7</cbo>
		<rfc>63</rfc>
		<lcom>26</lcom>
		<ca>2</ca>
		<ce>5</ce>
		<npm>14</npm>
		<lcom3>0.4782608695652174</lcom3>
		<loc>517</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.4634146341463415</mfa>
		<cam>0.31666666666666665</cam>
		<ic>2</ic>
		<cbm>8</cbm>
		<amc>20.416666666666668</amc>
		<cc>
			<method name="public void clear()">1</method>
			<method name="public Object min()">1</method>
			<method name="public java.util.List asList()">1</method>
			<method name="public java.util.Iterator iterator()">3</method>
			<method name="public boolean isEmpty()">1</method>
			<method name="private void heapifyDown(edu.stanford.nlp.util.ArrayHeap$HeapEntry entry)">7</method>
			<method name="private void swap(edu.stanford.nlp.util.ArrayHeap$HeapEntry entryA, edu.stanford.nlp.util.ArrayHeap$HeapEntry entryB)">1</method>
			<method name="public void _init_(java.util.Comparator cmp, int initCapacity)">0</method>
			<method name="private int compare(edu.stanford.nlp.util.ArrayHeap$HeapEntry entryA, edu.stanford.nlp.util.ArrayHeap$HeapEntry entryB)">1</method>
			<method name="private int heapifyUp(edu.stanford.nlp.util.ArrayHeap$HeapEntry entry)">3</method>
			<method name="public void _init_(java.util.Comparator cmp)">0</method>
			<method name="public boolean add(Object o)">1</method>
			<method name="public void verify()">5</method>
			<method name="public int size()">1</method>
			<method name="private edu.stanford.nlp.util.ArrayHeap$HeapEntry rightChild(edu.stanford.nlp.util.ArrayHeap$HeapEntry entry)">2</method>
			<method name="public void dump()">2</method>
			<method name="public Object extractMin()">3</method>
			<method name="private edu.stanford.nlp.util.ArrayHeap$HeapEntry parent(edu.stanford.nlp.util.ArrayHeap$HeapEntry entry)">2</method>
			<method name="private static int parent(int index)">1</method>
			<method name="public String toString()">2</method>
			<method name="private edu.stanford.nlp.util.ArrayHeap$HeapEntry getEntry(Object o)">2</method>
			<method name="public int decreaseKey(Object o)">3</method>
			<method name="private edu.stanford.nlp.util.ArrayHeap$HeapEntry leftChild(edu.stanford.nlp.util.ArrayHeap$HeapEntry entry)">2</method>
			<method name="private void removeLast(edu.stanford.nlp.util.ArrayHeap$HeapEntry entry)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.EnglishGrammaticalRelations</name>
		<wmc>15</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>10</cbo>
		<rfc>44</rfc>
		<lcom>77</lcom>
		<ca>6</ca>
		<ce>5</ce>
		<npm>12</npm>
		<lcom3>0.9835907335907336</lcom3>
		<loc>2053</loc>
		<dam>0.21621621621621623</dam>
		<moa>55</moa>
		<mfa>0.0</mfa>
		<cam>0.10714285714285714</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>130.93333333333334</amc>
		<cc>
			<method name="public static java.util.Collection getPrepsC()">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="public static java.util.List values(boolean threadSafe)">2</method>
			<method name="public static java.util.Collection getConjs()">1</method>
			<method name="public static java.util.concurrent.locks.Lock valuesLock()">1</method>
			<method name="public static edu.stanford.nlp.trees.GrammaticalRelation valueOf(String s)">1</method>
			<method name="private void _init_()">0</method>
			<method name="public static edu.stanford.nlp.trees.GrammaticalRelation getConj(String conjunctionString)">3</method>
			<method name="private static void threadSafeAddRelation(edu.stanford.nlp.trees.GrammaticalRelation relation)">1</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="public static edu.stanford.nlp.trees.GrammaticalRelation getPrep(String prepositionString)">3</method>
			<method name="public static java.util.Collection getPreps()">1</method>
			<method name="public static edu.stanford.nlp.trees.GrammaticalRelation valueOf(Object o)">4</method>
			<method name="public static edu.stanford.nlp.trees.GrammaticalRelation getPrepC(String prepositionString)">3</method>
			<method name="public static java.util.List values()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.MultiPatternMatcher$NodePatternTrigger</name>
		<wmc>0</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>0</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>1</ce>
		<npm>0</npm>
		<lcom3>2.0</lcom3>
		<loc>0</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$ArgDescendentAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>4</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>9</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$UseMarkedDiscourseAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.ScoredObject</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>13</cbo>
		<rfc>12</rfc>
		<lcom>0</lcom>
		<ca>12</ca>
		<ce>1</ce>
		<npm>6</npm>
		<lcom3>0.4</lcom3>
		<loc>44</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>6.0</amc>
		<cc>
			<method name="public Object object()">1</method>
			<method name="public void setScore(double score)">1</method>
			<method name="public double score()">1</method>
			<method name="public void _init_(Object object, double score)">0</method>
			<method name="public void setObject(Object object)">1</method>
			<method name="public String toString()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.util.logging.Redwood$Util$1</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>15</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>0.0</lcom3>
		<loc>71</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5833333333333334</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>32.0</amc>
		<cc>
			<method name="public void run()">2</method>
			<method name="void _init_(java.util.concurrent.locks.ReentrantLock, java.util.concurrent.atomic.AtomicBoolean, String, Runnable, java.util.concurrent.atomic.AtomicInteger)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.ChineseGrammaticalRelations$DeterminerGRAnnotation</name>
		<wmc>1</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>4</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>3.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.parser.lexparser.CNFTransformers</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>16</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>6</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>70</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>34.0</amc>
		<cc>
			<method name="private void _init_()">0</method>
			<method name="public static void main(String[] args)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.tagger.maxent.AmbiguityClass</name>
		<wmc>6</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>3</cbo>
		<rfc>26</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>2</ce>
		<npm>4</npm>
		<lcom3>0.65</lcom3>
		<loc>161</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.2857142857142857</cam>
		<ic>1</ic>
		<cbm>1</cbm>
		<amc>25.166666666666668</amc>
		<cc>
			<method name="private boolean add(int tagId)">4</method>
			<method name="public boolean equals(Object o)">3</method>
			<method name="public int hashCode()">1</method>
			<method name="protected void _init_(String word, boolean single, edu.stanford.nlp.tagger.maxent.Dictionary dict, edu.stanford.nlp.tagger.maxent.TTags ttags)">0</method>
			<method name="public String getWord()">1</method>
			<method name="public String toString()">3</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.CoreAnnotations$StackedNamedEntityTagAnnotation</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>3</rfc>
		<lcom>1</lcom>
		<ca>0</ca>
		<ce>1</ce>
		<npm>2</npm>
		<lcom3>2.0</lcom3>
		<loc>7</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>2.5</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public Class getType()">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter</name>
		<wmc>14</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>17</cbo>
		<rfc>58</rfc>
		<lcom>73</lcom>
		<ca>4</ca>
		<ce>13</ce>
		<npm>7</npm>
		<lcom3>0.8769230769230769</lcom3>
		<loc>828</loc>
		<dam>1.0</dam>
		<moa>3</moa>
		<mfa>0.0</mfa>
		<cam>0.3269230769230769</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>57.785714285714285</amc>
		<cc>
			<method name="private void printAnswersTokenizedInlineXML(java.util.List doc, java.io.PrintWriter out)">11</method>
			<method name="public void printAnswers(java.util.List list, java.io.PrintWriter out)">5</method>
			<method name="public void _init_()">0</method>
			<method name="private static void printAnswersXML(java.util.List doc, java.io.PrintWriter out)">2</method>
			<method name="static void _clinit_()">0</method>
			<method name="private static void printAnswersAsIsText(java.util.List l, java.io.PrintWriter out)">2</method>
			<method name="public String getAnswers(java.util.List l, edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter$OutputStyle outputStyle, boolean preserveSpacing)">1</method>
			<method name="public java.util.Iterator getIterator(java.io.Reader r)">6</method>
			<method name="public void printAnswers(java.util.List l, java.io.PrintWriter out, edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter$OutputStyle outputStyle, boolean preserveSpacing)">5</method>
			<method name="private static void printAnswersTokenizedText(java.util.List l, java.io.PrintWriter out)">2</method>
			<method name="public void init(edu.stanford.nlp.sequences.SeqClassifierFlags flags, edu.stanford.nlp.process.TokenizerFactory tokenizerFactory)">1</method>
			<method name="public void init(edu.stanford.nlp.sequences.SeqClassifierFlags flags)">3</method>
			<method name="private static void printAnswersTokenizedXML(java.util.List doc, java.io.PrintWriter out)">2</method>
			<method name="private void printAnswersInlineXML(java.util.List doc, java.io.PrintWriter out)">9</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.NERClassifierCombiner</name>
		<wmc>13</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>13</cbo>
		<rfc>45</rfc>
		<lcom>20</lcom>
		<ca>2</ca>
		<ce>11</ce>
		<npm>11</npm>
		<lcom3>0.6333333333333333</lcom3>
		<loc>301</loc>
		<dam>0.6</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.27884615384615385</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>21.76923076923077</amc>
		<cc>
			<method name="private void recognizeNumberSequences(java.util.List words, edu.stanford.nlp.util.CoreMap document, edu.stanford.nlp.util.CoreMap sentence)">6</method>
			<method name="public boolean appliesNumericClassifiers()">1</method>
			<method name="private static void copyAnswerFieldsToNERField(java.util.List l)">2</method>
			<method name="public transient void _init_(String[] loadPaths)">0</method>
			<method name="public void _init_(java.util.Properties props)">0</method>
			<method name="public transient void _init_(boolean applyNumericClassifiers, boolean useSUTime, edu.stanford.nlp.ie.AbstractSequenceClassifier[] classifiers)">0</method>
			<method name="public void finalizeAnnotation(edu.stanford.nlp.pipeline.Annotation annotation)">1</method>
			<method name="public transient void _init_(edu.stanford.nlp.ie.AbstractSequenceClassifier[] classifiers)">0</method>
			<method name="public transient void _init_(boolean applyNumericClassifiers, boolean useSUTime, String[] loadPaths)">0</method>
			<method name="public transient void _init_(boolean applyNumericClassifiers, boolean useSUTime, java.util.Properties nscProps, String[] loadPaths)">0</method>
			<method name="public boolean usesSUTime()">1</method>
			<method name="public java.util.List classify(java.util.List tokens)">1</method>
			<method name="public java.util.List classifyWithGlobalInformation(java.util.List tokens, edu.stanford.nlp.util.CoreMap document, edu.stanford.nlp.util.CoreMap sentence)">2</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ling.tokensregex.SequenceMatchRules$AssignmentRule</name>
		<wmc>2</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>8</cbo>
		<rfc>5</rfc>
		<lcom>0</lcom>
		<ca>3</ca>
		<ce>5</ce>
		<npm>2</npm>
		<lcom3>0.0</lcom3>
		<loc>19</loc>
		<dam>0.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.625</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>8.0</amc>
		<cc>
			<method name="public void evaluate(edu.stanford.nlp.ling.tokensregex.Env env)">1</method>
			<method name="public void _init_(edu.stanford.nlp.ling.tokensregex.types.AssignableExpression varExpr, edu.stanford.nlp.ling.tokensregex.types.Expression value)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.optimization.CGMinimizer$Triple</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>1</cbo>
		<rfc>2</rfc>
		<lcom>0</lcom>
		<ca>1</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>16</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>12.0</amc>
		<cc>
			<method name="public void _init_(double a, double b, double c)">0</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.process.AmericanizeFunction</name>
		<wmc>3</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>2</cbo>
		<rfc>5</rfc>
		<lcom>3</lcom>
		<ca>0</ca>
		<ce>2</ce>
		<npm>3</npm>
		<lcom3>1.5</lcom3>
		<loc>19</loc>
		<dam>1.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>0.5555555555555556</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>5.0</amc>
		<cc>
			<method name="public void _init_()">0</method>
			<method name="public String apply(String input)">2</method>
			<method name="public volatile Object apply(Object x0)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.trees.international.pennchinese.CHTBTokenizer</name>
		<wmc>4</wmc>
		<dit>0</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>13</rfc>
		<lcom>4</lcom>
		<ca>2</ca>
		<ce>4</ce>
		<npm>4</npm>
		<lcom3>0.0</lcom3>
		<loc>71</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.4166666666666667</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>16.5</amc>
		<cc>
			<method name="public void _init_(java.io.Reader r)">0</method>
			<method name="public String getNext()">3</method>
			<method name="public volatile Object getNext()">1</method>
			<method name="public static void main(String[] args)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.dcoref.SieveCoreferenceSystem</name>
		<wmc>44</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>50</cbo>
		<rfc>259</rfc>
		<lcom>664</lcom>
		<ca>12</ca>
		<ce>47</ce>
		<npm>27</npm>
		<lcom3>0.887873754152824</lcom3>
		<loc>6668</loc>
		<dam>0.8928571428571429</dam>
		<moa>5</moa>
		<mfa>0.0</mfa>
		<cam>0.09108527131782945</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>149.9090909090909</amc>
		<cc>
			<method name="public static String initializeAndRunCoref(java.util.Properties props)">1</method>
			<method name="public boolean doScore()">1</method>
			<method name="public String sieveClassName(int sieveIndex)">3</method>
			<method name="public static void printConllOutput(edu.stanford.nlp.dcoref.Document document, java.io.PrintWriter writer, java.util.List orderedMentions, boolean gold)">17</method>
			<method name="protected static transient void printList(java.util.logging.Logger logger, String[] args)">2</method>
			<method name="private void printSieveScore(edu.stanford.nlp.dcoref.Document document, edu.stanford.nlp.dcoref.sievepasses.DeterministicCorefSieve sieve)">1</method>
			<method name="public static void printConllOutput(edu.stanford.nlp.dcoref.Document document, java.io.PrintWriter writer, boolean gold)">1</method>
			<method name="static void _clinit_()">0</method>
			<method name="static boolean waitForFiles(java.io.File workDir, java.io.FileFilter fileFilter, int howMany)">1</method>
			<method name="public edu.stanford.nlp.dcoref.Semantics semantics()">1</method>
			<method name="public void printTopK(java.util.logging.Logger logger, edu.stanford.nlp.dcoref.Document document, edu.stanford.nlp.dcoref.Semantics semantics)">34</method>
			<method name="public void _init_(java.util.Properties props)">0</method>
			<method name="private static void printLogs(edu.stanford.nlp.dcoref.CorefCluster c1, edu.stanford.nlp.dcoref.CorefCluster c2, edu.stanford.nlp.dcoref.Mention m1, edu.stanford.nlp.dcoref.Mention m2, edu.stanford.nlp.dcoref.Document document, int sieveIndex)">13</method>
			<method name="public static void runAndScoreCorefDist(String runDistCmd, java.util.Properties props, String propsFile)">1</method>
			<method name="public edu.stanford.nlp.dcoref.Dictionaries dictionaries()">1</method>
			<method name="public static String signature(java.util.Properties props)">1</method>
			<method name="private static void printDiscourseStructure(edu.stanford.nlp.dcoref.Document document)">4</method>
			<method name="public static java.util.List filterMentionsWithSingletonClusters(edu.stanford.nlp.dcoref.Document document, java.util.List mentions)">3</method>
			<method name="public static void printRawDoc(edu.stanford.nlp.dcoref.Document document, boolean gold)">1</method>
			<method name="private static double getFinalConllScore(String summary, String metricType, String scoreType)">7</method>
			<method name="private static void printFinalConllScore(String summary)">2</method>
			<method name="public static String formatPennTree(edu.stanford.nlp.trees.Tree parseTree)">1</method>
			<method name="private static String toSieveOrderConstraintString(edu.stanford.nlp.util.Pair orderedSieveIndices, String[] sieveNames)">3</method>
			<method name="public void optimizeSieveOrdering(edu.stanford.nlp.dcoref.MentionExtractor mentionExtractor, java.util.Properties props, String timestamp)">1</method>
			<method name="public static double runAndScoreCoref(edu.stanford.nlp.dcoref.SieveCoreferenceSystem corefSystem, edu.stanford.nlp.dcoref.MentionExtractor mentionExtractor, java.util.Properties props, String timeStamp)">1</method>
			<method name="private double getFinalScore(String metricType, edu.stanford.nlp.dcoref.CorefScorer$SubScoreType subScoreType)">6</method>
			<method name="public void printF1(boolean printF1First)">1</method>
			<method name="private static void printLink(java.util.logging.Logger logger, String header, edu.stanford.nlp.util.IntTuple src, edu.stanford.nlp.util.IntTuple dst, java.util.List orderedMentionsBySentence)">2</method>
			<method name="private void coreference(edu.stanford.nlp.dcoref.Document document, edu.stanford.nlp.dcoref.sievepasses.DeterministicCorefSieve sieve)">1</method>
			<method name="public static void runConllEval(String conllMentionEvalScript, String goldFile, String predictFile, String evalFile, String errFile)">1</method>
			<method name="public static void debugPrintMentions(java.io.PrintStream out, String tag, java.util.List mentions)">3</method>
			<method name="public static void printConllOutput(edu.stanford.nlp.dcoref.Document document, java.io.PrintWriter writer, boolean gold, boolean filterSingletons)">3</method>
			<method name="public java.util.Map coref(edu.stanford.nlp.dcoref.Document document)">1</method>
			<method name="public static boolean checkClusters(java.util.logging.Logger logger, String tag, edu.stanford.nlp.dcoref.Document document)">3</method>
			<method name="private static void postProcessing(edu.stanford.nlp.dcoref.Document document)">9</method>
			<method name="public static edu.stanford.nlp.classify.LogisticClassifier getSingletonPredictorFromSerializedFile(String serializedFile)">2</method>
			<method name="private static void printLinkWithContext(java.util.logging.Logger logger, String header, edu.stanford.nlp.util.IntTuple src, edu.stanford.nlp.util.IntTuple dst, edu.stanford.nlp.dcoref.Document document, edu.stanford.nlp.dcoref.Semantics semantics)">15</method>
			<method name="public void initScorers()">2</method>
			<method name="private static edu.stanford.nlp.util.Pair fromSieveOrderConstraintString(String s, String[] sieveNames)">2</method>
			<method name="public static java.util.List getLinks(java.util.Map result)">2</method>
			<method name="public static String getConllEvalSummary(String conllMentionEvalScript, String goldFile, String predictFile)">1</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="private static int fromSieveNameToIndex(String sieveName, String[] sieveNames)">4</method>
			<method name="private static void printScoreSummary(String summary, java.util.logging.Logger logger, boolean afterPostProcessing)">7</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.ie.pascal.TeXHyphenator</name>
		<wmc>10</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>4</cbo>
		<rfc>41</rfc>
		<lcom>37</lcom>
		<ca>1</ca>
		<ce>3</ce>
		<npm>6</npm>
		<lcom3>0.5555555555555556</lcom3>
		<loc>489</loc>
		<dam>0.5</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.2857142857142857</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>47.7</amc>
		<cc>
			<method name="public static String toString(int[] i)">2</method>
			<method name="private void insertHyphPattern(char[] chars, int[] pattern)">5</method>
			<method name="public void loadDefault()">1</method>
			<method name="public boolean[] findBreakPoints(char[] lcphrase)">7</method>
			<method name="private java.util.List getMatchingPatterns(char[] chars, int startingIdx)">6</method>
			<method name="public static void main(String[] args)">1</method>
			<method name="public void _init_()">0</method>
			<method name="static void _clinit_()">0</method>
			<method name="private void labelWordBreakPoints(char[] phrase, int start, int end, boolean[] breakPoints)">6</method>
			<method name="public void load(java.io.BufferedReader input)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.fsm.TransducerGraph$NodeProcessor</name>
		<wmc>1</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>6</cbo>
		<rfc>1</rfc>
		<lcom>0</lcom>
		<ca>6</ca>
		<ce>0</ce>
		<npm>1</npm>
		<lcom3>2.0</lcom3>
		<loc>1</loc>
		<dam>0.0</dam>
		<moa>0</moa>
		<mfa>0.0</mfa>
		<cam>1.0</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>0.0</amc>
		<cc>
			<method name="public abstract Object processNode(Object)">1</method>
		</cc>
	</class>
	<class>
		<name>edu.stanford.nlp.pipeline.WordsToSentencesAnnotator</name>
		<wmc>10</wmc>
		<dit>1</dit>
		<noc>0</noc>
		<cbo>14</cbo>
		<rfc>45</rfc>
		<lcom>43</lcom>
		<ca>3</ca>
		<ce>11</ce>
		<npm>9</npm>
		<lcom3>0.3333333333333333</lcom3>
		<loc>308</loc>
		<dam>1.0</dam>
		<moa>1</moa>
		<mfa>0.0</mfa>
		<cam>0.3</cam>
		<ic>0</ic>
		<cbm>0</cbm>
		<amc>29.5</amc>
		<cc>
			<method name="public static transient edu.stanford.nlp.pipeline.WordsToSentencesAnnotator newlineSplitter(boolean verbose, String[] nlToken)">1</method>
			<method name="public void _init_()">0</method>
			<method name="public void annotate(edu.stanford.nlp.pipeline.Annotation annotation)">11</method>
			<method name="public java.util.Set requires()">1</method>
			<method name="public void _init_(boolean verbose)">0</method>
			<method name="public static edu.stanford.nlp.pipeline.WordsToSentencesAnnotator nonSplitter(boolean verbose)">1</method>
			<method name="private void _init_(boolean verbose, boolean countLineNumbers, edu.stanford.nlp.process.WordToSentenceProcessor wts)">0</method>
			<method name="public java.util.Set requirementsSatisfied()">1</method>
			<method name="public void _init_(boolean verbose, String boundaryTokenRegex, java.util.Set boundaryToDiscard, java.util.Set htmlElementsToDiscard, String newlineIsSentenceBreak, String boundaryMultiTokenRegex, java.util.Set tokenRegexesToDiscard)">0</method>
			<method name="public void _init_(boolean verbose, String boundaryTokenRegex, java.util.Set boundaryToDiscard, java.util.Set htmlElementsToDiscard, String newlineIsSentenceBreak)">0</method>
		</cc>
	</class>
</classes>